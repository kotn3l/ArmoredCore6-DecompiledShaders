#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _941;
float _3335;
float _3336;
float _3337;
float _3338;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _239.z;
    float _248 = (_239.x * 2.0) + (-1.0);
    float _250 = (_239.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3347 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))));
    float _260 = fma(_257, _217, fma(_250, _210, _248 * _196));
    float _263 = fma(_257, _218, fma(_250, _211, _248 * _197));
    float _266 = fma(_257, _219, fma(_250, _212, _248 * _198));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _278 = cbMtdParam._m0[9u].x + dot(vec4(_270 * _260, _270 * _263, _270 * _266, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3358 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    float _311 = _307.z;
    float _318 = ((_291.x - _309) * _279) + _309;
    float _319 = ((_291.y - _310) * _279) + _310;
    float _320 = ((_291.z - _311) * _279) + _311;
    vec4 _332 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _340 = (_332.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_339, _340), vec2(_339, _340));
    float _3369 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _349 = ((_332.z - _244) * _279) + _244;
    float _356 = ((_339 - _248) * _279) + _248;
    float _357 = ((_340 - _250) * _279) + _250;
    float _358 = ((sqrt(1.0 - (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) - _257) * _279) + _257;
    float _361 = fma(_358, _217, fma(_357, _210, _356 * _196));
    float _364 = fma(_358, _218, fma(_357, _211, _356 * _197));
    float _367 = fma(_358, _219, fma(_357, _212, _356 * _198));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3380 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _375 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _3391 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3402 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3413 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _436);
    float _447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _436);
    float _448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _436);
    float _452 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _453 = _446 * _452;
    float _454 = _447 * _452;
    float _455 = _448 * _452;
    vec4 _460 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _462 = _460.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _620 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
        float _626 = (cbMatDynParam._m0[5u].x * _620) + cbMatDynParam._m0[5u].y;
        float _3424 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _631 = (cbMatDynParam._m0[5u].z * _620) + cbMatDynParam._m0[5u].w;
        float _3435 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) - _627)) + _627) < ((_462 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _498 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _501 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _514 = uint(roundEven(NORMAL.w)) * 13u;
    uint _516 = _514 + 9u;
    uint _517 = _516 + uint(cbMatDynParam._m0[0u].w);
    float _523 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_517].x;
    float _524 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_517].y;
    float _525 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_517].z;
    float _3446 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    vec4 _537 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _540 = _537.x * TEXCOORD.z;
    float _541 = dot(vec3(_372, _373, _374), vec3(_453, _454, _455));
    float _544 = _541 * 2.0;
    float _548 = (_544 * _372) - _453;
    float _549 = (_544 * _373) - _454;
    float _550 = (_544 * _374) - _455;
    float _554 = abs(dot(vec3(_453, _454, _455), vec3(_372, _373, _374)));
    float _3479 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _556 = sqrt(_375);
    float _569 = exp2((_556 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_556 * 3.0));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _940;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _665 = fma(_609, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601));
        float _669 = fma(_609, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601));
        float _673 = fma(_609, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601));
        float _698 = _601 + _372;
        float _699 = _605 + _373;
        float _700 = _609 + _374;
        float _710 = fma(_700, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698)) - _665;
        float _711 = fma(_700, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698)) - _669;
        float _712 = fma(_700, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698)) - _673;
        float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
        float _729 = ((_716 * _710) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_665 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_716 * _711) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_669 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_716 * _712) / cbModelParam._m0[34u].z) + ((((((_673 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        float _768 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_734.x + (-0.5));
        float _770 = _768 * (_734.y + (-0.5));
        float _771 = _768 * (_734.z + (-0.5));
        float _778 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_741.x + (-0.5));
        float _780 = _778 * (_741.y + (-0.5));
        float _781 = _778 * (_741.z + (-0.5));
        float _788 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_748.x + (-0.5));
        float _790 = _788 * (_748.y + (-0.5));
        float _791 = _788 * (_748.z + (-0.5));
        float _798 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_755.x + (-0.5));
        float _800 = _798 * (_755.y + (-0.5));
        float _801 = _798 * (_755.z + (-0.5));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = _769 * 0.5;
        float _806 = _779 * 0.5;
        float _807 = _789 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _822 = (dot(vec3(_372, _373, _374), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _832 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3527 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_834 + 1.0))) + _839) * _802;
        float _849 = _770 * 0.5;
        float _850 = _780 * 0.5;
        float _851 = _790 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_372, _373, _374), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3560 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_876 + 1.0))) + _881) * _803;
        float _891 = _771 * 0.5;
        float _892 = _781 * 0.5;
        float _893 = _791 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_372, _373, _374), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3593 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_918 + 1.0))) + _923) * _804;
        _940 = _771;
        _942 = _770;
        _943 = _769;
        _944 = _781;
        _945 = _780;
        _946 = _779;
        _947 = _791;
        _948 = _790;
        _949 = _789;
        _950 = _804;
        _951 = _803;
        _952 = _802;
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
    }
    else
    {
        _940 = _941;
        _942 = _941;
        _943 = _941;
        _944 = _941;
        _945 = _941;
        _946 = _941;
        _947 = _941;
        _948 = _941;
        _949 = _941;
        _950 = _941;
        _951 = _941;
        _952 = _941;
        _953 = 0.0;
        _954 = 0.0;
        _955 = 0.0;
    }
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _984 = fma(_609, cbModelParam._m0[30u].z, fma(_605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _601));
        float _988 = fma(_609, cbModelParam._m0[31u].z, fma(_605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _601));
        float _992 = fma(_609, cbModelParam._m0[32u].z, fma(_605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _601));
        float _1015 = _601 + _372;
        float _1016 = _605 + _373;
        float _1017 = _609 + _374;
        float _1027 = fma(_1017, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015)) - _984;
        float _1028 = fma(_1017, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015)) - _988;
        float _1029 = fma(_1017, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015)) - _992;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_984 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_988 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[35u].z) + ((((((_992 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1083 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1050.x + (-0.5));
        float _1085 = _1083 * (_1050.y + (-0.5));
        float _1086 = _1083 * (_1050.z + (-0.5));
        float _1093 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1057.x + (-0.5));
        float _1095 = _1093 * (_1057.y + (-0.5));
        float _1096 = _1093 * (_1057.z + (-0.5));
        float _1103 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1064.x + (-0.5));
        float _1105 = _1103 * (_1064.y + (-0.5));
        float _1106 = _1103 * (_1064.z + (-0.5));
        float _1113 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1071.x + (-0.5));
        float _1115 = _1113 * (_1071.y + (-0.5));
        float _1116 = _1113 * (_1071.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_372, _373, _374), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3656 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1147 + 1.0))) + _1152) * _1117;
        float _1162 = _1085 * 0.5;
        float _1163 = _1095 * 0.5;
        float _1164 = _1105 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_372, _373, _374), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3689 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1189 + 1.0))) + _1194) * _1118;
        float _1204 = _1086 * 0.5;
        float _1205 = _1096 * 0.5;
        float _1206 = _1106 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_372, _373, _374), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3722 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1231 + 1.0))) + _1236) * _1119;
        _1253 = _1086;
        _1254 = _1085;
        _1255 = _1084;
        _1256 = _1096;
        _1257 = _1095;
        _1258 = _1094;
        _1259 = _1106;
        _1260 = _1105;
        _1261 = _1104;
        _1262 = _1119;
        _1263 = _1118;
        _1264 = _1117;
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _941;
        _1254 = _941;
        _1255 = _941;
        _1256 = _941;
        _1257 = _941;
        _1258 = _941;
        _1259 = _941;
        _1260 = _941;
        _1261 = _941;
        _1262 = _941;
        _1263 = _941;
        _1264 = _941;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _953)) + _953;
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _954)) + _954;
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _955)) + _955;
    float _1300 = fma(_1279, cbSceneParam._m0[89u].z, fma(_1278, cbSceneParam._m0[89u].y, _1277 * cbSceneParam._m0[89u].x));
    float _1303 = fma(_1279, cbSceneParam._m0[90u].z, fma(_1278, cbSceneParam._m0[90u].y, _1277 * cbSceneParam._m0[90u].x));
    float _1306 = fma(_1279, cbSceneParam._m0[91u].z, fma(_1278, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1277));
    float _1321 = _548 * 0.5;
    float _1322 = _549 * 0.5;
    float _1323 = _550 * 0.5;
    float _1324 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1327 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1330 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1364;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1337 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_940, _944, _947, _950));
        float _1341 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_942, _945, _948, _951));
        float _1345 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_943, _946, _949, _952));
        float _1352 = dot(vec4(cbModelParam._m0[39u]), vec4(_1321, _1322, _1323, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1375;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1366 = dot(vec4(cbModelParam._m0[40u]), vec4(_1321, _1322, _1323, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1379 = (_1375 * cbModelParam._m0[1u].x) + (_1364 * (1.0 - cbModelParam._m0[1u].x));
    float _1389 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _375);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1389 : min(cbModelParam._m0[25u].z, _1389));
    float _1472;
    float _1474;
    float _1476;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1439 = fma(_609, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601)) + cbModelParam._m0[13u].w;
        float _1443 = fma(_609, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601)) + cbModelParam._m0[14u].w;
        float _1447 = fma(_609, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601)) + cbModelParam._m0[15u].w;
        float _1450 = fma(_550, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548));
        float _1453 = fma(_550, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548));
        float _1456 = fma(_550, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548));
        float _1484;
        if (_1450 > 0.0)
        {
            _1484 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1484 = frontier_phi_19_17_ladder;
        }
        float _1711;
        if (_1453 > 0.0)
        {
            _1711 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1711 = frontier_phi_28_24_ladder;
        }
        float _1957;
        if (_1456 > 0.0)
        {
            _1957 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1957 = frontier_phi_40_35_ladder;
        }
        float _1959 = isnan(_1711) ? _1484 : (isnan(_1484) ? _1711 : min(_1484, _1711));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1450) + _1439;
        float _1965 = (_1960 * _1453) + _1443;
        float _1966 = (_1960 * _1456) + _1447;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1390);
            frontier_phi_18_40_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1472 = frontier_phi_18_40_ladder_2;
        _1474 = frontier_phi_18_40_ladder_1;
        _1476 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_548, _549, _550), _1390);
        _1472 = _1460.x * cbModelParam._m0[1u].y;
        _1474 = _1460.y * cbModelParam._m0[1u].y;
        _1476 = _1460.z * cbModelParam._m0[1u].y;
    }
    float _1480 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _375);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1480 : min(cbModelParam._m0[25u].w, _1480));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1538 = fma(_609, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601)) + cbModelParam._m0[21u].w;
        float _1542 = fma(_609, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601)) + cbModelParam._m0[22u].w;
        float _1546 = fma(_609, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601)) + cbModelParam._m0[23u].w;
        float _1549 = fma(_550, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548));
        float _1552 = fma(_550, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548));
        float _1555 = fma(_550, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548));
        float _1716;
        if (_1549 > 0.0)
        {
            _1716 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1716 = frontier_phi_30_26_ladder;
        }
        float _1984;
        if (_1552 > 0.0)
        {
            _1984 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1984 = frontier_phi_42_37_ladder;
        }
        float _2189;
        if (_1555 > 0.0)
        {
            _2189 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2189 = frontier_phi_51_48_ladder;
        }
        float _2191 = isnan(_1984) ? _1716 : (isnan(_1716) ? _1984 : min(_1716, _1984));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1549) + _1538;
        float _2197 = (_2192 * _1552) + _1542;
        float _2198 = (_2192 * _1555) + _1546;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2199;
        float _2202 = _2199 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2198 > _2202) || ((_2198 < _2200) || ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 < _2200) || (_2196 > _2202))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2198, cbModelParam._m0[17u].z, fma(_2197, cbModelParam._m0[17u].y, _2196 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2198, cbModelParam._m0[18u].z, fma(_2197, cbModelParam._m0[18u].y, _2196 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2198, cbModelParam._m0[19u].z, fma(_2197, cbModelParam._m0[19u].y, _2196 * cbModelParam._m0[19u].x))), _1481);
            frontier_phi_27_51_ladder = _2396.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2396.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2396.x * cbModelParam._m0[1u].z;
        }
        _1574 = frontier_phi_27_51_ladder_2;
        _1576 = frontier_phi_27_51_ladder_1;
        _1578 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_548, _549, _550), _1481);
        _1574 = _1558.x * cbModelParam._m0[1u].z;
        _1576 = _1558.y * cbModelParam._m0[1u].z;
        _1578 = _1558.z * cbModelParam._m0[1u].z;
    }
    float _1590 = ((((1.0 - _569) * ((_556 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_569 * _556)) * _540;
    float _1591 = _1590 * ((cbModelParam._m0[1u].w * (_1574 - _1472)) + _1472);
    float _1592 = _1590 * ((cbModelParam._m0[1u].w * (_1576 - _1474)) + _1474);
    float _1593 = _1590 * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1596 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, _1591 * cbSceneParam._m0[91u].x));
    vec4 _1610 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_474, _475));
    float _1612 = _1610.w;
    float _1624 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1612);
    float _1625 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1612);
    float _1626 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1612);
    uvec4 _1630 = floatBitsToUint(cbInstanceData._m0[_514 + 5u]);
    uint _1632 = _1630.x * 14u;
    uint _1633 = _1632 + 13u;
    float _1640 = _540 + (-1.0);
    float _1645 = (cbLight._m0[_1633].x * _1640) + 1.0;
    float _1646 = (cbLight._m0[_1633].y * _1640) + 1.0;
    float _1647 = (cbLight._m0[_1633].z * _1640) + 1.0;
    float _1648 = (cbLight._m0[_1633].w * _1640) + 1.0;
    uint _1649 = _1632 + 5u;
    float _1655 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
    uint _1659 = _1632 + 4u;
    float _1669 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
    uint _1673 = _1632 | 1u;
    float _1684 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_372, _373, _374));
    float _1687 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_372, _373, _374));
    float _3858 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _3869 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1692 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1694 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.3183098733425140380859375;
    float _1701 = ((cbLight._m0[_1649].x * _1655) * _1694) + (((cbLight._m0[_1659].x * _1624) * _1669) * _1692);
    float _1702 = ((_1655 * cbLight._m0[_1649].y) * _1694) + (((cbLight._m0[_1659].y * _1625) * _1669) * _1692);
    float _1703 = ((_1655 * cbLight._m0[_1649].z) * _1694) + (((cbLight._m0[_1659].z * _1626) * _1669) * _1692);
    uvec4 _1708 = floatBitsToUint(cbLight._m0[_1632 + 12u]);
    bool _1710 = _1708.x == 0u;
    float _1721;
    float _1723;
    float _1725;
    if (_1710)
    {
        _1721 = _1701;
        _1723 = _1702;
        _1725 = _1703;
    }
    else
    {
        uint _1729 = _1632 + 6u;
        float _1745 = (dot(vec3(cbLight._m0[_1632 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3880 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1748 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _1721 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1701;
        _1723 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1702;
        _1725 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1703;
    }
    bool _1728 = _1708.y == 0u;
    float _1766;
    float _1768;
    float _1770;
    if (_1728)
    {
        _1766 = _1721;
        _1768 = _1723;
        _1770 = _1725;
    }
    else
    {
        uint _1928 = _1632 + 7u;
        float _1944 = (dot(vec3(cbLight._m0[_1632 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _3896 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1947 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _1766 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1721;
        _1768 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1723;
        _1770 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1725;
    }
    uint _1773 = _1632 + 8u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1632].w)) * _375) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1632].x + _453;
    float _1789 = cbLight._m0[_1632].y + _454;
    float _1790 = cbLight._m0[_1632].z + _455;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1632].xyz));
    float _3912 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _1802 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1803 = dot(vec3(_372, _373, _374), vec3(_1795, _1796, _1797));
    float _3934 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_1795, _1796, _1797));
    float _3945 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1787 * _1787;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1826 = (exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1827 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1802 * ((_1801 * _1827) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1827) + _1787) * _1801))) * _1801;
    float _3956 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    uint _1854 = _1632 + 9u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1673].w)) * _375) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1673].x + _453;
    float _1868 = cbLight._m0[_1673].y + _454;
    float _1869 = cbLight._m0[_1673].z + _455;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1673].xyz));
    float _3967 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1881 = dot(vec3(_372, _373, _374), vec3(_1874, _1875, _1876));
    float _3978 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1874, _1875, _1876));
    float _3989 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1866 * _1866;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1902 = (exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1903 = 1.0 - _1866;
    float _1913 = (0.5 / (((_1802 * ((_1880 * _1903) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1903) + _1866) * _1880))) * _1880;
    float _4000 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    float _1925 = (((_1902 * cbLight._m0[_1854].x) * _1915) * _1655) + ((((cbLight._m0[_1773].x * _1624) * _1826) * _1840) * _1669);
    float _1926 = (((_1902 * cbLight._m0[_1854].y) * _1915) * _1655) + ((((cbLight._m0[_1773].y * _1625) * _1826) * _1840) * _1669);
    float _1927 = (((_1902 * cbLight._m0[_1854].z) * _1915) * _1655) + ((((cbLight._m0[_1773].z * _1626) * _1826) * _1840) * _1669);
    float _1989;
    float _1991;
    float _1993;
    if (_1710)
    {
        _1989 = _1925;
        _1991 = _1926;
        _1993 = _1927;
    }
    else
    {
        uint _1995 = _1632 + 2u;
        uint _1999 = _1632 + 10u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _375) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _453;
        float _2016 = cbLight._m0[_1995].y + _454;
        float _2017 = cbLight._m0[_1995].z + _455;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1995].xyz));
        float _4011 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2029 = dot(vec3(_372, _373, _374), vec3(_2022, _2023, _2024));
        float _4022 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _4033 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2051 = 1.0 - _2014;
        float _2061 = (0.5 / (((_1802 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2051) + _2014) * _2028))) * _2028;
        float _4044 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _1989 = (((_2050 * cbLight._m0[_1999].x) * _2063) * _2064) + _1925;
        _1991 = (((_2050 * cbLight._m0[_1999].y) * _2063) * _2064) + _1926;
        _1993 = (((_2050 * cbLight._m0[_1999].z) * _2063) * _2064) + _1927;
    }
    float _2099;
    float _2101;
    float _2103;
    if (_1728)
    {
        _2099 = _1989;
        _2101 = _1991;
        _2103 = _1993;
    }
    else
    {
        uint _2110 = _1632 + 3u;
        uint _2114 = _1632 + 11u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _375) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _453;
        float _2131 = cbLight._m0[_2110].y + _454;
        float _2132 = cbLight._m0[_2110].z + _455;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2110].xyz));
        float _4060 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2144 = dot(vec3(_372, _373, _374), vec3(_2137, _2138, _2139));
        float _4071 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4082 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2166 = 1.0 - _2129;
        float _2176 = (0.5 / (((_1802 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2166) + _2129) * _2143))) * _2143;
        float _4093 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2178 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2179 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _2099 = (((_2165 * cbLight._m0[_2114].x) * _2178) * _2179) + _1989;
        _2101 = (((_2165 * cbLight._m0[_2114].y) * _2178) * _2179) + _1991;
        _2103 = (((_2165 * cbLight._m0[_2114].z) * _2178) * _2179) + _1993;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1630.y == 0u)
    {
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2254;
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2254;
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2254;
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2270)));
        float _2291 = (log2(_2257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2569)
                {
                    frontier_phi_68_pred = _2555;
                    frontier_phi_68_pred_1 = _2558;
                    frontier_phi_68_pred_2 = _2557;
                    frontier_phi_68_pred_3 = _2556;
                    frontier_phi_68_pred_4 = _2554;
                    frontier_phi_68_pred_5 = _2553;
                }
                else
                {
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    uint _2704;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2568;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    for (;;)
                    {
                        uint _2708 = uint(findLSB(_2704)) + (_2559 << 5u);
                        uint _2705 = (_2704 + 4294967295u) & _2704;
                        uint _2710 = _2708 * 48u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2730 = (_2708 * 48u) + 4u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2749 = (_2708 * 48u) + 8u;
                        vec3 _2760 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x));
                        float _2764 = _2724.x - _2255;
                        float _2765 = _2724.y - _2256;
                        float _2766 = _2724.z - _2257;
                        float _2767 = dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766));
                        float _2770 = inversesqrt(_2767);
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2774 = dot(vec3(_495, _498, _501), vec3(_2771, _2772, _2773));
                        float _2779 = 1.0 - (_2767 * _2724.w);
                        float _4119 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2780 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2781 = sqrt(_2767) * _2743.w;
                        float _2784 = 1.39999997615814208984375 / (_2781 + 1.39999997615814208984375);
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2774) + _2785;
                        float _2791 = _2781 * _2781;
                        float _2795 = ((isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))) * _2780) / ((_2791 * 0.699999988079071044921875) + 1.0);
                        float _2799 = (-0.0) - _2255;
                        float _2800 = (-0.0) - _2256;
                        float _2801 = (-0.0) - _2257;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2816 = exp2(log2(1.0 / ((_2791 * 3.5) + 5.0)) * 0.25);
                        float _2817 = 1.0 - _556;
                        float _2824 = sqrt(1.0 - ((1.0 - (_2817 * _2817)) * (1.0 - (_2816 * _2816))));
                        float _2825 = _2824 * _2824;
                        float _2826 = _2825 * _2825;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2829 = _2808 + _2773;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2837 = dot(vec3(_495, _498, _501), vec3(_2806, _2807, _2808));
                        float _4135 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2841 = dot(vec3(_495, _498, _501), vec3(_2833 * _2827, _2833 * _2828, _2833 * _2829));
                        float _4146 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2848 = ((_2844 * _2844) * (_2826 + (-1.0))) + 1.0;
                        float _2849 = _2784 * _2825;
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2774) + _2850;
                        float _4157 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2855 = 1.0 - _2825;
                        float _2865 = (0.5 / (((_2854 * ((_2840 * _2855) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2854 * _2855) + _2825) * _2840))) * _2854;
                        float _4168 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2876 = (((_2826 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_2848 * _2848) * ((_2791 * 2.1991131305694580078125) + 3.141590118408203125))) * _2780;
                        _2628 = (_2795 * _2743.x) + _2701;
                        _2629 = (_2795 * _2743.y) + _2702;
                        _2630 = (_2795 * _2743.z) + _2703;
                        _2625 = (_2876 * _2760.x) + _2698;
                        _2626 = (_2876 * _2760.y) + _2699;
                        _2627 = (_2876 * _2760.z) + _2700;
                        if (_2705 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2705;
                        }
                    }
                    frontier_phi_68_pred = _2627;
                    frontier_phi_68_pred_1 = _2630;
                    frontier_phi_68_pred_2 = _2629;
                    frontier_phi_68_pred_3 = _2628;
                    frontier_phi_68_pred_4 = _2626;
                    frontier_phi_68_pred_5 = _2625;
                }
                _2406 = frontier_phi_68_pred;
                _2412 = frontier_phi_68_pred_1;
                _2410 = frontier_phi_68_pred_2;
                _2408 = frontier_phi_68_pred_3;
                _2404 = frontier_phi_68_pred_4;
                _2402 = frontier_phi_68_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2402;
                    _2554 = _2404;
                    _2555 = _2406;
                    _2556 = _2408;
                    _2557 = _2410;
                    _2558 = _2412;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2418) & _2301) == 0u)
        {
            _2521 = _2401;
            _2523 = _2403;
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
            float _2547 = _2546 * _2255;
            float _2548 = _2546 * _2256;
            float _2549 = _2546 * _2257;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2681 = _2401;
                float _2682 = _2403;
                float _2683 = _2405;
                float _2684 = _2407;
                float _2685 = _2409;
                float _2686 = _2411;
                uint _2687 = _2418;
                uint _2696;
                bool _2697;
                for (;;)
                {
                    _2696 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                    _2697 = _2696 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2697)
                    {
                        frontier_phi_79_pred = _2686;
                        frontier_phi_79_pred_1 = _2685;
                        frontier_phi_79_pred_2 = _2684;
                        frontier_phi_79_pred_3 = _2683;
                        frontier_phi_79_pred_4 = _2682;
                        frontier_phi_79_pred_5 = _2681;
                    }
                    else
                    {
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        uint _2909 = _2696;
                        uint _2910;
                        vec4 _2935;
                        float _2936;
                        vec4 _2951;
                        vec3 _2963;
                        vec4 _2979;
                        vec4 _2995;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2920 = ((_2687 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2909));
                            _2910 = (_2909 + 4294967295u) & _2909;
                            uint _2922 = _2920 * 40u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2936 = _2935.w;
                            uint _2938 = (_2920 * 40u) + 4u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2920 * 40u) + 8u;
                            _2963 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x));
                            uint _2966 = (_2920 * 40u) + 16u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2982 = (_2920 * 40u) + 20u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2920 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2920 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_2257, _3030.z, fma(_2256, _3030.y, _3030.x * _2255)) + _3030.w;
                            _3043 = !((fma(_2257, _3011.z, fma(_2256, _3011.y, _3011.x * _2255)) + _3011.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2935.x - _2255;
                                float _3071 = _2935.y - _2256;
                                float _3072 = _2935.z - _2257;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2936 * _2936));
                                float _4179 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3088 = sqrt(_3073) * _2951.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_495, _498, _501))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_2257, _2979.z, fma(_2256, _2979.y, _2979.x * _2255)) + _2979.w) / _3042;
                                float _3102 = (fma(_2257, _2995.z, fma(_2256, _2995.y, _2995.x * _2255)) + _2995.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4195 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _556;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2547;
                                float _3132 = _3078 - _2548;
                                float _3133 = _3079 - _2549;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4206 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3145 = dot(vec3(_495, _498, _501), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4217 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_495, _498, _501), vec3(_3077, _3078, _3079))) + _3154;
                                float _4228 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4239 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3108 * _2951.z;
                                frontier_phi_85_pred_1 = _3108 * _2951.y;
                                frontier_phi_85_pred_2 = _3108 * _2951.x;
                                frontier_phi_85_pred_3 = _3182 * _2963.z;
                                frontier_phi_85_pred_4 = _3182 * _2963.y;
                                frontier_phi_85_pred_5 = _3182 * _2963.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_85_pred;
                            _3190 = frontier_phi_85_pred_1;
                            _3189 = frontier_phi_85_pred_2;
                            _3188 = frontier_phi_85_pred_3;
                            _3187 = frontier_phi_85_pred_4;
                            _3186 = frontier_phi_85_pred_5;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            if (_2910 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2910;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2895;
                        frontier_phi_79_pred_1 = _2894;
                        frontier_phi_79_pred_2 = _2893;
                        frontier_phi_79_pred_3 = _2892;
                        frontier_phi_79_pred_4 = _2891;
                        frontier_phi_79_pred_5 = _2890;
                    }
                    _2532 = frontier_phi_79_pred;
                    _2530 = frontier_phi_79_pred_1;
                    _2528 = frontier_phi_79_pred_2;
                    _2526 = frontier_phi_79_pred_3;
                    _2524 = frontier_phi_79_pred_4;
                    _2522 = frontier_phi_79_pred_5;
                    uint _2688 = _2687 + 1u;
                    if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2681 = _2522;
                        _2682 = _2524;
                        _2683 = _2526;
                        _2684 = _2528;
                        _2685 = _2530;
                        _2686 = _2532;
                        _2687 = _2688;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2528;
                frontier_phi_60_61_ladder_1 = _2532;
                frontier_phi_60_61_ladder_2 = _2530;
                frontier_phi_60_61_ladder_3 = _2526;
                frontier_phi_60_61_ladder_4 = _2524;
                frontier_phi_60_61_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_60_61_ladder = _2407;
                frontier_phi_60_61_ladder_1 = _2411;
                frontier_phi_60_61_ladder_2 = _2409;
                frontier_phi_60_61_ladder_3 = _2405;
                frontier_phi_60_61_ladder_4 = _2403;
                frontier_phi_60_61_ladder_5 = _2401;
            }
            _2521 = frontier_phi_60_61_ladder_5;
            _2523 = frontier_phi_60_61_ladder_4;
            _2525 = frontier_phi_60_61_ladder_3;
            _2527 = frontier_phi_60_61_ladder;
            _2529 = frontier_phi_60_61_ladder_2;
            _2531 = frontier_phi_60_61_ladder_1;
        }
        float _2536 = isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0));
        _2313 = (_2536 * _2527) + _1766;
        _2315 = (_2536 * _2529) + _1768;
        _2317 = (_2536 * _2531) + _1770;
        _2319 = ((_2521 * 0.039999999105930328369140625) * _2536) + _2099;
        _2321 = ((_2523 * 0.039999999105930328369140625) * _2536) + _2101;
        _2323 = ((_2525 * 0.039999999105930328369140625) * _2536) + _2103;
    }
    else
    {
        _2313 = _1766;
        _2315 = _1768;
        _2317 = _1770;
        _2319 = _2099;
        _2321 = _2101;
        _2323 = _2103;
    }
    float _4255 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4266 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4277 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _2340 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2313 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _540))) + ((_2319 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1379)) * cbPerFrame._m0[3u].x);
    float _2341 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2315 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _540))) + ((_2321 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1379)) * cbPerFrame._m0[3u].x);
    float _2342 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2317 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _540))) + ((_2323 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1379)) * cbPerFrame._m0[3u].x);
    uint _2343 = _514 + 6u;
    float _2351 = _474 / cbSceneParam._m0[86u].x;
    float _2352 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2427 = _2426 / _394;
        float _2438 = _2427 * _446;
        float _2439 = _447 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2441 = _2427 * _448;
        float _2443 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2439;
        float _2451 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2638;
        if (abs((_2440 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2638 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2584 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2638 = ((abs(_2451 / _2440) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2461 * _2593) - exp2(_2461 * _2594)) * _2582))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2640 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2649 = exp2((_2638 * (-1.44269502162933349609375)) * (1.0 - _2640.w));
        float _2650 = log2(_2649);
        float _2666 = log2(_2371);
        _2463 = (exp2(_2666 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].x)) * _2640.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2465 = (exp2(_2666 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].y)) * _2640.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2467 = (exp2(_2666 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].z)) * _2640.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2469 = _2649 * _2371;
    }
    else
    {
        _2463 = _2368;
        _2465 = _2369;
        _2467 = _2370;
        _2469 = _2371;
    }
    bool _2676;
    vec4 _2479;
    vec4 _2501;
    float _2503;
    float _2507;
    float _2508;
    float _2509;
    float _2510;
    bool _2520;
    for (;;)
    {
        _2479 = cbMatDynParam._m0[0u];
        float _2481 = roundEven(_2479.y);
        bool _2482 = _2481 == 3.0;
        float _2483 = log2(_2469);
        float _2490 = exp2(_2483 * cbSceneParam._m0[78u].x) * _2340;
        float _2491 = exp2(_2483 * cbSceneParam._m0[78u].y) * _2341;
        float _2492 = exp2(_2483 * cbSceneParam._m0[78u].z) * _2342;
        float _2499 = _462 + (-0.5);
        _2501 = cbMtdParam._m0[1u];
        _2503 = _2501.y * _2499;
        float _2506 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2507 = _2506 * (_2482 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2463)));
        _2508 = _2506 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2465)));
        _2509 = _2506 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2467)));
        _2510 = _2499 * 0.999000012874603271484375;
        _2520 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2520)
        {
            if ((cbInstanceData._m0[_514 + 7u].x + _2510) < 0.5)
            {
                _2676 = true;
                break;
            }
        }
        uint _2617 = _516 + uint(_2479.w);
        if ((cbInstanceData._m0[_2617].w < 1.0) && ((cbInstanceData._m0[_2617].w + _2510) < 0.5))
        {
            _2676 = true;
            break;
        }
        if ((_2503 + 1.0) < _2501.x)
        {
            _2676 = true;
            break;
        }
        _2676 = false;
        break;
    }
    float _2881;
    if (_2676)
    {
        discard_state = true;
        _2881 = 0.0;
    }
    else
    {
        _2881 = cbInstanceData._m0[_2343].w;
    }
    SV_Target.x = _2507;
    SV_Target.y = _2508;
    SV_Target.z = _2509;
    SV_Target.w = _2881;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
    discard_exit();
}


