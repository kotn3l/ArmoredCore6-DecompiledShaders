#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _898;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _237.z;
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3497 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))));
    float _258 = fma(_255, _215, fma(_248, _208, _246 * _194));
    float _261 = fma(_255, _216, fma(_248, _209, _246 * _195));
    float _264 = fma(_255, _217, fma(_248, _210, _246 * _196));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _276 = cbMtdParam._m0[9u].x + dot(vec4(_268 * _258, _268 * _261, _268 * _264, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3508 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _277 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    vec4 _289 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    float _316 = ((_289.x - _307) * _277) + _307;
    float _317 = ((_289.y - _308) * _277) + _308;
    float _318 = ((_289.z - _309) * _277) + _309;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = (_330.x * 2.0) + (-1.0);
    float _338 = (_330.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3519 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _347 = ((_330.z - _242) * _277) + _242;
    float _354 = ((_337 - _246) * _277) + _246;
    float _355 = ((_338 - _248) * _277) + _248;
    float _356 = ((sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) - _255) * _277) + _255;
    float _359 = fma(_356, _215, fma(_355, _208, _354 * _194));
    float _362 = fma(_356, _216, fma(_355, _209, _354 * _195));
    float _365 = fma(_356, _217, fma(_355, _210, _354 * _196));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _370 = _369 * _359;
    float _371 = _369 * _362;
    float _372 = _369 * _365;
    float _3530 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _373 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3552 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3563 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_372, cbSceneParam._m0[5u].z, fma(_371, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _370));
    float _484 = fma(_372, cbSceneParam._m0[6u].z, fma(_371, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _370));
    float _487 = fma(_372, cbSceneParam._m0[7u].z, fma(_371, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _370));
    uint _500 = uint(roundEven(NORMAL.w)) * 13u;
    uint _503 = (_500 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _509 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_503].x;
    float _510 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_503].y;
    float _511 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_503].z;
    float _3574 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _523 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _526 = _523.x * TEXCOORD.z;
    float _527 = dot(vec3(_370, _371, _372), vec3(_451, _452, _453));
    float _530 = _527 * 2.0;
    float _534 = (_530 * _370) - _451;
    float _535 = (_530 * _371) - _452;
    float _536 = (_530 * _372) - _453;
    float _540 = abs(dot(vec3(_451, _452, _453), vec3(_370, _371, _372)));
    float _3607 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _542 = sqrt(_373);
    float _555 = exp2((_542 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_542 * 3.0));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _897;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = fma(_595, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _587));
        float _626 = fma(_595, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _587));
        float _630 = fma(_595, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _587));
        float _655 = _587 + _370;
        float _656 = _591 + _371;
        float _657 = _595 + _372;
        float _667 = fma(_657, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655)) - _622;
        float _668 = fma(_657, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655)) - _626;
        float _669 = fma(_657, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655)) - _630;
        float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
        float _686 = ((_673 * _667) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_622 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_673 * _668) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_626 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_673 * _669) / cbModelParam._m0[34u].z) + ((((((_630 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _725 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_691.x + (-0.5));
        float _727 = _725 * (_691.y + (-0.5));
        float _728 = _725 * (_691.z + (-0.5));
        float _735 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_698.x + (-0.5));
        float _737 = _735 * (_698.y + (-0.5));
        float _738 = _735 * (_698.z + (-0.5));
        float _745 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_705.x + (-0.5));
        float _747 = _745 * (_705.y + (-0.5));
        float _748 = _745 * (_705.z + (-0.5));
        float _755 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_712.x + (-0.5));
        float _757 = _755 * (_712.y + (-0.5));
        float _758 = _755 * (_712.z + (-0.5));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = _726 * 0.5;
        float _763 = _736 * 0.5;
        float _764 = _746 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _779 = (dot(vec3(_370, _371, _372), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _789 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3655 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_791 + 1.0))) + _796) * _759;
        float _806 = _727 * 0.5;
        float _807 = _737 * 0.5;
        float _808 = _747 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_370, _371, _372), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3688 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_833 + 1.0))) + _838) * _760;
        float _848 = _728 * 0.5;
        float _849 = _738 * 0.5;
        float _850 = _748 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_370, _371, _372), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3721 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_875 + 1.0))) + _880) * _761;
        _897 = _728;
        _899 = _727;
        _900 = _726;
        _901 = _738;
        _902 = _737;
        _903 = _736;
        _904 = _748;
        _905 = _747;
        _906 = _746;
        _907 = _761;
        _908 = _760;
        _909 = _759;
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
    }
    else
    {
        _897 = _898;
        _899 = _898;
        _900 = _898;
        _901 = _898;
        _902 = _898;
        _903 = _898;
        _904 = _898;
        _905 = _898;
        _906 = _898;
        _907 = _898;
        _908 = _898;
        _909 = _898;
        _910 = 0.0;
        _911 = 0.0;
        _912 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_595, cbModelParam._m0[30u].z, fma(_591, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _587));
        float _942 = fma(_595, cbModelParam._m0[31u].z, fma(_591, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _587));
        float _946 = fma(_595, cbModelParam._m0[32u].z, fma(_591, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _587));
        float _969 = _587 + _370;
        float _970 = _591 + _371;
        float _971 = _595 + _372;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_370, _371, _372), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3784 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_370, _371, _372), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3817 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_370, _371, _372), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3850 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _898;
        _1208 = _898;
        _1209 = _898;
        _1210 = _898;
        _1211 = _898;
        _1212 = _898;
        _1213 = _898;
        _1214 = _898;
        _1215 = _898;
        _1216 = _898;
        _1217 = _898;
        _1218 = _898;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _534 * 0.5;
    float _1276 = _535 * 0.5;
    float _1277 = _536 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _901, _904, _907));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_899, _902, _905, _908));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_900, _903, _906, _909));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _373);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_595, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_595, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_595, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_536, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534));
        float _1407 = fma(_536, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534));
        float _1410 = fma(_536, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1438 = frontier_phi_16_14_ladder;
        }
        float _1612;
        if (_1407 > 0.0)
        {
            _1612 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1612 = frontier_phi_25_21_ladder;
        }
        float _1908;
        if (_1410 > 0.0)
        {
            _1908 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_37_32_ladder;
        }
        float _1910 = isnan(_1612) ? _1438 : (isnan(_1438) ? _1612 : min(_1438, _1612));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1404) + _1393;
        float _1916 = (_1911 * _1407) + _1397;
        float _1917 = (_1911 * _1410) + _1401;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2062 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_15_37_ladder = _2062.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2062.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2062.z * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_15_37_ladder_1;
        _1428 = frontier_phi_15_37_ladder;
        _1430 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_534, _535, _536), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _373);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_595, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_595, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_595, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_536, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534));
        float _1506 = fma(_536, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534));
        float _1509 = fma(_536, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534));
        float _1617;
        if (_1503 > 0.0)
        {
            _1617 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1617 = frontier_phi_27_23_ladder;
        }
        float _1935;
        if (_1506 > 0.0)
        {
            _1935 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1935 = frontier_phi_39_34_ladder;
        }
        float _2262;
        if (_1509 > 0.0)
        {
            _2262 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2262 = frontier_phi_49_46_ladder;
        }
        float _2264 = isnan(_1935) ? _1617 : (isnan(_1617) ? _1935 : min(_1617, _1935));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1503) + _1492;
        float _2270 = (_2265 * _1506) + _1496;
        float _2271 = (_2265 * _1509) + _1500;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2272;
        float _2275 = _2272 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2271 > _2275) || ((_2271 < _2273) || ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 < _2273) || (_2269 > _2275))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2271, cbModelParam._m0[17u].z, fma(_2270, cbModelParam._m0[17u].y, _2269 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2271, cbModelParam._m0[18u].z, fma(_2270, cbModelParam._m0[18u].y, _2269 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2271, cbModelParam._m0[19u].z, fma(_2270, cbModelParam._m0[19u].y, _2269 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_24_49_ladder = _2389.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2389.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2389.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_24_49_ladder_2;
        _1530 = frontier_phi_24_49_ladder_1;
        _1532 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_534, _535, _536), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1544 = ((((1.0 - _555) * ((_542 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_555 * _542)) * _526;
    float _1545 = _1544 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = _1544 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1547 = _1544 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    float _1591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1604 = _1591 / _1603;
    float _1605 = _1595 / _1603;
    float _1606 = _1599 / _1603;
    float _1753;
    float _1754;
    float _1755;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1633 = ((uint(_1606 > cbSceneParam._m0[59u].y) + uint(_1606 > cbSceneParam._m0[59u].x)) + uint(_1606 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1634 = _1633 + 43u;
        uint _1642 = _1633 + 44u;
        uint _1650 = _1633 + 45u;
        uint _1658 = _1633 + 46u;
        float _1669 = fma(_1603, cbSceneParam._m0[_1634].w, fma(_1599, cbSceneParam._m0[_1634].z, fma(_1595, cbSceneParam._m0[_1634].y, _1591 * cbSceneParam._m0[_1634].x)));
        float _1673 = fma(_1603, cbSceneParam._m0[_1642].w, fma(_1599, cbSceneParam._m0[_1642].z, fma(_1595, cbSceneParam._m0[_1642].y, _1591 * cbSceneParam._m0[_1642].x)));
        float _1681 = fma(_1603, cbSceneParam._m0[_1658].w, fma(_1599, cbSceneParam._m0[_1658].z, fma(_1595, cbSceneParam._m0[_1658].y, _1591 * cbSceneParam._m0[_1658].x)));
        float _1686 = cbSceneParam._m0[33u].z * _1681;
        float _1688 = cbSceneParam._m0[33u].w * _1681;
        float _1691 = fma(_1603, cbSceneParam._m0[_1650].w, fma(_1599, cbSceneParam._m0[_1650].z, fma(_1595, cbSceneParam._m0[_1650].y, _1591 * cbSceneParam._m0[_1650].x))) / _1681;
        float _1739 = (cbSceneParam._m0[33u].x - sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606))) * cbSceneParam._m0[33u].y;
        float _3976 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1746 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 + _1669) / _1681, (_1688 + _1673) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1688 + _1669) / _1681, (_1673 - _1686) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 - _1686) / _1681, (_1673 - _1688) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 - _1688) / _1681, (_1686 + _1673) / _1681), _1691), 0.0)).x), vec4(0.25)));
        _1753 = 1.0 - (_1746 * cbSceneParam._m0[34u].x);
        _1754 = 1.0 - (_1746 * cbSceneParam._m0[34u].y);
        _1755 = 1.0 - (_1746 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1753 = 1.0;
        _1754 = 1.0;
        _1755 = 1.0;
    }
    float _1819;
    float _1821;
    float _1823;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1807 = fma(_1603, cbSceneParam._m0[63u].w, fma(_1599, cbSceneParam._m0[63u].z, fma(_1595, cbSceneParam._m0[63u].y, _1591 * cbSceneParam._m0[63u].x)));
        float _1808 = fma(_1603, cbSceneParam._m0[60u].w, fma(_1599, cbSceneParam._m0[60u].z, fma(_1595, cbSceneParam._m0[60u].y, _1591 * cbSceneParam._m0[60u].x))) / _1807;
        float _1809 = fma(_1603, cbSceneParam._m0[61u].w, fma(_1599, cbSceneParam._m0[61u].z, fma(_1595, cbSceneParam._m0[61u].y, _1591 * cbSceneParam._m0[61u].x))) / _1807;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1808 >= cbSceneParam._m0[64u].x) && (_1809 >= cbSceneParam._m0[64u].y)) && (_1808 <= cbSceneParam._m0[64u].z)) && (_1809 <= cbSceneParam._m0[64u].w))
        {
            float _1948 = fma(_1603, cbSceneParam._m0[62u].w, fma(_1599, cbSceneParam._m0[62u].z, fma(_1595, cbSceneParam._m0[62u].y, _1591 * cbSceneParam._m0[62u].x))) / _1807;
            float _1952 = isnan(cbSceneParam._m0[41u].w) ? _1948 : (isnan(_1948) ? cbSceneParam._m0[41u].w : max(_1948, cbSceneParam._m0[41u].w));
            float _1995 = (cbSceneParam._m0[33u].x - sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606))) * cbSceneParam._m0[33u].y;
            float _3992 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
            float _2002 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1808, cbSceneParam._m0[33u].w + _1809), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1808, _1809 - cbSceneParam._m0[33u].z), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1808 - cbSceneParam._m0[33u].z, _1809 - cbSceneParam._m0[33u].w), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1808 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1809), _1952), 0.0)).x), vec4(0.25)));
            float _2006 = 1.0 - (_2002 * cbSceneParam._m0[34u].x);
            float _2007 = 1.0 - (_2002 * cbSceneParam._m0[34u].y);
            float _2008 = 1.0 - (_2002 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2007) ? _1754 : (isnan(_1754) ? _2007 : min(_1754, _2007));
            frontier_phi_36_35_ladder_1 = isnan(_2008) ? _1755 : (isnan(_1755) ? _2008 : min(_1755, _2008));
            frontier_phi_36_35_ladder_2 = isnan(_2006) ? _1753 : (isnan(_1753) ? _2006 : min(_1753, _2006));
        }
        else
        {
            frontier_phi_36_35_ladder = _1754;
            frontier_phi_36_35_ladder_1 = _1755;
            frontier_phi_36_35_ladder_2 = _1753;
        }
        _1819 = frontier_phi_36_35_ladder_2;
        _1821 = frontier_phi_36_35_ladder;
        _1823 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1819 = _1753;
        _1821 = _1754;
        _1823 = _1755;
    }
    uvec4 _1828 = floatBitsToUint(cbInstanceData._m0[_500 + 5u]);
    uint _1830 = _1828.x * 14u;
    uint _1831 = _1830 + 13u;
    float _1838 = _526 + (-1.0);
    float _1843 = (cbLight._m0[_1831].x * _1838) + 1.0;
    float _1844 = (cbLight._m0[_1831].y * _1838) + 1.0;
    float _1845 = (cbLight._m0[_1831].z * _1838) + 1.0;
    float _1846 = (cbLight._m0[_1831].w * _1838) + 1.0;
    uint _1847 = _1830 + 5u;
    float _1853 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1857 = _1830 + 4u;
    float _1867 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1871 = _1830 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_370, _371, _372));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_370, _371, _372));
    float _4028 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4039 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1847].x * _1853) * _1892) + (((cbLight._m0[_1857].x * _1819) * _1867) * _1890);
    float _1900 = ((_1853 * cbLight._m0[_1847].y) * _1892) + (((cbLight._m0[_1857].y * _1821) * _1867) * _1890);
    float _1901 = ((_1853 * cbLight._m0[_1847].z) * _1892) + (((cbLight._m0[_1857].z * _1823) * _1867) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1830 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1907)
    {
        _2009 = _1899;
        _2011 = _1900;
        _2013 = _1901;
    }
    else
    {
        uint _2017 = _1830 + 6u;
        float _2033 = (dot(vec3(cbLight._m0[_1830 + 2u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4050 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2036 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2009 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1899;
        _2011 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1900;
        _2013 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1901;
    }
    bool _2016 = _1905.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2016)
    {
        _2071 = _2009;
        _2073 = _2011;
        _2075 = _2013;
    }
    else
    {
        uint _2233 = _1830 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1830 + 3u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4066 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2252 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2071 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2009;
        _2073 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2011;
        _2075 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2013;
    }
    uint _2078 = _1830 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _373) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1830].x + _451;
    float _2094 = cbLight._m0[_1830].y + _452;
    float _2095 = cbLight._m0[_1830].z + _453;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1830].xyz));
    float _4082 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2107 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2108 = dot(vec3(_370, _371, _372), vec3(_2100, _2101, _2102));
    float _4104 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2100, _2101, _2102));
    float _4115 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2092;
    float _2143 = (0.5 / (((_2107 * ((_2106 * _2132) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2132) + _2092) * _2106))) * _2106;
    float _4126 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2159 = _1830 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _373) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1871].x + _451;
    float _2173 = cbLight._m0[_1871].y + _452;
    float _2174 = cbLight._m0[_1871].z + _453;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1871].xyz));
    float _4137 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2186 = dot(vec3(_370, _371, _372), vec3(_2179, _2180, _2181));
    float _4148 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2179, _2180, _2181));
    float _4159 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2171;
    float _2218 = (0.5 / (((_2107 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2208) + _2171) * _2185))) * _2185;
    float _4170 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2230 = (((_2207 * cbLight._m0[_2159].x) * _2220) * _1853) + ((((cbLight._m0[_2078].x * _1819) * _2131) * _2145) * _1867);
    float _2231 = (((_2207 * cbLight._m0[_2159].y) * _2220) * _1853) + ((((cbLight._m0[_2078].y * _1821) * _2131) * _2145) * _1867);
    float _2232 = (((_2207 * cbLight._m0[_2159].z) * _2220) * _1853) + ((((cbLight._m0[_2078].z * _1823) * _2131) * _2145) * _1867);
    float _2288;
    float _2290;
    float _2292;
    if (_1907)
    {
        _2288 = _2230;
        _2290 = _2231;
        _2292 = _2232;
    }
    else
    {
        uint _2294 = _1830 + 2u;
        uint _2298 = _1830 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _373) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _451;
        float _2315 = cbLight._m0[_2294].y + _452;
        float _2316 = cbLight._m0[_2294].z + _453;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2294].xyz));
        float _4181 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2328 = dot(vec3(_370, _371, _372), vec3(_2321, _2322, _2323));
        float _4192 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4203 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2350 = 1.0 - _2313;
        float _2360 = (0.5 / (((_2107 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2350) + _2313) * _2327))) * _2327;
        float _4214 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2288 = (((_2349 * cbLight._m0[_2298].x) * _2362) * _2363) + _2230;
        _2290 = (((_2349 * cbLight._m0[_2298].y) * _2362) * _2363) + _2231;
        _2292 = (((_2349 * cbLight._m0[_2298].z) * _2362) * _2363) + _2232;
    }
    float _2394;
    float _2396;
    float _2398;
    if (_2016)
    {
        _2394 = _2288;
        _2396 = _2290;
        _2398 = _2292;
    }
    else
    {
        uint _2405 = _1830 + 3u;
        uint _2409 = _1830 + 11u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _373) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _451;
        float _2426 = cbLight._m0[_2405].y + _452;
        float _2427 = cbLight._m0[_2405].z + _453;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2405].xyz));
        float _4230 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2439 = dot(vec3(_370, _371, _372), vec3(_2432, _2433, _2434));
        float _4241 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4252 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2461 = 1.0 - _2424;
        float _2471 = (0.5 / (((_2107 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2461) + _2424) * _2438))) * _2438;
        float _4263 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2394 = (((_2460 * cbLight._m0[_2409].x) * _2473) * _2474) + _2288;
        _2396 = (((_2460 * cbLight._m0[_2409].y) * _2473) * _2474) + _2290;
        _2398 = (((_2460 * cbLight._m0[_2409].z) * _2473) * _2474) + _2292;
    }
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_1828.y == 0u)
    {
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.x;
        uint _2507 = uint((float(_2495.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2496))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2496)));
        float _2517 = (log2(_1606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2518 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        uint _2521 = uint(isnan(14.0) ? _2518 : (isnan(_2518) ? 14.0 : min(_2518, 14.0)));
        uvec4 _2526 = texelFetch(g_lightClusterGridBuffer, int(((_2521 << 2u) + (_2507 << 6u)) >> 2u));
        uint _2527 = _2526.x;
        uint _2528 = _2495.z;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((((1u << ((_2528 >> 4u) & 15u)) + 4294967295u) & _2527) == 0u) || ((_2528 & 240u) == 0u))
        {
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
        }
        else
        {
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            uint _2756 = 0u;
            uint _2765;
            bool _2766;
            for (;;)
            {
                _2765 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                _2766 = _2765 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2766)
                {
                    frontier_phi_68_pred = _2755;
                    frontier_phi_68_pred_1 = _2754;
                    frontier_phi_68_pred_2 = _2753;
                    frontier_phi_68_pred_3 = _2751;
                    frontier_phi_68_pred_4 = _2750;
                    frontier_phi_68_pred_5 = _2752;
                }
                else
                {
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    uint _2880;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2765;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    for (;;)
                    {
                        uint _2884 = uint(findLSB(_2880)) + (_2756 << 5u);
                        uint _2881 = (_2880 + 4294967295u) & _2880;
                        uint _2886 = _2884 * 48u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2906 = (_2884 * 48u) + 4u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2925 = (_2884 * 48u) + 8u;
                        vec3 _2936 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x));
                        float _2940 = _2900.x - _1604;
                        float _2941 = _2900.y - _1605;
                        float _2942 = _2900.z - _1606;
                        float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                        float _2946 = inversesqrt(_2943);
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2950 = dot(vec3(_481, _484, _487), vec3(_2947, _2948, _2949));
                        float _2955 = 1.0 - (_2943 * _2900.w);
                        float _4289 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2957 = sqrt(_2943) * _2919.w;
                        float _2960 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2950) + _2961;
                        float _2967 = _2957 * _2957;
                        float _2971 = ((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2956) / ((_2967 * 0.699999988079071044921875) + 1.0);
                        float _2975 = (-0.0) - _1604;
                        float _2976 = (-0.0) - _1605;
                        float _2977 = (-0.0) - _1606;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2991 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _542;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2982 + _2947;
                        float _3003 = _2983 + _2948;
                        float _3004 = _2984 + _2949;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_481, _484, _487), vec3(_2982, _2983, _2984));
                        float _4305 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3016 = dot(vec3(_481, _484, _487), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4316 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2960 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2950) + _3025;
                        float _4327 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4338 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3023 * _3023) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125))) * _2956;
                        _2809 = (_2971 * _2919.x) + _2877;
                        _2810 = (_2971 * _2919.y) + _2878;
                        _2811 = (_2971 * _2919.z) + _2879;
                        _2806 = (_3051 * _2936.x) + _2874;
                        _2807 = (_3051 * _2936.y) + _2875;
                        _2808 = (_3051 * _2936.z) + _2876;
                        if (_2881 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2881;
                        }
                    }
                    frontier_phi_68_pred = _2811;
                    frontier_phi_68_pred_1 = _2810;
                    frontier_phi_68_pred_2 = _2809;
                    frontier_phi_68_pred_3 = _2807;
                    frontier_phi_68_pred_4 = _2806;
                    frontier_phi_68_pred_5 = _2808;
                }
                _2617 = frontier_phi_68_pred;
                _2615 = frontier_phi_68_pred_1;
                _2613 = frontier_phi_68_pred_2;
                _2609 = frontier_phi_68_pred_3;
                _2607 = frontier_phi_68_pred_4;
                _2611 = frontier_phi_68_pred_5;
                uint _2757 = _2756 + 1u;
                if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2750 = _2607;
                    _2751 = _2609;
                    _2752 = _2611;
                    _2753 = _2613;
                    _2754 = _2615;
                    _2755 = _2617;
                    _2756 = _2757;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
        }
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.z;
        uint _2623 = (_2621 >> 8u) & 15u;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((4294967295u << _2623) & _2527) == 0u)
        {
            _2718 = _2606;
            _2720 = _2608;
            _2722 = _2610;
            _2724 = _2612;
            _2726 = _2614;
            _2728 = _2616;
        }
        else
        {
            float _2743 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
            float _2744 = _2743 * _1604;
            float _2745 = _2743 * _1605;
            float _2746 = _2743 * _1606;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2623 < ((_2621 >> 12u) & 15u))
            {
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2857 = _2606;
                float _2858 = _2608;
                float _2859 = _2610;
                float _2860 = _2612;
                float _2861 = _2614;
                float _2862 = _2616;
                uint _2863 = _2623;
                uint _2872;
                bool _2873;
                for (;;)
                {
                    _2872 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                    _2873 = _2872 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2873)
                    {
                        frontier_phi_74_pred = _2859;
                        frontier_phi_74_pred_1 = _2858;
                        frontier_phi_74_pred_2 = _2857;
                        frontier_phi_74_pred_3 = _2862;
                        frontier_phi_74_pred_4 = _2861;
                        frontier_phi_74_pred_5 = _2860;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3069 = _2857;
                        float _3070 = _2858;
                        float _3071 = _2859;
                        float _3072 = _2860;
                        float _3073 = _2861;
                        float _3074 = _2862;
                        uint _3075 = _2872;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3145;
                        vec4 _3161;
                        float _3208;
                        bool _3209;
                        for (;;)
                        {
                            uint _3086 = ((_2863 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3132 = (_3086 * 40u) + 16u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3148 = (_3086 * 40u) + 20u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3086 * 40u) + 24u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3183 = (_3086 * 40u) + 28u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3208 = fma(_1606, _3196.z, fma(_1605, _3196.y, _3196.x * _1604)) + _3196.w;
                            _3209 = !((fma(_1606, _3177.z, fma(_1605, _3177.y, _3177.x * _1604)) + _3177.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3209)
                            {
                                float _3236 = _3101.x - _1604;
                                float _3237 = _3101.y - _1605;
                                float _3238 = _3101.z - _1606;
                                float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                                float _3242 = inversesqrt(_3239);
                                float _3243 = _3242 * _3236;
                                float _3244 = _3242 * _3237;
                                float _3245 = _3242 * _3238;
                                float _3249 = 1.0 - (_3239 / (_3102 * _3102));
                                float _4349 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3254 = sqrt(_3239) * _3117.w;
                                float _3256 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                                float _3257 = _3256 * _3256;
                                float _3260 = ((1.0 - _3257) * dot(vec3(_3243, _3244, _3245), vec3(_481, _484, _487))) + _3257;
                                float _3263 = _3254 * _3254;
                                float _3267 = (fma(_1606, _3145.z, fma(_1605, _3145.y, _3145.x * _1604)) + _3145.w) / _3208;
                                float _3268 = (fma(_1606, _3161.z, fma(_1605, _3161.y, _3161.x * _1604)) + _3161.w) / _3208;
                                float _3272 = 1.0 - dot(vec2(_3267, _3268), vec2(_3267, _3268));
                                float _4365 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3274 = _3273 * (((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3250) / ((_3263 * 0.699999988079071044921875) + 1.0));
                                float _3286 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                                float _3287 = 1.0 - _542;
                                float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                                float _3295 = _3294 * _3294;
                                float _3296 = _3295 * _3295;
                                float _3297 = _3243 - _2744;
                                float _3298 = _3244 - _2745;
                                float _3299 = _3245 - _2746;
                                float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                                float _3307 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2744, (-0.0) - _2745, (-0.0) - _2746));
                                float _4376 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3311 = dot(vec3(_481, _484, _487), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                                float _4387 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3314 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                                float _3319 = _3256 * _3295;
                                float _3320 = _3319 * _3319;
                                float _3326 = ((1.0 - _3320) * dot(vec3(_481, _484, _487), vec3(_3243, _3244, _3245))) + _3320;
                                float _4398 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3328 = 1.0 - _3295;
                                float _3338 = (0.5 / (((_3327 * ((_3310 * _3328) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3295) * _3310))) * _3327;
                                float _4409 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3348 = (_3273 * _3250) * (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3318 * _3318) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3348 * _3129.z;
                                frontier_phi_80_pred_1 = _3348 * _3129.y;
                                frontier_phi_80_pred_2 = _3348 * _3129.x;
                                frontier_phi_80_pred_3 = _3274 * _3117.z;
                                frontier_phi_80_pred_4 = _3274 * _3117.y;
                                frontier_phi_80_pred_5 = _3274 * _3117.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3354 = frontier_phi_80_pred;
                            _3353 = frontier_phi_80_pred_1;
                            _3352 = frontier_phi_80_pred_2;
                            _3357 = frontier_phi_80_pred_3;
                            _3356 = frontier_phi_80_pred_4;
                            _3355 = frontier_phi_80_pred_5;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3058;
                        frontier_phi_74_pred_1 = _3057;
                        frontier_phi_74_pred_2 = _3056;
                        frontier_phi_74_pred_3 = _3061;
                        frontier_phi_74_pred_4 = _3060;
                        frontier_phi_74_pred_5 = _3059;
                    }
                    _2723 = frontier_phi_74_pred;
                    _2721 = frontier_phi_74_pred_1;
                    _2719 = frontier_phi_74_pred_2;
                    _2729 = frontier_phi_74_pred_3;
                    _2727 = frontier_phi_74_pred_4;
                    _2725 = frontier_phi_74_pred_5;
                    uint _2864 = _2863 + 1u;
                    if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2857 = _2719;
                        _2858 = _2721;
                        _2859 = _2723;
                        _2860 = _2725;
                        _2861 = _2727;
                        _2862 = _2729;
                        _2863 = _2864;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2727;
                frontier_phi_62_63_ladder_1 = _2725;
                frontier_phi_62_63_ladder_2 = _2723;
                frontier_phi_62_63_ladder_3 = _2729;
                frontier_phi_62_63_ladder_4 = _2721;
                frontier_phi_62_63_ladder_5 = _2719;
            }
            else
            {
                frontier_phi_62_63_ladder = _2614;
                frontier_phi_62_63_ladder_1 = _2612;
                frontier_phi_62_63_ladder_2 = _2610;
                frontier_phi_62_63_ladder_3 = _2616;
                frontier_phi_62_63_ladder_4 = _2608;
                frontier_phi_62_63_ladder_5 = _2606;
            }
            _2718 = frontier_phi_62_63_ladder_5;
            _2720 = frontier_phi_62_63_ladder_4;
            _2722 = frontier_phi_62_63_ladder_2;
            _2724 = frontier_phi_62_63_ladder_1;
            _2726 = frontier_phi_62_63_ladder;
            _2728 = frontier_phi_62_63_ladder_3;
        }
        float _2733 = isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0));
        _2539 = (_2733 * _2724) + _2071;
        _2541 = (_2733 * _2726) + _2073;
        _2543 = (_2733 * _2728) + _2075;
        _2545 = ((_2718 * 0.039999999105930328369140625) * _2733) + _2394;
        _2547 = ((_2720 * 0.039999999105930328369140625) * _2733) + _2396;
        _2549 = ((_2722 * 0.039999999105930328369140625) * _2733) + _2398;
    }
    else
    {
        _2539 = _2071;
        _2541 = _2073;
        _2543 = _2075;
        _2545 = _2394;
        _2547 = _2396;
        _2549 = _2398;
    }
    float _4425 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4436 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4447 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    uint _2569 = _500 + 6u;
    float _2577 = _459 / cbSceneParam._m0[86u].x;
    float _2578 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2592 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2594 = _2592.x;
    float _2595 = _2592.y;
    float _2596 = _2592.z;
    float _2597 = _2592.w;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2631 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2632 = _2631 / _392;
        float _2643 = _2632 * _444;
        float _2644 = _445 * _2632;
        float _2645 = (-0.0) - _2644;
        float _2646 = _2632 * _446;
        float _2648 = (cbSceneParam._m0[77u].w * _2645) / _2631;
        float _2649 = _2648 + cbSceneParam._m0[79u].w;
        float _2650 = cbSceneParam._m0[79u].w - _2644;
        float _2656 = sqrt(((_2643 * _2643) + (_2644 * _2644)) + (_2646 * _2646));
        float _2659 = (1.0 - (cbSceneParam._m0[77u].w / _2631)) * _2656;
        float _2664 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2666 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2819;
        if (abs((_2645 - _2648) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2819 = ((((_2649 > 0.0) ? exp2(_2664 * _2649) : (2.0 - exp2(_2666 * _2649))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2659;
        }
        else
        {
            float _2779 = 1.0 / cbSceneParam._m0[80u].x;
            float _2780 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : max(_2649, _2650));
            float _2781 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : min(_2649, _2650));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            _2819 = ((abs(_2656 / _2645) * cbSceneParam._m0[80u].y) * ((((_2790 - _2791) * 2.0) - ((exp2(_2664 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)))) - exp2(_2664 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))))) * _2779)) - ((exp2(_2666 * _2790) - exp2(_2666 * _2791)) * _2779))) + (_2659 * cbSceneParam._m0[80u].z);
        }
        vec4 _2821 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, 1.0), 0.0);
        float _2830 = exp2((_2819 * (-1.44269502162933349609375)) * (1.0 - _2821.w));
        float _2831 = log2(_2830);
        float _2847 = log2(_2597);
        _2668 = (exp2(_2847 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].x)) * _2821.x) / cbSceneParam._m0[78u].x)) + _2594;
        _2670 = (exp2(_2847 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].y)) * _2821.y) / cbSceneParam._m0[78u].y)) + _2595;
        _2672 = (exp2(_2847 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].z)) * _2821.z) / cbSceneParam._m0[78u].z)) + _2596;
        _2674 = _2830 * _2597;
    }
    else
    {
        _2668 = _2594;
        _2670 = _2595;
        _2672 = _2596;
        _2674 = _2597;
    }
    float _2686 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2687 = _2686 == 3.0;
    float _2688 = log2(_2674);
    float _2695 = exp2(_2688 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2539 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _526))) + ((_2545 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1333)) * cbPerFrame._m0[3u].x));
    float _2696 = exp2(_2688 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2541 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _526))) + ((_2547 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1333)) * cbPerFrame._m0[3u].x));
    float _2697 = exp2(_2688 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2543 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _526))) + ((_2549 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1333)) * cbPerFrame._m0[3u].x));
    float _2706 = (_2686 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2706 * (_2687 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.y = _2706 * (_2687 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.z = _2706 * (_2687 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.w = cbInstanceData._m0[_2569].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2569].w;
}


