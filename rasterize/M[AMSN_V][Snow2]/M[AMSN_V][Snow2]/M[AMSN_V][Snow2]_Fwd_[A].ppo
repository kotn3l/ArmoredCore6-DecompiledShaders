#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _939;
float _3309;
float _3310;
float _3311;
float _3312;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _237.z;
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3321 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))));
    float _258 = fma(_255, _215, fma(_248, _208, _246 * _194));
    float _261 = fma(_255, _216, fma(_248, _209, _246 * _195));
    float _264 = fma(_255, _217, fma(_248, _210, _246 * _196));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _276 = cbMtdParam._m0[9u].x + dot(vec4(_268 * _258, _268 * _261, _268 * _264, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3332 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _277 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    vec4 _289 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    float _316 = ((_289.x - _307) * _277) + _307;
    float _317 = ((_289.y - _308) * _277) + _308;
    float _318 = ((_289.z - _309) * _277) + _309;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = (_330.x * 2.0) + (-1.0);
    float _338 = (_330.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3343 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _347 = ((_330.z - _242) * _277) + _242;
    float _354 = ((_337 - _246) * _277) + _246;
    float _355 = ((_338 - _248) * _277) + _248;
    float _356 = ((sqrt(1.0 - (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) - _255) * _277) + _255;
    float _359 = fma(_356, _215, fma(_355, _208, _354 * _194));
    float _362 = fma(_356, _216, fma(_355, _209, _354 * _195));
    float _365 = fma(_356, _217, fma(_355, _210, _354 * _196));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _370 = _369 * _359;
    float _371 = _369 * _362;
    float _372 = _369 * _365;
    float _3354 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _373 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _3365 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3376 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3387 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    vec4 _458 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _460 = _458.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _618 = sqrt(((_444 * _444) + (_445 * _445)) + (_446 * _446));
        float _624 = (cbMatDynParam._m0[5u].x * _618) + cbMatDynParam._m0[5u].y;
        float _3398 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _629 = (cbMatDynParam._m0[5u].z * _618) + cbMatDynParam._m0[5u].w;
        float _3409 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) - _625)) + _625) < ((_460 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _493 = fma(_372, cbSceneParam._m0[5u].z, fma(_371, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _370));
    float _496 = fma(_372, cbSceneParam._m0[6u].z, fma(_371, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _370));
    float _499 = fma(_372, cbSceneParam._m0[7u].z, fma(_371, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _370));
    uint _512 = uint(roundEven(NORMAL.w)) * 13u;
    uint _514 = _512 + 9u;
    uint _515 = _514 + uint(cbMatDynParam._m0[0u].w);
    float _521 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_515].x;
    float _522 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_515].y;
    float _523 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_515].z;
    float _3420 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _538 = _535.x * TEXCOORD.z;
    float _539 = dot(vec3(_370, _371, _372), vec3(_451, _452, _453));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _370) - _451;
    float _547 = (_542 * _371) - _452;
    float _548 = (_542 * _372) - _453;
    float _552 = abs(dot(vec3(_451, _452, _453), vec3(_370, _371, _372)));
    float _3453 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_373);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _938;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _663 = fma(_607, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599));
        float _667 = fma(_607, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599));
        float _671 = fma(_607, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599));
        float _696 = _599 + _370;
        float _697 = _603 + _371;
        float _698 = _607 + _372;
        float _708 = fma(_698, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696)) - _663;
        float _709 = fma(_698, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696)) - _667;
        float _710 = fma(_698, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696)) - _671;
        float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
        float _727 = ((_714 * _708) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_663 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_714 * _709) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_667 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_714 * _710) / cbModelParam._m0[34u].z) + ((((((_671 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        float _766 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_732.x + (-0.5));
        float _768 = _766 * (_732.y + (-0.5));
        float _769 = _766 * (_732.z + (-0.5));
        float _776 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_739.x + (-0.5));
        float _778 = _776 * (_739.y + (-0.5));
        float _779 = _776 * (_739.z + (-0.5));
        float _786 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_746.x + (-0.5));
        float _788 = _786 * (_746.y + (-0.5));
        float _789 = _786 * (_746.z + (-0.5));
        float _796 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_753.x + (-0.5));
        float _798 = _796 * (_753.y + (-0.5));
        float _799 = _796 * (_753.z + (-0.5));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = _767 * 0.5;
        float _804 = _777 * 0.5;
        float _805 = _787 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _820 = (dot(vec3(_370, _371, _372), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _830 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3501 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_832 + 1.0))) + _837) * _800;
        float _847 = _768 * 0.5;
        float _848 = _778 * 0.5;
        float _849 = _788 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_370, _371, _372), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3534 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_874 + 1.0))) + _879) * _801;
        float _889 = _769 * 0.5;
        float _890 = _779 * 0.5;
        float _891 = _789 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_370, _371, _372), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3567 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_916 + 1.0))) + _921) * _802;
        _938 = _769;
        _940 = _768;
        _941 = _767;
        _942 = _779;
        _943 = _778;
        _944 = _777;
        _945 = _789;
        _946 = _788;
        _947 = _787;
        _948 = _802;
        _949 = _801;
        _950 = _800;
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
    }
    else
    {
        _938 = _939;
        _940 = _939;
        _941 = _939;
        _942 = _939;
        _943 = _939;
        _944 = _939;
        _945 = _939;
        _946 = _939;
        _947 = _939;
        _948 = _939;
        _949 = _939;
        _950 = _939;
        _951 = 0.0;
        _952 = 0.0;
        _953 = 0.0;
    }
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _982 = fma(_607, cbModelParam._m0[30u].z, fma(_603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _599));
        float _986 = fma(_607, cbModelParam._m0[31u].z, fma(_603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _599));
        float _990 = fma(_607, cbModelParam._m0[32u].z, fma(_603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _599));
        float _1013 = _599 + _370;
        float _1014 = _603 + _371;
        float _1015 = _607 + _372;
        float _1025 = fma(_1015, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013)) - _982;
        float _1026 = fma(_1015, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013)) - _986;
        float _1027 = fma(_1015, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013)) - _990;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_982 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_986 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[35u].z) + ((((((_990 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1081 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1048.x + (-0.5));
        float _1083 = _1081 * (_1048.y + (-0.5));
        float _1084 = _1081 * (_1048.z + (-0.5));
        float _1091 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1055.x + (-0.5));
        float _1093 = _1091 * (_1055.y + (-0.5));
        float _1094 = _1091 * (_1055.z + (-0.5));
        float _1101 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1062.x + (-0.5));
        float _1103 = _1101 * (_1062.y + (-0.5));
        float _1104 = _1101 * (_1062.z + (-0.5));
        float _1111 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1069.x + (-0.5));
        float _1113 = _1111 * (_1069.y + (-0.5));
        float _1114 = _1111 * (_1069.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_370, _371, _372), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3630 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1145 + 1.0))) + _1150) * _1115;
        float _1160 = _1083 * 0.5;
        float _1161 = _1093 * 0.5;
        float _1162 = _1103 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_370, _371, _372), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3663 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1187 + 1.0))) + _1192) * _1116;
        float _1202 = _1084 * 0.5;
        float _1203 = _1094 * 0.5;
        float _1204 = _1104 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_370, _371, _372), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3696 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1229 + 1.0))) + _1234) * _1117;
        _1251 = _1084;
        _1252 = _1083;
        _1253 = _1082;
        _1254 = _1094;
        _1255 = _1093;
        _1256 = _1092;
        _1257 = _1104;
        _1258 = _1103;
        _1259 = _1102;
        _1260 = _1117;
        _1261 = _1116;
        _1262 = _1115;
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _939;
        _1252 = _939;
        _1253 = _939;
        _1254 = _939;
        _1255 = _939;
        _1256 = _939;
        _1257 = _939;
        _1258 = _939;
        _1259 = _939;
        _1260 = _939;
        _1261 = _939;
        _1262 = _939;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _952)) + _952;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _953)) + _953;
    float _1298 = fma(_1277, cbSceneParam._m0[89u].z, fma(_1276, cbSceneParam._m0[89u].y, _1275 * cbSceneParam._m0[89u].x));
    float _1301 = fma(_1277, cbSceneParam._m0[90u].z, fma(_1276, cbSceneParam._m0[90u].y, _1275 * cbSceneParam._m0[90u].x));
    float _1304 = fma(_1277, cbSceneParam._m0[91u].z, fma(_1276, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1275));
    float _1319 = _546 * 0.5;
    float _1320 = _547 * 0.5;
    float _1321 = _548 * 0.5;
    float _1322 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1325 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1328 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1362;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1335 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_938, _942, _945, _948));
        float _1339 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_940, _943, _946, _949));
        float _1343 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_941, _944, _947, _950));
        float _1350 = dot(vec4(cbModelParam._m0[39u]), vec4(_1319, _1320, _1321, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1373;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1364 = dot(vec4(cbModelParam._m0[40u]), vec4(_1319, _1320, _1321, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1377 = (_1373 * cbModelParam._m0[1u].x) + (_1362 * (1.0 - cbModelParam._m0[1u].x));
    float _1387 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _373);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1387 : min(cbModelParam._m0[25u].z, _1387));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1437 = fma(_607, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599)) + cbModelParam._m0[13u].w;
        float _1441 = fma(_607, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599)) + cbModelParam._m0[14u].w;
        float _1445 = fma(_607, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599)) + cbModelParam._m0[15u].w;
        float _1448 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1451 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1454 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1482;
        if (_1448 > 0.0)
        {
            _1482 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1482 = frontier_phi_19_17_ladder;
        }
        float _1688;
        if (_1451 > 0.0)
        {
            _1688 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1688 = frontier_phi_28_24_ladder;
        }
        float _1931;
        if (_1454 > 0.0)
        {
            _1931 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1931 = frontier_phi_40_35_ladder;
        }
        float _1933 = isnan(_1688) ? _1482 : (isnan(_1482) ? _1688 : min(_1482, _1688));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1448) + _1437;
        float _1939 = (_1934 * _1451) + _1441;
        float _1940 = (_1934 * _1454) + _1445;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1388);
            frontier_phi_18_40_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1470 = frontier_phi_18_40_ladder_2;
        _1472 = frontier_phi_18_40_ladder_1;
        _1474 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1388);
        _1470 = _1458.x * cbModelParam._m0[1u].y;
        _1472 = _1458.y * cbModelParam._m0[1u].y;
        _1474 = _1458.z * cbModelParam._m0[1u].y;
    }
    float _1478 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _373);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1478 : min(cbModelParam._m0[25u].w, _1478));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1536 = fma(_607, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599)) + cbModelParam._m0[21u].w;
        float _1540 = fma(_607, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599)) + cbModelParam._m0[22u].w;
        float _1544 = fma(_607, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599)) + cbModelParam._m0[23u].w;
        float _1547 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1550 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1553 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1693;
        if (_1547 > 0.0)
        {
            _1693 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1693 = frontier_phi_30_26_ladder;
        }
        float _1958;
        if (_1550 > 0.0)
        {
            _1958 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1958 = frontier_phi_42_37_ladder;
        }
        float _2163;
        if (_1553 > 0.0)
        {
            _2163 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2163 = frontier_phi_51_48_ladder;
        }
        float _2165 = isnan(_1958) ? _1693 : (isnan(_1693) ? _1958 : min(_1693, _1958));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1547) + _1536;
        float _2171 = (_2166 * _1550) + _1540;
        float _2172 = (_2166 * _1553) + _1544;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1479);
            frontier_phi_27_51_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1572 = frontier_phi_27_51_ladder_2;
        _1574 = frontier_phi_27_51_ladder_1;
        _1576 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1479);
        _1572 = _1556.x * cbModelParam._m0[1u].z;
        _1574 = _1556.y * cbModelParam._m0[1u].z;
        _1576 = _1556.z * cbModelParam._m0[1u].z;
    }
    float _1588 = ((((1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_567 * _554)) * _538;
    float _1589 = _1588 * ((cbModelParam._m0[1u].w * (_1572 - _1470)) + _1470);
    float _1590 = _1588 * ((cbModelParam._m0[1u].w * (_1574 - _1472)) + _1472);
    float _1591 = _1588 * ((cbModelParam._m0[1u].w * (_1576 - _1474)) + _1474);
    float _1594 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, _1589 * cbSceneParam._m0[91u].x));
    uvec4 _1610 = floatBitsToUint(cbInstanceData._m0[_512 + 5u]);
    uint _1612 = _1610.x * 14u;
    uint _1613 = _1612 + 13u;
    float _1620 = _538 + (-1.0);
    float _1625 = (cbLight._m0[_1613].x * _1620) + 1.0;
    float _1626 = (cbLight._m0[_1613].y * _1620) + 1.0;
    float _1627 = (cbLight._m0[_1613].z * _1620) + 1.0;
    float _1628 = (cbLight._m0[_1613].w * _1620) + 1.0;
    uint _1629 = _1612 + 5u;
    float _1635 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1639 = _1612 + 4u;
    float _1646 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1650 = _1612 | 1u;
    float _1661 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_370, _371, _372));
    float _1664 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_370, _371, _372));
    float _3832 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _3843 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1669 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.3183098733425140380859375;
    float _1671 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.3183098733425140380859375;
    float _1678 = ((cbLight._m0[_1629].x * _1635) * _1671) + ((cbLight._m0[_1639].x * _1646) * _1669);
    float _1679 = ((_1635 * cbLight._m0[_1629].y) * _1671) + ((_1646 * cbLight._m0[_1639].y) * _1669);
    float _1680 = ((_1635 * cbLight._m0[_1629].z) * _1671) + ((_1646 * cbLight._m0[_1639].z) * _1669);
    uvec4 _1685 = floatBitsToUint(cbLight._m0[_1612 + 12u]);
    bool _1687 = _1685.x == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1687)
    {
        _1698 = _1678;
        _1700 = _1679;
        _1702 = _1680;
    }
    else
    {
        uint _1706 = _1612 + 6u;
        float _1722 = (dot(vec3(cbLight._m0[_1612 + 2u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1723 = _1722 * _1722;
        float _3854 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1725 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1698 = (((cbLight._m0[_1706].x * 0.3183098733425140380859375) * _1724) * _1725) + _1678;
        _1700 = (((cbLight._m0[_1706].y * 0.3183098733425140380859375) * _1724) * _1725) + _1679;
        _1702 = (((cbLight._m0[_1706].z * 0.3183098733425140380859375) * _1724) * _1725) + _1680;
    }
    bool _1705 = _1685.y == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1705)
    {
        _1743 = _1698;
        _1745 = _1700;
        _1747 = _1702;
    }
    else
    {
        uint _1902 = _1612 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1612 + 3u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3870 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1921 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1743 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1698;
        _1745 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1700;
        _1747 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1702;
    }
    uint _1750 = _1612 + 8u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _373) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1612].x + _451;
    float _1766 = cbLight._m0[_1612].y + _452;
    float _1767 = cbLight._m0[_1612].z + _453;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1612].xyz));
    float _3886 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _1779 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1780 = dot(vec3(_370, _371, _372), vec3(_1772, _1773, _1774));
    float _3908 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1772, _1773, _1774));
    float _3919 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1764 * _1764;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1779 * ((_1778 * _1804) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1804) + _1764) * _1778))) * _1778;
    float _3930 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    uint _1828 = _1612 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1650].w)) * _373) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1650].x + _451;
    float _1842 = cbLight._m0[_1650].y + _452;
    float _1843 = cbLight._m0[_1650].z + _453;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1650].xyz));
    float _3941 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1855 = dot(vec3(_370, _371, _372), vec3(_1848, _1849, _1850));
    float _3952 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_1848, _1849, _1850));
    float _3963 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1840;
    float _1887 = (0.5 / (((_1779 * ((_1854 * _1877) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1877) + _1840) * _1854))) * _1854;
    float _3974 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1899 = (((_1876 * cbLight._m0[_1828].x) * _1889) * _1635) + (((_1803 * cbLight._m0[_1750].x) * _1817) * _1646);
    float _1900 = (((_1876 * cbLight._m0[_1828].y) * _1889) * _1635) + (((_1803 * cbLight._m0[_1750].y) * _1817) * _1646);
    float _1901 = (((_1876 * cbLight._m0[_1828].z) * _1889) * _1635) + (((_1803 * cbLight._m0[_1750].z) * _1817) * _1646);
    float _1963;
    float _1965;
    float _1967;
    if (_1687)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1612 + 2u;
        uint _1973 = _1612 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _373) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _451;
        float _1990 = cbLight._m0[_1969].y + _452;
        float _1991 = cbLight._m0[_1969].z + _453;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1969].xyz));
        float _3985 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2003 = dot(vec3(_370, _371, _372), vec3(_1996, _1997, _1998));
        float _3996 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _4007 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1779 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2025) + _1988) * _2002))) * _2002;
        float _4018 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1963 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1899;
        _1965 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1900;
        _1967 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1901;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1705)
    {
        _2073 = _1963;
        _2075 = _1965;
        _2077 = _1967;
    }
    else
    {
        uint _2084 = _1612 + 3u;
        uint _2088 = _1612 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _373) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _451;
        float _2105 = cbLight._m0[_2084].y + _452;
        float _2106 = cbLight._m0[_2084].z + _453;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2084].xyz));
        float _4034 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2118 = dot(vec3(_370, _371, _372), vec3(_2111, _2112, _2113));
        float _4045 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4056 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1779 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2140) + _2103) * _2117))) * _2117;
        float _4067 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _2073 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _2153) + _1963;
        _2075 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _2153) + _1965;
        _2077 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _2153) + _1967;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1610.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
        }
        else
        {
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2543)
                {
                    frontier_phi_68_pred = _2529;
                    frontier_phi_68_pred_1 = _2532;
                    frontier_phi_68_pred_2 = _2531;
                    frontier_phi_68_pred_3 = _2530;
                    frontier_phi_68_pred_4 = _2528;
                    frontier_phi_68_pred_5 = _2527;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2542;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2533 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        float _2738 = _2698.x - _2229;
                        float _2739 = _2698.y - _2230;
                        float _2740 = _2698.z - _2231;
                        float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                        float _2744 = inversesqrt(_2741);
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2748 = dot(vec3(_493, _496, _499), vec3(_2745, _2746, _2747));
                        float _2753 = 1.0 - (_2741 * _2698.w);
                        float _4093 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2755 = sqrt(_2741) * _2717.w;
                        float _2758 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2748) + _2759;
                        float _2765 = _2755 * _2755;
                        float _2769 = ((isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * _2754) / ((_2765 * 0.699999988079071044921875) + 1.0);
                        float _2773 = (-0.0) - _2229;
                        float _2774 = (-0.0) - _2230;
                        float _2775 = (-0.0) - _2231;
                        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2790 = exp2(log2(1.0 / ((_2765 * 3.5) + 5.0)) * 0.25);
                        float _2791 = 1.0 - _554;
                        float _2798 = sqrt(1.0 - ((1.0 - (_2791 * _2791)) * (1.0 - (_2790 * _2790))));
                        float _2799 = _2798 * _2798;
                        float _2800 = _2799 * _2799;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2811 = dot(vec3(_493, _496, _499), vec3(_2780, _2781, _2782));
                        float _4109 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2815 = dot(vec3(_493, _496, _499), vec3(_2807 * _2801, _2807 * _2802, _2807 * _2803));
                        float _4120 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2818 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2822 = ((_2818 * _2818) * (_2800 + (-1.0))) + 1.0;
                        float _2823 = _2758 * _2799;
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2748) + _2824;
                        float _4131 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2828 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2829 = 1.0 - _2799;
                        float _2839 = (0.5 / (((_2828 * ((_2814 * _2829) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _2829) + _2799) * _2814))) * _2828;
                        float _4142 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2850 = (((_2800 * 3.1415927410125732421875) * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) / ((_2822 * _2822) * ((_2765 * 2.1991131305694580078125) + 3.141590118408203125))) * _2754;
                        _2602 = (_2769 * _2717.x) + _2675;
                        _2603 = (_2769 * _2717.y) + _2676;
                        _2604 = (_2769 * _2717.z) + _2677;
                        _2599 = (_2850 * _2734.x) + _2672;
                        _2600 = (_2850 * _2734.y) + _2673;
                        _2601 = (_2850 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_68_pred = _2601;
                    frontier_phi_68_pred_1 = _2604;
                    frontier_phi_68_pred_2 = _2603;
                    frontier_phi_68_pred_3 = _2602;
                    frontier_phi_68_pred_4 = _2600;
                    frontier_phi_68_pred_5 = _2599;
                }
                _2380 = frontier_phi_68_pred;
                _2386 = frontier_phi_68_pred_1;
                _2384 = frontier_phi_68_pred_2;
                _2382 = frontier_phi_68_pred_3;
                _2378 = frontier_phi_68_pred_4;
                _2376 = frontier_phi_68_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2376;
                    _2528 = _2378;
                    _2529 = _2380;
                    _2530 = _2382;
                    _2531 = _2384;
                    _2532 = _2386;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
        }
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.z;
        uint _2392 = (_2390 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2392) & _2275) == 0u)
        {
            _2495 = _2375;
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2521 = _2520 * _2229;
            float _2522 = _2520 * _2230;
            float _2523 = _2520 * _2231;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2392 < ((_2390 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2655 = _2375;
                float _2656 = _2377;
                float _2657 = _2379;
                float _2658 = _2381;
                float _2659 = _2383;
                float _2660 = _2385;
                uint _2661 = _2392;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2671)
                    {
                        frontier_phi_79_pred = _2660;
                        frontier_phi_79_pred_1 = _2659;
                        frontier_phi_79_pred_2 = _2658;
                        frontier_phi_79_pred_3 = _2657;
                        frontier_phi_79_pred_4 = _2656;
                        frontier_phi_79_pred_5 = _2655;
                    }
                    else
                    {
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        uint _2883 = _2670;
                        uint _2884;
                        vec4 _2909;
                        float _2910;
                        vec4 _2925;
                        vec3 _2937;
                        vec4 _2953;
                        vec4 _2969;
                        float _3016;
                        bool _3017;
                        for (;;)
                        {
                            uint _2894 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2883));
                            _2884 = (_2883 + 4294967295u) & _2883;
                            uint _2896 = _2894 * 40u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2910 = _2909.w;
                            uint _2912 = (_2894 * 40u) + 4u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2927 = (_2894 * 40u) + 8u;
                            _2937 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x));
                            uint _2940 = (_2894 * 40u) + 16u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2894 * 40u) + 20u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2972 = (_2894 * 40u) + 24u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2991 = (_2894 * 40u) + 28u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3016 = fma(_2231, _3004.z, fma(_2230, _3004.y, _3004.x * _2229)) + _3004.w;
                            _3017 = !((fma(_2231, _2985.z, fma(_2230, _2985.y, _2985.x * _2229)) + _2985.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3017)
                            {
                                float _3044 = _2909.x - _2229;
                                float _3045 = _2909.y - _2230;
                                float _3046 = _2909.z - _2231;
                                float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                                float _3050 = inversesqrt(_3047);
                                float _3051 = _3050 * _3044;
                                float _3052 = _3050 * _3045;
                                float _3053 = _3050 * _3046;
                                float _3057 = 1.0 - (_3047 / (_2910 * _2910));
                                float _4153 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3062 = sqrt(_3047) * _2925.w;
                                float _3064 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                                float _3065 = _3064 * _3064;
                                float _3068 = ((1.0 - _3065) * dot(vec3(_3051, _3052, _3053), vec3(_493, _496, _499))) + _3065;
                                float _3071 = _3062 * _3062;
                                float _3075 = (fma(_2231, _2953.z, fma(_2230, _2953.y, _2953.x * _2229)) + _2953.w) / _3016;
                                float _3076 = (fma(_2231, _2969.z, fma(_2230, _2969.y, _2969.x * _2229)) + _2969.w) / _3016;
                                float _3080 = 1.0 - dot(vec2(_3075, _3076), vec2(_3075, _3076));
                                float _4169 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3082 = _3081 * (((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3058) / ((_3071 * 0.699999988079071044921875) + 1.0));
                                float _3094 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                                float _3095 = 1.0 - _554;
                                float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                                float _3103 = _3102 * _3102;
                                float _3104 = _3103 * _3103;
                                float _3105 = _3051 - _2521;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                                float _3115 = dot(vec3(_493, _496, _499), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4180 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3119 = dot(vec3(_493, _496, _499), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                                float _4191 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                                float _3127 = _3064 * _3103;
                                float _3128 = _3127 * _3127;
                                float _3134 = ((1.0 - _3128) * dot(vec3(_493, _496, _499), vec3(_3051, _3052, _3053))) + _3128;
                                float _4202 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3136 = 1.0 - _3103;
                                float _3146 = (0.5 / (((_3135 * ((_3118 * _3136) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3103) * _3118))) * _3135;
                                float _4213 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3156 = (_3081 * _3058) * (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) / ((_3126 * _3126) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3082 * _2925.z;
                                frontier_phi_85_pred_1 = _3082 * _2925.y;
                                frontier_phi_85_pred_2 = _3082 * _2925.x;
                                frontier_phi_85_pred_3 = _3156 * _2937.z;
                                frontier_phi_85_pred_4 = _3156 * _2937.y;
                                frontier_phi_85_pred_5 = _3156 * _2937.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_85_pred;
                            _3164 = frontier_phi_85_pred_1;
                            _3163 = frontier_phi_85_pred_2;
                            _3162 = frontier_phi_85_pred_3;
                            _3161 = frontier_phi_85_pred_4;
                            _3160 = frontier_phi_85_pred_5;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            if (_2884 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2884;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2869;
                        frontier_phi_79_pred_1 = _2868;
                        frontier_phi_79_pred_2 = _2867;
                        frontier_phi_79_pred_3 = _2866;
                        frontier_phi_79_pred_4 = _2865;
                        frontier_phi_79_pred_5 = _2864;
                    }
                    _2506 = frontier_phi_79_pred;
                    _2504 = frontier_phi_79_pred_1;
                    _2502 = frontier_phi_79_pred_2;
                    _2500 = frontier_phi_79_pred_3;
                    _2498 = frontier_phi_79_pred_4;
                    _2496 = frontier_phi_79_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2496;
                        _2656 = _2498;
                        _2657 = _2500;
                        _2658 = _2502;
                        _2659 = _2504;
                        _2660 = _2506;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2502;
                frontier_phi_60_61_ladder_1 = _2506;
                frontier_phi_60_61_ladder_2 = _2504;
                frontier_phi_60_61_ladder_3 = _2500;
                frontier_phi_60_61_ladder_4 = _2498;
                frontier_phi_60_61_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_60_61_ladder = _2381;
                frontier_phi_60_61_ladder_1 = _2385;
                frontier_phi_60_61_ladder_2 = _2383;
                frontier_phi_60_61_ladder_3 = _2379;
                frontier_phi_60_61_ladder_4 = _2377;
                frontier_phi_60_61_ladder_5 = _2375;
            }
            _2495 = frontier_phi_60_61_ladder_5;
            _2497 = frontier_phi_60_61_ladder_4;
            _2499 = frontier_phi_60_61_ladder_3;
            _2501 = frontier_phi_60_61_ladder;
            _2503 = frontier_phi_60_61_ladder_2;
            _2505 = frontier_phi_60_61_ladder_1;
        }
        float _2510 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2287 = (_2510 * _2501) + _1743;
        _2289 = (_2510 * _2503) + _1745;
        _2291 = (_2510 * _2505) + _1747;
        _2293 = ((_2495 * 0.039999999105930328369140625) * _2510) + _2073;
        _2295 = ((_2497 * 0.039999999105930328369140625) * _2510) + _2075;
        _2297 = ((_2499 * 0.039999999105930328369140625) * _2510) + _2077;
    }
    else
    {
        _2287 = _1743;
        _2289 = _1745;
        _2291 = _1747;
        _2293 = _2073;
        _2295 = _2075;
        _2297 = _2077;
    }
    float _4229 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4240 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4251 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _2314 = ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2287 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _538))) + ((_2293 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2289 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _538))) + ((_2295 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2291 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _538))) + ((_2297 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    uint _2317 = _512 + 6u;
    float _2325 = _472 / cbSceneParam._m0[86u].x;
    float _2326 = _473 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2400 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2401 = _2400 / _392;
        float _2412 = _2401 * _444;
        float _2413 = _445 * _2401;
        float _2414 = (-0.0) - _2413;
        float _2415 = _2401 * _446;
        float _2417 = (cbSceneParam._m0[77u].w * _2414) / _2400;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2413;
        float _2425 = sqrt(((_2412 * _2412) + (_2413 * _2413)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2400)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2414 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2558 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2612 = ((abs(_2425 / _2414) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2435 * _2567) - exp2(_2435 * _2568)) * _2556))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2345);
        _2437 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2439 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2441 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2443 = _2623 * _2345;
    }
    else
    {
        _2437 = _2342;
        _2439 = _2343;
        _2441 = _2344;
        _2443 = _2345;
    }
    bool _2650;
    vec4 _2453;
    vec4 _2475;
    float _2477;
    float _2481;
    float _2482;
    float _2483;
    float _2484;
    bool _2494;
    for (;;)
    {
        _2453 = cbMatDynParam._m0[0u];
        float _2455 = roundEven(_2453.y);
        bool _2456 = _2455 == 3.0;
        float _2457 = log2(_2443);
        float _2464 = exp2(_2457 * cbSceneParam._m0[78u].x) * _2314;
        float _2465 = exp2(_2457 * cbSceneParam._m0[78u].y) * _2315;
        float _2466 = exp2(_2457 * cbSceneParam._m0[78u].z) * _2316;
        float _2473 = _460 + (-0.5);
        _2475 = cbMtdParam._m0[1u];
        _2477 = _2475.y * _2473;
        float _2480 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2481 = _2480 * (_2456 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2437)));
        _2482 = _2480 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2439)));
        _2483 = _2480 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2441)));
        _2484 = _2473 * 0.999000012874603271484375;
        _2494 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2494)
        {
            if ((cbInstanceData._m0[_512 + 7u].x + _2484) < 0.5)
            {
                _2650 = true;
                break;
            }
        }
        uint _2591 = _514 + uint(_2453.w);
        if ((cbInstanceData._m0[_2591].w < 1.0) && ((cbInstanceData._m0[_2591].w + _2484) < 0.5))
        {
            _2650 = true;
            break;
        }
        if ((_2477 + 1.0) < _2475.x)
        {
            _2650 = true;
            break;
        }
        _2650 = false;
        break;
    }
    float _2855;
    if (_2650)
    {
        discard_state = true;
        _2855 = 0.0;
    }
    else
    {
        _2855 = cbInstanceData._m0[_2317].w;
    }
    SV_Target.x = _2481;
    SV_Target.y = _2482;
    SV_Target.z = _2483;
    SV_Target.w = _2855;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
    discard_exit();
}


