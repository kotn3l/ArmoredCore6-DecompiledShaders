#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _49
{
    vec3 _m0;
};

struct _53
{
    vec2 _m0;
};

struct _56
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _49 payload;
hitAttributeEXT _53 hit;
layout(location = 1) rayPayloadEXT _56 _58;
layout(location = 2) rayPayloadEXT _56 _59;

vec3 _945;

void main()
{
    float _67 = float(gl_LaunchSizeEXT.y);
    float _97 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _117 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _118 = _117.y;
    uint _158;
    uint _160;
    uint _161;
    if (_117.x == 0u)
    {
        uint _126 = (_118 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _135 = uvec3(texelFetch(l_geomIndexBuffer, int(_126)).x, texelFetch(l_geomIndexBuffer, int(_126 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_126 + 2u)).x);
        _158 = _135.x;
        _160 = _135.y;
        _161 = _135.z;
    }
    else
    {
        uint _139 = uint(gl_PrimitiveID) * 6u;
        uint _141 = _139 & 4294967292u;
        uint _144 = (_118 + _141) >> 2u;
        uvec2 _151 = uvec2(texelFetch(l_geomIndexBuffer, int(_144)).x, texelFetch(l_geomIndexBuffer, int(_144 + 1u)).x);
        uint _152 = _151.x;
        uint _153 = _151.y;
        uint _155 = _152 >> 16u;
        uint _156 = _153 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_141 == _139)
        {
            frontier_phi_3_2_ladder = _156;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _152 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _153 >> 16u;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _155;
        }
        _158 = frontier_phi_3_2_ladder_2;
        _160 = frontier_phi_3_2_ladder_1;
        _161 = frontier_phi_3_2_ladder;
    }
    uvec4 _165 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _166 = _165.x;
    uint _167 = _165.z;
    bool _168 = _167 != 0u;
    bool _170 = _117.w == 0u;
    bool _171 = _168 || _170;
    uint _173 = (_166 * _158) + 12u;
    uint _197;
    uint _198;
    uint _199;
    uint _200;
    if (_171)
    {
        uvec4 _176 = texelFetch(l_geomAttrib_0, int(_173 >> 2u));
        uint _177 = _176.x;
        _197 = _177 & 255u;
        _198 = (_177 >> 8u) & 255u;
        _199 = (_177 >> 16u) & 255u;
        _200 = 20u;
    }
    else
    {
        uint _185 = _173 >> 2u;
        uvec2 _191 = uvec2(texelFetch(l_geomAttrib_0, int(_185)).x, texelFetch(l_geomAttrib_0, int(_185 + 1u)).x);
        uint _192 = _191.x;
        _197 = _192 & 65535u;
        _198 = _192 >> 16u;
        _199 = _191.y & 65535u;
        _200 = 24u;
    }
    bool _206 = _167 == 0u;
    uint _207;
    if (_206)
    {
        _207 = _200;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_170)
        {
            frontier_phi_9_10_ladder = _200 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _200 + 8u;
        }
        _207 = frontier_phi_9_10_ladder;
    }
    uvec4 _218 = texelFetch(l_geomAttrib_0, int((((_166 * _158) + 4u) + (_168 ? (_207 + 4u) : _207)) >> 2u));
    uint _219 = _218.x;
    float _223 = float(int(uint(int(_219 << 16u) >> int(16u))));
    float _224 = float(int(uint(int(_219) >> int(16u))));
    uint _226 = (_166 * _160) + 12u;
    uint _247;
    uint _248;
    uint _249;
    uint _250;
    if (_171)
    {
        uvec4 _228 = texelFetch(l_geomAttrib_0, int(_226 >> 2u));
        uint _229 = _228.x;
        _247 = _229 & 255u;
        _248 = (_229 >> 8u) & 255u;
        _249 = (_229 >> 16u) & 255u;
        _250 = 20u;
    }
    else
    {
        uint _235 = _226 >> 2u;
        uvec2 _241 = uvec2(texelFetch(l_geomAttrib_0, int(_235)).x, texelFetch(l_geomAttrib_0, int(_235 + 1u)).x);
        uint _242 = _241.x;
        _247 = _242 & 65535u;
        _248 = _242 >> 16u;
        _249 = _241.y & 65535u;
        _250 = 24u;
    }
    uint _254;
    if (_206)
    {
        _254 = _250;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_170)
        {
            frontier_phi_16_17_ladder = _250 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _250 + 8u;
        }
        _254 = frontier_phi_16_17_ladder;
    }
    uvec4 _263 = texelFetch(l_geomAttrib_0, int((((_166 * _160) + 4u) + (_168 ? (_254 + 4u) : _254)) >> 2u));
    uint _264 = _263.x;
    float _268 = float(int(uint(int(_264 << 16u) >> int(16u))));
    float _269 = float(int(uint(int(_264) >> int(16u))));
    uint _271 = (_166 * _161) + 12u;
    uint _292;
    uint _293;
    uint _294;
    uint _295;
    if (_171)
    {
        uvec4 _273 = texelFetch(l_geomAttrib_0, int(_271 >> 2u));
        uint _274 = _273.x;
        _292 = _274 & 255u;
        _293 = (_274 >> 8u) & 255u;
        _294 = (_274 >> 16u) & 255u;
        _295 = 20u;
    }
    else
    {
        uint _280 = _271 >> 2u;
        uvec2 _286 = uvec2(texelFetch(l_geomAttrib_0, int(_280)).x, texelFetch(l_geomAttrib_0, int(_280 + 1u)).x);
        uint _287 = _286.x;
        _292 = _287 & 65535u;
        _293 = _287 >> 16u;
        _294 = _286.y & 65535u;
        _295 = 24u;
    }
    uint _299;
    if (_206)
    {
        _299 = _295;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_170)
        {
            frontier_phi_23_24_ladder = _295 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _295 + 8u;
        }
        _299 = frontier_phi_23_24_ladder;
    }
    uvec4 _308 = texelFetch(l_geomAttrib_0, int((((_166 * _161) + 4u) + (_168 ? (_299 + 4u) : _299)) >> 2u));
    uint _309 = _308.x;
    float _313 = float(int(uint(int(_309 << 16u) >> int(16u))));
    float _314 = float(int(uint(int(_309) >> int(16u))));
    bool _316 = _117.z == 0u;
    float _352;
    float _353;
    float _354;
    if (_316)
    {
        uint _319 = _158 * 3u;
        uvec3 _328 = uvec3(texelFetch(l_geomPositionBuffer, int(_319)).x, texelFetch(l_geomPositionBuffer, int(_319 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_319 + 2u)).x);
        _352 = uintBitsToFloat(_328.x);
        _353 = uintBitsToFloat(_328.y);
        _354 = uintBitsToFloat(_328.z);
    }
    else
    {
        uint _336 = _158 * 2u;
        uvec2 _342 = uvec2(texelFetch(l_geomPositionBuffer, int(_336)).x, texelFetch(l_geomPositionBuffer, int(_336 + 1u)).x);
        uint _343 = _342.x;
        _352 = unpackHalf2x16(_343).x;
        _353 = unpackHalf2x16(_343 >> 16u).x;
        _354 = unpackHalf2x16(_342.y).x;
    }
    float _390;
    float _391;
    float _392;
    if (_316)
    {
        uint _357 = _160 * 3u;
        uvec3 _366 = uvec3(texelFetch(l_geomPositionBuffer, int(_357)).x, texelFetch(l_geomPositionBuffer, int(_357 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_357 + 2u)).x);
        _390 = uintBitsToFloat(_366.x);
        _391 = uintBitsToFloat(_366.y);
        _392 = uintBitsToFloat(_366.z);
    }
    else
    {
        uint _374 = _160 * 2u;
        uvec2 _380 = uvec2(texelFetch(l_geomPositionBuffer, int(_374)).x, texelFetch(l_geomPositionBuffer, int(_374 + 1u)).x);
        uint _381 = _380.x;
        _390 = unpackHalf2x16(_381).x;
        _391 = unpackHalf2x16(_381 >> 16u).x;
        _392 = unpackHalf2x16(_380.y).x;
    }
    float _428;
    float _429;
    float _430;
    if (_316)
    {
        uint _395 = _161 * 3u;
        uvec3 _404 = uvec3(texelFetch(l_geomPositionBuffer, int(_395)).x, texelFetch(l_geomPositionBuffer, int(_395 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_395 + 2u)).x);
        _428 = uintBitsToFloat(_404.x);
        _429 = uintBitsToFloat(_404.y);
        _430 = uintBitsToFloat(_404.z);
    }
    else
    {
        uint _412 = _161 * 2u;
        uvec2 _418 = uvec2(texelFetch(l_geomPositionBuffer, int(_412)).x, texelFetch(l_geomPositionBuffer, int(_412 + 1u)).x);
        uint _419 = _418.x;
        _428 = unpackHalf2x16(_419).x;
        _429 = unpackHalf2x16(_419 >> 16u).x;
        _430 = unpackHalf2x16(_418.y).x;
    }
    float _433 = (1.0 - hit._m0.x) - hit._m0.y;
    float _474 = _390 - _352;
    float _475 = _391 - _353;
    float _476 = _392 - _354;
    float _479 = fma(_476, gl_ObjectToWorldEXT[2u].x, fma(_475, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _474));
    float _482 = fma(_476, gl_ObjectToWorldEXT[2u].y, fma(_475, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _474));
    float _485 = fma(_476, gl_ObjectToWorldEXT[2u].z, fma(_475, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _474));
    float _486 = _428 - _352;
    float _487 = _429 - _353;
    float _488 = _430 - _354;
    float _491 = fma(_488, gl_ObjectToWorldEXT[2u].x, fma(_487, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _486));
    float _494 = fma(_488, gl_ObjectToWorldEXT[2u].y, fma(_487, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _486));
    float _497 = fma(_488, gl_ObjectToWorldEXT[2u].z, fma(_487, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _486));
    float _504 = (((float(_197) * _433) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y);
    float _507 = (((float(_198) * _433) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _510 = (((float(_199) * _433) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _511 = _504 * 0.0078740157186985015869140625;
    float _513 = _507 * 0.0078740157186985015869140625;
    float _514 = _510 * 0.0078740157186985015869140625;
    uvec2 _535 = uvec2(textureSize(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, int(0u)));
    float _544 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _545 = _544 * gl_WorldRayDirectionEXT.x;
    float _546 = _544 * gl_WorldRayDirectionEXT.y;
    float _547 = _544 * gl_WorldRayDirectionEXT.z;
    float _599;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _561 = (_497 * _482) - (_494 * _485);
        float _564 = (_491 * _485) - (_497 * _479);
        float _567 = (_494 * _479) - (_491 * _482);
        float _596 = ((log2((((float(_535.y) * 0.5) * float(_535.x)) * abs((((_314 - _224) * (_268 - _223)) - ((_313 - _223) * (_269 - _224))) * 2.384185791015625e-07)) / (sqrt(((_564 * _564) + (_567 * _567)) + (_561 * _561)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(sqrt(((_98 * _98) + (_97 * _97)) + (_99 * _99)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _67)))))) / abs(dot(vec3(_545, _546, _547), vec3(_511, _513, _514))));
        _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    }
    else
    {
        _599 = 0.0;
    }
    vec4 _603 = textureLod(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((((((_268 * hit._m0.x) + (_223 * _433)) + (_313 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_269 * hit._m0.x) + (_224 * _433)) + (_314 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _599);
    float _623 = inversesqrt(dot(vec3(_511, _513, _514), vec3(_511, _513, _514)));
    float _624 = _623 * _511;
    float _625 = _623 * _513;
    float _626 = _623 * _514;
    float _638 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _639 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _640 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _641 = (-0.0) - _545;
    float _643 = (-0.0) - _546;
    float _644 = (-0.0) - _547;
    float _650 = float(gl_LaunchIDEXT.x);
    float _651 = float(gl_LaunchIDEXT.y);
    float _654 = float(gl_LaunchSizeEXT.x);
    float _668 = fract(fract(sin(dot(vec2(_650 / _654, _651 / _67), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _681 = fract(fract(sin(dot(vec2((_650 + 128.0) / _654, (_651 + 128.0) / _67), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _59._m0 = 1u;
    uvec4 _691 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _692 = _691.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _692, _691.w, _692, vec3(_638, _639, _640), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    if (_59._m0 == 0u)
    {
        float _713 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_624, _625, _626));
        float _1024 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _716 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        float _727 = g_sceneCB._m0[4u].x - _545;
        float _728 = g_sceneCB._m0[4u].y - _546;
        float _729 = g_sceneCB._m0[4u].z - _547;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _737 = dot(vec3(_624, _625, _626), vec3(g_sceneCB._m0[4u].xyz));
        float _1035 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _740 = isnan(1.0) ? _1035 : (isnan(_1035) ? 1.0 : min(_1035, 1.0));
        float _741 = dot(vec3(_624, _625, _626), vec3(_641, _643, _644));
        float _1046 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_727 * _733, _728 * _733, _729 * _733));
        float _1057 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _756 = (exp2(log2(1.0 - (isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _762 = (0.5 / ((_740 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1046 : (isnan(_1046) ? 1.0 : min(_1046, 1.0))))) * _740;
        float _1068 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _764 = (isnan(1.0) ? _1068 : (isnan(_1068) ? 1.0 : min(_1068, 1.0))) * 0.31831014156341552734375;
        _772 = ((cbMtdParam._m0[10u].x * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _716;
        _773 = ((cbMtdParam._m0[10u].y * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _716;
        _774 = ((cbMtdParam._m0[10u].z * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _716;
        _775 = (_756 * g_sceneCB._m0[5u].x) * _764;
        _776 = (_756 * g_sceneCB._m0[5u].y) * _764;
        _777 = (_756 * g_sceneCB._m0[5u].z) * _764;
    }
    else
    {
        _772 = 0.0;
        _773 = 0.0;
        _774 = 0.0;
        _775 = 0.0;
        _776 = 0.0;
        _777 = 0.0;
    }
    bool _779 = abs(_625) < 0.89999997615814208984375;
    float _781 = float(_779);
    float _782 = _779 ? 0.0 : 1.0;
    float _785 = (_781 * _626) - (_782 * _625);
    float _786 = _782 * _624;
    float _788 = (-0.0) - (_624 * _781);
    float _792 = inversesqrt(dot(vec3(_785, _786, _788), vec3(_785, _786, _788)));
    float _793 = _785 * _792;
    float _794 = _786 * _792;
    float _795 = _792 * _788;
    float _798 = (_794 * _626) - (_795 * _625);
    float _801 = (_795 * _624) - (_793 * _626);
    float _804 = (_793 * _625) - (_794 * _624);
    float _806;
    float _814;
    float _805 = 0.0;
    uint _807 = 0u;
    float _811;
    bool _813;
    for (;;)
    {
        _811 = (float(_807) + _668) * 0.03125;
        _813 = _807 == 0u;
        float frontier_phi_41_pred;
        if (_813)
        {
            frontier_phi_41_pred = 0.0;
        }
        else
        {
            float _950;
            float _951;
            uint _953;
            _950 = 0.0;
            _951 = 0.5;
            _953 = _807;
            float _815;
            for (;;)
            {
                _815 = ((_953 & 1u) != 0u) ? (_951 + _950) : _950;
                uint _954 = _953 >> 1u;
                if (_954 == 0u)
                {
                    break;
                }
                else
                {
                    _950 = _815;
                    _951 *= 0.5;
                    _953 = _954;
                }
            }
            frontier_phi_41_pred = _815;
        }
        _814 = frontier_phi_41_pred;
        float _816 = _814 + _681;
        float _821 = sqrt(_811);
        float _822 = ((_816 > 1.0) ? (_816 + (-1.0)) : _816) * 6.283185482025146484375;
        float _825 = cos(_822) * _821;
        float _827 = sin(_822) * _821;
        float _829 = sqrt(1.0 - _811);
        float _842 = ((_829 * _624) + (_825 * _798)) + (_827 * _793);
        float _843 = ((_829 * _625) + (_825 * _801)) + (_827 * _794);
        float _844 = ((_829 * _626) + (_825 * _804)) + (_827 * _795);
        _58._m0 = 1u;
        uvec4 _848 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _849 = _848.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _849, _848.w, _849, vec3(_638, _639, _640), 9.9999997473787516355514526367188e-05, vec3(_842, _843, _844), 10000.0, 1);
        float _855 = dot(vec3(_624, _625, _626), vec3(_842, _843, _844));
        float _1079 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _858 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _806 = ((float(_58._m0 == 0u) * _858) / (_858 * 0.3183098733425140380859375)) + _805;
        uint _808 = _807 + 1u;
        if (_808 == 32u)
        {
            break;
        }
        else
        {
            _805 = _806;
            _807 = _808;
            continue;
        }
    }
    float _866 = _806 * 0.009947183541953563690185546875;
    float _871 = dot(vec3(_545, _546, _547), vec3(_624, _625, _626)) * 2.0;
    vec4 _883 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_545 - (_871 * _624), _546 - (_871 * _625), _547 - (_871 * _626)), 4.0);
    float _888 = dot(vec3(_641, _643, _644), vec3(_624, _625, _626));
    float _1090 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _897 = (exp2(log2(1.0 - (isnan(1.0) ? _1090 : (isnan(_1090) ? 1.0 : min(_1090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _903 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_624, _625, _626), 0.0);
    float _915 = ((_772 + ((_603.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x)) + _775) + (((_903.x * cbMtdParam._m0[10u].x) + (_897 * _883.x)) * _866);
    float _920 = ((_773 + ((_603.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y)) + _776) + (((_903.y * cbMtdParam._m0[10u].y) + (_897 * _883.y)) * _866);
    float _925 = ((_774 + ((_603.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z)) + _777) + (((_903.z * cbMtdParam._m0[10u].z) + (_897 * _883.z)) * _866);
    float _1101 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _1112 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _1123 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    bool _933 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _944;
    _944.x = _933 ? ((_504 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0)));
    _944.y = _933 ? ((_507 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0)));
    _944.z = _933 ? ((_510 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0)));
    payload._m0 = _944;
}


