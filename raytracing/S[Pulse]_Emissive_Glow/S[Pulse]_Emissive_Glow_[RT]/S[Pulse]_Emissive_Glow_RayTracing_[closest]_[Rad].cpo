#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_Pulse_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_Pulse_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D S_Pulse_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D S_Pulse_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1324;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _168;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _164 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _165 >> 16u;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _167;
        }
        _170 = frontier_phi_3_2_ladder_2;
        _172 = frontier_phi_3_2_ladder_1;
        _173 = frontier_phi_3_2_ladder;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _177.z;
    bool _180 = _179 != 0u;
    bool _182 = _129.w == 0u;
    bool _183 = _180 || _182;
    uint _185 = (_178 * _170) + 12u;
    uint _209;
    uint _210;
    uint _211;
    uint _212;
    if (_183)
    {
        uvec4 _188 = texelFetch(l_geomAttrib_0, int(_185 >> 2u));
        uint _189 = _188.x;
        _209 = _189 & 255u;
        _210 = (_189 >> 8u) & 255u;
        _211 = (_189 >> 16u) & 255u;
        _212 = 20u;
    }
    else
    {
        uint _197 = _185 >> 2u;
        uvec2 _203 = uvec2(texelFetch(l_geomAttrib_0, int(_197)).x, texelFetch(l_geomAttrib_0, int(_197 + 1u)).x);
        uint _204 = _203.x;
        _209 = _204 & 65535u;
        _210 = _204 >> 16u;
        _211 = _203.y & 65535u;
        _212 = 24u;
    }
    bool _218 = _179 == 0u;
    uint _219;
    if (_218)
    {
        _219 = _212;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_182)
        {
            frontier_phi_9_10_ladder = _212 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _212 + 8u;
        }
        _219 = frontier_phi_9_10_ladder;
    }
    uint _229 = (((_178 * _170) + 4u) + (_180 ? (_219 + 4u) : _219)) >> 2u;
    uvec2 _235 = uvec2(texelFetch(l_geomAttrib_0, int(_229)).x, texelFetch(l_geomAttrib_0, int(_229 + 1u)).x);
    uint _236 = _235.x;
    uint _237 = _235.y;
    float _241 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_236) >> int(16u))));
    uint _249 = (_178 * _172) + 12u;
    uint _270;
    uint _271;
    uint _272;
    uint _273;
    if (_183)
    {
        uvec4 _251 = texelFetch(l_geomAttrib_0, int(_249 >> 2u));
        uint _252 = _251.x;
        _270 = _252 & 255u;
        _271 = (_252 >> 8u) & 255u;
        _272 = (_252 >> 16u) & 255u;
        _273 = 20u;
    }
    else
    {
        uint _258 = _249 >> 2u;
        uvec2 _264 = uvec2(texelFetch(l_geomAttrib_0, int(_258)).x, texelFetch(l_geomAttrib_0, int(_258 + 1u)).x);
        uint _265 = _264.x;
        _270 = _265 & 65535u;
        _271 = _265 >> 16u;
        _272 = _264.y & 65535u;
        _273 = 24u;
    }
    uint _277;
    if (_218)
    {
        _277 = _273;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_182)
        {
            frontier_phi_16_17_ladder = _273 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _273 + 8u;
        }
        _277 = frontier_phi_16_17_ladder;
    }
    uint _285 = (((_178 * _172) + 4u) + (_180 ? (_277 + 4u) : _277)) >> 2u;
    uvec2 _291 = uvec2(texelFetch(l_geomAttrib_0, int(_285)).x, texelFetch(l_geomAttrib_0, int(_285 + 1u)).x);
    uint _292 = _291.x;
    uint _293 = _291.y;
    float _297 = float(int(uint(int(_292 << 16u) >> int(16u))));
    float _298 = float(int(uint(int(_292) >> int(16u))));
    uint _305 = (_178 * _173) + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_183)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 20u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 24u;
    }
    uint _333;
    if (_218)
    {
        _333 = _329;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_182)
        {
            frontier_phi_23_24_ladder = _329 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 8u;
        }
        _333 = frontier_phi_23_24_ladder;
    }
    uint _341 = (((_178 * _173) + 4u) + (_180 ? (_333 + 4u) : _333)) >> 2u;
    uvec2 _347 = uvec2(texelFetch(l_geomAttrib_0, int(_341)).x, texelFetch(l_geomAttrib_0, int(_341 + 1u)).x);
    uint _348 = _347.x;
    uint _349 = _347.y;
    float _353 = float(int(uint(int(_348 << 16u) >> int(16u))));
    float _354 = float(int(uint(int(_348) >> int(16u))));
    bool _361 = _129.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _170 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _170 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _172 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _172 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _173 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _173 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _510 = (_297 - _241) * 0.00048828125;
    float _512 = (_298 - _242) * 0.00048828125;
    float _515 = (_353 - _241) * 0.00048828125;
    float _516 = (_354 - _242) * 0.00048828125;
    float _538 = _435 - _397;
    float _539 = _436 - _398;
    float _540 = _437 - _399;
    float _543 = fma(_540, gl_ObjectToWorldEXT[2u].x, fma(_539, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _538));
    float _546 = fma(_540, gl_ObjectToWorldEXT[2u].y, fma(_539, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _538));
    float _549 = fma(_540, gl_ObjectToWorldEXT[2u].z, fma(_539, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _538));
    float _550 = _473 - _397;
    float _551 = _474 - _398;
    float _552 = _475 - _399;
    float _555 = fma(_552, gl_ObjectToWorldEXT[2u].x, fma(_551, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _550));
    float _558 = fma(_552, gl_ObjectToWorldEXT[2u].y, fma(_551, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _550));
    float _561 = fma(_552, gl_ObjectToWorldEXT[2u].z, fma(_551, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _550));
    float _562 = (((_297 * hit._m0.x) + (_241 * _478)) + (_353 * hit._m0.y)) * 0.00048828125;
    float _563 = (((_298 * hit._m0.x) + (_242 * _478)) + (_354 * hit._m0.y)) * 0.00048828125;
    float _569 = (((float(_209) * _478) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _572 = (((float(_210) * _478) + (-127.0)) + (float(_271) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _575 = (((float(_211) * _478) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _584 = sin(cbMtdParam._m0[12u].z);
    float _585 = cos(cbMtdParam._m0[12u].z);
    float _586 = ((((float(int(uint(int(_293 << 16u) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_237 << 16u) >> int(16u)))) * _478)) + (float(int(uint(int(_349 << 16u) >> int(16u)))) * hit._m0.y)) * 0.00048828125) - cbMtdParam._m0[12u].y;
    float _587 = ((((float(int(uint(int(_293) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_237) >> int(16u)))) * _478)) + (float(int(uint(int(_349) >> int(16u)))) * hit._m0.y)) * 0.00048828125) - cbMtdParam._m0[12u].y;
    float _594 = fma(_587, (-0.0) - _584, _585 * _586) + cbMtdParam._m0[12u].y;
    float _595 = fma(_587, _585, _586 * _584) + cbMtdParam._m0[12u].y;
    float _618 = (cbTextureTilingScale._m0[1u].x * ((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + _562)) + cbTextureTilingScale._m0[1u].z;
    float _619 = (cbTextureTilingScale._m0[1u].y * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + _563)) + cbTextureTilingScale._m0[1u].w;
    uvec2 _621 = uvec2(textureSize(S_Pulse_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    bool _626 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _679;
    if (_626)
    {
        float _637 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _643 = (_561 * _546) - (_558 * _549);
        float _646 = (_555 * _549) - (_561 * _543);
        float _649 = (_558 * _543) - (_555 * _546);
        float _676 = ((log2((((float(_621.y) * 0.5) * float(_621.x)) * abs((_516 * _510) - (_515 * _512))) / (sqrt(((_646 * _646) + (_649 * _649)) + (_643 * _643)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_637 * gl_WorldRayDirectionEXT.x, _637 * gl_WorldRayDirectionEXT.y, _637 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _679 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    }
    else
    {
        _679 = 0.0;
    }
    vec4 _683 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_618, _619), _679);
    float _687 = cbPerFrame._m0[22u].x * 2.0;
    float _688 = _687 * cbMtdParam._m0[13u].w;
    float _694 = ((_683.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].y;
    float _696 = (-0.0) - (cbMtdParam._m0[13u].y * ((_683.x * 0.5) + (-0.25)));
    float _697 = fract(_688);
    float _699 = fract(_688 + 0.5);
    float _711 = abs((_697 * 2.0) + (-1.0));
    vec4 _728 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((((_697 * _696) + _594) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_694 * _697) + _595) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _730 = _728.x;
    float _736 = ((textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((((_699 * _696) + _594) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_694 * _699) + _595) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0).x - _730) * _711) + _730;
    float _748 = cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x;
    float _751 = (_748 * cbMtdParam._m0[16u].w) + _562;
    float _752 = (_748 * cbMtdParam._m0[17u].x) + _563;
    float _803;
    if (_626)
    {
        float _763 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _769 = (_561 * _546) - (_558 * _549);
        float _772 = (_555 * _549) - (_561 * _543);
        float _775 = (_558 * _543) - (_555 * _546);
        float _801 = ((log2((((float(_621.y) * 0.5) * float(_621.x)) * abs((_516 * _510) - (_515 * _512))) / (sqrt(((_772 * _772) + (_775 * _775)) + (_769 * _769)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_763 * gl_WorldRayDirectionEXT.x, _763 * gl_WorldRayDirectionEXT.y, _763 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _803 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    }
    else
    {
        _803 = 0.0;
    }
    vec4 _805 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_618, _619), _803);
    float _813 = ((_805.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].y;
    float _815 = (-0.0) - (cbMtdParam._m0[13u].y * ((_805.x * 0.5) + (-0.25)));
    vec4 _841 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_697 * _815) + _751) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_813 * _697) + _752) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _843 = _841.x;
    float _844 = _841.y;
    float _845 = _841.z;
    vec4 _846 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_699 * _815) + _751) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_813 * _699) + _752) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _860 = (((_846.x - _843) * _711) + _843) * cbMtdParam._m0[11u].x;
    float _861 = (((_846.y - _844) * _711) + _844) * cbMtdParam._m0[11u].y;
    float _862 = (((_846.z - _845) * _711) + _845) * cbMtdParam._m0[11u].z;
    float _876 = (cbMtdParam._m0[17u].w * _748) + _562;
    float _877 = (cbMtdParam._m0[18u].x * _748) + _563;
    float _883 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _884 = _883 * gl_WorldRayDirectionEXT.x;
    float _885 = _883 * gl_WorldRayDirectionEXT.y;
    float _886 = _883 * gl_WorldRayDirectionEXT.z;
    float _930;
    if (_626)
    {
        float _896 = (_561 * _546) - (_558 * _549);
        float _899 = (_555 * _549) - (_561 * _543);
        float _902 = (_558 * _543) - (_555 * _546);
        float _928 = ((log2((((float(_621.y) * 0.5) * float(_621.x)) * abs((_516 * _510) - (_515 * _512))) / (sqrt(((_899 * _899) + (_902 * _902)) + (_896 * _896)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_884, _885, _886), vec3(_576, _578, _579))));
        _930 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    }
    else
    {
        _930 = 0.0;
    }
    vec4 _932 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_618, _619), _930);
    float _936 = _687 * cbMtdParam._m0[16u].z;
    float _941 = ((_932.y * 0.5) + (-0.25)) * cbMtdParam._m0[16u].y;
    float _943 = (-0.0) - (cbMtdParam._m0[16u].y * ((_932.x * 0.5) + (-0.25)));
    float _944 = fract(_936);
    float _946 = fract(_936 + 0.5);
    float _957 = abs((_944 * 2.0) + (-1.0));
    vec4 _974 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_944 * _943) + _876) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_941 * _944) + _877) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _976 = _974.x;
    float _977 = _974.y;
    float _978 = _974.z;
    vec4 _979 = textureLod(sampler2D(S_Pulse_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_946 * _943) + _876) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_941 * _946) + _877) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1004 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1417 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1005 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
    float _1012 = ((_1005 * _1005) * (3.0 - (_1005 * 2.0))) - cbMtdParam._m0[14u].x;
    float _1035 = inversesqrt(dot(vec3(_576, _578, _579), vec3(_576, _578, _579)));
    float _1036 = _1035 * _576;
    float _1037 = _1035 * _578;
    float _1038 = _1035 * _579;
    float _1050 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1051 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1052 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1053 = (-0.0) - _884;
    float _1054 = (-0.0) - _885;
    float _1055 = (-0.0) - _886;
    float _1061 = float(gl_LaunchIDEXT.x);
    float _1062 = float(gl_LaunchIDEXT.y);
    float _1065 = float(gl_LaunchSizeEXT.x);
    float _1079 = fract(fract(sin(dot(vec2(_1061 / _1065, _1062 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1092 = fract(fract(sin(dot(vec2((_1061 + 128.0) / _1065, (_1062 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _67._m0 = 1u;
    uvec4 _1102 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1103 = _1102.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1103, _1102.w, _1103, vec3(_1050, _1051, _1052), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1169;
    float _1170;
    float _1171;
    if (_67._m0 == 0u)
    {
        float _1124 = g_sceneCB._m0[4u].x - _884;
        float _1125 = g_sceneCB._m0[4u].y - _885;
        float _1126 = g_sceneCB._m0[4u].z - _886;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1134 = dot(vec3(_1036, _1037, _1038), vec3(g_sceneCB._m0[4u].xyz));
        float _1428 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1137 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        float _1138 = dot(vec3(_1036, _1037, _1038), vec3(_1053, _1054, _1055));
        float _1439 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1124 * _1130, _1125 * _1130, _1126 * _1130));
        float _1450 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1153 = (exp2(log2(1.0 - (isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1159 = (0.5 / ((_1137 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0))))) * _1137;
        float _1461 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1161 = (isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0))) * 0.31831014156341552734375;
        _1169 = (_1153 * g_sceneCB._m0[5u].x) * _1161;
        _1170 = (_1153 * g_sceneCB._m0[5u].y) * _1161;
        _1171 = (_1153 * g_sceneCB._m0[5u].z) * _1161;
    }
    else
    {
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    bool _1173 = abs(_1037) < 0.89999997615814208984375;
    float _1175 = float(_1173);
    float _1176 = _1173 ? 0.0 : 1.0;
    float _1179 = (_1175 * _1038) - (_1176 * _1037);
    float _1180 = _1176 * _1036;
    float _1182 = (-0.0) - (_1036 * _1175);
    float _1186 = inversesqrt(dot(vec3(_1179, _1180, _1182), vec3(_1179, _1180, _1182)));
    float _1187 = _1179 * _1186;
    float _1188 = _1180 * _1186;
    float _1189 = _1186 * _1182;
    float _1192 = (_1188 * _1038) - (_1189 * _1037);
    float _1195 = (_1189 * _1036) - (_1187 * _1038);
    float _1198 = (_1187 * _1037) - (_1188 * _1036);
    float _1200;
    float _1208;
    float _1199 = 0.0;
    uint _1201 = 0u;
    float _1205;
    bool _1207;
    for (;;)
    {
        _1205 = (float(_1201) + _1079) * 0.03125;
        _1207 = _1201 == 0u;
        float frontier_phi_45_pred;
        if (_1207)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1329;
            float _1330;
            uint _1332;
            _1329 = 0.0;
            _1330 = 0.5;
            _1332 = _1201;
            float _1209;
            for (;;)
            {
                _1209 = ((_1332 & 1u) != 0u) ? (_1330 + _1329) : _1329;
                uint _1333 = _1332 >> 1u;
                if (_1333 == 0u)
                {
                    break;
                }
                else
                {
                    _1329 = _1209;
                    _1330 *= 0.5;
                    _1332 = _1333;
                }
            }
            frontier_phi_45_pred = _1209;
        }
        _1208 = frontier_phi_45_pred;
        float _1210 = _1208 + _1092;
        float _1214 = sqrt(_1205);
        float _1215 = ((_1210 > 1.0) ? (_1210 + (-1.0)) : _1210) * 6.283185482025146484375;
        float _1218 = cos(_1215) * _1214;
        float _1220 = sin(_1215) * _1214;
        float _1222 = sqrt(1.0 - _1205);
        float _1235 = ((_1222 * _1036) + (_1218 * _1192)) + (_1220 * _1187);
        float _1236 = ((_1222 * _1037) + (_1218 * _1195)) + (_1220 * _1188);
        float _1237 = ((_1222 * _1038) + (_1218 * _1198)) + (_1220 * _1189);
        _66._m0 = 1u;
        uvec4 _1241 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1242 = _1241.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1242, _1241.w, _1242, vec3(_1050, _1051, _1052), 9.9999997473787516355514526367188e-05, vec3(_1235, _1236, _1237), 10000.0, 1);
        float _1248 = dot(vec3(_1036, _1037, _1038), vec3(_1235, _1236, _1237));
        float _1472 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1251 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1200 = ((float(_66._m0 == 0u) * _1251) / (_1251 * 0.3183098733425140380859375)) + _1199;
        uint _1202 = _1201 + 1u;
        if (_1202 == 32u)
        {
            break;
        }
        else
        {
            _1199 = _1200;
            _1201 = _1202;
            continue;
        }
    }
    float _1260 = _1200 * 0.009947183541953563690185546875;
    float _1265 = dot(vec3(_884, _885, _886), vec3(_1036, _1037, _1038)) * 2.0;
    vec4 _1277 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_884 - (_1265 * _1036), _885 - (_1265 * _1037), _886 - (_1265 * _1038)), 4.0);
    float _1282 = dot(vec3(_1053, _1054, _1055), vec3(_1036, _1037, _1038));
    float _1483 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
    float _1291 = (exp2(log2(1.0 - (isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1299 = (_1169 + (((((((((_979.x - _976) * _957) + _976) * cbMtdParam._m0[9u].x) * _1012) - _860) * _736) + _860) * cbMtdParam._m0[15u].w)) + ((_1277.x * _1260) * _1291);
    float _1301 = (_1170 + (((((((((_979.y - _977) * _957) + _977) * cbMtdParam._m0[9u].y) * _1012) - _861) * _736) + _861) * cbMtdParam._m0[15u].w)) + ((_1277.y * _1260) * _1291);
    float _1303 = (_1171 + (((((((((_979.z - _978) * _957) + _978) * cbMtdParam._m0[9u].z) * _1012) - _862) * _736) + _862) * cbMtdParam._m0[15u].w)) + ((_1277.z * _1260) * _1291);
    float _1494 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _1505 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1516 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
    bool _1312 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1323;
    _1323.x = _1312 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0)));
    _1323.y = _1312 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0)));
    _1323.z = _1312 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0)));
    payload._m0 = _1323;
}


