#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _52
{
    vec3 _m0;
};

struct _56
{
    vec2 _m0;
};

struct _59
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _52 payload;
hitAttributeEXT _56 hit;
layout(location = 1) rayPayloadEXT _59 _61;
layout(location = 2) rayPayloadEXT _59 _62;

vec3 _1243;

void main()
{
    float _70 = float(gl_LaunchSizeEXT.y);
    float _100 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _109 = sqrt(((_101 * _101) + (_100 * _100)) + (_102 * _102)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _70)))));
    uvec4 _120 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _121 = _120.y;
    uint _161;
    uint _163;
    uint _164;
    if (_120.x == 0u)
    {
        uint _129 = (_121 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_121 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _155 & 65535u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _156 >> 16u;
        }
        _161 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _120.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uvec4 _235 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + (_171 ? (_227 + 4u) : _227)) >> 2u));
    uint _236 = _235.x;
    float _240 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _241 = float(int(uint(int(_236) >> int(16u))));
    uint _242 = _169 * _163;
    uint _243 = _242 + 12u;
    uint _264;
    uint _265;
    uint _266;
    uint _267;
    if (_174)
    {
        uvec4 _245 = texelFetch(l_geomAttrib_0, int(_243 >> 2u));
        uint _246 = _245.x;
        _264 = _246 & 255u;
        _265 = (_246 >> 8u) & 255u;
        _266 = (_246 >> 16u) & 255u;
        _267 = 16u;
    }
    else
    {
        uint _252 = _243 >> 2u;
        uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
        uint _259 = _258.x;
        _264 = _259 & 65535u;
        _265 = _259 >> 16u;
        _266 = _258.y & 65535u;
        _267 = 20u;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((_267 + _242) >> 2u));
    uint _274 = _273.x;
    uint _286;
    if (_226)
    {
        _286 = _267 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _267 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _267 + 12u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_242 + 4u) + (_171 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _169 * _164;
    uint _302 = _301 + 12u;
    uint _323;
    uint _324;
    uint _325;
    uint _326;
    if (_174)
    {
        uvec4 _304 = texelFetch(l_geomAttrib_0, int(_302 >> 2u));
        uint _305 = _304.x;
        _323 = _305 & 255u;
        _324 = (_305 >> 8u) & 255u;
        _325 = (_305 >> 16u) & 255u;
        _326 = 16u;
    }
    else
    {
        uint _311 = _302 >> 2u;
        uvec2 _317 = uvec2(texelFetch(l_geomAttrib_0, int(_311)).x, texelFetch(l_geomAttrib_0, int(_311 + 1u)).x);
        uint _318 = _317.x;
        _323 = _318 & 65535u;
        _324 = _318 >> 16u;
        _325 = _317.y & 65535u;
        _326 = 20u;
    }
    uvec4 _332 = texelFetch(l_geomAttrib_0, int((_326 + _301) >> 2u));
    uint _333 = _332.x;
    uint _345;
    if (_226)
    {
        _345 = _326 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _326 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _326 + 12u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uvec4 _353 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_171 ? (_345 + 4u) : _345)) >> 2u));
    uint _354 = _353.x;
    float _358 = float(int(uint(int(_354 << 16u) >> int(16u))));
    float _359 = float(int(uint(int(_354) >> int(16u))));
    bool _361 = _120.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _161 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _161 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _163 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _163 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _164 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _164 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _240) * 0.00048828125;
    float _514 = (_300 - _241) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _564 = (((_299 * hit._m0.x) + (_240 * _478)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _565 = (((_300 * hit._m0.x) + (_241 * _478)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _569 = (((float(_200) * _478) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _572 = (((float(_201) * _478) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = (((float(_202) * _478) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _592 = ((((float(_212 & 255u) * _478) + (-127.0)) + (float(_274 & 255u) * hit._m0.x)) + (float(_333 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_212 >> 8u) & 255u) * _478) + (-127.0)) + (float((_274 >> 8u) & 255u) * hit._m0.x)) + (float((_333 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_212 >> 16u) & 255u) * _478) + (-127.0)) + (float((_274 >> 16u) & 255u) * hit._m0.x)) + (float((_333 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float(_212 >> 24u) * _478) + (-127.0)) + (float(_274 >> 24u) * hit._m0.x)) + (float(_333 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((_593 * _579) - (_594 * _578)) * _595;
    float _606 = ((_594 * _576) - (_592 * _579)) * _595;
    float _607 = ((_592 * _578) - (_593 * _576)) * _595;
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    uvec2 _626 = uvec2(textureSize(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, int(0u)));
    bool _631 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _684;
    if (_631)
    {
        float _642 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _648 = (_563 * _548) - (_560 * _551);
        float _651 = (_557 * _551) - (_563 * _545);
        float _654 = (_560 * _545) - (_557 * _548);
        float _681 = ((log2((((float(_626.y) * 0.5) * float(_626.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_651 * _651) + (_654 * _654)) + (_648 * _648)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_642 * gl_WorldRayDirectionEXT.x, _642 * gl_WorldRayDirectionEXT.y, _642 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    }
    else
    {
        _684 = 0.0;
    }
    vec4 _688 = textureLod(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _564) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _565) + cbTextureTilingScale._m0[0u].w), _684);
    float _690 = _688.x;
    float _691 = _688.y;
    float _692 = _688.z;
    uvec2 _708 = uvec2(textureSize(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, int(0u)));
    float _759;
    if (_631)
    {
        float _719 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _725 = (_563 * _548) - (_560 * _551);
        float _728 = (_557 * _551) - (_563 * _545);
        float _731 = (_560 * _545) - (_557 * _548);
        float _757 = ((log2((((float(_708.y) * 0.5) * float(_708.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_728 * _728) + (_731 * _731)) + (_725 * _725)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_719 * gl_WorldRayDirectionEXT.x, _719 * gl_WorldRayDirectionEXT.y, _719 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _759 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    }
    else
    {
        _759 = 0.0;
    }
    vec4 _762 = textureLod(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _564) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _565) + cbTextureTilingScale._m0[1u].w), _759);
    float _766 = _762.z;
    float _769 = (_762.x * 2.0) + (-1.0);
    float _771 = (_762.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_769, _771), vec2(_769, _771));
    float _1331 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _777 = sqrt(1.0 - (isnan(1.0) ? _1331 : (isnan(_1331) ? 1.0 : min(_1331, 1.0))));
    uvec2 _790 = uvec2(textureSize(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, int(0u)));
    float _794 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _795 = _794 * gl_WorldRayDirectionEXT.x;
    float _796 = _794 * gl_WorldRayDirectionEXT.y;
    float _797 = _794 * gl_WorldRayDirectionEXT.z;
    float _841;
    if (_631)
    {
        float _807 = (_563 * _548) - (_560 * _551);
        float _810 = (_557 * _551) - (_563 * _545);
        float _813 = (_560 * _545) - (_557 * _548);
        float _839 = ((log2((((float(_790.y) * 0.5) * float(_790.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_810 * _810) + (_813 * _813)) + (_807 * _807)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_795, _796, _797), vec3(_576, _578, _579))));
        _841 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    }
    else
    {
        _841 = 0.0;
    }
    vec4 _843 = textureLod(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _564) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _565) + cbTextureTilingScale._m0[2u].w), _841);
    float _853 = fma(_777, _576, fma(_771, _592, (_611 * _605) * _769));
    float _856 = fma(_777, _578, fma(_771, _593, (_611 * _606) * _769));
    float _859 = fma(_777, _579, fma(_771, _594, (_611 * _607) * _769));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _878 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _879 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _880 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _881 = (-0.0) - _795;
    float _883 = (-0.0) - _796;
    float _884 = (-0.0) - _797;
    float _890 = float(gl_LaunchIDEXT.x);
    float _891 = float(gl_LaunchIDEXT.y);
    float _894 = float(gl_LaunchSizeEXT.x);
    float _908 = fract(fract(sin(dot(vec2(_890 / _894, _891 / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _921 = fract(fract(sin(dot(vec2((_890 + 128.0) / _894, (_891 + 128.0) / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _922 = 1.0 - cbMtdParam._m0[9u].y;
    float _923 = _922 * _690;
    float _924 = _922 * _691;
    float _925 = _922 * _692;
    float _930 = cbMtdParam._m0[9u].y * (_690 + (-0.039999999105930328369140625));
    float _931 = cbMtdParam._m0[9u].y * (_691 + (-0.039999999105930328369140625));
    float _932 = cbMtdParam._m0[9u].y * (_692 + (-0.039999999105930328369140625));
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    _62._m0 = 1u;
    uvec4 _946 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _947 = _946.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _947, _946.w, _947, vec3(_878, _879, _880), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (_62._m0 == 0u)
    {
        float _968 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_864, _865, _866));
        float _1347 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _971 = isnan(1.0) ? _1347 : (isnan(_1347) ? 1.0 : min(_1347, 1.0));
        float _990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _766) * 0.949999988079071044921875);
        float _991 = _990 * _990;
        float _992 = g_sceneCB._m0[4u].x - _795;
        float _993 = g_sceneCB._m0[4u].y - _796;
        float _994 = g_sceneCB._m0[4u].z - _797;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _999 = _998 * _992;
        float _1000 = _998 * _993;
        float _1001 = _998 * _994;
        float _1002 = dot(vec3(_864, _865, _866), vec3(g_sceneCB._m0[4u].xyz));
        float _1358 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1005 = isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0));
        float _1006 = dot(vec3(_864, _865, _866), vec3(_881, _883, _884));
        float _1369 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1009 = isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0));
        float _1010 = dot(vec3(_864, _865, _866), vec3(_999, _1000, _1001));
        float _1380 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1013 = isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0));
        float _1014 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_999, _1000, _1001));
        float _1391 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _991 * _991;
        float _1022 = ((_1013 * _1013) * (_1018 + (-1.0))) + 1.0;
        float _1031 = exp2(log2(1.0 - (isnan(1.0) ? _1391 : (isnan(_1391) ? 1.0 : min(_1391, 1.0)))) * 5.0);
        float _1042 = 1.0 - _991;
        float _1053 = (0.5 / (((_1009 * ((_1005 * _1042) + _991)) + 9.9999999392252902907785028219223e-09) + (((_1009 * _1042) + _991) * _1005))) * _1005;
        float _1402 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1055 = (isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0))) * (_1018 / ((_1022 * _1022) * 3.141590118408203125));
        _1062 = ((_923 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _971;
        _1063 = ((_924 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _971;
        _1064 = ((_925 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _971;
        _1065 = (((_1031 * (0.959999978542327880859375 - _930)) + _933) * g_sceneCB._m0[5u].x) * _1055;
        _1066 = (((_1031 * (0.959999978542327880859375 - _931)) + _935) * g_sceneCB._m0[5u].y) * _1055;
        _1067 = (((_1031 * (0.959999978542327880859375 - _932)) + _936) * g_sceneCB._m0[5u].z) * _1055;
    }
    else
    {
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    bool _1069 = abs(_865) < 0.89999997615814208984375;
    float _1071 = float(_1069);
    float _1072 = _1069 ? 0.0 : 1.0;
    float _1075 = (_1071 * _866) - (_1072 * _865);
    float _1076 = _1072 * _864;
    float _1078 = (-0.0) - (_864 * _1071);
    float _1082 = inversesqrt(dot(vec3(_1075, _1076, _1078), vec3(_1075, _1076, _1078)));
    float _1083 = _1075 * _1082;
    float _1084 = _1076 * _1082;
    float _1085 = _1082 * _1078;
    float _1088 = (_1084 * _866) - (_1085 * _865);
    float _1091 = (_1085 * _864) - (_1083 * _866);
    float _1094 = (_1083 * _865) - (_1084 * _864);
    float _1096;
    float _1104;
    float _1095 = 0.0;
    uint _1097 = 0u;
    float _1101;
    bool _1103;
    for (;;)
    {
        _1101 = (float(_1097) + _908) * 0.03125;
        _1103 = _1097 == 0u;
        float frontier_phi_45_pred;
        if (_1103)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1248;
            float _1249;
            uint _1251;
            _1248 = 0.0;
            _1249 = 0.5;
            _1251 = _1097;
            float _1105;
            for (;;)
            {
                _1105 = ((_1251 & 1u) != 0u) ? (_1249 + _1248) : _1248;
                uint _1252 = _1251 >> 1u;
                if (_1252 == 0u)
                {
                    break;
                }
                else
                {
                    _1248 = _1105;
                    _1249 *= 0.5;
                    _1251 = _1252;
                }
            }
            frontier_phi_45_pred = _1105;
        }
        _1104 = frontier_phi_45_pred;
        float _1106 = _1104 + _921;
        float _1110 = sqrt(_1101);
        float _1111 = ((_1106 > 1.0) ? (_1106 + (-1.0)) : _1106) * 6.283185482025146484375;
        float _1114 = cos(_1111) * _1110;
        float _1116 = sin(_1111) * _1110;
        float _1118 = sqrt(1.0 - _1101);
        float _1131 = ((_1118 * _864) + (_1114 * _1088)) + (_1116 * _1083);
        float _1132 = ((_1118 * _865) + (_1114 * _1091)) + (_1116 * _1084);
        float _1133 = ((_1118 * _866) + (_1114 * _1094)) + (_1116 * _1085);
        _61._m0 = 1u;
        uvec4 _1137 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1138 = _1137.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1138, _1137.w, _1138, vec3(_878, _879, _880), 9.9999997473787516355514526367188e-05, vec3(_1131, _1132, _1133), 10000.0, 1);
        float _1144 = dot(vec3(_864, _865, _866), vec3(_1131, _1132, _1133));
        float _1413 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1147 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
        _1096 = ((float(_61._m0 == 0u) * _1147) / (_1147 * 0.3183098733425140380859375)) + _1095;
        uint _1098 = _1097 + 1u;
        if (_1098 == 32u)
        {
            break;
        }
        else
        {
            _1095 = _1096;
            _1097 = _1098;
            continue;
        }
    }
    float _1155 = _1096 * 0.009947183541953563690185546875;
    float _1160 = dot(vec3(_795, _796, _797), vec3(_864, _865, _866)) * 2.0;
    vec4 _1174 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_795 - (_1160 * _864), _796 - (_1160 * _865), _797 - (_1160 * _866)), 4.0 - (_766 * 4.0));
    float _1179 = dot(vec3(_881, _883, _884), vec3(_864, _865, _866));
    float _1424 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1189 = exp2(log2(1.0 - (isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0)))) * 5.0);
    vec4 _1201 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_864, _865, _866), 0.0);
    float _1213 = ((_1062 + (_843.x * cbMtdParam._m0[9u].x)) + _1065) + (((_1201.x * _923) + (((_1189 * (0.959999978542327880859375 - _930)) + _933) * _1174.x)) * _1155);
    float _1218 = ((_1063 + (_843.y * cbMtdParam._m0[9u].x)) + _1066) + (((_1201.y * _924) + (((_1189 * (0.959999978542327880859375 - _931)) + _935) * _1174.y)) * _1155);
    float _1223 = ((_1064 + (_843.z * cbMtdParam._m0[9u].x)) + _1067) + (((_1201.z * _925) + (((_1189 * (0.959999978542327880859375 - _932)) + _936) * _1174.z)) * _1155);
    float _1435 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1446 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1457 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    bool _1231 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1242;
    _1242.x = _1231 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0)));
    _1242.y = _1231 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0)));
    _1242.z = _1231 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0)));
    payload._m0 = _1242;
}


