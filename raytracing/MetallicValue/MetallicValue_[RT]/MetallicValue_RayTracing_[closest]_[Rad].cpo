#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1173;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _155 >> 16u;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _157;
        }
        _160 = frontier_phi_3_2_ladder_2;
        _162 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _119.w == 0u;
    bool _173 = _170 || _172;
    uint _174 = _168 * _160;
    uint _175 = _174 + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 16u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 20u;
    }
    uvec4 _210 = texelFetch(l_geomAttrib_0, int((_202 + _174) >> 2u));
    uint _211 = _210.x;
    bool _225 = _169 == 0u;
    uint _226;
    if (_225)
    {
        _226 = _202 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 12u;
        }
        _226 = frontier_phi_9_10_ladder;
    }
    uvec4 _234 = texelFetch(l_geomAttrib_0, int(((_174 + 4u) + (_170 ? (_226 + 4u) : _226)) >> 2u));
    uint _235 = _234.x;
    float _239 = float(int(uint(int(_235 << 16u) >> int(16u))));
    float _240 = float(int(uint(int(_235) >> int(16u))));
    uint _241 = _168 * _162;
    uint _242 = _241 + 12u;
    uint _263;
    uint _264;
    uint _265;
    uint _266;
    if (_173)
    {
        uvec4 _244 = texelFetch(l_geomAttrib_0, int(_242 >> 2u));
        uint _245 = _244.x;
        _263 = _245 & 255u;
        _264 = (_245 >> 8u) & 255u;
        _265 = (_245 >> 16u) & 255u;
        _266 = 16u;
    }
    else
    {
        uint _251 = _242 >> 2u;
        uvec2 _257 = uvec2(texelFetch(l_geomAttrib_0, int(_251)).x, texelFetch(l_geomAttrib_0, int(_251 + 1u)).x);
        uint _258 = _257.x;
        _263 = _258 & 65535u;
        _264 = _258 >> 16u;
        _265 = _257.y & 65535u;
        _266 = 20u;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((_266 + _241) >> 2u));
    uint _273 = _272.x;
    uint _285;
    if (_225)
    {
        _285 = _266 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _266 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _266 + 12u;
        }
        _285 = frontier_phi_16_17_ladder;
    }
    uvec4 _293 = texelFetch(l_geomAttrib_0, int(((_241 + 4u) + (_170 ? (_285 + 4u) : _285)) >> 2u));
    uint _294 = _293.x;
    float _298 = float(int(uint(int(_294 << 16u) >> int(16u))));
    float _299 = float(int(uint(int(_294) >> int(16u))));
    uint _300 = _168 * _163;
    uint _301 = _300 + 12u;
    uint _322;
    uint _323;
    uint _324;
    uint _325;
    if (_173)
    {
        uvec4 _303 = texelFetch(l_geomAttrib_0, int(_301 >> 2u));
        uint _304 = _303.x;
        _322 = _304 & 255u;
        _323 = (_304 >> 8u) & 255u;
        _324 = (_304 >> 16u) & 255u;
        _325 = 16u;
    }
    else
    {
        uint _310 = _301 >> 2u;
        uvec2 _316 = uvec2(texelFetch(l_geomAttrib_0, int(_310)).x, texelFetch(l_geomAttrib_0, int(_310 + 1u)).x);
        uint _317 = _316.x;
        _322 = _317 & 65535u;
        _323 = _317 >> 16u;
        _324 = _316.y & 65535u;
        _325 = 20u;
    }
    uvec4 _331 = texelFetch(l_geomAttrib_0, int((_325 + _300) >> 2u));
    uint _332 = _331.x;
    uint _344;
    if (_225)
    {
        _344 = _325 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _325 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _325 + 12u;
        }
        _344 = frontier_phi_23_24_ladder;
    }
    uvec4 _352 = texelFetch(l_geomAttrib_0, int(((_300 + 4u) + (_170 ? (_344 + 4u) : _344)) >> 2u));
    uint _353 = _352.x;
    float _357 = float(int(uint(int(_353 << 16u) >> int(16u))));
    float _358 = float(int(uint(int(_353) >> int(16u))));
    bool _360 = _119.z == 0u;
    float _396;
    float _397;
    float _398;
    if (_360)
    {
        uint _363 = _160 * 3u;
        uvec3 _372 = uvec3(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_363 + 2u)).x);
        _396 = uintBitsToFloat(_372.x);
        _397 = uintBitsToFloat(_372.y);
        _398 = uintBitsToFloat(_372.z);
    }
    else
    {
        uint _380 = _160 * 2u;
        uvec2 _386 = uvec2(texelFetch(l_geomPositionBuffer, int(_380)).x, texelFetch(l_geomPositionBuffer, int(_380 + 1u)).x);
        uint _387 = _386.x;
        _396 = unpackHalf2x16(_387).x;
        _397 = unpackHalf2x16(_387 >> 16u).x;
        _398 = unpackHalf2x16(_386.y).x;
    }
    float _434;
    float _435;
    float _436;
    if (_360)
    {
        uint _401 = _162 * 3u;
        uvec3 _410 = uvec3(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_401 + 2u)).x);
        _434 = uintBitsToFloat(_410.x);
        _435 = uintBitsToFloat(_410.y);
        _436 = uintBitsToFloat(_410.z);
    }
    else
    {
        uint _418 = _162 * 2u;
        uvec2 _424 = uvec2(texelFetch(l_geomPositionBuffer, int(_418)).x, texelFetch(l_geomPositionBuffer, int(_418 + 1u)).x);
        uint _425 = _424.x;
        _434 = unpackHalf2x16(_425).x;
        _435 = unpackHalf2x16(_425 >> 16u).x;
        _436 = unpackHalf2x16(_424.y).x;
    }
    float _472;
    float _473;
    float _474;
    if (_360)
    {
        uint _439 = _163 * 3u;
        uvec3 _448 = uvec3(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_439 + 2u)).x);
        _472 = uintBitsToFloat(_448.x);
        _473 = uintBitsToFloat(_448.y);
        _474 = uintBitsToFloat(_448.z);
    }
    else
    {
        uint _456 = _163 * 2u;
        uvec2 _462 = uvec2(texelFetch(l_geomPositionBuffer, int(_456)).x, texelFetch(l_geomPositionBuffer, int(_456 + 1u)).x);
        uint _463 = _462.x;
        _472 = unpackHalf2x16(_463).x;
        _473 = unpackHalf2x16(_463 >> 16u).x;
        _474 = unpackHalf2x16(_462.y).x;
    }
    float _477 = (1.0 - hit._m0.x) - hit._m0.y;
    float _511 = (_298 - _239) * 0.00048828125;
    float _513 = (_299 - _240) * 0.00048828125;
    float _516 = (_357 - _239) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _544 = fma(_541, gl_ObjectToWorldEXT[2u].x, fma(_540, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _539));
    float _547 = fma(_541, gl_ObjectToWorldEXT[2u].y, fma(_540, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _539));
    float _550 = fma(_541, gl_ObjectToWorldEXT[2u].z, fma(_540, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _539));
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _556 = fma(_553, gl_ObjectToWorldEXT[2u].x, fma(_552, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _551));
    float _559 = fma(_553, gl_ObjectToWorldEXT[2u].y, fma(_552, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _551));
    float _562 = fma(_553, gl_ObjectToWorldEXT[2u].z, fma(_552, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _551));
    float _563 = (((_298 * hit._m0.x) + (_239 * _477)) + (_357 * hit._m0.y)) * 0.00048828125;
    float _564 = (((_299 * hit._m0.x) + (_240 * _477)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _568 = (((float(_199) * _477) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y);
    float _571 = (((float(_200) * _477) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _574 = (((float(_201) * _477) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = _568 * 0.0078740157186985015869140625;
    float _577 = _571 * 0.0078740157186985015869140625;
    float _578 = _574 * 0.0078740157186985015869140625;
    float _591 = ((((float(_211 & 255u) * _477) + (-127.0)) + (float(_273 & 255u) * hit._m0.x)) + (float(_332 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _592 = ((((float((_211 >> 8u) & 255u) * _477) + (-127.0)) + (float((_273 >> 8u) & 255u) * hit._m0.x)) + (float((_332 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_211 >> 16u) & 255u) * _477) + (-127.0)) + (float((_273 >> 16u) & 255u) * hit._m0.x)) + (float((_332 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float(_211 >> 24u) * _477) + (-127.0)) + (float(_273 >> 24u) * hit._m0.x)) + (float(_332 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((_592 * _578) - (_593 * _577)) * _594;
    float _605 = ((_593 * _575) - (_591 * _578)) * _594;
    float _606 = ((_591 * _577) - (_592 * _575)) * _594;
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    uvec2 _625 = uvec2(textureSize(MetallicValue_snp_0_Texture2D_0, int(0u)));
    bool _630 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _683;
    if (_630)
    {
        float _641 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _647 = (_562 * _547) - (_559 * _550);
        float _650 = (_556 * _550) - (_562 * _544);
        float _653 = (_559 * _544) - (_556 * _547);
        float _680 = ((log2((((float(_625.y) * 0.5) * float(_625.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_650 * _650) + (_653 * _653)) + (_647 * _647)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_641 * gl_WorldRayDirectionEXT.x, _641 * gl_WorldRayDirectionEXT.y, _641 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    }
    else
    {
        _683 = 0.0;
    }
    vec4 _687 = textureLod(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _563) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _564) + cbTextureTilingScale._m0[0u].w), _683);
    float _689 = _687.x;
    float _690 = _687.y;
    float _691 = _687.z;
    uvec2 _707 = uvec2(textureSize(MetallicValue_snp_0_Texture2D_1, int(0u)));
    float _711 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _712 = _711 * gl_WorldRayDirectionEXT.x;
    float _713 = _711 * gl_WorldRayDirectionEXT.y;
    float _714 = _711 * gl_WorldRayDirectionEXT.z;
    float _758;
    if (_630)
    {
        float _724 = (_562 * _547) - (_559 * _550);
        float _727 = (_556 * _550) - (_562 * _544);
        float _730 = (_559 * _544) - (_556 * _547);
        float _756 = ((log2((((float(_707.y) * 0.5) * float(_707.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_727 * _727) + (_730 * _730)) + (_724 * _724)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_712, _713, _714), vec3(_575, _577, _578))));
        _758 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _758 = 0.0;
    }
    vec4 _761 = textureLod(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _563) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _564) + cbTextureTilingScale._m0[1u].w), _758);
    float _765 = _761.z;
    float _768 = (_761.x * 2.0) + (-1.0);
    float _770 = (_761.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_768, _770), vec2(_768, _770));
    float _1259 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _1259 : (isnan(_1259) ? 1.0 : min(_1259, 1.0))));
    float _779 = fma(_776, _575, fma(_770, _591, (_610 * _604) * _768));
    float _782 = fma(_776, _577, fma(_770, _592, (_610 * _605) * _768));
    float _785 = fma(_776, _578, fma(_770, _593, (_610 * _606) * _768));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
    float _797 = _796 * _790;
    float _798 = _796 * _791;
    float _799 = _796 * _792;
    float _811 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _812 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _813 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _814 = (-0.0) - _712;
    float _816 = (-0.0) - _713;
    float _817 = (-0.0) - _714;
    float _823 = float(gl_LaunchIDEXT.x);
    float _824 = float(gl_LaunchIDEXT.y);
    float _827 = float(gl_LaunchSizeEXT.x);
    float _841 = fract(fract(sin(dot(vec2(_823 / _827, _824 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _854 = fract(fract(sin(dot(vec2((_823 + 128.0) / _827, (_824 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _855 = 1.0 - cbMtdParam._m0[9u].x;
    float _856 = _855 * _689;
    float _857 = _855 * _690;
    float _858 = _855 * _691;
    float _863 = cbMtdParam._m0[9u].x * (_689 + (-0.039999999105930328369140625));
    float _864 = cbMtdParam._m0[9u].x * (_690 + (-0.039999999105930328369140625));
    float _865 = cbMtdParam._m0[9u].x * (_691 + (-0.039999999105930328369140625));
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    _61._m0 = 1u;
    uvec4 _879 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _880 = _879.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _880, _879.w, _880, vec3(_811, _812, _813), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    if (_61._m0 == 0u)
    {
        float _901 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_797, _798, _799));
        float _1270 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _904 = isnan(1.0) ? _1270 : (isnan(_1270) ? 1.0 : min(_1270, 1.0));
        float _923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _765) * 0.949999988079071044921875);
        float _924 = _923 * _923;
        float _925 = g_sceneCB._m0[4u].x - _712;
        float _926 = g_sceneCB._m0[4u].y - _713;
        float _927 = g_sceneCB._m0[4u].z - _714;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _932 = _931 * _925;
        float _933 = _931 * _926;
        float _934 = _931 * _927;
        float _935 = dot(vec3(_797, _798, _799), vec3(g_sceneCB._m0[4u].xyz));
        float _1281 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _938 = isnan(1.0) ? _1281 : (isnan(_1281) ? 1.0 : min(_1281, 1.0));
        float _939 = dot(vec3(_797, _798, _799), vec3(_814, _816, _817));
        float _1292 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _942 = isnan(1.0) ? _1292 : (isnan(_1292) ? 1.0 : min(_1292, 1.0));
        float _943 = dot(vec3(_797, _798, _799), vec3(_932, _933, _934));
        float _1303 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _946 = isnan(1.0) ? _1303 : (isnan(_1303) ? 1.0 : min(_1303, 1.0));
        float _947 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_932, _933, _934));
        float _1314 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _924 * _924;
        float _955 = ((_946 * _946) * (_951 + (-1.0))) + 1.0;
        float _964 = exp2(log2(1.0 - (isnan(1.0) ? _1314 : (isnan(_1314) ? 1.0 : min(_1314, 1.0)))) * 5.0);
        float _975 = 1.0 - _924;
        float _986 = (0.5 / (((_942 * ((_938 * _975) + _924)) + 9.9999999392252902907785028219223e-09) + (((_942 * _975) + _924) * _938))) * _938;
        float _1325 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _988 = (isnan(1.0) ? _1325 : (isnan(_1325) ? 1.0 : min(_1325, 1.0))) * (_951 / ((_955 * _955) * 3.141590118408203125));
        _995 = ((_856 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _904;
        _996 = ((_857 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _904;
        _997 = ((_858 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _904;
        _998 = (((_964 * (0.959999978542327880859375 - _863)) + _866) * g_sceneCB._m0[5u].x) * _988;
        _999 = (((_964 * (0.959999978542327880859375 - _864)) + _868) * g_sceneCB._m0[5u].y) * _988;
        _1000 = (((_964 * (0.959999978542327880859375 - _865)) + _869) * g_sceneCB._m0[5u].z) * _988;
    }
    else
    {
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    bool _1002 = abs(_798) < 0.89999997615814208984375;
    float _1004 = float(_1002);
    float _1005 = _1002 ? 0.0 : 1.0;
    float _1008 = (_1004 * _799) - (_1005 * _798);
    float _1009 = _1005 * _797;
    float _1011 = (-0.0) - (_797 * _1004);
    float _1015 = inversesqrt(dot(vec3(_1008, _1009, _1011), vec3(_1008, _1009, _1011)));
    float _1016 = _1008 * _1015;
    float _1017 = _1009 * _1015;
    float _1018 = _1015 * _1011;
    float _1021 = (_1017 * _799) - (_1018 * _798);
    float _1024 = (_1018 * _797) - (_1016 * _799);
    float _1027 = (_1016 * _798) - (_1017 * _797);
    float _1029;
    float _1037;
    float _1028 = 0.0;
    uint _1030 = 0u;
    float _1034;
    bool _1036;
    for (;;)
    {
        _1034 = (float(_1030) + _841) * 0.03125;
        _1036 = _1030 == 0u;
        float frontier_phi_43_pred;
        if (_1036)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1178;
            float _1179;
            uint _1181;
            _1178 = 0.0;
            _1179 = 0.5;
            _1181 = _1030;
            float _1038;
            for (;;)
            {
                _1038 = ((_1181 & 1u) != 0u) ? (_1179 + _1178) : _1178;
                uint _1182 = _1181 >> 1u;
                if (_1182 == 0u)
                {
                    break;
                }
                else
                {
                    _1178 = _1038;
                    _1179 *= 0.5;
                    _1181 = _1182;
                }
            }
            frontier_phi_43_pred = _1038;
        }
        _1037 = frontier_phi_43_pred;
        float _1039 = _1037 + _854;
        float _1043 = sqrt(_1034);
        float _1044 = ((_1039 > 1.0) ? (_1039 + (-1.0)) : _1039) * 6.283185482025146484375;
        float _1047 = cos(_1044) * _1043;
        float _1049 = sin(_1044) * _1043;
        float _1051 = sqrt(1.0 - _1034);
        float _1064 = ((_1051 * _797) + (_1047 * _1021)) + (_1049 * _1016);
        float _1065 = ((_1051 * _798) + (_1047 * _1024)) + (_1049 * _1017);
        float _1066 = ((_1051 * _799) + (_1047 * _1027)) + (_1049 * _1018);
        _60._m0 = 1u;
        uvec4 _1070 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1071 = _1070.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1071, _1070.w, _1071, vec3(_811, _812, _813), 9.9999997473787516355514526367188e-05, vec3(_1064, _1065, _1066), 10000.0, 1);
        float _1077 = dot(vec3(_797, _798, _799), vec3(_1064, _1065, _1066));
        float _1336 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1080 = isnan(1.0) ? _1336 : (isnan(_1336) ? 1.0 : min(_1336, 1.0));
        _1029 = ((float(_60._m0 == 0u) * _1080) / (_1080 * 0.3183098733425140380859375)) + _1028;
        uint _1031 = _1030 + 1u;
        if (_1031 == 32u)
        {
            break;
        }
        else
        {
            _1028 = _1029;
            _1030 = _1031;
            continue;
        }
    }
    float _1088 = _1029 * 0.009947183541953563690185546875;
    float _1093 = dot(vec3(_712, _713, _714), vec3(_797, _798, _799)) * 2.0;
    vec4 _1107 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_712 - (_1093 * _797), _713 - (_1093 * _798), _714 - (_1093 * _799)), 4.0 - (_765 * 4.0));
    float _1112 = dot(vec3(_814, _816, _817), vec3(_797, _798, _799));
    float _1347 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1122 = exp2(log2(1.0 - (isnan(1.0) ? _1347 : (isnan(_1347) ? 1.0 : min(_1347, 1.0)))) * 5.0);
    vec4 _1134 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_797, _798, _799), 0.0);
    float _1145 = (_998 + _995) + (((_1134.x * _856) + (((_1122 * (0.959999978542327880859375 - _863)) + _866) * _1107.x)) * _1088);
    float _1149 = (_999 + _996) + (((_1134.y * _857) + (((_1122 * (0.959999978542327880859375 - _864)) + _868) * _1107.y)) * _1088);
    float _1153 = (_1000 + _997) + (((_1134.z * _858) + (((_1122 * (0.959999978542327880859375 - _865)) + _869) * _1107.z)) * _1088);
    float _1358 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1369 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1380 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    bool _1161 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1172;
    _1172.x = _1161 ? ((_568 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0)));
    _1172.y = _1161 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0)));
    _1172.z = _1161 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0)));
    payload._m0 = _1172;
}


