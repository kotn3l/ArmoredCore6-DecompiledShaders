#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1407;

void main()
{
    float _73 = float(gl_LaunchSizeEXT.y);
    float _103 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _105 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _112 = sqrt(((_104 * _104) + (_103 * _103)) + (_105 * _105)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _73)))));
    uvec4 _123 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _124 = _123.y;
    uint _164;
    uint _166;
    uint _167;
    if (_123.x == 0u)
    {
        uint _132 = (_124 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _141 = uvec3(texelFetch(l_geomIndexBuffer, int(_132)).x, texelFetch(l_geomIndexBuffer, int(_132 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_132 + 2u)).x);
        _164 = _141.x;
        _166 = _141.y;
        _167 = _141.z;
    }
    else
    {
        uint _145 = uint(gl_PrimitiveID) * 6u;
        uint _147 = _145 & 4294967292u;
        uint _150 = (_124 + _147) >> 2u;
        uvec2 _157 = uvec2(texelFetch(l_geomIndexBuffer, int(_150)).x, texelFetch(l_geomIndexBuffer, int(_150 + 1u)).x);
        uint _158 = _157.x;
        uint _159 = _157.y;
        uint _161 = _158 >> 16u;
        uint _162 = _159 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_147 == _145)
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _158 & 65535u;
            frontier_phi_3_2_ladder_2 = _162;
        }
        else
        {
            frontier_phi_3_2_ladder = _162;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _159 >> 16u;
        }
        _164 = frontier_phi_3_2_ladder_1;
        _166 = frontier_phi_3_2_ladder;
        _167 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _171 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _172 = _171.x;
    uint _173 = _171.z;
    bool _174 = _173 != 0u;
    bool _176 = _123.w == 0u;
    bool _177 = _174 || _176;
    uint _178 = _172 * _164;
    uint _179 = _178 + 12u;
    uint _203;
    uint _204;
    uint _205;
    uint _206;
    if (_177)
    {
        uvec4 _182 = texelFetch(l_geomAttrib_0, int(_179 >> 2u));
        uint _183 = _182.x;
        _203 = _183 & 255u;
        _204 = (_183 >> 8u) & 255u;
        _205 = (_183 >> 16u) & 255u;
        _206 = 16u;
    }
    else
    {
        uint _191 = _179 >> 2u;
        uvec2 _197 = uvec2(texelFetch(l_geomAttrib_0, int(_191)).x, texelFetch(l_geomAttrib_0, int(_191 + 1u)).x);
        uint _198 = _197.x;
        _203 = _198 & 65535u;
        _204 = _198 >> 16u;
        _205 = _197.y & 65535u;
        _206 = 20u;
    }
    uvec4 _214 = texelFetch(l_geomAttrib_0, int((_206 + _178) >> 2u));
    uint _215 = _214.x;
    bool _229 = _173 == 0u;
    uint _230;
    if (_229)
    {
        _230 = _206 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_176)
        {
            frontier_phi_9_10_ladder = _206 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _206 + 12u;
        }
        _230 = frontier_phi_9_10_ladder;
    }
    uvec4 _238 = texelFetch(l_geomAttrib_0, int(((_178 + 4u) + (_174 ? (_230 + 4u) : _230)) >> 2u));
    uint _239 = _238.x;
    float _243 = float(int(uint(int(_239 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_239) >> int(16u))));
    uint _245 = _172 * _166;
    uint _246 = _245 + 12u;
    uint _267;
    uint _268;
    uint _269;
    uint _270;
    if (_177)
    {
        uvec4 _248 = texelFetch(l_geomAttrib_0, int(_246 >> 2u));
        uint _249 = _248.x;
        _267 = _249 & 255u;
        _268 = (_249 >> 8u) & 255u;
        _269 = (_249 >> 16u) & 255u;
        _270 = 16u;
    }
    else
    {
        uint _255 = _246 >> 2u;
        uvec2 _261 = uvec2(texelFetch(l_geomAttrib_0, int(_255)).x, texelFetch(l_geomAttrib_0, int(_255 + 1u)).x);
        uint _262 = _261.x;
        _267 = _262 & 65535u;
        _268 = _262 >> 16u;
        _269 = _261.y & 65535u;
        _270 = 20u;
    }
    uvec4 _276 = texelFetch(l_geomAttrib_0, int((_270 + _245) >> 2u));
    uint _277 = _276.x;
    uint _289;
    if (_229)
    {
        _289 = _270 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_176)
        {
            frontier_phi_16_17_ladder = _270 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _270 + 12u;
        }
        _289 = frontier_phi_16_17_ladder;
    }
    uvec4 _297 = texelFetch(l_geomAttrib_0, int(((_245 + 4u) + (_174 ? (_289 + 4u) : _289)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    uint _304 = _172 * _167;
    uint _305 = _304 + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_177)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 16u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 20u;
    }
    uvec4 _335 = texelFetch(l_geomAttrib_0, int((_329 + _304) >> 2u));
    uint _336 = _335.x;
    uint _348;
    if (_229)
    {
        _348 = _329 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_176)
        {
            frontier_phi_23_24_ladder = _329 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 12u;
        }
        _348 = frontier_phi_23_24_ladder;
    }
    uvec4 _356 = texelFetch(l_geomAttrib_0, int(((_304 + 4u) + (_174 ? (_348 + 4u) : _348)) >> 2u));
    uint _357 = _356.x;
    float _361 = float(int(uint(int(_357 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_357) >> int(16u))));
    bool _364 = _123.z == 0u;
    float _400;
    float _401;
    float _402;
    if (_364)
    {
        uint _367 = _164 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _164 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_364)
    {
        uint _405 = _166 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _166 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _476;
    float _477;
    float _478;
    if (_364)
    {
        uint _443 = _167 * 3u;
        uvec3 _452 = uvec3(texelFetch(l_geomPositionBuffer, int(_443)).x, texelFetch(l_geomPositionBuffer, int(_443 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_443 + 2u)).x);
        _476 = uintBitsToFloat(_452.x);
        _477 = uintBitsToFloat(_452.y);
        _478 = uintBitsToFloat(_452.z);
    }
    else
    {
        uint _460 = _167 * 2u;
        uvec2 _466 = uvec2(texelFetch(l_geomPositionBuffer, int(_460)).x, texelFetch(l_geomPositionBuffer, int(_460 + 1u)).x);
        uint _467 = _466.x;
        _476 = unpackHalf2x16(_467).x;
        _477 = unpackHalf2x16(_467 >> 16u).x;
        _478 = unpackHalf2x16(_466.y).x;
    }
    float _481 = (1.0 - hit._m0.x) - hit._m0.y;
    float _515 = (_302 - _243) * 0.00048828125;
    float _517 = (_303 - _244) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_302 * hit._m0.x) + (_243 * _481)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_303 * hit._m0.x) + (_244 * _481)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_203) * _481) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_204) * _481) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_205) * _481) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _595 = ((((float(_215 & 255u) * _481) + (-127.0)) + (float(_277 & 255u) * hit._m0.x)) + (float(_336 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_215 >> 8u) & 255u) * _481) + (-127.0)) + (float((_277 >> 8u) & 255u) * hit._m0.x)) + (float((_336 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_215 >> 16u) & 255u) * _481) + (-127.0)) + (float((_277 >> 16u) & 255u) * hit._m0.x)) + (float((_336 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float(_215 >> 24u) * _481) + (-127.0)) + (float(_277 >> 24u) * hit._m0.x)) + (float(_336 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _608 = ((_596 * _582) - (_597 * _581)) * _598;
    float _609 = ((_597 * _579) - (_595 * _582)) * _598;
    float _610 = ((_595 * _581) - (_596 * _579)) * _598;
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    uvec2 _629 = uvec2(textureSize(OverlayBlend_snp_0_Texture2D_7, int(0u)));
    bool _634 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _687;
    if (_634)
    {
        float _645 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _651 = (_566 * _551) - (_563 * _554);
        float _654 = (_560 * _554) - (_566 * _548);
        float _657 = (_563 * _548) - (_560 * _551);
        float _684 = ((log2((((float(_629.y) * 0.5) * float(_629.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_654 * _654) + (_657 * _657)) + (_651 * _651)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_645 * gl_WorldRayDirectionEXT.x, _645 * gl_WorldRayDirectionEXT.y, _645 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    }
    else
    {
        _687 = 0.0;
    }
    vec4 _691 = textureLod(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _567) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _568) + cbTextureTilingScale._m0[0u].w), _687);
    uvec2 _707 = uvec2(textureSize(OverlayBlend_snp_0_Texture2D_1, int(0u)));
    float _758;
    if (_634)
    {
        float _718 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _724 = (_566 * _551) - (_563 * _554);
        float _727 = (_560 * _554) - (_566 * _548);
        float _730 = (_563 * _548) - (_560 * _551);
        float _756 = ((log2((((float(_707.y) * 0.5) * float(_707.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_727 * _727) + (_730 * _730)) + (_724 * _724)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_718 * gl_WorldRayDirectionEXT.x, _718 * gl_WorldRayDirectionEXT.y, _718 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _758 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _758 = 0.0;
    }
    vec4 _760 = textureLod(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _567) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _568) + cbTextureTilingScale._m0[2u].w), _758);
    float _774 = ((_691.x * 4.55000019073486328125) * _760.x) * cbMtdParam._m0[9u].x;
    float _777 = ((_691.y * 4.55000019073486328125) * _760.y) * cbMtdParam._m0[9u].y;
    float _780 = ((_691.z * 4.55000019073486328125) * _760.z) * cbMtdParam._m0[9u].z;
    uvec2 _792 = uvec2(textureSize(OverlayBlend_snp_0_Texture2D_3, int(0u)));
    float _843;
    if (_634)
    {
        float _803 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _809 = (_566 * _551) - (_563 * _554);
        float _812 = (_560 * _554) - (_566 * _548);
        float _815 = (_563 * _548) - (_560 * _551);
        float _841 = ((log2((((float(_792.y) * 0.5) * float(_792.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_812 * _812) + (_815 * _815)) + (_809 * _809)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_803 * gl_WorldRayDirectionEXT.x, _803 * gl_WorldRayDirectionEXT.y, _803 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _843 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    }
    else
    {
        _843 = 0.0;
    }
    float _853 = cbMtdParam._m0[10u].y + textureLod(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _567) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _568) + cbTextureTilingScale._m0[3u].w), _843).x;
    uvec2 _865 = uvec2(textureSize(OverlayBlend_snp_0_Texture2D_0, int(0u)));
    float _916;
    if (_634)
    {
        float _876 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _882 = (_566 * _551) - (_563 * _554);
        float _885 = (_560 * _554) - (_566 * _548);
        float _888 = (_563 * _548) - (_560 * _551);
        float _914 = ((log2((((float(_865.y) * 0.5) * float(_865.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_885 * _885) + (_888 * _888)) + (_882 * _882)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_876 * gl_WorldRayDirectionEXT.x, _876 * gl_WorldRayDirectionEXT.y, _876 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _916 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    }
    else
    {
        _916 = 0.0;
    }
    vec4 _919 = textureLod(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _567) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _568) + cbTextureTilingScale._m0[1u].w), _916);
    uvec2 _935 = uvec2(textureSize(OverlayBlend_snp_0_Texture2D_6, int(0u)));
    float _939 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _940 = _939 * gl_WorldRayDirectionEXT.x;
    float _941 = _939 * gl_WorldRayDirectionEXT.y;
    float _942 = _939 * gl_WorldRayDirectionEXT.z;
    float _986;
    if (_634)
    {
        float _952 = (_566 * _551) - (_563 * _554);
        float _955 = (_560 * _554) - (_566 * _548);
        float _958 = (_563 * _548) - (_560 * _551);
        float _984 = ((log2((((float(_935.y) * 0.5) * float(_935.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_955 * _955) + (_958 * _958)) + (_952 * _952)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_940, _941, _942), vec3(_579, _581, _582))));
        _986 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    }
    else
    {
        _986 = 0.0;
    }
    vec4 _988 = textureLod(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _567) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _568) + cbTextureTilingScale._m0[4u].w), _986);
    float _995 = (cbMtdParam._m0[10u].x + _988.z) * _919.z;
    float _1004 = (_988.x * 2.0) + (-1.0);
    float _1005 = (_988.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _1514 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1011 = sqrt(1.0 - (isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0))));
    float _1014 = (cbMtdParam._m0[10u].z * ((_919.x * 2.0) + (-1.0))) + _1004;
    float _1015 = (cbMtdParam._m0[10u].z * ((_919.y * 2.0) + (-1.0))) + _1005;
    float _1018 = fma(_1011, _579, fma(_1015, _595, (_614 * _608) * _1014));
    float _1021 = fma(_1011, _581, fma(_1015, _596, (_614 * _609) * _1014));
    float _1024 = fma(_1011, _582, fma(_1015, _597, (_614 * _610) * _1014));
    float _1028 = inversesqrt(dot(vec3(_1018, _1021, _1024), vec3(_1018, _1021, _1024)));
    float _1029 = _1028 * _1018;
    float _1030 = _1028 * _1021;
    float _1031 = _1028 * _1024;
    float _1043 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1044 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1045 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1046 = (-0.0) - _940;
    float _1048 = (-0.0) - _941;
    float _1049 = (-0.0) - _942;
    float _1055 = float(gl_LaunchIDEXT.x);
    float _1056 = float(gl_LaunchIDEXT.y);
    float _1059 = float(gl_LaunchSizeEXT.x);
    float _1073 = fract(fract(sin(dot(vec2(_1055 / _1059, _1056 / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1086 = fract(fract(sin(dot(vec2((_1055 + 128.0) / _1059, (_1056 + 128.0) / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1087 = 1.0 - _853;
    float _1088 = _1087 * _774;
    float _1089 = _1087 * _777;
    float _1090 = _1087 * _780;
    float _1095 = _853 * (_774 + (-0.039999999105930328369140625));
    float _1096 = _853 * (_777 + (-0.039999999105930328369140625));
    float _1097 = _853 * (_780 + (-0.039999999105930328369140625));
    float _1098 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    float _1101 = _1097 + 0.039999999105930328369140625;
    _65._m0 = 1u;
    uvec4 _1111 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1112 = _1111.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1112, _1111.w, _1112, vec3(_1043, _1044, _1045), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (_65._m0 == 0u)
    {
        float _1134 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1029, _1030, _1031));
        float _1525 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1137 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        float _1156 = 1.0 - (sqrt((_995 * 2.0) * (1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w))) * 0.949999988079071044921875);
        float _1157 = _1156 * _1156;
        float _1158 = g_sceneCB._m0[4u].x - _940;
        float _1159 = g_sceneCB._m0[4u].y - _941;
        float _1160 = g_sceneCB._m0[4u].z - _942;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1165 = _1164 * _1158;
        float _1166 = _1164 * _1159;
        float _1167 = _1164 * _1160;
        float _1168 = dot(vec3(_1029, _1030, _1031), vec3(g_sceneCB._m0[4u].xyz));
        float _1536 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1171 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        float _1172 = dot(vec3(_1029, _1030, _1031), vec3(_1046, _1048, _1049));
        float _1547 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1175 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        float _1176 = dot(vec3(_1029, _1030, _1031), vec3(_1165, _1166, _1167));
        float _1558 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1179 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        float _1180 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1165, _1166, _1167));
        float _1569 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1157 * _1157;
        float _1188 = ((_1179 * _1179) * (_1184 + (-1.0))) + 1.0;
        float _1197 = exp2(log2(1.0 - (isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0)))) * 5.0);
        float _1208 = 1.0 - _1157;
        float _1219 = (0.5 / (((_1175 * ((_1171 * _1208) + _1157)) + 9.9999999392252902907785028219223e-09) + (((_1175 * _1208) + _1157) * _1171))) * _1171;
        float _1580 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1221 = (isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0))) * (_1184 / ((_1188 * _1188) * 3.141590118408203125));
        _1228 = ((_1088 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1137;
        _1229 = ((_1089 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1137;
        _1230 = ((_1090 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1137;
        _1231 = (((_1197 * (0.959999978542327880859375 - _1095)) + _1098) * g_sceneCB._m0[5u].x) * _1221;
        _1232 = (((_1197 * (0.959999978542327880859375 - _1096)) + _1100) * g_sceneCB._m0[5u].y) * _1221;
        _1233 = (((_1197 * (0.959999978542327880859375 - _1097)) + _1101) * g_sceneCB._m0[5u].z) * _1221;
    }
    else
    {
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    bool _1235 = abs(_1030) < 0.89999997615814208984375;
    float _1237 = float(_1235);
    float _1238 = _1235 ? 0.0 : 1.0;
    float _1241 = (_1237 * _1031) - (_1238 * _1030);
    float _1242 = _1238 * _1029;
    float _1244 = (-0.0) - (_1029 * _1237);
    float _1248 = inversesqrt(dot(vec3(_1241, _1242, _1244), vec3(_1241, _1242, _1244)));
    float _1249 = _1241 * _1248;
    float _1250 = _1242 * _1248;
    float _1251 = _1248 * _1244;
    float _1254 = (_1250 * _1031) - (_1251 * _1030);
    float _1257 = (_1251 * _1029) - (_1249 * _1031);
    float _1260 = (_1249 * _1030) - (_1250 * _1029);
    float _1262;
    float _1270;
    float _1261 = 0.0;
    uint _1263 = 0u;
    float _1267;
    bool _1269;
    for (;;)
    {
        _1267 = (float(_1263) + _1073) * 0.03125;
        _1269 = _1263 == 0u;
        float frontier_phi_49_pred;
        if (_1269)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1412;
            float _1413;
            uint _1415;
            _1412 = 0.0;
            _1413 = 0.5;
            _1415 = _1263;
            float _1271;
            for (;;)
            {
                _1271 = ((_1415 & 1u) != 0u) ? (_1413 + _1412) : _1412;
                uint _1416 = _1415 >> 1u;
                if (_1416 == 0u)
                {
                    break;
                }
                else
                {
                    _1412 = _1271;
                    _1413 *= 0.5;
                    _1415 = _1416;
                }
            }
            frontier_phi_49_pred = _1271;
        }
        _1270 = frontier_phi_49_pred;
        float _1272 = _1270 + _1086;
        float _1276 = sqrt(_1267);
        float _1277 = ((_1272 > 1.0) ? (_1272 + (-1.0)) : _1272) * 6.283185482025146484375;
        float _1280 = cos(_1277) * _1276;
        float _1282 = sin(_1277) * _1276;
        float _1284 = sqrt(1.0 - _1267);
        float _1297 = ((_1284 * _1029) + (_1280 * _1254)) + (_1282 * _1249);
        float _1298 = ((_1284 * _1030) + (_1280 * _1257)) + (_1282 * _1250);
        float _1299 = ((_1284 * _1031) + (_1280 * _1260)) + (_1282 * _1251);
        _64._m0 = 1u;
        uvec4 _1303 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1304 = _1303.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1304, _1303.w, _1304, vec3(_1043, _1044, _1045), 9.9999997473787516355514526367188e-05, vec3(_1297, _1298, _1299), 10000.0, 1);
        float _1310 = dot(vec3(_1029, _1030, _1031), vec3(_1297, _1298, _1299));
        float _1591 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1313 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1262 = ((float(_64._m0 == 0u) * _1313) / (_1313 * 0.3183098733425140380859375)) + _1261;
        uint _1264 = _1263 + 1u;
        if (_1264 == 32u)
        {
            break;
        }
        else
        {
            _1261 = _1262;
            _1263 = _1264;
            continue;
        }
    }
    float _1321 = _1262 * 0.009947183541953563690185546875;
    float _1326 = dot(vec3(_940, _941, _942), vec3(_1029, _1030, _1031)) * 2.0;
    vec4 _1341 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_940 - (_1326 * _1029), _941 - (_1326 * _1030), _942 - (_1326 * _1031)), 4.0 - (_995 * 8.0));
    float _1346 = dot(vec3(_1046, _1048, _1049), vec3(_1029, _1030, _1031));
    float _1602 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1356 = exp2(log2(1.0 - (isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0)))) * 5.0);
    vec4 _1368 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1029, _1030, _1031), 0.0);
    float _1379 = (_1231 + _1228) + (((_1368.x * _1088) + (((_1356 * (0.959999978542327880859375 - _1095)) + _1098) * _1341.x)) * _1321);
    float _1383 = (_1232 + _1229) + (((_1368.y * _1089) + (((_1356 * (0.959999978542327880859375 - _1096)) + _1100) * _1341.y)) * _1321);
    float _1387 = (_1233 + _1230) + (((_1368.z * _1090) + (((_1356 * (0.959999978542327880859375 - _1097)) + _1101) * _1341.z)) * _1321);
    float _1613 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
    float _1624 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
    float _1635 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    bool _1395 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1406;
    _1406.x = _1395 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0)));
    _1406.y = _1395 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0)));
    _1406.z = _1395 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0)));
    payload._m0 = _1406;
}


