#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1314;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _157 & 65535u;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _158 >> 16u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        _163 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
        _166 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    bool _228 = _172 == 0u;
    uint _229;
    if (_228)
    {
        _229 = _205 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 12u;
        }
        _229 = frontier_phi_9_10_ladder;
    }
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + (_173 ? (_229 + 4u) : _229)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _171 * _165;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_176)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _288;
    if (_228)
    {
        _288 = _269 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _269 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 12u;
        }
        _288 = frontier_phi_16_17_ladder;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int(((_244 + 4u) + (_173 ? (_288 + 4u) : _288)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _171 * _166;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_176)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _347;
    if (_228)
    {
        _347 = _328 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _328 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _328 + 12u;
        }
        _347 = frontier_phi_23_24_ladder;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_303 + 4u) + (_173 ? (_347 + 4u) : _347)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _122.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _163 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _163 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _165 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _165 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _166 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _166 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_202) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_203) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_204) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_214 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_214 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_214 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_214 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    uvec2 _628 = uvec2(textureSize(P_AMSN_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _633 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _686;
    if (_633)
    {
        float _644 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _650 = (_565 * _550) - (_562 * _553);
        float _653 = (_559 * _553) - (_565 * _547);
        float _656 = (_562 * _547) - (_559 * _550);
        float _683 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_653 * _653) + (_656 * _656)) + (_650 * _650)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_644 * gl_WorldRayDirectionEXT.x, _644 * gl_WorldRayDirectionEXT.y, _644 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    }
    else
    {
        _686 = 0.0;
    }
    vec4 _690 = textureLod(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _566) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _567) + cbTextureTilingScale._m0[0u].w), _686);
    float _692 = _690.x;
    float _693 = _690.y;
    float _694 = _690.z;
    uvec2 _710 = uvec2(textureSize(P_AMSN_Emissive_Glow_snp_0_Texture2D_2, int(0u)));
    float _761;
    if (_633)
    {
        float _721 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _727 = (_565 * _550) - (_562 * _553);
        float _730 = (_559 * _553) - (_565 * _547);
        float _733 = (_562 * _547) - (_559 * _550);
        float _759 = ((log2((((float(_710.y) * 0.5) * float(_710.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_730 * _730) + (_733 * _733)) + (_727 * _727)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_721 * gl_WorldRayDirectionEXT.x, _721 * gl_WorldRayDirectionEXT.y, _721 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _761 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    }
    else
    {
        _761 = 0.0;
    }
    float _767 = textureLod(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _566) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _567) + cbTextureTilingScale._m0[2u].w), _761).x + cbMtdParam._m0[9u].x;
    uvec2 _779 = uvec2(textureSize(P_AMSN_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _830;
    if (_633)
    {
        float _790 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _796 = (_565 * _550) - (_562 * _553);
        float _799 = (_559 * _553) - (_565 * _547);
        float _802 = (_562 * _547) - (_559 * _550);
        float _828 = ((log2((((float(_779.y) * 0.5) * float(_779.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_799 * _799) + (_802 * _802)) + (_796 * _796)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_790 * gl_WorldRayDirectionEXT.x, _790 * gl_WorldRayDirectionEXT.y, _790 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _830 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    }
    else
    {
        _830 = 0.0;
    }
    vec4 _833 = textureLod(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _830);
    float _837 = _833.z;
    float _840 = (_833.x * 2.0) + (-1.0);
    float _842 = (_833.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_840, _842), vec2(_840, _842));
    float _1409 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _848 = sqrt(1.0 - (isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0))));
    uvec2 _861 = uvec2(textureSize(P_AMSN_Emissive_Glow_snp_0_Texture2D_3, int(0u)));
    float _865 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _866 = _865 * gl_WorldRayDirectionEXT.x;
    float _867 = _865 * gl_WorldRayDirectionEXT.y;
    float _868 = _865 * gl_WorldRayDirectionEXT.z;
    float _912;
    if (_633)
    {
        float _878 = (_565 * _550) - (_562 * _553);
        float _881 = (_559 * _553) - (_565 * _547);
        float _884 = (_562 * _547) - (_559 * _550);
        float _910 = ((log2((((float(_861.y) * 0.5) * float(_861.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_881 * _881) + (_884 * _884)) + (_878 * _878)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_866, _867, _868), vec3(_578, _580, _581))));
        _912 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    }
    else
    {
        _912 = 0.0;
    }
    vec4 _914 = textureLod(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _566) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _567) + cbTextureTilingScale._m0[3u].w), _912);
    float _924 = fma(_848, _578, fma(_842, _594, (_613 * _607) * _840));
    float _927 = fma(_848, _580, fma(_842, _595, (_613 * _608) * _840));
    float _930 = fma(_848, _581, fma(_842, _596, (_613 * _609) * _840));
    float _934 = inversesqrt(dot(vec3(_924, _927, _930), vec3(_924, _927, _930)));
    float _935 = _934 * _924;
    float _936 = _934 * _927;
    float _937 = _934 * _930;
    float _949 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _950 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _951 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _952 = (-0.0) - _866;
    float _954 = (-0.0) - _867;
    float _955 = (-0.0) - _868;
    float _961 = float(gl_LaunchIDEXT.x);
    float _962 = float(gl_LaunchIDEXT.y);
    float _965 = float(gl_LaunchSizeEXT.x);
    float _979 = fract(fract(sin(dot(vec2(_961 / _965, _962 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _992 = fract(fract(sin(dot(vec2((_961 + 128.0) / _965, (_962 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _993 = 1.0 - _767;
    float _994 = _993 * _692;
    float _995 = _993 * _693;
    float _996 = _993 * _694;
    float _1001 = _767 * (_692 + (-0.039999999105930328369140625));
    float _1002 = _767 * (_693 + (-0.039999999105930328369140625));
    float _1003 = _767 * (_694 + (-0.039999999105930328369140625));
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _1017 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1018 = _1017.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1018, _1017.w, _1018, vec3(_949, _950, _951), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (_64._m0 == 0u)
    {
        float _1039 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_935, _936, _937));
        float _1425 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1042 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        float _1061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _837) * 0.949999988079071044921875);
        float _1062 = _1061 * _1061;
        float _1063 = g_sceneCB._m0[4u].x - _866;
        float _1064 = g_sceneCB._m0[4u].y - _867;
        float _1065 = g_sceneCB._m0[4u].z - _868;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1070 = _1069 * _1063;
        float _1071 = _1069 * _1064;
        float _1072 = _1069 * _1065;
        float _1073 = dot(vec3(_935, _936, _937), vec3(g_sceneCB._m0[4u].xyz));
        float _1436 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1076 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        float _1077 = dot(vec3(_935, _936, _937), vec3(_952, _954, _955));
        float _1447 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1080 = isnan(1.0) ? _1447 : (isnan(_1447) ? 1.0 : min(_1447, 1.0));
        float _1081 = dot(vec3(_935, _936, _937), vec3(_1070, _1071, _1072));
        float _1458 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1084 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        float _1085 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1070, _1071, _1072));
        float _1469 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1062 * _1062;
        float _1093 = ((_1084 * _1084) * (_1089 + (-1.0))) + 1.0;
        float _1102 = exp2(log2(1.0 - (isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0)))) * 5.0);
        float _1113 = 1.0 - _1062;
        float _1124 = (0.5 / (((_1080 * ((_1076 * _1113) + _1062)) + 9.9999999392252902907785028219223e-09) + (((_1080 * _1113) + _1062) * _1076))) * _1076;
        float _1480 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1126 = (isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0))) * (_1089 / ((_1093 * _1093) * 3.141590118408203125));
        _1133 = ((_994 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1042;
        _1134 = ((_995 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1042;
        _1135 = ((_996 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1042;
        _1136 = (((_1102 * (0.959999978542327880859375 - _1001)) + _1004) * g_sceneCB._m0[5u].x) * _1126;
        _1137 = (((_1102 * (0.959999978542327880859375 - _1002)) + _1006) * g_sceneCB._m0[5u].y) * _1126;
        _1138 = (((_1102 * (0.959999978542327880859375 - _1003)) + _1007) * g_sceneCB._m0[5u].z) * _1126;
    }
    else
    {
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    bool _1140 = abs(_936) < 0.89999997615814208984375;
    float _1142 = float(_1140);
    float _1143 = _1140 ? 0.0 : 1.0;
    float _1146 = (_1142 * _937) - (_1143 * _936);
    float _1147 = _1143 * _935;
    float _1149 = (-0.0) - (_935 * _1142);
    float _1153 = inversesqrt(dot(vec3(_1146, _1147, _1149), vec3(_1146, _1147, _1149)));
    float _1154 = _1146 * _1153;
    float _1155 = _1147 * _1153;
    float _1156 = _1153 * _1149;
    float _1159 = (_1155 * _937) - (_1156 * _936);
    float _1162 = (_1156 * _935) - (_1154 * _937);
    float _1165 = (_1154 * _936) - (_1155 * _935);
    float _1167;
    float _1175;
    float _1166 = 0.0;
    uint _1168 = 0u;
    float _1172;
    bool _1174;
    for (;;)
    {
        _1172 = (float(_1168) + _979) * 0.03125;
        _1174 = _1168 == 0u;
        float frontier_phi_47_pred;
        if (_1174)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1319;
            float _1320;
            uint _1322;
            _1319 = 0.0;
            _1320 = 0.5;
            _1322 = _1168;
            float _1176;
            for (;;)
            {
                _1176 = ((_1322 & 1u) != 0u) ? (_1320 + _1319) : _1319;
                uint _1323 = _1322 >> 1u;
                if (_1323 == 0u)
                {
                    break;
                }
                else
                {
                    _1319 = _1176;
                    _1320 *= 0.5;
                    _1322 = _1323;
                }
            }
            frontier_phi_47_pred = _1176;
        }
        _1175 = frontier_phi_47_pred;
        float _1177 = _1175 + _992;
        float _1181 = sqrt(_1172);
        float _1182 = ((_1177 > 1.0) ? (_1177 + (-1.0)) : _1177) * 6.283185482025146484375;
        float _1185 = cos(_1182) * _1181;
        float _1187 = sin(_1182) * _1181;
        float _1189 = sqrt(1.0 - _1172);
        float _1202 = ((_1189 * _935) + (_1185 * _1159)) + (_1187 * _1154);
        float _1203 = ((_1189 * _936) + (_1185 * _1162)) + (_1187 * _1155);
        float _1204 = ((_1189 * _937) + (_1185 * _1165)) + (_1187 * _1156);
        _63._m0 = 1u;
        uvec4 _1208 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1209 = _1208.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1209, _1208.w, _1209, vec3(_949, _950, _951), 9.9999997473787516355514526367188e-05, vec3(_1202, _1203, _1204), 10000.0, 1);
        float _1215 = dot(vec3(_935, _936, _937), vec3(_1202, _1203, _1204));
        float _1491 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1218 = isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0));
        _1167 = ((float(_63._m0 == 0u) * _1218) / (_1218 * 0.3183098733425140380859375)) + _1166;
        uint _1169 = _1168 + 1u;
        if (_1169 == 32u)
        {
            break;
        }
        else
        {
            _1166 = _1167;
            _1168 = _1169;
            continue;
        }
    }
    float _1226 = _1167 * 0.009947183541953563690185546875;
    float _1231 = dot(vec3(_866, _867, _868), vec3(_935, _936, _937)) * 2.0;
    vec4 _1245 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_866 - (_1231 * _935), _867 - (_1231 * _936), _868 - (_1231 * _937)), 4.0 - (_837 * 4.0));
    float _1250 = dot(vec3(_952, _954, _955), vec3(_935, _936, _937));
    float _1502 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _1260 = exp2(log2(1.0 - (isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0)))) * 5.0);
    vec4 _1272 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_935, _936, _937), 0.0);
    float _1284 = ((_1133 + (_914.x * cbMtdParam._m0[9u].y)) + _1136) + (((_1272.x * _994) + (((_1260 * (0.959999978542327880859375 - _1001)) + _1004) * _1245.x)) * _1226);
    float _1289 = ((_1134 + (_914.y * cbMtdParam._m0[9u].y)) + _1137) + (((_1272.y * _995) + (((_1260 * (0.959999978542327880859375 - _1002)) + _1006) * _1245.y)) * _1226);
    float _1294 = ((_1135 + (_914.z * cbMtdParam._m0[9u].y)) + _1138) + (((_1272.z * _996) + (((_1260 * (0.959999978542327880859375 - _1003)) + _1007) * _1245.z)) * _1226);
    float _1513 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
    float _1524 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1535 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    bool _1302 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1313;
    _1313.x = _1302 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0)));
    _1313.y = _1302 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0)));
    _1313.z = _1302 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0)));
    payload._m0 = _1313;
}


