#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _46
{
    vec3 _m0;
};

struct _50
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _46 payload;
hitAttributeEXT _50 hit;

void main()
{
    vec3 _56 = payload._m0;
    float _97 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _117 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _118 = _117.y;
    uint _157;
    uint _159;
    uint _160;
    if (_117.x == 0u)
    {
        uint _125 = (_118 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_118 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _151 & 65535u;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _155;
        }
        else
        {
            frontier_phi_3_2_ladder = _154;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _152 >> 16u;
        }
        _157 = frontier_phi_3_2_ladder;
        _159 = frontier_phi_3_2_ladder_1;
        _160 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    uint _168 = _117.w;
    bool _170 = _167 || (_168 == 0u);
    uint _172 = (_165 * _157) + 12u;
    uint _196;
    uint _197;
    uint _198;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
    }
    uint _202 = _164.y;
    bool _203 = _166 == 0u;
    uint _206 = _203 ? 4u : ((_168 != 0u) ? 12u : 8u);
    uvec4 _215 = texelFetch(l_geomAttrib_1, int((((_202 * _157) + 4u) + (_167 ? (_206 + 4u) : _206)) >> 2u));
    uint _216 = _215.x;
    float _220 = float(int(uint(int(_216 << 16u) >> int(16u))));
    float _221 = float(int(uint(int(_216) >> int(16u))));
    uint _223 = (_165 * _159) + 12u;
    uint _245;
    uint _246;
    uint _247;
    if (_170)
    {
        uvec4 _226 = texelFetch(l_geomAttrib_0, int(_223 >> 2u));
        uint _227 = _226.x;
        _245 = _227 & 255u;
        _246 = (_227 >> 8u) & 255u;
        _247 = (_227 >> 16u) & 255u;
    }
    else
    {
        uint _233 = _223 >> 2u;
        uvec2 _239 = uvec2(texelFetch(l_geomAttrib_0, int(_233)).x, texelFetch(l_geomAttrib_0, int(_233 + 1u)).x);
        uint _240 = _239.x;
        _245 = _240 & 65535u;
        _246 = _240 >> 16u;
        _247 = _239.y & 65535u;
    }
    uint _253 = _203 ? 4u : ((_168 != 0u) ? 12u : 8u);
    uvec4 _260 = texelFetch(l_geomAttrib_1, int((((_202 * _159) + 4u) + (_167 ? (_253 + 4u) : _253)) >> 2u));
    uint _261 = _260.x;
    float _265 = float(int(uint(int(_261 << 16u) >> int(16u))));
    float _266 = float(int(uint(int(_261) >> int(16u))));
    uint _268 = (_165 * _160) + 12u;
    uint _290;
    uint _291;
    uint _292;
    if (_170)
    {
        uvec4 _271 = texelFetch(l_geomAttrib_0, int(_268 >> 2u));
        uint _272 = _271.x;
        _290 = _272 & 255u;
        _291 = (_272 >> 8u) & 255u;
        _292 = (_272 >> 16u) & 255u;
    }
    else
    {
        uint _278 = _268 >> 2u;
        uvec2 _284 = uvec2(texelFetch(l_geomAttrib_0, int(_278)).x, texelFetch(l_geomAttrib_0, int(_278 + 1u)).x);
        uint _285 = _284.x;
        _290 = _285 & 65535u;
        _291 = _285 >> 16u;
        _292 = _284.y & 65535u;
    }
    uint _298 = _203 ? 4u : ((_168 != 0u) ? 12u : 8u);
    uvec4 _305 = texelFetch(l_geomAttrib_1, int((((_202 * _160) + 4u) + (_167 ? (_298 + 4u) : _298)) >> 2u));
    uint _306 = _305.x;
    float _310 = float(int(uint(int(_306 << 16u) >> int(16u))));
    float _311 = float(int(uint(int(_306) >> int(16u))));
    bool _313 = _117.z == 0u;
    float _349;
    float _350;
    float _351;
    if (_313)
    {
        uint _316 = _157 * 3u;
        uvec3 _325 = uvec3(texelFetch(l_geomPositionBuffer, int(_316)).x, texelFetch(l_geomPositionBuffer, int(_316 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_316 + 2u)).x);
        _349 = uintBitsToFloat(_325.x);
        _350 = uintBitsToFloat(_325.y);
        _351 = uintBitsToFloat(_325.z);
    }
    else
    {
        uint _333 = _157 * 2u;
        uvec2 _339 = uvec2(texelFetch(l_geomPositionBuffer, int(_333)).x, texelFetch(l_geomPositionBuffer, int(_333 + 1u)).x);
        uint _340 = _339.x;
        _349 = unpackHalf2x16(_340).x;
        _350 = unpackHalf2x16(_340 >> 16u).x;
        _351 = unpackHalf2x16(_339.y).x;
    }
    float _387;
    float _388;
    float _389;
    if (_313)
    {
        uint _354 = _159 * 3u;
        uvec3 _363 = uvec3(texelFetch(l_geomPositionBuffer, int(_354)).x, texelFetch(l_geomPositionBuffer, int(_354 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_354 + 2u)).x);
        _387 = uintBitsToFloat(_363.x);
        _388 = uintBitsToFloat(_363.y);
        _389 = uintBitsToFloat(_363.z);
    }
    else
    {
        uint _371 = _159 * 2u;
        uvec2 _377 = uvec2(texelFetch(l_geomPositionBuffer, int(_371)).x, texelFetch(l_geomPositionBuffer, int(_371 + 1u)).x);
        uint _378 = _377.x;
        _387 = unpackHalf2x16(_378).x;
        _388 = unpackHalf2x16(_378 >> 16u).x;
        _389 = unpackHalf2x16(_377.y).x;
    }
    float _425;
    float _426;
    float _427;
    if (_313)
    {
        uint _392 = _160 * 3u;
        uvec3 _401 = uvec3(texelFetch(l_geomPositionBuffer, int(_392)).x, texelFetch(l_geomPositionBuffer, int(_392 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_392 + 2u)).x);
        _425 = uintBitsToFloat(_401.x);
        _426 = uintBitsToFloat(_401.y);
        _427 = uintBitsToFloat(_401.z);
    }
    else
    {
        uint _409 = _160 * 2u;
        uvec2 _415 = uvec2(texelFetch(l_geomPositionBuffer, int(_409)).x, texelFetch(l_geomPositionBuffer, int(_409 + 1u)).x);
        uint _416 = _415.x;
        _425 = unpackHalf2x16(_416).x;
        _426 = unpackHalf2x16(_416 >> 16u).x;
        _427 = unpackHalf2x16(_415.y).x;
    }
    float _430 = (1.0 - hit._m0.x) - hit._m0.y;
    float _462 = _387 - _349;
    float _463 = _388 - _350;
    float _464 = _389 - _351;
    float _467 = fma(_464, gl_ObjectToWorldEXT[2u].x, fma(_463, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _462));
    float _470 = fma(_464, gl_ObjectToWorldEXT[2u].y, fma(_463, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _462));
    float _473 = fma(_464, gl_ObjectToWorldEXT[2u].z, fma(_463, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _462));
    float _474 = _425 - _349;
    float _475 = _426 - _350;
    float _476 = _427 - _351;
    float _479 = fma(_476, gl_ObjectToWorldEXT[2u].x, fma(_475, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _474));
    float _482 = fma(_476, gl_ObjectToWorldEXT[2u].y, fma(_475, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _474));
    float _485 = fma(_476, gl_ObjectToWorldEXT[2u].z, fma(_475, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _474));
    uvec2 _509 = uvec2(textureSize(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0, int(0u)));
    float _596;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _552 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _558 = (_485 * _470) - (_482 * _473);
        float _561 = (_479 * _473) - (_485 * _467);
        float _564 = (_482 * _467) - (_479 * _470);
        float _591 = log2(abs(sqrt(((_98 * _98) + (_97 * _97)) + (_99 * _99)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_552 * gl_WorldRayDirectionEXT.x, _552 * gl_WorldRayDirectionEXT.y, _552 * gl_WorldRayDirectionEXT.z), vec3(((((float(_196) * _430) + (-127.0)) + (float(_245) * hit._m0.x)) + (float(_290) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_197) * _430) + (-127.0)) + (float(_246) * hit._m0.x)) + (float(_291) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_198) * _430) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _593 = ((log2((((float(_509.y) * 0.5) * float(_509.x)) * abs((((_311 - _221) * (_265 - _220)) - ((_310 - _220) * (_266 - _221))) * 2.384185791015625e-07)) / (sqrt(((_561 * _561) + (_564 * _564)) + (_558 * _558)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _591;
        _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    }
    else
    {
        _596 = 0.0;
    }
    if (textureLod(sampler2D(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + ((((_265 * hit._m0.x) + (_220 * _430)) + (_310 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + ((((_266 * hit._m0.x) + (_221 * _430)) + (_311 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _596).w < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _56;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _56;
        return;
    }
}


