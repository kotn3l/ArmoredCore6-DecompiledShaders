#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_PA_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D S_PA_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D S_PA_Emissive_Glow_Addition_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1170;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _167;
    uint _169;
    uint _170;
    if (_126.x == 0u)
    {
        uint _135 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_127 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _161 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _162 >> 16u;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _167 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder_1;
        _170 = frontier_phi_3_2_ladder;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _174.z;
    bool _177 = _176 != 0u;
    bool _179 = _126.w == 0u;
    bool _180 = _177 || _179;
    uint _182 = (_175 * _167) + 12u;
    uint _206;
    uint _207;
    uint _208;
    uint _209;
    if (_180)
    {
        uvec4 _185 = texelFetch(l_geomAttrib_0, int(_182 >> 2u));
        uint _186 = _185.x;
        _206 = _186 & 255u;
        _207 = (_186 >> 8u) & 255u;
        _208 = (_186 >> 16u) & 255u;
        _209 = 20u;
    }
    else
    {
        uint _194 = _182 >> 2u;
        uvec2 _200 = uvec2(texelFetch(l_geomAttrib_0, int(_194)).x, texelFetch(l_geomAttrib_0, int(_194 + 1u)).x);
        uint _201 = _200.x;
        _206 = _201 & 65535u;
        _207 = _201 >> 16u;
        _208 = _200.y & 65535u;
        _209 = 24u;
    }
    bool _215 = _176 == 0u;
    uint _216;
    if (_215)
    {
        _216 = _209;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_179)
        {
            frontier_phi_9_10_ladder = _209 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _209 + 8u;
        }
        _216 = frontier_phi_9_10_ladder;
    }
    uint _221 = _177 ? (_216 + 4u) : _216;
    uint _222 = _175 * _167;
    uvec4 _233 = texelFetch(l_geomAttrib_0, int(((_222 + 4u) + _221) >> 2u));
    uint _234 = _233.x;
    float _238 = float(int(uint(int(_234 << 16u) >> int(16u))));
    float _239 = float(int(uint(int(_234) >> int(16u))));
    uint _241 = (_175 * _169) + 12u;
    uint _262;
    uint _263;
    uint _264;
    uint _265;
    if (_180)
    {
        uvec4 _243 = texelFetch(l_geomAttrib_0, int(_241 >> 2u));
        uint _244 = _243.x;
        _262 = _244 & 255u;
        _263 = (_244 >> 8u) & 255u;
        _264 = (_244 >> 16u) & 255u;
        _265 = 20u;
    }
    else
    {
        uint _250 = _241 >> 2u;
        uvec2 _256 = uvec2(texelFetch(l_geomAttrib_0, int(_250)).x, texelFetch(l_geomAttrib_0, int(_250 + 1u)).x);
        uint _257 = _256.x;
        _262 = _257 & 65535u;
        _263 = _257 >> 16u;
        _264 = _256.y & 65535u;
        _265 = 24u;
    }
    uint _269;
    if (_215)
    {
        _269 = _265;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_179)
        {
            frontier_phi_16_17_ladder = _265 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _265 + 8u;
        }
        _269 = frontier_phi_16_17_ladder;
    }
    uint _273 = _177 ? (_269 + 4u) : _269;
    uint _274 = _175 * _169;
    uvec4 _284 = texelFetch(l_geomAttrib_0, int(((_274 + 4u) + _273) >> 2u));
    uint _285 = _284.x;
    float _289 = float(int(uint(int(_285 << 16u) >> int(16u))));
    float _290 = float(int(uint(int(_285) >> int(16u))));
    uint _292 = (_175 * _170) + 12u;
    uint _313;
    uint _314;
    uint _315;
    uint _316;
    if (_180)
    {
        uvec4 _294 = texelFetch(l_geomAttrib_0, int(_292 >> 2u));
        uint _295 = _294.x;
        _313 = _295 & 255u;
        _314 = (_295 >> 8u) & 255u;
        _315 = (_295 >> 16u) & 255u;
        _316 = 20u;
    }
    else
    {
        uint _301 = _292 >> 2u;
        uvec2 _307 = uvec2(texelFetch(l_geomAttrib_0, int(_301)).x, texelFetch(l_geomAttrib_0, int(_301 + 1u)).x);
        uint _308 = _307.x;
        _313 = _308 & 65535u;
        _314 = _308 >> 16u;
        _315 = _307.y & 65535u;
        _316 = 24u;
    }
    uint _320;
    if (_215)
    {
        _320 = _316;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_179)
        {
            frontier_phi_23_24_ladder = _316 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _316 + 8u;
        }
        _320 = frontier_phi_23_24_ladder;
    }
    uint _324 = _177 ? (_320 + 4u) : _320;
    uint _325 = _175 * _170;
    uvec4 _335 = texelFetch(l_geomAttrib_0, int(((_325 + 4u) + _324) >> 2u));
    uint _336 = _335.x;
    float _340 = float(int(uint(int(_336 << 16u) >> int(16u))));
    float _341 = float(int(uint(int(_336) >> int(16u))));
    bool _343 = _126.z == 0u;
    float _379;
    float _380;
    float _381;
    if (_343)
    {
        uint _346 = _167 * 3u;
        uvec3 _355 = uvec3(texelFetch(l_geomPositionBuffer, int(_346)).x, texelFetch(l_geomPositionBuffer, int(_346 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_346 + 2u)).x);
        _379 = uintBitsToFloat(_355.x);
        _380 = uintBitsToFloat(_355.y);
        _381 = uintBitsToFloat(_355.z);
    }
    else
    {
        uint _363 = _167 * 2u;
        uvec2 _369 = uvec2(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x);
        uint _370 = _369.x;
        _379 = unpackHalf2x16(_370).x;
        _380 = unpackHalf2x16(_370 >> 16u).x;
        _381 = unpackHalf2x16(_369.y).x;
    }
    float _417;
    float _418;
    float _419;
    if (_343)
    {
        uint _384 = _169 * 3u;
        uvec3 _393 = uvec3(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_384 + 2u)).x);
        _417 = uintBitsToFloat(_393.x);
        _418 = uintBitsToFloat(_393.y);
        _419 = uintBitsToFloat(_393.z);
    }
    else
    {
        uint _401 = _169 * 2u;
        uvec2 _407 = uvec2(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x);
        uint _408 = _407.x;
        _417 = unpackHalf2x16(_408).x;
        _418 = unpackHalf2x16(_408 >> 16u).x;
        _419 = unpackHalf2x16(_407.y).x;
    }
    float _455;
    float _456;
    float _457;
    if (_343)
    {
        uint _422 = _170 * 3u;
        uvec3 _431 = uvec3(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_422 + 2u)).x);
        _455 = uintBitsToFloat(_431.x);
        _456 = uintBitsToFloat(_431.y);
        _457 = uintBitsToFloat(_431.z);
    }
    else
    {
        uint _439 = _170 * 2u;
        uvec2 _445 = uvec2(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x);
        uint _446 = _445.x;
        _455 = unpackHalf2x16(_446).x;
        _456 = unpackHalf2x16(_446 >> 16u).x;
        _457 = unpackHalf2x16(_445.y).x;
    }
    float _460 = (1.0 - hit._m0.x) - hit._m0.y;
    float _475 = (((float(texelFetch(l_geomAttrib_0, int((_273 + _274) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_221 + _222) >> 2u)).x >> 24u) * _460)) + (float(texelFetch(l_geomAttrib_0, int((_324 + _325) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _489 = (_289 - _238) * 0.00048828125;
    float _491 = (_290 - _239) * 0.00048828125;
    float _494 = (_340 - _238) * 0.00048828125;
    float _495 = (_341 - _239) * 0.00048828125;
    float _517 = _417 - _379;
    float _518 = _418 - _380;
    float _519 = _419 - _381;
    float _522 = fma(_519, gl_ObjectToWorldEXT[2u].x, fma(_518, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _517));
    float _525 = fma(_519, gl_ObjectToWorldEXT[2u].y, fma(_518, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _517));
    float _528 = fma(_519, gl_ObjectToWorldEXT[2u].z, fma(_518, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _517));
    float _529 = _455 - _379;
    float _530 = _456 - _380;
    float _531 = _457 - _381;
    float _534 = fma(_531, gl_ObjectToWorldEXT[2u].x, fma(_530, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _529));
    float _537 = fma(_531, gl_ObjectToWorldEXT[2u].y, fma(_530, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _529));
    float _540 = fma(_531, gl_ObjectToWorldEXT[2u].z, fma(_530, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _529));
    float _541 = (((_289 * hit._m0.x) + (_238 * _460)) + (_340 * hit._m0.y)) * 0.00048828125;
    float _542 = (((_290 * hit._m0.x) + (_239 * _460)) + (_341 * hit._m0.y)) * 0.00048828125;
    float _546 = (((float(_206) * _460) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_313) * hit._m0.y);
    float _549 = (((float(_207) * _460) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_314) * hit._m0.y);
    float _552 = (((float(_208) * _460) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_315) * hit._m0.y);
    float _553 = _546 * 0.0078740157186985015869140625;
    float _555 = _549 * 0.0078740157186985015869140625;
    float _556 = _552 * 0.0078740157186985015869140625;
    float _572 = inversesqrt(dot(vec3(_553, _555, _556), vec3(_553, _555, _556)));
    float _573 = _572 * _553;
    float _574 = _572 * _555;
    float _575 = _572 * _556;
    float _576 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_573, _574, _575, 0.0));
    float _581 = _576 - cbMtdParam._m0[13u].x;
    float _1248 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _588 = exp2(log2(1.0 - (isnan(1.0) ? _1248 : (isnan(_1248) ? 1.0 : min(_1248, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _597 = _576 - cbMtdParam._m0[14u].x;
    float _1264 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _603 = exp2(log2(1.0 - (isnan(1.0) ? _1264 : (isnan(_1264) ? 1.0 : min(_1264, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].w : (isnan(cbMtdParam._m0[13u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].w, 0.001000000047497451305389404296875))));
    uvec2 _627 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_2, int(0u)));
    bool _632 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _684;
    if (_632)
    {
        float _643 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _649 = (_540 * _525) - (_537 * _528);
        float _652 = (_534 * _528) - (_540 * _522);
        float _655 = (_537 * _522) - (_534 * _525);
        float _682 = ((log2((((float(_627.y) * 0.5) * float(_627.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_652 * _652) + (_655 * _655)) + (_649 * _649)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_643 * gl_WorldRayDirectionEXT.x, _643 * gl_WorldRayDirectionEXT.y, _643 * gl_WorldRayDirectionEXT.z), vec3(_553, _555, _556))));
        _684 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    }
    else
    {
        _684 = 0.0;
    }
    vec4 _688 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _684);
    uvec2 _722 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_1, int(0u)));
    float _773;
    if (_632)
    {
        float _733 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _739 = (_540 * _525) - (_537 * _528);
        float _742 = (_534 * _528) - (_540 * _522);
        float _745 = (_537 * _522) - (_534 * _525);
        float _771 = ((log2((((float(_722.y) * 0.5) * float(_722.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_742 * _742) + (_745 * _745)) + (_739 * _739)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_733 * gl_WorldRayDirectionEXT.x, _733 * gl_WorldRayDirectionEXT.y, _733 * gl_WorldRayDirectionEXT.z), vec3(_553, _555, _556))));
        _773 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    }
    else
    {
        _773 = 0.0;
    }
    vec4 _775 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _773);
    uvec2 _808 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_3, int(0u)));
    float _812 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _813 = _812 * gl_WorldRayDirectionEXT.x;
    float _814 = _812 * gl_WorldRayDirectionEXT.y;
    float _815 = _812 * gl_WorldRayDirectionEXT.z;
    float _859;
    if (_632)
    {
        float _825 = (_540 * _525) - (_537 * _528);
        float _828 = (_534 * _528) - (_540 * _522);
        float _831 = (_537 * _522) - (_534 * _525);
        float _857 = ((log2((((float(_808.y) * 0.5) * float(_808.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_828 * _828) + (_831 * _831)) + (_825 * _825)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_813, _814, _815), vec3(_553, _555, _556))));
        _859 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    }
    else
    {
        _859 = 0.0;
    }
    vec4 _861 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _859);
    float _886 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _887 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _888 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _889 = (-0.0) - _813;
    float _891 = (-0.0) - _814;
    float _892 = (-0.0) - _815;
    float _898 = float(gl_LaunchIDEXT.x);
    float _899 = float(gl_LaunchIDEXT.y);
    float _902 = float(gl_LaunchSizeEXT.x);
    float _916 = fract(fract(sin(dot(vec2(_898 / _902, _899 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _929 = fract(fract(sin(dot(vec2((_898 + 128.0) / _902, (_899 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _939 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _940 = _939.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _940, _939.w, _940, vec3(_886, _887, _888), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1006;
    float _1007;
    float _1008;
    if (_64._m0 == 0u)
    {
        float _961 = g_sceneCB._m0[4u].x - _813;
        float _962 = g_sceneCB._m0[4u].y - _814;
        float _963 = g_sceneCB._m0[4u].z - _815;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _971 = dot(vec3(_573, _574, _575), vec3(g_sceneCB._m0[4u].xyz));
        float _1295 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _974 = isnan(1.0) ? _1295 : (isnan(_1295) ? 1.0 : min(_1295, 1.0));
        float _975 = dot(vec3(_573, _574, _575), vec3(_889, _891, _892));
        float _1306 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_961 * _967, _962 * _967, _963 * _967));
        float _1317 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _990 = (exp2(log2(1.0 - (isnan(1.0) ? _1317 : (isnan(_1317) ? 1.0 : min(_1317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _996 = (0.5 / ((_974 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1306 : (isnan(_1306) ? 1.0 : min(_1306, 1.0))))) * _974;
        float _1328 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _998 = (isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0))) * 0.31831014156341552734375;
        _1006 = (_990 * g_sceneCB._m0[5u].x) * _998;
        _1007 = (_990 * g_sceneCB._m0[5u].y) * _998;
        _1008 = (_990 * g_sceneCB._m0[5u].z) * _998;
    }
    else
    {
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    bool _1010 = abs(_574) < 0.89999997615814208984375;
    float _1012 = float(_1010);
    float _1013 = _1010 ? 0.0 : 1.0;
    float _1016 = (_1012 * _575) - (_1013 * _574);
    float _1017 = _1013 * _573;
    float _1019 = (-0.0) - (_573 * _1012);
    float _1023 = inversesqrt(dot(vec3(_1016, _1017, _1019), vec3(_1016, _1017, _1019)));
    float _1024 = _1016 * _1023;
    float _1025 = _1017 * _1023;
    float _1026 = _1023 * _1019;
    float _1029 = (_1025 * _575) - (_1026 * _574);
    float _1032 = (_1026 * _573) - (_1024 * _575);
    float _1035 = (_1024 * _574) - (_1025 * _573);
    float _1037;
    float _1045;
    float _1036 = 0.0;
    uint _1038 = 0u;
    float _1042;
    bool _1044;
    for (;;)
    {
        _1042 = (float(_1038) + _916) * 0.03125;
        _1044 = _1038 == 0u;
        float frontier_phi_45_pred;
        if (_1044)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1175;
            float _1176;
            uint _1178;
            _1175 = 0.0;
            _1176 = 0.5;
            _1178 = _1038;
            float _1046;
            for (;;)
            {
                _1046 = ((_1178 & 1u) != 0u) ? (_1176 + _1175) : _1175;
                uint _1179 = _1178 >> 1u;
                if (_1179 == 0u)
                {
                    break;
                }
                else
                {
                    _1175 = _1046;
                    _1176 *= 0.5;
                    _1178 = _1179;
                }
            }
            frontier_phi_45_pred = _1046;
        }
        _1045 = frontier_phi_45_pred;
        float _1047 = _1045 + _929;
        float _1052 = sqrt(_1042);
        float _1053 = ((_1047 > 1.0) ? (_1047 + (-1.0)) : _1047) * 6.283185482025146484375;
        float _1056 = cos(_1053) * _1052;
        float _1058 = sin(_1053) * _1052;
        float _1060 = sqrt(1.0 - _1042);
        float _1073 = ((_1060 * _573) + (_1056 * _1029)) + (_1058 * _1024);
        float _1074 = ((_1060 * _574) + (_1056 * _1032)) + (_1058 * _1025);
        float _1075 = ((_1060 * _575) + (_1056 * _1035)) + (_1058 * _1026);
        _63._m0 = 1u;
        uvec4 _1079 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1080 = _1079.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1080, _1079.w, _1080, vec3(_886, _887, _888), 9.9999997473787516355514526367188e-05, vec3(_1073, _1074, _1075), 10000.0, 1);
        float _1086 = dot(vec3(_573, _574, _575), vec3(_1073, _1074, _1075));
        float _1339 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1089 = isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0));
        _1037 = ((float(_63._m0 == 0u) * _1089) / (_1089 * 0.3183098733425140380859375)) + _1036;
        uint _1039 = _1038 + 1u;
        if (_1039 == 32u)
        {
            break;
        }
        else
        {
            _1036 = _1037;
            _1038 = _1039;
            continue;
        }
    }
    float _1098 = _1037 * 0.009947183541953563690185546875;
    float _1103 = dot(vec3(_813, _814, _815), vec3(_573, _574, _575)) * 2.0;
    vec4 _1115 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_813 - (_1103 * _573), _814 - (_1103 * _574), _815 - (_1103 * _575)), 4.0);
    float _1120 = dot(vec3(_889, _891, _892), vec3(_573, _574, _575));
    float _1350 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1129 = (exp2(log2(1.0 - (isnan(1.0) ? _1350 : (isnan(_1350) ? 1.0 : min(_1350, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1140 = (((_1115.x * _1098) * _1129) + _1006) + ((cbMtdParam._m0[13u].z * (((((_775.x * cbMtdParam._m0[11u].x) + (_688.x * cbMtdParam._m0[10u].x)) + (_861.x * cbMtdParam._m0[12u].x)) * _603) + (_588 * cbMtdParam._m0[9u].x))) * _475);
    float _1145 = (((_1115.y * _1098) * _1129) + _1007) + ((cbMtdParam._m0[13u].z * (((((_775.y * cbMtdParam._m0[11u].y) + (_688.y * cbMtdParam._m0[10u].y)) + (_861.y * cbMtdParam._m0[12u].y)) * _603) + (_588 * cbMtdParam._m0[9u].y))) * _475);
    float _1150 = (((_1115.z * _1098) * _1129) + _1008) + ((cbMtdParam._m0[13u].z * (((((_775.z * cbMtdParam._m0[11u].z) + (_688.z * cbMtdParam._m0[10u].z)) + (_861.z * cbMtdParam._m0[12u].z)) * _603) + (_588 * cbMtdParam._m0[9u].z))) * _475);
    float _1361 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1372 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1383 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    bool _1158 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1169;
    _1169.x = _1158 ? ((_546 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1361 : (isnan(_1361) ? 1.0 : min(_1361, 1.0)));
    _1169.y = _1158 ? ((_549 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0)));
    _1169.z = _1158 ? ((_552 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0)));
    payload._m0 = _1169;
}


