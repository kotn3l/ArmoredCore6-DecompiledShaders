#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _42
{
    vec3 _m0;
};

struct _46
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_12;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _42 payload;
hitAttributeEXT _46 hit;

void main()
{
    vec3 _52 = payload._m0;
    float _89 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _90 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _91 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _98 = sqrt(((_90 * _90) + (_89 * _89)) + (_91 * _91)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _109 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _110 = _109.y;
    uint _150;
    uint _152;
    uint _153;
    if (_109.x == 0u)
    {
        uint _118 = (_110 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _127 = uvec3(texelFetch(l_geomIndexBuffer, int(_118)).x, texelFetch(l_geomIndexBuffer, int(_118 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_118 + 2u)).x);
        _150 = _127.x;
        _152 = _127.y;
        _153 = _127.z;
    }
    else
    {
        uint _131 = uint(gl_PrimitiveID) * 6u;
        uint _133 = _131 & 4294967292u;
        uint _136 = (_110 + _133) >> 2u;
        uvec2 _143 = uvec2(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x);
        uint _144 = _143.x;
        uint _145 = _143.y;
        uint _147 = _144 >> 16u;
        uint _148 = _145 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_133 == _131)
        {
            frontier_phi_3_2_ladder = _144 & 65535u;
            frontier_phi_3_2_ladder_1 = _147;
            frontier_phi_3_2_ladder_2 = _148;
        }
        else
        {
            frontier_phi_3_2_ladder = _147;
            frontier_phi_3_2_ladder_1 = _148;
            frontier_phi_3_2_ladder_2 = _145 >> 16u;
        }
        _150 = frontier_phi_3_2_ladder;
        _152 = frontier_phi_3_2_ladder_1;
        _153 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _157 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _158 = _157.x;
    uint _159 = _157.z;
    bool _160 = _159 != 0u;
    bool _162 = _109.w == 0u;
    bool _163 = _160 || _162;
    uint _165 = (_158 * _150) + 12u;
    uint _189;
    uint _190;
    uint _191;
    uint _192;
    if (_163)
    {
        uvec4 _168 = texelFetch(l_geomAttrib_0, int(_165 >> 2u));
        uint _169 = _168.x;
        _189 = _169 & 255u;
        _190 = (_169 >> 8u) & 255u;
        _191 = (_169 >> 16u) & 255u;
        _192 = 20u;
    }
    else
    {
        uint _177 = _165 >> 2u;
        uvec2 _183 = uvec2(texelFetch(l_geomAttrib_0, int(_177)).x, texelFetch(l_geomAttrib_0, int(_177 + 1u)).x);
        uint _184 = _183.x;
        _189 = _184 & 65535u;
        _190 = _184 >> 16u;
        _191 = _183.y & 65535u;
        _192 = 24u;
    }
    bool _198 = _159 == 0u;
    uint _199;
    if (_198)
    {
        _199 = _192;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_162)
        {
            frontier_phi_9_10_ladder = _192 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _192 + 8u;
        }
        _199 = frontier_phi_9_10_ladder;
    }
    uvec4 _210 = texelFetch(l_geomAttrib_0, int((((_158 * _150) + 8u) + (_160 ? (_199 + 4u) : _199)) >> 2u));
    uint _211 = _210.x;
    float _215 = float(int(uint(int(_211 << 16u) >> int(16u))));
    float _216 = float(int(uint(int(_211) >> int(16u))));
    uint _218 = (_158 * _152) + 12u;
    uint _239;
    uint _240;
    uint _241;
    uint _242;
    if (_163)
    {
        uvec4 _220 = texelFetch(l_geomAttrib_0, int(_218 >> 2u));
        uint _221 = _220.x;
        _239 = _221 & 255u;
        _240 = (_221 >> 8u) & 255u;
        _241 = (_221 >> 16u) & 255u;
        _242 = 20u;
    }
    else
    {
        uint _227 = _218 >> 2u;
        uvec2 _233 = uvec2(texelFetch(l_geomAttrib_0, int(_227)).x, texelFetch(l_geomAttrib_0, int(_227 + 1u)).x);
        uint _234 = _233.x;
        _239 = _234 & 65535u;
        _240 = _234 >> 16u;
        _241 = _233.y & 65535u;
        _242 = 24u;
    }
    uint _246;
    if (_198)
    {
        _246 = _242;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_162)
        {
            frontier_phi_16_17_ladder = _242 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _242 + 8u;
        }
        _246 = frontier_phi_16_17_ladder;
    }
    uvec4 _255 = texelFetch(l_geomAttrib_0, int((((_158 * _152) + 8u) + (_160 ? (_246 + 4u) : _246)) >> 2u));
    uint _256 = _255.x;
    float _260 = float(int(uint(int(_256 << 16u) >> int(16u))));
    float _261 = float(int(uint(int(_256) >> int(16u))));
    uint _263 = (_158 * _153) + 12u;
    uint _284;
    uint _285;
    uint _286;
    uint _287;
    if (_163)
    {
        uvec4 _265 = texelFetch(l_geomAttrib_0, int(_263 >> 2u));
        uint _266 = _265.x;
        _284 = _266 & 255u;
        _285 = (_266 >> 8u) & 255u;
        _286 = (_266 >> 16u) & 255u;
        _287 = 20u;
    }
    else
    {
        uint _272 = _263 >> 2u;
        uvec2 _278 = uvec2(texelFetch(l_geomAttrib_0, int(_272)).x, texelFetch(l_geomAttrib_0, int(_272 + 1u)).x);
        uint _279 = _278.x;
        _284 = _279 & 65535u;
        _285 = _279 >> 16u;
        _286 = _278.y & 65535u;
        _287 = 24u;
    }
    uint _291;
    if (_198)
    {
        _291 = _287;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_162)
        {
            frontier_phi_23_24_ladder = _287 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _287 + 8u;
        }
        _291 = frontier_phi_23_24_ladder;
    }
    uvec4 _300 = texelFetch(l_geomAttrib_0, int((((_158 * _153) + 8u) + (_160 ? (_291 + 4u) : _291)) >> 2u));
    uint _301 = _300.x;
    float _305 = float(int(uint(int(_301 << 16u) >> int(16u))));
    float _306 = float(int(uint(int(_301) >> int(16u))));
    bool _308 = _109.z == 0u;
    float _344;
    float _345;
    float _346;
    if (_308)
    {
        uint _311 = _150 * 3u;
        uvec3 _320 = uvec3(texelFetch(l_geomPositionBuffer, int(_311)).x, texelFetch(l_geomPositionBuffer, int(_311 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_311 + 2u)).x);
        _344 = uintBitsToFloat(_320.x);
        _345 = uintBitsToFloat(_320.y);
        _346 = uintBitsToFloat(_320.z);
    }
    else
    {
        uint _328 = _150 * 2u;
        uvec2 _334 = uvec2(texelFetch(l_geomPositionBuffer, int(_328)).x, texelFetch(l_geomPositionBuffer, int(_328 + 1u)).x);
        uint _335 = _334.x;
        _344 = unpackHalf2x16(_335).x;
        _345 = unpackHalf2x16(_335 >> 16u).x;
        _346 = unpackHalf2x16(_334.y).x;
    }
    float _382;
    float _383;
    float _384;
    if (_308)
    {
        uint _349 = _152 * 3u;
        uvec3 _358 = uvec3(texelFetch(l_geomPositionBuffer, int(_349)).x, texelFetch(l_geomPositionBuffer, int(_349 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_349 + 2u)).x);
        _382 = uintBitsToFloat(_358.x);
        _383 = uintBitsToFloat(_358.y);
        _384 = uintBitsToFloat(_358.z);
    }
    else
    {
        uint _366 = _152 * 2u;
        uvec2 _372 = uvec2(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x);
        uint _373 = _372.x;
        _382 = unpackHalf2x16(_373).x;
        _383 = unpackHalf2x16(_373 >> 16u).x;
        _384 = unpackHalf2x16(_372.y).x;
    }
    float _420;
    float _421;
    float _422;
    if (_308)
    {
        uint _387 = _153 * 3u;
        uvec3 _396 = uvec3(texelFetch(l_geomPositionBuffer, int(_387)).x, texelFetch(l_geomPositionBuffer, int(_387 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_387 + 2u)).x);
        _420 = uintBitsToFloat(_396.x);
        _421 = uintBitsToFloat(_396.y);
        _422 = uintBitsToFloat(_396.z);
    }
    else
    {
        uint _404 = _153 * 2u;
        uvec2 _410 = uvec2(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x);
        uint _411 = _410.x;
        _420 = unpackHalf2x16(_411).x;
        _421 = unpackHalf2x16(_411 >> 16u).x;
        _422 = unpackHalf2x16(_410.y).x;
    }
    float _425 = (1.0 - hit._m0.x) - hit._m0.y;
    float _447 = (_260 - _215) * 0.00048828125;
    float _449 = (_261 - _216) * 0.00048828125;
    float _452 = (_305 - _215) * 0.00048828125;
    float _453 = (_306 - _216) * 0.00048828125;
    float _475 = _382 - _344;
    float _476 = _383 - _345;
    float _477 = _384 - _346;
    float _480 = fma(_477, gl_ObjectToWorldEXT[2u].x, fma(_476, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _475));
    float _483 = fma(_477, gl_ObjectToWorldEXT[2u].y, fma(_476, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _475));
    float _486 = fma(_477, gl_ObjectToWorldEXT[2u].z, fma(_476, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _475));
    float _487 = _420 - _344;
    float _488 = _421 - _345;
    float _489 = _422 - _346;
    float _492 = fma(_489, gl_ObjectToWorldEXT[2u].x, fma(_488, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _487));
    float _495 = fma(_489, gl_ObjectToWorldEXT[2u].y, fma(_488, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _487));
    float _498 = fma(_489, gl_ObjectToWorldEXT[2u].z, fma(_488, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _487));
    float _499 = (((_260 * hit._m0.x) + (_215 * _425)) + (_305 * hit._m0.y)) * 0.00048828125;
    float _500 = (((_261 * hit._m0.x) + (_216 * _425)) + (_306 * hit._m0.y)) * 0.00048828125;
    float _511 = ((((float(_189) * _425) + (-127.0)) + (float(_239) * hit._m0.x)) + (float(_284) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _513 = ((((float(_190) * _425) + (-127.0)) + (float(_240) * hit._m0.x)) + (float(_285) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _514 = ((((float(_191) * _425) + (-127.0)) + (float(_241) * hit._m0.x)) + (float(_286) * hit._m0.y)) * 0.0078740157186985015869140625;
    uvec2 _526 = uvec2(textureSize(MaterialBasedBlendShader_snp_0_Texture2D_1, int(0u)));
    bool _531 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _584;
    if (_531)
    {
        float _542 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _548 = (_498 * _483) - (_495 * _486);
        float _551 = (_492 * _486) - (_498 * _480);
        float _554 = (_495 * _480) - (_492 * _483);
        float _581 = ((log2((((float(_526.y) * 0.5) * float(_526.x)) * abs((_453 * _447) - (_452 * _449))) / (sqrt(((_551 * _551) + (_554 * _554)) + (_548 * _548)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_542 * gl_WorldRayDirectionEXT.x, _542 * gl_WorldRayDirectionEXT.y, _542 * gl_WorldRayDirectionEXT.z), vec3(_511, _513, _514))));
        _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    }
    else
    {
        _584 = 0.0;
    }
    uvec2 _602 = uvec2(textureSize(MaterialBasedBlendShader_snp_0_Texture2D_12, int(0u)));
    float _653;
    if (_531)
    {
        float _613 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _619 = (_498 * _483) - (_495 * _486);
        float _622 = (_492 * _486) - (_498 * _480);
        float _625 = (_495 * _480) - (_492 * _483);
        float _651 = ((log2((((float(_602.y) * 0.5) * float(_602.x)) * abs((_453 * _447) - (_452 * _449))) / (sqrt(((_622 * _622) + (_625 * _625)) + (_619 * _619)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_613 * gl_WorldRayDirectionEXT.x, _613 * gl_WorldRayDirectionEXT.y, _613 * gl_WorldRayDirectionEXT.z), vec3(_511, _513, _514))));
        _653 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    }
    else
    {
        _653 = 0.0;
    }
    if ((textureLod(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _499) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _500) + cbTextureTilingScale._m0[1u].w), _653).x * textureLod(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _499) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _500) + cbTextureTilingScale._m0[0u].w), _584).w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _52;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _52;
        return;
    }
}


