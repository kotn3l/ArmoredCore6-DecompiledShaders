#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _2028;

void main()
{
    float _76 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _76)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _167;
    uint _169;
    uint _170;
    if (_126.x == 0u)
    {
        uint _135 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_127 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _161 & 65535u;
            frontier_phi_3_2_ladder_2 = _165;
        }
        else
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _162 >> 16u;
        }
        _167 = frontier_phi_3_2_ladder_1;
        _169 = frontier_phi_3_2_ladder;
        _170 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _174.z;
    bool _177 = _176 != 0u;
    bool _179 = _126.w == 0u;
    bool _180 = _177 || _179;
    uint _181 = _175 * _167;
    uint _182 = _181 + 12u;
    uint _206;
    uint _207;
    uint _208;
    uint _209;
    if (_180)
    {
        uvec4 _185 = texelFetch(l_geomAttrib_0, int(_182 >> 2u));
        uint _186 = _185.x;
        _206 = _186 & 255u;
        _207 = (_186 >> 8u) & 255u;
        _208 = (_186 >> 16u) & 255u;
        _209 = 16u;
    }
    else
    {
        uint _194 = _182 >> 2u;
        uvec2 _200 = uvec2(texelFetch(l_geomAttrib_0, int(_194)).x, texelFetch(l_geomAttrib_0, int(_194 + 1u)).x);
        uint _201 = _200.x;
        _206 = _201 & 65535u;
        _207 = _201 >> 16u;
        _208 = _200.y & 65535u;
        _209 = 20u;
    }
    uvec4 _217 = texelFetch(l_geomAttrib_0, int((_209 + _181) >> 2u));
    uint _218 = _217.x;
    uint _230 = _181 + 4u;
    uvec4 _234 = texelFetch(l_geomAttrib_0, int((_230 + _209) >> 2u));
    uint _235 = _234.x;
    uint _244 = _209 | 8u;
    bool _245 = _176 == 0u;
    uint _246;
    if (_245)
    {
        _246 = _244;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_179)
        {
            frontier_phi_9_10_ladder = _244 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _244 + 8u;
        }
        _246 = frontier_phi_9_10_ladder;
    }
    uint _250 = _177 ? (_246 + 4u) : _246;
    uint _252 = (_230 + _250) >> 2u;
    uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
    uint _259 = _258.x;
    uint _260 = _258.y;
    float _264 = float(int(uint(int(_259 << 16u) >> int(16u))));
    float _265 = float(int(uint(int(_259) >> int(16u))));
    float _269 = float(int(uint(int(_260 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_260) >> int(16u))));
    uvec4 _274 = texelFetch(l_geomAttrib_0, int(((_181 + 12u) + _250) >> 2u));
    uint _275 = _274.x;
    uint _281 = _175 * _169;
    uint _282 = _281 + 12u;
    uint _303;
    uint _304;
    uint _305;
    uint _306;
    if (_180)
    {
        uvec4 _284 = texelFetch(l_geomAttrib_0, int(_282 >> 2u));
        uint _285 = _284.x;
        _303 = _285 & 255u;
        _304 = (_285 >> 8u) & 255u;
        _305 = (_285 >> 16u) & 255u;
        _306 = 16u;
    }
    else
    {
        uint _291 = _282 >> 2u;
        uvec2 _297 = uvec2(texelFetch(l_geomAttrib_0, int(_291)).x, texelFetch(l_geomAttrib_0, int(_291 + 1u)).x);
        uint _298 = _297.x;
        _303 = _298 & 65535u;
        _304 = _298 >> 16u;
        _305 = _297.y & 65535u;
        _306 = 20u;
    }
    uvec4 _312 = texelFetch(l_geomAttrib_0, int((_306 + _281) >> 2u));
    uint _313 = _312.x;
    uint _324 = _281 + 4u;
    uvec4 _327 = texelFetch(l_geomAttrib_0, int((_324 + _306) >> 2u));
    uint _328 = _327.x;
    uint _337 = _306 | 8u;
    uint _338;
    if (_245)
    {
        _338 = _337;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_179)
        {
            frontier_phi_16_17_ladder = _337 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _337 + 8u;
        }
        _338 = frontier_phi_16_17_ladder;
    }
    uint _342 = _177 ? (_338 + 4u) : _338;
    uint _344 = (_324 + _342) >> 2u;
    uvec2 _350 = uvec2(texelFetch(l_geomAttrib_0, int(_344)).x, texelFetch(l_geomAttrib_0, int(_344 + 1u)).x);
    uint _351 = _350.x;
    uint _352 = _350.y;
    float _356 = float(int(uint(int(_351 << 16u) >> int(16u))));
    float _357 = float(int(uint(int(_351) >> int(16u))));
    float _361 = float(int(uint(int(_352 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_352) >> int(16u))));
    uvec4 _366 = texelFetch(l_geomAttrib_0, int(((_281 + 12u) + _342) >> 2u));
    uint _367 = _366.x;
    uint _373 = _175 * _170;
    uint _374 = _373 + 12u;
    uint _395;
    uint _396;
    uint _397;
    uint _398;
    if (_180)
    {
        uvec4 _376 = texelFetch(l_geomAttrib_0, int(_374 >> 2u));
        uint _377 = _376.x;
        _395 = _377 & 255u;
        _396 = (_377 >> 8u) & 255u;
        _397 = (_377 >> 16u) & 255u;
        _398 = 16u;
    }
    else
    {
        uint _383 = _374 >> 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomAttrib_0, int(_383)).x, texelFetch(l_geomAttrib_0, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _395 = _390 & 65535u;
        _396 = _390 >> 16u;
        _397 = _389.y & 65535u;
        _398 = 20u;
    }
    uvec4 _404 = texelFetch(l_geomAttrib_0, int((_398 + _373) >> 2u));
    uint _405 = _404.x;
    uint _416 = _373 + 4u;
    uvec4 _419 = texelFetch(l_geomAttrib_0, int((_416 + _398) >> 2u));
    uint _420 = _419.x;
    uint _429 = _398 | 8u;
    uint _430;
    if (_245)
    {
        _430 = _429;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_179)
        {
            frontier_phi_23_24_ladder = _429 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _429 + 8u;
        }
        _430 = frontier_phi_23_24_ladder;
    }
    uint _434 = _177 ? (_430 + 4u) : _430;
    uint _436 = (_416 + _434) >> 2u;
    uvec2 _442 = uvec2(texelFetch(l_geomAttrib_0, int(_436)).x, texelFetch(l_geomAttrib_0, int(_436 + 1u)).x);
    uint _443 = _442.x;
    uint _444 = _442.y;
    float _448 = float(int(uint(int(_443 << 16u) >> int(16u))));
    float _449 = float(int(uint(int(_443) >> int(16u))));
    float _453 = float(int(uint(int(_444 << 16u) >> int(16u))));
    float _454 = float(int(uint(int(_444) >> int(16u))));
    uvec4 _458 = texelFetch(l_geomAttrib_0, int(((_373 + 12u) + _434) >> 2u));
    uint _459 = _458.x;
    bool _466 = _126.z == 0u;
    float _502;
    float _503;
    float _504;
    if (_466)
    {
        uint _469 = _167 * 3u;
        uvec3 _478 = uvec3(texelFetch(l_geomPositionBuffer, int(_469)).x, texelFetch(l_geomPositionBuffer, int(_469 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_469 + 2u)).x);
        _502 = uintBitsToFloat(_478.x);
        _503 = uintBitsToFloat(_478.y);
        _504 = uintBitsToFloat(_478.z);
    }
    else
    {
        uint _486 = _167 * 2u;
        uvec2 _492 = uvec2(texelFetch(l_geomPositionBuffer, int(_486)).x, texelFetch(l_geomPositionBuffer, int(_486 + 1u)).x);
        uint _493 = _492.x;
        _502 = unpackHalf2x16(_493).x;
        _503 = unpackHalf2x16(_493 >> 16u).x;
        _504 = unpackHalf2x16(_492.y).x;
    }
    float _540;
    float _541;
    float _542;
    if (_466)
    {
        uint _507 = _169 * 3u;
        uvec3 _516 = uvec3(texelFetch(l_geomPositionBuffer, int(_507)).x, texelFetch(l_geomPositionBuffer, int(_507 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_507 + 2u)).x);
        _540 = uintBitsToFloat(_516.x);
        _541 = uintBitsToFloat(_516.y);
        _542 = uintBitsToFloat(_516.z);
    }
    else
    {
        uint _524 = _169 * 2u;
        uvec2 _530 = uvec2(texelFetch(l_geomPositionBuffer, int(_524)).x, texelFetch(l_geomPositionBuffer, int(_524 + 1u)).x);
        uint _531 = _530.x;
        _540 = unpackHalf2x16(_531).x;
        _541 = unpackHalf2x16(_531 >> 16u).x;
        _542 = unpackHalf2x16(_530.y).x;
    }
    float _578;
    float _579;
    float _580;
    if (_466)
    {
        uint _545 = _170 * 3u;
        uvec3 _554 = uvec3(texelFetch(l_geomPositionBuffer, int(_545)).x, texelFetch(l_geomPositionBuffer, int(_545 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_545 + 2u)).x);
        _578 = uintBitsToFloat(_554.x);
        _579 = uintBitsToFloat(_554.y);
        _580 = uintBitsToFloat(_554.z);
    }
    else
    {
        uint _562 = _170 * 2u;
        uvec2 _568 = uvec2(texelFetch(l_geomPositionBuffer, int(_562)).x, texelFetch(l_geomPositionBuffer, int(_562 + 1u)).x);
        uint _569 = _568.x;
        _578 = unpackHalf2x16(_569).x;
        _579 = unpackHalf2x16(_569 >> 16u).x;
        _580 = unpackHalf2x16(_568.y).x;
    }
    float _583 = (1.0 - hit._m0.x) - hit._m0.y;
    float _642 = (((float(_367 & 255u) * hit._m0.x) + (float(_275 & 255u) * _583)) + (float(_459 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _646 = (((float((_367 >> 8u) & 255u) * hit._m0.x) + (float((_275 >> 8u) & 255u) * _583)) + (float((_459 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _649 = (_356 - _264) * 0.00048828125;
    float _651 = (_357 - _265) * 0.00048828125;
    float _654 = (_448 - _264) * 0.00048828125;
    float _655 = (_449 - _265) * 0.00048828125;
    float _658 = (_361 - _269) * 0.00048828125;
    float _659 = (_362 - _270) * 0.00048828125;
    float _662 = (_453 - _269) * 0.00048828125;
    float _663 = (_454 - _270) * 0.00048828125;
    float _685 = _540 - _502;
    float _686 = _541 - _503;
    float _687 = _542 - _504;
    float _690 = fma(_687, gl_ObjectToWorldEXT[2u].x, fma(_686, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _685));
    float _693 = fma(_687, gl_ObjectToWorldEXT[2u].y, fma(_686, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _685));
    float _696 = fma(_687, gl_ObjectToWorldEXT[2u].z, fma(_686, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _685));
    float _697 = _578 - _502;
    float _698 = _579 - _503;
    float _699 = _580 - _504;
    float _702 = fma(_699, gl_ObjectToWorldEXT[2u].x, fma(_698, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _697));
    float _705 = fma(_699, gl_ObjectToWorldEXT[2u].y, fma(_698, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _697));
    float _708 = fma(_699, gl_ObjectToWorldEXT[2u].z, fma(_698, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _697));
    float _709 = (((_356 * hit._m0.x) + (_264 * _583)) + (_448 * hit._m0.y)) * 0.00048828125;
    float _710 = (((_357 * hit._m0.x) + (_265 * _583)) + (_449 * hit._m0.y)) * 0.00048828125;
    float _711 = (((_361 * hit._m0.x) + (_269 * _583)) + (_453 * hit._m0.y)) * 0.00048828125;
    float _712 = (((_362 * hit._m0.x) + (_270 * _583)) + (_454 * hit._m0.y)) * 0.00048828125;
    float _716 = (((float(_206) * _583) + (-127.0)) + (float(_303) * hit._m0.x)) + (float(_395) * hit._m0.y);
    float _719 = (((float(_207) * _583) + (-127.0)) + (float(_304) * hit._m0.x)) + (float(_396) * hit._m0.y);
    float _722 = (((float(_208) * _583) + (-127.0)) + (float(_305) * hit._m0.x)) + (float(_397) * hit._m0.y);
    float _723 = _716 * 0.0078740157186985015869140625;
    float _725 = _719 * 0.0078740157186985015869140625;
    float _726 = _722 * 0.0078740157186985015869140625;
    float _739 = ((((float(_218 & 255u) * _583) + (-127.0)) + (float(_313 & 255u) * hit._m0.x)) + (float(_405 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _740 = ((((float((_218 >> 8u) & 255u) * _583) + (-127.0)) + (float((_313 >> 8u) & 255u) * hit._m0.x)) + (float((_405 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _741 = ((((float((_218 >> 16u) & 255u) * _583) + (-127.0)) + (float((_313 >> 16u) & 255u) * hit._m0.x)) + (float((_405 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _742 = ((((float(_218 >> 24u) * _583) + (-127.0)) + (float(_313 >> 24u) * hit._m0.x)) + (float(_405 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _752 = ((((float(_235 & 255u) * _583) + (-127.0)) + (float(_328 & 255u) * hit._m0.x)) + (float(_420 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _753 = ((((float((_235 >> 8u) & 255u) * _583) + (-127.0)) + (float((_328 >> 8u) & 255u) * hit._m0.x)) + (float((_420 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _754 = ((((float((_235 >> 16u) & 255u) * _583) + (-127.0)) + (float((_328 >> 16u) & 255u) * hit._m0.x)) + (float((_420 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _764 = ((_740 * _726) - (_741 * _725)) * _742;
    float _765 = ((_741 * _723) - (_739 * _726)) * _742;
    float _766 = ((_739 * _725) - (_740 * _723)) * _742;
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _770 * _764;
    float _772 = _770 * _765;
    float _773 = _770 * _766;
    uvec2 _809 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, int(0u)));
    bool _814 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _867;
    if (_814)
    {
        float _825 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _831 = (_708 * _693) - (_705 * _696);
        float _834 = (_702 * _696) - (_708 * _690);
        float _837 = (_705 * _690) - (_702 * _693);
        float _864 = ((log2((((float(_809.y) * 0.5) * float(_809.x)) * abs((_655 * _649) - (_654 * _651))) / (sqrt(((_834 * _834) + (_837 * _837)) + (_831 * _831)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_825 * gl_WorldRayDirectionEXT.x, _825 * gl_WorldRayDirectionEXT.y, _825 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    }
    else
    {
        _867 = 0.0;
    }
    vec4 _871 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _709) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _710) + cbTextureTilingScale._m0[4u].w), _867);
    float _881 = 1.0 - ((1.0 - _871.x) * 1.39999997615814208984375);
    float _2121 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _882 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    float _889 = (_882 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _890 = (_882 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _891 = (_882 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _893 = 1.0 - ((1.0 - _871.y) * 1.39999997615814208984375);
    float _2132 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    float _901 = (_894 * (cbMtdParam._m0[13u].x - _889)) + _889;
    float _902 = (_894 * (cbMtdParam._m0[13u].y - _890)) + _890;
    float _903 = (_894 * (cbMtdParam._m0[13u].z - _891)) + _891;
    float _905 = 1.0 - ((1.0 - _871.z) * 1.39999997615814208984375);
    float _2143 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _906 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
    uvec2 _931 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, int(0u)));
    float _982;
    if (_814)
    {
        float _942 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _948 = (_708 * _693) - (_705 * _696);
        float _951 = (_702 * _696) - (_708 * _690);
        float _954 = (_705 * _690) - (_702 * _693);
        float _980 = ((log2((((float(_931.y) * 0.5) * float(_931.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_951 * _951) + (_954 * _954)) + (_948 * _948)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_942 * gl_WorldRayDirectionEXT.x, _942 * gl_WorldRayDirectionEXT.y, _942 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _982 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    }
    else
    {
        _982 = 0.0;
    }
    float _987 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _711) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _712) + cbTextureTilingScale._m0[3u].w), _982).x * cbMtdParam._m0[18u].x;
    float _1001 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((_646 - _987) + (cbMtdParam._m0[16u].z * _646))) + 1.0;
    float _2159 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1003 = 1.0 - (isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0)));
    float _1004 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = isnan(1.0) ? _1004 : (isnan(_1004) ? 1.0 : min(_1004, 1.0));
    float _1013 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((_642 - _987) + (cbMtdParam._m0[16u].y * _642))) + 1.0;
    float _2180 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = 1.0 - (isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0)));
    float _1016 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = isnan(1.0) ? _1016 : (isnan(_1016) ? 1.0 : min(_1016, 1.0));
    uvec2 _1034 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, int(0u)));
    float _1085;
    if (_814)
    {
        float _1045 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1051 = (_708 * _693) - (_705 * _696);
        float _1054 = (_702 * _696) - (_708 * _690);
        float _1057 = (_705 * _690) - (_702 * _693);
        float _1083 = ((log2((((float(_1034.y) * 0.5) * float(_1034.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_1054 * _1054) + (_1057 * _1057)) + (_1051 * _1051)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1045 * gl_WorldRayDirectionEXT.x, _1045 * gl_WorldRayDirectionEXT.y, _1045 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _1085 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    }
    else
    {
        _1085 = 0.0;
    }
    vec4 _1088 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _711) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _712) + cbTextureTilingScale._m0[1u].w), _1085);
    float _1090 = _1088.x;
    float _1091 = _1088.y;
    float _1092 = _1088.z;
    float _1093 = cbMtdParam._m0[12u].x * _1017;
    float _1095 = cbMtdParam._m0[12u].y * _1017;
    float _1097 = cbMtdParam._m0[12u].z * _1017;
    float _1117 = _1015 + _1003;
    float _1118 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1119 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
    uvec2 _1137 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, int(0u)));
    float _1188;
    if (_814)
    {
        float _1148 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1154 = (_708 * _693) - (_705 * _696);
        float _1157 = (_702 * _696) - (_708 * _690);
        float _1160 = (_705 * _690) - (_702 * _693);
        float _1186 = ((log2((((float(_1137.y) * 0.5) * float(_1137.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_1157 * _1157) + (_1160 * _1160)) + (_1154 * _1154)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1148 * gl_WorldRayDirectionEXT.x, _1148 * gl_WorldRayDirectionEXT.y, _1148 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _1188 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    }
    else
    {
        _1188 = 0.0;
    }
    vec4 _1190 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _711) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _712) + cbTextureTilingScale._m0[0u].w), _1188);
    float _1195 = _1190.x * cbMtdParam._m0[10u].x;
    float _1196 = _1190.y * cbMtdParam._m0[10u].y;
    float _1197 = _1190.z * cbMtdParam._m0[10u].z;
    float _1217 = ((_1195 - (_1119 * _1195)) + ((((((_1090 * (cbMtdParam._m0[11u].x - _1093)) * _1005) + (_1093 * _1090)) * 4.55000019073486328125) * _1119) * _1195)) * ((_906 * (cbMtdParam._m0[14u].x - _901)) + _901);
    float _1218 = ((((((((_1091 * (cbMtdParam._m0[11u].y - _1095)) * _1005) + (_1095 * _1091)) * 4.55000019073486328125) * _1119) * _1196) + _1196) - (_1119 * _1196)) * ((_906 * (cbMtdParam._m0[14u].y - _902)) + _902);
    float _1219 = ((((((((_1092 * (cbMtdParam._m0[11u].z - _1097)) * _1005) + (_1097 * _1092)) * 4.55000019073486328125) * _1119) * _1197) + _1197) - (_1119 * _1197)) * ((_906 * (cbMtdParam._m0[14u].z - _903)) + _903);
    uvec2 _1232 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, int(0u)));
    float _1283;
    if (_814)
    {
        float _1243 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1249 = (_708 * _693) - (_705 * _696);
        float _1252 = (_702 * _696) - (_708 * _690);
        float _1255 = (_705 * _690) - (_702 * _693);
        float _1281 = ((log2((((float(_1232.y) * 0.5) * float(_1232.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_1252 * _1252) + (_1255 * _1255)) + (_1249 * _1249)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1243 * gl_WorldRayDirectionEXT.x, _1243 * gl_WorldRayDirectionEXT.y, _1243 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _1283 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    }
    else
    {
        _1283 = 0.0;
    }
    vec4 _1286 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * _711) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _712) + cbTextureTilingScale._m0[7u].w), _1283);
    float _1290 = _1286.z;
    float _1293 = (_1286.x * 2.0) + (-1.0);
    float _1295 = (_1286.y * 2.0) + (-1.0);
    float _1296 = dot(vec2(_1293, _1295), vec2(_1293, _1295));
    float _2226 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
    float _1301 = sqrt(1.0 - (isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0))));
    float _1303 = fma(_1301, _723, fma(_1295, _752, 0.0));
    float _1305 = fma(_1301, _725, fma(_1295, _753, 0.0));
    float _1307 = fma(_1301, _726, fma(_1295, _754, 0.0));
    float _1311 = inversesqrt(dot(vec3(_1303, _1305, _1307), vec3(_1303, _1305, _1307)));
    float _1312 = _1311 * _1303;
    float _1313 = _1311 * _1305;
    float _1314 = _1311 * _1307;
    uvec2 _1326 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, int(0u)));
    float _1377;
    if (_814)
    {
        float _1337 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1343 = (_708 * _693) - (_705 * _696);
        float _1346 = (_702 * _696) - (_708 * _690);
        float _1349 = (_705 * _690) - (_702 * _693);
        float _1375 = ((log2((((float(_1326.y) * 0.5) * float(_1326.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_1346 * _1346) + (_1349 * _1349)) + (_1343 * _1343)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1337 * gl_WorldRayDirectionEXT.x, _1337 * gl_WorldRayDirectionEXT.y, _1337 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _1377 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    }
    else
    {
        _1377 = 0.0;
    }
    vec4 _1379 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _711) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _712) + cbTextureTilingScale._m0[2u].w), _1377);
    float _1385 = (_1379.x * 2.0) + (-1.0);
    float _1386 = (_1379.y * 2.0) + (-1.0);
    float _1387 = dot(vec2(_1385, _1386), vec2(_1385, _1386));
    float _2242 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1392 = sqrt(1.0 - (isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0))));
    float _1394 = fma(_1392, _723, fma(_1386, _752, 0.0));
    float _1396 = fma(_1392, _725, fma(_1386, _753, 0.0));
    float _1398 = fma(_1392, _726, fma(_1386, _754, 0.0));
    float _1402 = inversesqrt(dot(vec3(_1394, _1396, _1398), vec3(_1394, _1396, _1398)));
    float _1403 = _1402 * _1394;
    float _1404 = _1402 * _1396;
    float _1405 = _1402 * _1398;
    float _1408 = fma(_1405, _773, fma(_1404, _772, _1403 * _771));
    float _1411 = fma(_1405, _741, fma(_1404, _740, _1403 * _739));
    float _1414 = fma(_1405, _726, fma(_1404, _725, _1403 * _723));
    float _1418 = inversesqrt(dot(vec3(_1408, _1411, _1414), vec3(_1408, _1411, _1414)));
    float _1422 = fma(_1314, _773, fma(_1313, _772, _1312 * _771));
    float _1425 = fma(_1314, _741, fma(_1313, _740, _1312 * _739));
    float _1428 = fma(_1314, _726, fma(_1313, _725, _1312 * _723));
    float _1432 = inversesqrt(dot(vec3(_1422, _1425, _1428), vec3(_1422, _1425, _1428)));
    uvec2 _1448 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, int(0u)));
    float _1499;
    if (_814)
    {
        float _1459 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1465 = (_708 * _693) - (_705 * _696);
        float _1468 = (_702 * _696) - (_708 * _690);
        float _1471 = (_705 * _690) - (_702 * _693);
        float _1497 = ((log2((((float(_1448.y) * 0.5) * float(_1448.x)) * abs((_655 * _649) - (_654 * _651))) / (sqrt(((_1468 * _1468) + (_1471 * _1471)) + (_1465 * _1465)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1459 * gl_WorldRayDirectionEXT.x, _1459 * gl_WorldRayDirectionEXT.y, _1459 * gl_WorldRayDirectionEXT.z), vec3(_723, _725, _726))));
        _1499 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
    }
    else
    {
        _1499 = 0.0;
    }
    vec4 _1501 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _709) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _710) + cbTextureTilingScale._m0[5u].w), _1499);
    float _1507 = (_1501.x * 2.0) + (-1.0);
    float _1508 = (_1501.y * 2.0) + (-1.0);
    float _1509 = dot(vec2(_1507, _1508), vec2(_1507, _1508));
    float _2258 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1514 = sqrt(1.0 - (isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0))));
    uvec2 _1528 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, int(0u)));
    float _1532 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1533 = _1532 * gl_WorldRayDirectionEXT.x;
    float _1534 = _1532 * gl_WorldRayDirectionEXT.y;
    float _1535 = _1532 * gl_WorldRayDirectionEXT.z;
    float _1579;
    if (_814)
    {
        float _1545 = (_708 * _693) - (_705 * _696);
        float _1548 = (_702 * _696) - (_708 * _690);
        float _1551 = (_705 * _690) - (_702 * _693);
        float _1577 = ((log2((((float(_1528.y) * 0.5) * float(_1528.x)) * abs((_663 * _658) - (_662 * _659))) / (sqrt(((_1548 * _1548) + (_1551 * _1551)) + (_1545 * _1545)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_1533, _1534, _1535), vec3(_723, _725, _726))));
        _1579 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    }
    else
    {
        _1579 = 0.0;
    }
    vec4 _1581 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _711) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _712) + cbTextureTilingScale._m0[6u].w), _1579);
    float _1587 = (_1581.x * 2.0) + (-1.0);
    float _1588 = (_1581.y * 2.0) + (-1.0);
    float _1589 = dot(vec2(_1587, _1588), vec2(_1587, _1588));
    float _2274 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = sqrt(1.0 - (isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0))));
    float _1596 = fma(_1594, _723, fma(_1588, _752, 0.0));
    float _1598 = fma(_1594, _725, fma(_1588, _753, 0.0));
    float _1600 = fma(_1594, _726, fma(_1588, _754, 0.0));
    float _1604 = inversesqrt(dot(vec3(_1596, _1598, _1600), vec3(_1596, _1598, _1600)));
    float _1605 = _1604 * _1596;
    float _1606 = _1604 * _1598;
    float _1607 = _1604 * _1600;
    float _1610 = fma(_1607, _773, fma(_1606, _772, _1605 * _771));
    float _1613 = fma(_1607, _741, fma(_1606, _740, _1605 * _739));
    float _1616 = fma(_1607, _726, fma(_1606, _725, _1605 * _723));
    float _1620 = inversesqrt(dot(vec3(_1610, _1613, _1616), vec3(_1610, _1613, _1616)));
    float _1636 = ((((_1432 * _1422) * cbMtdParam._m0[17u].w) + (((_1408 * _1005) * _1418) * cbMtdParam._m0[17u].y)) + _1507) + (((_1610 * _1017) * _1620) * cbMtdParam._m0[17u].z);
    float _1639 = ((((_1432 * _1425) * cbMtdParam._m0[17u].w) + (((_1411 * _1005) * _1418) * cbMtdParam._m0[17u].y)) + _1508) + (((_1613 * _1017) * _1620) * cbMtdParam._m0[17u].z);
    float _1642 = fma(_1514, _723, fma(_1639, _739, _1636 * _771));
    float _1645 = fma(_1514, _725, fma(_1639, _740, _1636 * _772));
    float _1648 = fma(_1514, _726, fma(_1639, _741, _1636 * _773));
    float _1652 = inversesqrt(dot(vec3(_1642, _1645, _1648), vec3(_1642, _1645, _1648)));
    float _1653 = _1652 * _1642;
    float _1654 = _1652 * _1645;
    float _1655 = _1652 * _1648;
    float _1667 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1668 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1669 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1670 = (-0.0) - _1533;
    float _1672 = (-0.0) - _1534;
    float _1673 = (-0.0) - _1535;
    float _1679 = float(gl_LaunchIDEXT.x);
    float _1680 = float(gl_LaunchIDEXT.y);
    float _1683 = float(gl_LaunchSizeEXT.x);
    float _1697 = fract(fract(sin(dot(vec2(_1679 / _1683, _1680 / _76), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1710 = fract(fract(sin(dot(vec2((_1679 + 128.0) / _1683, (_1680 + 128.0) / _76), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1711 = 1.0 - cbMtdParam._m0[18u].y;
    float _1712 = _1711 * _1217;
    float _1713 = _1218 * _1711;
    float _1714 = _1219 * _1711;
    float _1719 = (_1217 + (-0.039999999105930328369140625)) * cbMtdParam._m0[18u].y;
    float _1720 = (_1218 + (-0.039999999105930328369140625)) * cbMtdParam._m0[18u].y;
    float _1721 = (_1219 + (-0.039999999105930328369140625)) * cbMtdParam._m0[18u].y;
    float _1722 = _1719 + 0.039999999105930328369140625;
    float _1724 = _1720 + 0.039999999105930328369140625;
    float _1725 = _1721 + 0.039999999105930328369140625;
    _68._m0 = 1u;
    uvec4 _1735 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1736 = _1735.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1736, _1735.w, _1736, vec3(_1667, _1668, _1669), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (_68._m0 == 0u)
    {
        float _1756 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1653, _1654, _1655));
        float _2285 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1759 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1290) * 0.949999988079071044921875);
        float _1779 = _1778 * _1778;
        float _1780 = g_sceneCB._m0[4u].x - _1533;
        float _1781 = g_sceneCB._m0[4u].y - _1534;
        float _1782 = g_sceneCB._m0[4u].z - _1535;
        float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
        float _1787 = _1786 * _1780;
        float _1788 = _1786 * _1781;
        float _1789 = _1786 * _1782;
        float _1790 = dot(vec3(_1653, _1654, _1655), vec3(g_sceneCB._m0[4u].xyz));
        float _2296 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1793 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        float _1794 = dot(vec3(_1653, _1654, _1655), vec3(_1670, _1672, _1673));
        float _2307 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1797 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        float _1798 = dot(vec3(_1653, _1654, _1655), vec3(_1787, _1788, _1789));
        float _2318 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1801 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        float _1802 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1787, _1788, _1789));
        float _2329 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1806 = _1779 * _1779;
        float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
        float _1819 = exp2(log2(1.0 - (isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0)))) * 5.0);
        float _1830 = 1.0 - _1779;
        float _1841 = (0.5 / (((_1797 * ((_1793 * _1830) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1830) + _1779) * _1793))) * _1793;
        float _2340 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1843 = (isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
        _1850 = ((_1712 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1759;
        _1851 = ((_1713 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1759;
        _1852 = ((_1714 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1759;
        _1853 = (((_1819 * (0.959999978542327880859375 - _1719)) + _1722) * g_sceneCB._m0[5u].x) * _1843;
        _1854 = (((_1819 * (0.959999978542327880859375 - _1720)) + _1724) * g_sceneCB._m0[5u].y) * _1843;
        _1855 = (((_1819 * (0.959999978542327880859375 - _1721)) + _1725) * g_sceneCB._m0[5u].z) * _1843;
    }
    else
    {
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    bool _1857 = abs(_1654) < 0.89999997615814208984375;
    float _1859 = float(_1857);
    float _1860 = _1857 ? 0.0 : 1.0;
    float _1863 = (_1859 * _1655) - (_1860 * _1654);
    float _1864 = _1860 * _1653;
    float _1866 = (-0.0) - (_1653 * _1859);
    float _1870 = inversesqrt(dot(vec3(_1863, _1864, _1866), vec3(_1863, _1864, _1866)));
    float _1871 = _1863 * _1870;
    float _1872 = _1864 * _1870;
    float _1873 = _1870 * _1866;
    float _1876 = (_1872 * _1655) - (_1873 * _1654);
    float _1879 = (_1873 * _1653) - (_1871 * _1655);
    float _1882 = (_1871 * _1654) - (_1872 * _1653);
    float _1884;
    float _1892;
    float _1883 = 0.0;
    uint _1885 = 0u;
    float _1889;
    bool _1891;
    for (;;)
    {
        _1889 = (float(_1885) + _1697) * 0.03125;
        _1891 = _1885 == 0u;
        float frontier_phi_55_pred;
        if (_1891)
        {
            frontier_phi_55_pred = 0.0;
        }
        else
        {
            float _2033;
            float _2034;
            uint _2036;
            _2033 = 0.0;
            _2034 = 0.5;
            _2036 = _1885;
            float _1893;
            for (;;)
            {
                _1893 = ((_2036 & 1u) != 0u) ? (_2034 + _2033) : _2033;
                uint _2037 = _2036 >> 1u;
                if (_2037 == 0u)
                {
                    break;
                }
                else
                {
                    _2033 = _1893;
                    _2034 *= 0.5;
                    _2036 = _2037;
                }
            }
            frontier_phi_55_pred = _1893;
        }
        _1892 = frontier_phi_55_pred;
        float _1894 = _1892 + _1710;
        float _1898 = sqrt(_1889);
        float _1899 = ((_1894 > 1.0) ? (_1894 + (-1.0)) : _1894) * 6.283185482025146484375;
        float _1902 = cos(_1899) * _1898;
        float _1904 = sin(_1899) * _1898;
        float _1906 = sqrt(1.0 - _1889);
        float _1919 = ((_1906 * _1653) + (_1902 * _1876)) + (_1904 * _1871);
        float _1920 = ((_1906 * _1654) + (_1902 * _1879)) + (_1904 * _1872);
        float _1921 = ((_1906 * _1655) + (_1902 * _1882)) + (_1904 * _1873);
        _67._m0 = 1u;
        uvec4 _1925 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1926 = _1925.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1926, _1925.w, _1926, vec3(_1667, _1668, _1669), 9.9999997473787516355514526367188e-05, vec3(_1919, _1920, _1921), 10000.0, 1);
        float _1932 = dot(vec3(_1653, _1654, _1655), vec3(_1919, _1920, _1921));
        float _2351 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _1884 = ((float(_67._m0 == 0u) * _1935) / (_1935 * 0.3183098733425140380859375)) + _1883;
        uint _1886 = _1885 + 1u;
        if (_1886 == 32u)
        {
            break;
        }
        else
        {
            _1883 = _1884;
            _1885 = _1886;
            continue;
        }
    }
    float _1943 = _1884 * 0.009947183541953563690185546875;
    float _1948 = dot(vec3(_1533, _1534, _1535), vec3(_1653, _1654, _1655)) * 2.0;
    vec4 _1962 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1533 - (_1948 * _1653), _1534 - (_1948 * _1654), _1535 - (_1948 * _1655)), 4.0 - (_1290 * 4.0));
    float _1967 = dot(vec3(_1670, _1672, _1673), vec3(_1653, _1654, _1655));
    float _2362 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0)))) * 5.0);
    vec4 _1989 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1653, _1654, _1655), 0.0);
    float _2000 = (_1853 + _1850) + (((_1989.x * _1712) + (((_1977 * (0.959999978542327880859375 - _1719)) + _1722) * _1962.x)) * _1943);
    float _2004 = (_1854 + _1851) + (((_1989.y * _1713) + (((_1977 * (0.959999978542327880859375 - _1720)) + _1724) * _1962.y)) * _1943);
    float _2008 = (_1855 + _1852) + (((_1989.z * _1714) + (((_1977 * (0.959999978542327880859375 - _1721)) + _1725) * _1962.z)) * _1943);
    float _2373 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2384 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2395 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    bool _2016 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _2027;
    _2027.x = _2016 ? ((_716 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0)));
    _2027.y = _2016 ? ((_719 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0)));
    _2027.z = _2016 ? ((_722 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0)));
    payload._m0 = _2027;
}


