#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1665;

void main()
{
    float _75 = float(gl_LaunchSizeEXT.y);
    float _105 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _114 = sqrt(((_106 * _106) + (_105 * _105)) + (_107 * _107)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _75)))));
    uvec4 _125 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _126 = _125.y;
    uint _166;
    uint _168;
    uint _169;
    if (_125.x == 0u)
    {
        uint _134 = (_126 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_126 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _163;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _164;
        }
        else
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _161 >> 16u;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder;
        _169 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _125.w == 0u;
    bool _179 = _176 || _178;
    uint _180 = _174 * _166;
    uint _181 = _180 + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 16u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 20u;
    }
    uvec4 _216 = texelFetch(l_geomAttrib_0, int((_208 + _180) >> 2u));
    uint _217 = _216.x;
    uint _229 = _208 | 8u;
    bool _230 = _175 == 0u;
    uint _231;
    if (_230)
    {
        _231 = _229;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _229 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _229 + 8u;
        }
        _231 = frontier_phi_9_10_ladder;
    }
    uint _236 = _176 ? (_231 + 4u) : _231;
    uint _239 = ((_180 + 4u) + _236) >> 2u;
    uvec2 _245 = uvec2(texelFetch(l_geomAttrib_0, int(_239)).x, texelFetch(l_geomAttrib_0, int(_239 + 1u)).x);
    uint _246 = _245.x;
    uint _247 = _245.y;
    float _251 = float(int(uint(int(_246 << 16u) >> int(16u))));
    float _252 = float(int(uint(int(_246) >> int(16u))));
    float _256 = float(int(uint(int(_247 << 16u) >> int(16u))));
    float _257 = float(int(uint(int(_247) >> int(16u))));
    uint _265 = _174 * _168;
    uint _266 = _265 + 12u;
    uint _287;
    uint _288;
    uint _289;
    uint _290;
    if (_179)
    {
        uvec4 _268 = texelFetch(l_geomAttrib_0, int(_266 >> 2u));
        uint _269 = _268.x;
        _287 = _269 & 255u;
        _288 = (_269 >> 8u) & 255u;
        _289 = (_269 >> 16u) & 255u;
        _290 = 16u;
    }
    else
    {
        uint _275 = _266 >> 2u;
        uvec2 _281 = uvec2(texelFetch(l_geomAttrib_0, int(_275)).x, texelFetch(l_geomAttrib_0, int(_275 + 1u)).x);
        uint _282 = _281.x;
        _287 = _282 & 65535u;
        _288 = _282 >> 16u;
        _289 = _281.y & 65535u;
        _290 = 20u;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int((_290 + _265) >> 2u));
    uint _297 = _296.x;
    uint _308 = _290 | 8u;
    uint _309;
    if (_230)
    {
        _309 = _308;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _308 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _308 + 8u;
        }
        _309 = frontier_phi_16_17_ladder;
    }
    uint _313 = _176 ? (_309 + 4u) : _309;
    uint _316 = ((_265 + 4u) + _313) >> 2u;
    uvec2 _322 = uvec2(texelFetch(l_geomAttrib_0, int(_316)).x, texelFetch(l_geomAttrib_0, int(_316 + 1u)).x);
    uint _323 = _322.x;
    uint _324 = _322.y;
    float _328 = float(int(uint(int(_323 << 16u) >> int(16u))));
    float _329 = float(int(uint(int(_323) >> int(16u))));
    float _333 = float(int(uint(int(_324 << 16u) >> int(16u))));
    float _334 = float(int(uint(int(_324) >> int(16u))));
    uint _342 = _174 * _169;
    uint _343 = _342 + 12u;
    uint _364;
    uint _365;
    uint _366;
    uint _367;
    if (_179)
    {
        uvec4 _345 = texelFetch(l_geomAttrib_0, int(_343 >> 2u));
        uint _346 = _345.x;
        _364 = _346 & 255u;
        _365 = (_346 >> 8u) & 255u;
        _366 = (_346 >> 16u) & 255u;
        _367 = 16u;
    }
    else
    {
        uint _352 = _343 >> 2u;
        uvec2 _358 = uvec2(texelFetch(l_geomAttrib_0, int(_352)).x, texelFetch(l_geomAttrib_0, int(_352 + 1u)).x);
        uint _359 = _358.x;
        _364 = _359 & 65535u;
        _365 = _359 >> 16u;
        _366 = _358.y & 65535u;
        _367 = 20u;
    }
    uvec4 _373 = texelFetch(l_geomAttrib_0, int((_367 + _342) >> 2u));
    uint _374 = _373.x;
    uint _385 = _367 | 8u;
    uint _386;
    if (_230)
    {
        _386 = _385;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _385 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _385 + 8u;
        }
        _386 = frontier_phi_23_24_ladder;
    }
    uint _390 = _176 ? (_386 + 4u) : _386;
    uint _393 = ((_342 + 4u) + _390) >> 2u;
    uvec2 _399 = uvec2(texelFetch(l_geomAttrib_0, int(_393)).x, texelFetch(l_geomAttrib_0, int(_393 + 1u)).x);
    uint _400 = _399.x;
    uint _401 = _399.y;
    float _405 = float(int(uint(int(_400 << 16u) >> int(16u))));
    float _406 = float(int(uint(int(_400) >> int(16u))));
    float _410 = float(int(uint(int(_401 << 16u) >> int(16u))));
    float _411 = float(int(uint(int(_401) >> int(16u))));
    bool _420 = _125.z == 0u;
    float _456;
    float _457;
    float _458;
    if (_420)
    {
        uint _423 = _166 * 3u;
        uvec3 _432 = uvec3(texelFetch(l_geomPositionBuffer, int(_423)).x, texelFetch(l_geomPositionBuffer, int(_423 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_423 + 2u)).x);
        _456 = uintBitsToFloat(_432.x);
        _457 = uintBitsToFloat(_432.y);
        _458 = uintBitsToFloat(_432.z);
    }
    else
    {
        uint _440 = _166 * 2u;
        uvec2 _446 = uvec2(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x);
        uint _447 = _446.x;
        _456 = unpackHalf2x16(_447).x;
        _457 = unpackHalf2x16(_447 >> 16u).x;
        _458 = unpackHalf2x16(_446.y).x;
    }
    float _494;
    float _495;
    float _496;
    if (_420)
    {
        uint _461 = _168 * 3u;
        uvec3 _470 = uvec3(texelFetch(l_geomPositionBuffer, int(_461)).x, texelFetch(l_geomPositionBuffer, int(_461 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_461 + 2u)).x);
        _494 = uintBitsToFloat(_470.x);
        _495 = uintBitsToFloat(_470.y);
        _496 = uintBitsToFloat(_470.z);
    }
    else
    {
        uint _478 = _168 * 2u;
        uvec2 _484 = uvec2(texelFetch(l_geomPositionBuffer, int(_478)).x, texelFetch(l_geomPositionBuffer, int(_478 + 1u)).x);
        uint _485 = _484.x;
        _494 = unpackHalf2x16(_485).x;
        _495 = unpackHalf2x16(_485 >> 16u).x;
        _496 = unpackHalf2x16(_484.y).x;
    }
    float _532;
    float _533;
    float _534;
    if (_420)
    {
        uint _499 = _169 * 3u;
        uvec3 _508 = uvec3(texelFetch(l_geomPositionBuffer, int(_499)).x, texelFetch(l_geomPositionBuffer, int(_499 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_499 + 2u)).x);
        _532 = uintBitsToFloat(_508.x);
        _533 = uintBitsToFloat(_508.y);
        _534 = uintBitsToFloat(_508.z);
    }
    else
    {
        uint _516 = _169 * 2u;
        uvec2 _522 = uvec2(texelFetch(l_geomPositionBuffer, int(_516)).x, texelFetch(l_geomPositionBuffer, int(_516 + 1u)).x);
        uint _523 = _522.x;
        _532 = unpackHalf2x16(_523).x;
        _533 = unpackHalf2x16(_523 >> 16u).x;
        _534 = unpackHalf2x16(_522.y).x;
    }
    float _537 = (1.0 - hit._m0.x) - hit._m0.y;
    float _584 = (((float(texelFetch(l_geomAttrib_0, int(((_265 + 12u) + _313) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_180 + 12u) + _236) >> 2u)).x & 255u) * _537)) + (float(texelFetch(l_geomAttrib_0, int(((_342 + 12u) + _390) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _588 = (_328 - _251) * 0.00048828125;
    float _590 = (_329 - _252) * 0.00048828125;
    float _593 = (_405 - _251) * 0.00048828125;
    float _594 = (_406 - _252) * 0.00048828125;
    float _597 = (_333 - _256) * 0.00048828125;
    float _598 = (_334 - _257) * 0.00048828125;
    float _601 = (_410 - _256) * 0.00048828125;
    float _602 = (_411 - _257) * 0.00048828125;
    float _624 = _494 - _456;
    float _625 = _495 - _457;
    float _626 = _496 - _458;
    float _629 = fma(_626, gl_ObjectToWorldEXT[2u].x, fma(_625, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _624));
    float _632 = fma(_626, gl_ObjectToWorldEXT[2u].y, fma(_625, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _624));
    float _635 = fma(_626, gl_ObjectToWorldEXT[2u].z, fma(_625, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _624));
    float _636 = _532 - _456;
    float _637 = _533 - _457;
    float _638 = _534 - _458;
    float _641 = fma(_638, gl_ObjectToWorldEXT[2u].x, fma(_637, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _636));
    float _644 = fma(_638, gl_ObjectToWorldEXT[2u].y, fma(_637, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _636));
    float _647 = fma(_638, gl_ObjectToWorldEXT[2u].z, fma(_637, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _636));
    float _648 = (((_328 * hit._m0.x) + (_251 * _537)) + (_405 * hit._m0.y)) * 0.00048828125;
    float _649 = (((_329 * hit._m0.x) + (_252 * _537)) + (_406 * hit._m0.y)) * 0.00048828125;
    float _650 = (((_333 * hit._m0.x) + (_256 * _537)) + (_410 * hit._m0.y)) * 0.00048828125;
    float _651 = (((_334 * hit._m0.x) + (_257 * _537)) + (_411 * hit._m0.y)) * 0.00048828125;
    float _655 = (((float(_205) * _537) + (-127.0)) + (float(_287) * hit._m0.x)) + (float(_364) * hit._m0.y);
    float _658 = (((float(_206) * _537) + (-127.0)) + (float(_288) * hit._m0.x)) + (float(_365) * hit._m0.y);
    float _661 = (((float(_207) * _537) + (-127.0)) + (float(_289) * hit._m0.x)) + (float(_366) * hit._m0.y);
    float _662 = _655 * 0.0078740157186985015869140625;
    float _664 = _658 * 0.0078740157186985015869140625;
    float _665 = _661 * 0.0078740157186985015869140625;
    float _678 = ((((float(_217 & 255u) * _537) + (-127.0)) + (float(_297 & 255u) * hit._m0.x)) + (float(_374 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _679 = ((((float((_217 >> 8u) & 255u) * _537) + (-127.0)) + (float((_297 >> 8u) & 255u) * hit._m0.x)) + (float((_374 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _680 = ((((float((_217 >> 16u) & 255u) * _537) + (-127.0)) + (float((_297 >> 16u) & 255u) * hit._m0.x)) + (float((_374 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _681 = ((((float(_217 >> 24u) * _537) + (-127.0)) + (float(_297 >> 24u) * hit._m0.x)) + (float(_374 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _691 = ((_679 * _665) - (_680 * _664)) * _681;
    float _692 = ((_680 * _662) - (_678 * _665)) * _681;
    float _693 = ((_678 * _664) - (_679 * _662)) * _681;
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    uvec2 _725 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_13, int(0u)));
    bool _730 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _783;
    if (_730)
    {
        float _741 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _747 = (_647 * _632) - (_644 * _635);
        float _750 = (_641 * _635) - (_647 * _629);
        float _753 = (_644 * _629) - (_641 * _632);
        float _780 = ((log2((((float(_725.y) * 0.5) * float(_725.x)) * abs((_594 * _588) - (_593 * _590))) / (sqrt(((_750 * _750) + (_753 * _753)) + (_747 * _747)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_741 * gl_WorldRayDirectionEXT.x, _741 * gl_WorldRayDirectionEXT.y, _741 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    }
    else
    {
        _783 = 0.0;
    }
    vec4 _787 = textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _648) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _649) + cbTextureTilingScale._m0[1u].w), _783);
    float _792 = _787.x * cbMtdParam._m0[9u].x;
    float _793 = _787.y * cbMtdParam._m0[9u].y;
    float _794 = _787.z * cbMtdParam._m0[9u].z;
    uvec2 _812 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_1, int(0u)));
    float _863;
    if (_730)
    {
        float _823 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _829 = (_647 * _632) - (_644 * _635);
        float _832 = (_641 * _635) - (_647 * _629);
        float _835 = (_644 * _629) - (_641 * _632);
        float _861 = ((log2((((float(_812.y) * 0.5) * float(_812.x)) * abs((_602 * _597) - (_601 * _598))) / (sqrt(((_832 * _832) + (_835 * _835)) + (_829 * _829)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_823 * gl_WorldRayDirectionEXT.x, _823 * gl_WorldRayDirectionEXT.y, _823 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _863 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    }
    else
    {
        _863 = 0.0;
    }
    vec4 _865 = textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _650) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _651) + cbTextureTilingScale._m0[0u].w), _863);
    uvec2 _884 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_21, int(0u)));
    float _935;
    if (_730)
    {
        float _895 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _901 = (_647 * _632) - (_644 * _635);
        float _904 = (_641 * _635) - (_647 * _629);
        float _907 = (_644 * _629) - (_641 * _632);
        float _933 = ((log2((((float(_884.y) * 0.5) * float(_884.x)) * abs((_602 * _597) - (_601 * _598))) / (sqrt(((_904 * _904) + (_907 * _907)) + (_901 * _901)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_895 * gl_WorldRayDirectionEXT.x, _895 * gl_WorldRayDirectionEXT.y, _895 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _935 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    }
    else
    {
        _935 = 0.0;
    }
    float _948 = (_584 - ((cbMtdParam._m0[11u].w * (1.0 - _584)) * (textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _650) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _651) + cbTextureTilingScale._m0[4u].w), _935).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _1766 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _949 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    float _956 = (_949 * ((_865.x * cbMtdParam._m0[10u].x) - _792)) + _792;
    float _957 = (_949 * ((_865.y * cbMtdParam._m0[10u].y) - _793)) + _793;
    float _958 = (_949 * ((_865.z * cbMtdParam._m0[10u].z) - _794)) + _794;
    uvec2 _970 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_17, int(0u)));
    float _1021;
    if (_730)
    {
        float _981 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _987 = (_647 * _632) - (_644 * _635);
        float _990 = (_641 * _635) - (_647 * _629);
        float _993 = (_644 * _629) - (_641 * _632);
        float _1019 = ((log2((((float(_970.y) * 0.5) * float(_970.x)) * abs((_602 * _597) - (_601 * _598))) / (sqrt(((_990 * _990) + (_993 * _993)) + (_987 * _987)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_981 * gl_WorldRayDirectionEXT.x, _981 * gl_WorldRayDirectionEXT.y, _981 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _1021 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    }
    else
    {
        _1021 = 0.0;
    }
    uvec2 _1039 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_14, int(0u)));
    float _1090;
    if (_730)
    {
        float _1050 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1056 = (_647 * _632) - (_644 * _635);
        float _1059 = (_641 * _635) - (_647 * _629);
        float _1062 = (_644 * _629) - (_641 * _632);
        float _1088 = ((log2((((float(_1039.y) * 0.5) * float(_1039.x)) * abs((_594 * _588) - (_593 * _590))) / (sqrt(((_1059 * _1059) + (_1062 * _1062)) + (_1056 * _1056)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1050 * gl_WorldRayDirectionEXT.x, _1050 * gl_WorldRayDirectionEXT.y, _1050 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _1090 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    }
    else
    {
        _1090 = 0.0;
    }
    float _1096 = cbMtdParam._m0[11u].x * textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _648) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _649) + cbTextureTilingScale._m0[2u].w), _1090).x;
    float _1099 = (((cbMtdParam._m0[11u].y * textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _650) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _651) + cbTextureTilingScale._m0[3u].w), _1021).x) - _1096) * _949) + _1096;
    uvec2 _1112 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_7, int(0u)));
    float _1163;
    if (_730)
    {
        float _1123 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1129 = (_647 * _632) - (_644 * _635);
        float _1132 = (_641 * _635) - (_647 * _629);
        float _1135 = (_644 * _629) - (_641 * _632);
        float _1161 = ((log2((((float(_1112.y) * 0.5) * float(_1112.x)) * abs((_594 * _588) - (_593 * _590))) / (sqrt(((_1132 * _1132) + (_1135 * _1135)) + (_1129 * _1129)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1123 * gl_WorldRayDirectionEXT.x, _1123 * gl_WorldRayDirectionEXT.y, _1123 * gl_WorldRayDirectionEXT.z), vec3(_662, _664, _665))));
        _1163 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    }
    else
    {
        _1163 = 0.0;
    }
    vec4 _1166 = textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _648) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _649) + cbTextureTilingScale._m0[6u].w), _1163);
    float _1173 = (_1166.x * 2.0) + (-1.0);
    float _1175 = (_1166.y * 2.0) + (-1.0);
    float _1176 = dot(vec2(_1173, _1175), vec2(_1173, _1175));
    float _1792 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1181 = sqrt(1.0 - (isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0))));
    float _1182 = _1166.z * cbMtdParam._m0[11u].z;
    uvec2 _1196 = uvec2(textureSize(M_texture_photography_snp_0_Texture2D_5, int(0u)));
    float _1200 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1201 = _1200 * gl_WorldRayDirectionEXT.x;
    float _1202 = _1200 * gl_WorldRayDirectionEXT.y;
    float _1203 = _1200 * gl_WorldRayDirectionEXT.z;
    float _1247;
    if (_730)
    {
        float _1213 = (_647 * _632) - (_644 * _635);
        float _1216 = (_641 * _635) - (_647 * _629);
        float _1219 = (_644 * _629) - (_641 * _632);
        float _1245 = ((log2((((float(_1196.y) * 0.5) * float(_1196.x)) * abs((_602 * _597) - (_601 * _598))) / (sqrt(((_1216 * _1216) + (_1219 * _1219)) + (_1213 * _1213)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1201, _1202, _1203), vec3(_662, _664, _665))));
        _1247 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    }
    else
    {
        _1247 = 0.0;
    }
    vec4 _1249 = textureLod(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _650) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _651) + cbTextureTilingScale._m0[5u].w), _1247);
    float _1256 = (_1249.x * 2.0) + (-1.0);
    float _1257 = (_1249.y * 2.0) + (-1.0);
    float _1258 = dot(vec2(_1256, _1257), vec2(_1256, _1257));
    float _1808 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1267 = (_949 * ((_1249.z * cbMtdParam._m0[12u].y) - _1182)) + _1182;
    float _1274 = (_949 * (_1256 - _1173)) + _1173;
    float _1275 = (_949 * (_1257 - _1175)) + _1175;
    float _1276 = (_949 * (sqrt(1.0 - (isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0)))) - _1181)) + _1181;
    float _1279 = fma(_1276, _662, fma(_1275, _678, (_697 * _691) * _1274));
    float _1282 = fma(_1276, _664, fma(_1275, _679, (_697 * _692) * _1274));
    float _1285 = fma(_1276, _665, fma(_1275, _680, (_697 * _693) * _1274));
    float _1289 = inversesqrt(dot(vec3(_1279, _1282, _1285), vec3(_1279, _1282, _1285)));
    float _1290 = _1289 * _1279;
    float _1291 = _1289 * _1282;
    float _1292 = _1289 * _1285;
    float _1304 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1305 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1306 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1307 = (-0.0) - _1201;
    float _1309 = (-0.0) - _1202;
    float _1310 = (-0.0) - _1203;
    float _1316 = float(gl_LaunchIDEXT.x);
    float _1317 = float(gl_LaunchIDEXT.y);
    float _1320 = float(gl_LaunchSizeEXT.x);
    float _1334 = fract(fract(sin(dot(vec2(_1316 / _1320, _1317 / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1347 = fract(fract(sin(dot(vec2((_1316 + 128.0) / _1320, (_1317 + 128.0) / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1348 = 1.0 - _1099;
    float _1349 = _1348 * _956;
    float _1350 = _1348 * _957;
    float _1351 = _1348 * _958;
    float _1356 = _1099 * (_956 + (-0.039999999105930328369140625));
    float _1357 = _1099 * (_957 + (-0.039999999105930328369140625));
    float _1358 = _1099 * (_958 + (-0.039999999105930328369140625));
    float _1359 = _1356 + 0.039999999105930328369140625;
    float _1361 = _1357 + 0.039999999105930328369140625;
    float _1362 = _1358 + 0.039999999105930328369140625;
    _67._m0 = 1u;
    uvec4 _1372 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1373 = _1372.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1373, _1372.w, _1373, vec3(_1304, _1305, _1306), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (_67._m0 == 0u)
    {
        float _1393 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1290, _1291, _1292));
        float _1819 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1396 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        float _1415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1267) * 0.949999988079071044921875);
        float _1416 = _1415 * _1415;
        float _1417 = g_sceneCB._m0[4u].x - _1201;
        float _1418 = g_sceneCB._m0[4u].y - _1202;
        float _1419 = g_sceneCB._m0[4u].z - _1203;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1424 = _1423 * _1417;
        float _1425 = _1423 * _1418;
        float _1426 = _1423 * _1419;
        float _1427 = dot(vec3(_1290, _1291, _1292), vec3(g_sceneCB._m0[4u].xyz));
        float _1830 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1430 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        float _1431 = dot(vec3(_1290, _1291, _1292), vec3(_1307, _1309, _1310));
        float _1841 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1434 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        float _1435 = dot(vec3(_1290, _1291, _1292), vec3(_1424, _1425, _1426));
        float _1852 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1438 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        float _1439 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1424, _1425, _1426));
        float _1863 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1416 * _1416;
        float _1447 = ((_1438 * _1438) * (_1443 + (-1.0))) + 1.0;
        float _1456 = exp2(log2(1.0 - (isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0)))) * 5.0);
        float _1467 = 1.0 - _1416;
        float _1478 = (0.5 / (((_1434 * ((_1430 * _1467) + _1416)) + 9.9999999392252902907785028219223e-09) + (((_1434 * _1467) + _1416) * _1430))) * _1430;
        float _1874 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1480 = (isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0))) * (_1443 / ((_1447 * _1447) * 3.141590118408203125));
        _1487 = ((_1349 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1396;
        _1488 = ((_1350 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1396;
        _1489 = ((_1351 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1396;
        _1490 = (((_1456 * (0.959999978542327880859375 - _1356)) + _1359) * g_sceneCB._m0[5u].x) * _1480;
        _1491 = (((_1456 * (0.959999978542327880859375 - _1357)) + _1361) * g_sceneCB._m0[5u].y) * _1480;
        _1492 = (((_1456 * (0.959999978542327880859375 - _1358)) + _1362) * g_sceneCB._m0[5u].z) * _1480;
    }
    else
    {
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    bool _1494 = abs(_1291) < 0.89999997615814208984375;
    float _1496 = float(_1494);
    float _1497 = _1494 ? 0.0 : 1.0;
    float _1500 = (_1496 * _1292) - (_1497 * _1291);
    float _1501 = _1497 * _1290;
    float _1503 = (-0.0) - (_1290 * _1496);
    float _1507 = inversesqrt(dot(vec3(_1500, _1501, _1503), vec3(_1500, _1501, _1503)));
    float _1508 = _1500 * _1507;
    float _1509 = _1501 * _1507;
    float _1510 = _1507 * _1503;
    float _1513 = (_1509 * _1292) - (_1510 * _1291);
    float _1516 = (_1510 * _1290) - (_1508 * _1292);
    float _1519 = (_1508 * _1291) - (_1509 * _1290);
    float _1521;
    float _1529;
    float _1520 = 0.0;
    uint _1522 = 0u;
    float _1526;
    bool _1528;
    for (;;)
    {
        _1526 = (float(_1522) + _1334) * 0.03125;
        _1528 = _1522 == 0u;
        float frontier_phi_53_pred;
        if (_1528)
        {
            frontier_phi_53_pred = 0.0;
        }
        else
        {
            float _1670;
            float _1671;
            uint _1673;
            _1670 = 0.0;
            _1671 = 0.5;
            _1673 = _1522;
            float _1530;
            for (;;)
            {
                _1530 = ((_1673 & 1u) != 0u) ? (_1671 + _1670) : _1670;
                uint _1674 = _1673 >> 1u;
                if (_1674 == 0u)
                {
                    break;
                }
                else
                {
                    _1670 = _1530;
                    _1671 *= 0.5;
                    _1673 = _1674;
                }
            }
            frontier_phi_53_pred = _1530;
        }
        _1529 = frontier_phi_53_pred;
        float _1531 = _1529 + _1347;
        float _1535 = sqrt(_1526);
        float _1536 = ((_1531 > 1.0) ? (_1531 + (-1.0)) : _1531) * 6.283185482025146484375;
        float _1539 = cos(_1536) * _1535;
        float _1541 = sin(_1536) * _1535;
        float _1543 = sqrt(1.0 - _1526);
        float _1556 = ((_1543 * _1290) + (_1539 * _1513)) + (_1541 * _1508);
        float _1557 = ((_1543 * _1291) + (_1539 * _1516)) + (_1541 * _1509);
        float _1558 = ((_1543 * _1292) + (_1539 * _1519)) + (_1541 * _1510);
        _66._m0 = 1u;
        uvec4 _1562 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1563 = _1562.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1563, _1562.w, _1563, vec3(_1304, _1305, _1306), 9.9999997473787516355514526367188e-05, vec3(_1556, _1557, _1558), 10000.0, 1);
        float _1569 = dot(vec3(_1290, _1291, _1292), vec3(_1556, _1557, _1558));
        float _1885 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1572 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1521 = ((float(_66._m0 == 0u) * _1572) / (_1572 * 0.3183098733425140380859375)) + _1520;
        uint _1523 = _1522 + 1u;
        if (_1523 == 32u)
        {
            break;
        }
        else
        {
            _1520 = _1521;
            _1522 = _1523;
            continue;
        }
    }
    float _1580 = _1521 * 0.009947183541953563690185546875;
    float _1585 = dot(vec3(_1201, _1202, _1203), vec3(_1290, _1291, _1292)) * 2.0;
    vec4 _1599 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1201 - (_1585 * _1290), _1202 - (_1585 * _1291), _1203 - (_1585 * _1292)), 4.0 - (_1267 * 4.0));
    float _1604 = dot(vec3(_1307, _1309, _1310), vec3(_1290, _1291, _1292));
    float _1896 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1614 = exp2(log2(1.0 - (isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0)))) * 5.0);
    vec4 _1626 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1290, _1291, _1292), 0.0);
    float _1637 = (_1490 + _1487) + (((_1626.x * _1349) + (((_1614 * (0.959999978542327880859375 - _1356)) + _1359) * _1599.x)) * _1580);
    float _1641 = (_1491 + _1488) + (((_1626.y * _1350) + (((_1614 * (0.959999978542327880859375 - _1357)) + _1361) * _1599.y)) * _1580);
    float _1645 = (_1492 + _1489) + (((_1626.z * _1351) + (((_1614 * (0.959999978542327880859375 - _1358)) + _1362) * _1599.z)) * _1580);
    float _1907 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1918 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1929 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    bool _1653 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1664;
    _1664.x = _1653 ? ((_655 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0)));
    _1664.y = _1653 ? ((_658 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0)));
    _1664.z = _1653 ? ((_661 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0)));
    payload._m0 = _1664;
}


