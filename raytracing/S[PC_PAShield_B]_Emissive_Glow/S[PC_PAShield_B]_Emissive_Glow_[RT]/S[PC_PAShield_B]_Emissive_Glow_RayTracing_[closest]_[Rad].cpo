#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _59
{
    vec3 _m0;
};

struct _63
{
    vec2 _m0;
};

struct _66
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _59 payload;
hitAttributeEXT _63 hit;
layout(location = 1) rayPayloadEXT _66 _68;
layout(location = 2) rayPayloadEXT _66 _69;

vec3 _1575;

void main()
{
    float _83 = float(gl_LaunchSizeEXT.y);
    float _111 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _113 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _120 = sqrt(((_112 * _112) + (_111 * _111)) + (_113 * _113)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _83)))));
    uvec4 _131 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _132 = _131.y;
    uint _172;
    uint _174;
    uint _175;
    if (_131.x == 0u)
    {
        uint _140 = (_132 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _149 = uvec3(texelFetch(l_geomIndexBuffer, int(_140)).x, texelFetch(l_geomIndexBuffer, int(_140 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_140 + 2u)).x);
        _172 = _149.x;
        _174 = _149.y;
        _175 = _149.z;
    }
    else
    {
        uint _153 = uint(gl_PrimitiveID) * 6u;
        uint _155 = _153 & 4294967292u;
        uint _158 = (_132 + _155) >> 2u;
        uvec2 _165 = uvec2(texelFetch(l_geomIndexBuffer, int(_158)).x, texelFetch(l_geomIndexBuffer, int(_158 + 1u)).x);
        uint _166 = _165.x;
        uint _167 = _165.y;
        uint _169 = _166 >> 16u;
        uint _170 = _167 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_155 == _153)
        {
            frontier_phi_3_2_ladder = _170;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _166 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _167 >> 16u;
            frontier_phi_3_2_ladder_1 = _170;
            frontier_phi_3_2_ladder_2 = _169;
        }
        _172 = frontier_phi_3_2_ladder_2;
        _174 = frontier_phi_3_2_ladder_1;
        _175 = frontier_phi_3_2_ladder;
    }
    uvec4 _179 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _180 = _179.x;
    uint _181 = _179.z;
    bool _182 = _181 != 0u;
    bool _184 = _131.w == 0u;
    bool _185 = _182 || _184;
    uint _187 = (_180 * _172) + 12u;
    uint _211;
    uint _212;
    uint _213;
    uint _214;
    if (_185)
    {
        uvec4 _190 = texelFetch(l_geomAttrib_0, int(_187 >> 2u));
        uint _191 = _190.x;
        _211 = _191 & 255u;
        _212 = (_191 >> 8u) & 255u;
        _213 = (_191 >> 16u) & 255u;
        _214 = 20u;
    }
    else
    {
        uint _199 = _187 >> 2u;
        uvec2 _205 = uvec2(texelFetch(l_geomAttrib_0, int(_199)).x, texelFetch(l_geomAttrib_0, int(_199 + 1u)).x);
        uint _206 = _205.x;
        _211 = _206 & 65535u;
        _212 = _206 >> 16u;
        _213 = _205.y & 65535u;
        _214 = 24u;
    }
    bool _220 = _181 == 0u;
    uint _221;
    if (_220)
    {
        _221 = _214;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_184)
        {
            frontier_phi_9_10_ladder = _214 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _214 + 8u;
        }
        _221 = frontier_phi_9_10_ladder;
    }
    uint _231 = (((_180 * _172) + 4u) + (_182 ? (_221 + 4u) : _221)) >> 2u;
    uvec2 _237 = uvec2(texelFetch(l_geomAttrib_0, int(_231)).x, texelFetch(l_geomAttrib_0, int(_231 + 1u)).x);
    uint _238 = _237.x;
    uint _239 = _237.y;
    float _243 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_238) >> int(16u))));
    uint _251 = (_180 * _174) + 12u;
    uint _272;
    uint _273;
    uint _274;
    uint _275;
    if (_185)
    {
        uvec4 _253 = texelFetch(l_geomAttrib_0, int(_251 >> 2u));
        uint _254 = _253.x;
        _272 = _254 & 255u;
        _273 = (_254 >> 8u) & 255u;
        _274 = (_254 >> 16u) & 255u;
        _275 = 20u;
    }
    else
    {
        uint _260 = _251 >> 2u;
        uvec2 _266 = uvec2(texelFetch(l_geomAttrib_0, int(_260)).x, texelFetch(l_geomAttrib_0, int(_260 + 1u)).x);
        uint _267 = _266.x;
        _272 = _267 & 65535u;
        _273 = _267 >> 16u;
        _274 = _266.y & 65535u;
        _275 = 24u;
    }
    uint _279;
    if (_220)
    {
        _279 = _275;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_184)
        {
            frontier_phi_16_17_ladder = _275 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _275 + 8u;
        }
        _279 = frontier_phi_16_17_ladder;
    }
    uint _287 = (((_180 * _174) + 4u) + (_182 ? (_279 + 4u) : _279)) >> 2u;
    uvec2 _293 = uvec2(texelFetch(l_geomAttrib_0, int(_287)).x, texelFetch(l_geomAttrib_0, int(_287 + 1u)).x);
    uint _294 = _293.x;
    uint _295 = _293.y;
    float _299 = float(int(uint(int(_294 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_294) >> int(16u))));
    uint _307 = (_180 * _175) + 12u;
    uint _328;
    uint _329;
    uint _330;
    uint _331;
    if (_185)
    {
        uvec4 _309 = texelFetch(l_geomAttrib_0, int(_307 >> 2u));
        uint _310 = _309.x;
        _328 = _310 & 255u;
        _329 = (_310 >> 8u) & 255u;
        _330 = (_310 >> 16u) & 255u;
        _331 = 20u;
    }
    else
    {
        uint _316 = _307 >> 2u;
        uvec2 _322 = uvec2(texelFetch(l_geomAttrib_0, int(_316)).x, texelFetch(l_geomAttrib_0, int(_316 + 1u)).x);
        uint _323 = _322.x;
        _328 = _323 & 65535u;
        _329 = _323 >> 16u;
        _330 = _322.y & 65535u;
        _331 = 24u;
    }
    uint _335;
    if (_220)
    {
        _335 = _331;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_184)
        {
            frontier_phi_23_24_ladder = _331 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _331 + 8u;
        }
        _335 = frontier_phi_23_24_ladder;
    }
    uint _343 = (((_180 * _175) + 4u) + (_182 ? (_335 + 4u) : _335)) >> 2u;
    uvec2 _349 = uvec2(texelFetch(l_geomAttrib_0, int(_343)).x, texelFetch(l_geomAttrib_0, int(_343 + 1u)).x);
    uint _350 = _349.x;
    uint _351 = _349.y;
    float _355 = float(int(uint(int(_350 << 16u) >> int(16u))));
    float _356 = float(int(uint(int(_350) >> int(16u))));
    bool _363 = _131.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _172 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _172 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _174 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _174 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _175 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _175 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _243) * 0.00048828125;
    float _514 = (_300 - _244) * 0.00048828125;
    float _517 = (_355 - _243) * 0.00048828125;
    float _518 = (_356 - _244) * 0.00048828125;
    float _540 = _437 - _399;
    float _541 = _438 - _400;
    float _542 = _439 - _401;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _475 - _399;
    float _553 = _476 - _400;
    float _554 = _477 - _401;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _564 = (((_299 * hit._m0.x) + (_243 * _480)) + (_355 * hit._m0.y)) * 0.00048828125;
    float _565 = (((_300 * hit._m0.x) + (_244 * _480)) + (_356 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_211) * _480) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _574 = (((float(_212) * _480) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_329) * hit._m0.y);
    float _577 = (((float(_213) * _480) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_330) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _587 = sin(cbMtdParam._m0[14u].w);
    float _588 = cos(cbMtdParam._m0[14u].w);
    float _589 = ((((float(int(uint(int(_295 << 16u) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_239 << 16u) >> int(16u)))) * _480)) + (float(int(uint(int(_351 << 16u) >> int(16u)))) * hit._m0.y)) * 0.00048828125) - cbMtdParam._m0[14u].z;
    float _590 = ((((float(int(uint(int(_295) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_239) >> int(16u)))) * _480)) + (float(int(uint(int(_351) >> int(16u)))) * hit._m0.y)) * 0.00048828125) - cbMtdParam._m0[14u].z;
    float _597 = fma(_590, (-0.0) - _587, _588 * _589) + cbMtdParam._m0[14u].z;
    float _598 = fma(_590, _588, _589 * _587) + cbMtdParam._m0[14u].z;
    float _625 = (cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + _564)) + cbTextureTilingScale._m0[3u].z;
    float _626 = (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[20u].x * cbPerFrame._m0[22u].x) + _565)) + cbTextureTilingScale._m0[3u].w;
    uvec2 _628 = uvec2(textureSize(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    bool _633 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _686;
    if (_633)
    {
        float _644 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _650 = (_563 * _548) - (_560 * _551);
        float _653 = (_557 * _551) - (_563 * _545);
        float _656 = (_560 * _545) - (_557 * _548);
        float _683 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_653 * _653) + (_656 * _656)) + (_650 * _650)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_644 * gl_WorldRayDirectionEXT.x, _644 * gl_WorldRayDirectionEXT.y, _644 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    }
    else
    {
        _686 = 0.0;
    }
    vec4 _690 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_625, _626), _686);
    float _694 = cbPerFrame._m0[22u].x * 2.0;
    float _695 = _694 * cbMtdParam._m0[16u].x;
    float _701 = ((_690.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _703 = (-0.0) - (cbMtdParam._m0[15u].z * ((_690.x * 0.5) + (-0.25)));
    float _704 = fract(_695);
    float _706 = fract(_695 + 0.5);
    float _718 = abs((_704 * 2.0) + (-1.0));
    vec4 _737 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_704 * _703) + _597) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _704) + _598) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _739 = _737.x;
    float _762 = cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x;
    float _765 = (_762 * cbMtdParam._m0[18u].y) + _564;
    float _766 = (_762 * cbMtdParam._m0[18u].z) + _565;
    float _817;
    if (_633)
    {
        float _777 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _783 = (_563 * _548) - (_560 * _551);
        float _786 = (_557 * _551) - (_563 * _545);
        float _789 = (_560 * _545) - (_557 * _548);
        float _815 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_786 * _786) + (_789 * _789)) + (_783 * _783)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_777 * gl_WorldRayDirectionEXT.x, _777 * gl_WorldRayDirectionEXT.y, _777 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _817 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    }
    else
    {
        _817 = 0.0;
    }
    vec4 _819 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_625, _626), _817);
    float _827 = ((_819.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _829 = (-0.0) - (cbMtdParam._m0[15u].z * ((_819.x * 0.5) + (-0.25)));
    vec4 _854 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_704 * _829) + _765) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_827 * _704) + _766) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _856 = _854.x;
    float _857 = _854.y;
    float _858 = _854.z;
    vec4 _859 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_706 * _829) + _765) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_827 * _706) + _766) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _886 = (cbMtdParam._m0[19u].y * _762) + _564;
    float _887 = (cbMtdParam._m0[19u].z * _762) + _565;
    float _938;
    if (_633)
    {
        float _898 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _904 = (_563 * _548) - (_560 * _551);
        float _907 = (_557 * _551) - (_563 * _545);
        float _910 = (_560 * _545) - (_557 * _548);
        float _936 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_907 * _907) + (_910 * _910)) + (_904 * _904)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_898 * gl_WorldRayDirectionEXT.x, _898 * gl_WorldRayDirectionEXT.y, _898 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _938 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    }
    else
    {
        _938 = 0.0;
    }
    vec4 _940 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_625, _626), _938);
    float _948 = ((_940.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _950 = (-0.0) - (cbMtdParam._m0[15u].z * ((_940.x * 0.5) + (-0.25)));
    vec4 _975 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_704 * _950) + _886) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_948 * _704) + _887) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _977 = _975.x;
    float _978 = _975.y;
    float _979 = _975.z;
    vec4 _980 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_706 * _950) + _886) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_948 * _706) + _887) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _997 = ((((_980.x - _977) * _718) + _977) * cbMtdParam._m0[13u].x) + ((((_859.x - _856) * _718) + _856) * cbMtdParam._m0[11u].x);
    float _998 = ((((_980.y - _978) * _718) + _978) * cbMtdParam._m0[13u].y) + ((((_859.y - _857) * _718) + _857) * cbMtdParam._m0[11u].y);
    float _999 = ((((_980.z - _979) * _718) + _979) * cbMtdParam._m0[13u].z) + ((((_859.z - _858) * _718) + _858) * cbMtdParam._m0[11u].z);
    float _1005 = abs((fract(cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1672 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1006 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    float _1013 = ((_1006 * _1006) * (3.0 - (_1006 * 2.0))) - cbMtdParam._m0[16u].y;
    float _1024 = (cbMtdParam._m0[20u].y * _762) + _564;
    float _1025 = (cbMtdParam._m0[20u].z * _762) + _565;
    float _1076;
    if (_633)
    {
        float _1036 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1042 = (_563 * _548) - (_560 * _551);
        float _1045 = (_557 * _551) - (_563 * _545);
        float _1048 = (_560 * _545) - (_557 * _548);
        float _1074 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_1045 * _1045) + (_1048 * _1048)) + (_1042 * _1042)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1036 * gl_WorldRayDirectionEXT.x, _1036 * gl_WorldRayDirectionEXT.y, _1036 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _1076 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    }
    else
    {
        _1076 = 0.0;
    }
    vec4 _1078 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_625, _626), _1076);
    float _1086 = ((_1078.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _1088 = (-0.0) - (cbMtdParam._m0[15u].z * ((_1078.x * 0.5) + (-0.25)));
    vec4 _1113 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_704 * _1088) + _1024) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_1086 * _704) + _1025) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), 0.0);
    float _1115 = _1113.x;
    float _1116 = _1113.y;
    float _1117 = _1113.z;
    vec4 _1118 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_706 * _1088) + _1024) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_1086 * _706) + _1025) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), 0.0);
    float _1144 = (cbMtdParam._m0[18u].w * _762) + _564;
    float _1145 = (cbMtdParam._m0[19u].x * _762) + _565;
    float _1151 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1152 = _1151 * gl_WorldRayDirectionEXT.x;
    float _1153 = _1151 * gl_WorldRayDirectionEXT.y;
    float _1154 = _1151 * gl_WorldRayDirectionEXT.z;
    float _1198;
    if (_633)
    {
        float _1164 = (_563 * _548) - (_560 * _551);
        float _1167 = (_557 * _551) - (_563 * _545);
        float _1170 = (_560 * _545) - (_557 * _548);
        float _1196 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_1167 * _1167) + (_1170 * _1170)) + (_1164 * _1164)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1152, _1153, _1154), vec3(_578, _580, _581))));
        _1198 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    }
    else
    {
        _1198 = 0.0;
    }
    vec4 _1200 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2(_625, _626), _1198);
    float _1204 = _694 * cbMtdParam._m0[18u].x;
    float _1209 = ((_1200.y * 0.5) + (-0.25)) * cbMtdParam._m0[17u].w;
    float _1211 = (-0.0) - (cbMtdParam._m0[17u].w * ((_1200.x * 0.5) + (-0.25)));
    float _1212 = fract(_1204);
    float _1214 = fract(_1204 + 0.5);
    float _1225 = abs((_1212 * 2.0) + (-1.0));
    vec4 _1242 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1212 * _1211) + _1144) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1209 * _1212) + _1145) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1244 = _1242.x;
    float _1245 = _1242.y;
    float _1246 = _1242.z;
    vec4 _1247 = textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1214 * _1211) + _1144) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1209 * _1214) + _1145) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1271 = cbMtdParam._m0[14u].y * (((textureLod(sampler2D(S_PC_PAShield_B_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_706 * _703) + _597) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _706) + _598) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0).x - _739) * _718) + _739);
    float _1287 = inversesqrt(dot(vec3(_578, _580, _581), vec3(_578, _580, _581)));
    float _1288 = _1287 * _578;
    float _1289 = _1287 * _580;
    float _1290 = _1287 * _581;
    float _1302 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1303 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1304 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1305 = (-0.0) - _1152;
    float _1306 = (-0.0) - _1153;
    float _1307 = (-0.0) - _1154;
    float _1313 = float(gl_LaunchIDEXT.x);
    float _1314 = float(gl_LaunchIDEXT.y);
    float _1317 = float(gl_LaunchSizeEXT.x);
    float _1331 = fract(fract(sin(dot(vec2(_1313 / _1317, _1314 / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1344 = fract(fract(sin(dot(vec2((_1313 + 128.0) / _1317, (_1314 + 128.0) / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _69._m0 = 1u;
    uvec4 _1354 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1355 = _1354.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1355, _1354.w, _1355, vec3(_1302, _1303, _1304), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1420;
    float _1421;
    float _1422;
    if (_69._m0 == 0u)
    {
        float _1375 = g_sceneCB._m0[4u].x - _1152;
        float _1376 = g_sceneCB._m0[4u].y - _1153;
        float _1377 = g_sceneCB._m0[4u].z - _1154;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1385 = dot(vec3(_1288, _1289, _1290), vec3(g_sceneCB._m0[4u].xyz));
        float _1693 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1388 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        float _1389 = dot(vec3(_1288, _1289, _1290), vec3(_1305, _1306, _1307));
        float _1704 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1375 * _1381, _1376 * _1381, _1377 * _1381));
        float _1715 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1404 = (exp2(log2(1.0 - (isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1410 = (0.5 / ((_1388 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0))))) * _1388;
        float _1726 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1412 = (isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0))) * 0.31831014156341552734375;
        _1420 = (_1404 * g_sceneCB._m0[5u].x) * _1412;
        _1421 = (_1404 * g_sceneCB._m0[5u].y) * _1412;
        _1422 = (_1404 * g_sceneCB._m0[5u].z) * _1412;
    }
    else
    {
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    bool _1424 = abs(_1289) < 0.89999997615814208984375;
    float _1426 = float(_1424);
    float _1427 = _1424 ? 0.0 : 1.0;
    float _1430 = (_1426 * _1290) - (_1427 * _1289);
    float _1431 = _1427 * _1288;
    float _1433 = (-0.0) - (_1288 * _1426);
    float _1437 = inversesqrt(dot(vec3(_1430, _1431, _1433), vec3(_1430, _1431, _1433)));
    float _1438 = _1430 * _1437;
    float _1439 = _1431 * _1437;
    float _1440 = _1437 * _1433;
    float _1443 = (_1439 * _1290) - (_1440 * _1289);
    float _1446 = (_1440 * _1288) - (_1438 * _1290);
    float _1449 = (_1438 * _1289) - (_1439 * _1288);
    float _1451;
    float _1459;
    float _1450 = 0.0;
    uint _1452 = 0u;
    float _1456;
    bool _1458;
    for (;;)
    {
        _1456 = (float(_1452) + _1331) * 0.03125;
        _1458 = _1452 == 0u;
        float frontier_phi_49_pred;
        if (_1458)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1580;
            float _1581;
            uint _1583;
            _1580 = 0.0;
            _1581 = 0.5;
            _1583 = _1452;
            float _1460;
            for (;;)
            {
                _1460 = ((_1583 & 1u) != 0u) ? (_1581 + _1580) : _1580;
                uint _1584 = _1583 >> 1u;
                if (_1584 == 0u)
                {
                    break;
                }
                else
                {
                    _1580 = _1460;
                    _1581 *= 0.5;
                    _1583 = _1584;
                }
            }
            frontier_phi_49_pred = _1460;
        }
        _1459 = frontier_phi_49_pred;
        float _1461 = _1459 + _1344;
        float _1465 = sqrt(_1456);
        float _1466 = ((_1461 > 1.0) ? (_1461 + (-1.0)) : _1461) * 6.283185482025146484375;
        float _1469 = cos(_1466) * _1465;
        float _1471 = sin(_1466) * _1465;
        float _1473 = sqrt(1.0 - _1456);
        float _1486 = ((_1473 * _1288) + (_1469 * _1443)) + (_1471 * _1438);
        float _1487 = ((_1473 * _1289) + (_1469 * _1446)) + (_1471 * _1439);
        float _1488 = ((_1473 * _1290) + (_1469 * _1449)) + (_1471 * _1440);
        _68._m0 = 1u;
        uvec4 _1492 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1493 = _1492.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1493, _1492.w, _1493, vec3(_1302, _1303, _1304), 9.9999997473787516355514526367188e-05, vec3(_1486, _1487, _1488), 10000.0, 1);
        float _1499 = dot(vec3(_1288, _1289, _1290), vec3(_1486, _1487, _1488));
        float _1737 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1502 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1451 = ((float(_68._m0 == 0u) * _1502) / (_1502 * 0.3183098733425140380859375)) + _1450;
        uint _1453 = _1452 + 1u;
        if (_1453 == 32u)
        {
            break;
        }
        else
        {
            _1450 = _1451;
            _1452 = _1453;
            continue;
        }
    }
    float _1511 = _1451 * 0.009947183541953563690185546875;
    float _1516 = dot(vec3(_1152, _1153, _1154), vec3(_1288, _1289, _1290)) * 2.0;
    vec4 _1528 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1152 - (_1516 * _1288), _1153 - (_1516 * _1289), _1154 - (_1516 * _1290)), 4.0);
    float _1533 = dot(vec3(_1305, _1306, _1307), vec3(_1288, _1289, _1290));
    float _1748 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1542 = (exp2(log2(1.0 - (isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1550 = (_1420 + (((_1271 * (((((((_1247.x - _1244) * _1225) + _1244) * cbMtdParam._m0[12u].x) + ((((_1118.x - _1115) * _718) + _1115) * cbMtdParam._m0[9u].x)) * _1013) - _997)) + _997) * cbMtdParam._m0[17u].y)) + ((_1528.x * _1511) * _1542);
    float _1552 = (_1421 + (((_1271 * (((((((_1247.y - _1245) * _1225) + _1245) * cbMtdParam._m0[12u].y) + ((((_1118.y - _1116) * _718) + _1116) * cbMtdParam._m0[9u].y)) * _1013) - _998)) + _998) * cbMtdParam._m0[17u].y)) + ((_1528.y * _1511) * _1542);
    float _1554 = (_1422 + (((_1271 * (((((((_1247.z - _1246) * _1225) + _1246) * cbMtdParam._m0[12u].z) + ((((_1118.z - _1117) * _718) + _1117) * cbMtdParam._m0[9u].z)) * _1013) - _999)) + _999) * cbMtdParam._m0[17u].y)) + ((_1528.z * _1511) * _1542);
    float _1759 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1770 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1781 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    bool _1563 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1574;
    _1574.x = _1563 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0)));
    _1574.y = _1563 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0)));
    _1574.z = _1563 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0)));
    payload._m0 = _1574;
}


