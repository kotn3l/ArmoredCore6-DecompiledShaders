#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_E_Billboard_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D S_E_Billboard_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1084;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _166;
    uint _168;
    uint _169;
    if (_126.x == 0u)
    {
        uint _134 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_127 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _161 >> 16u;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _126.w == 0u;
    bool _179 = _176 || _178;
    uint _181 = (_174 * _166) + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 20u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 24u;
    }
    bool _214 = _175 == 0u;
    uint _215;
    if (_214)
    {
        _215 = _208;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _208 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _208 + 8u;
        }
        _215 = frontier_phi_9_10_ladder;
    }
    uint _220 = _176 ? (_215 + 4u) : _215;
    uint _221 = _174 * _166;
    uvec4 _226 = texelFetch(l_geomAttrib_0, int(((_221 + 4u) + _220) >> 2u));
    uint _227 = _226.x;
    float _231 = float(int(uint(int(_227 << 16u) >> int(16u))));
    float _232 = float(int(uint(int(_227) >> int(16u))));
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_221 + 8u) + _220) >> 2u));
    uint _237 = _236.x;
    uint _247 = (_174 * _168) + 12u;
    uint _268;
    uint _269;
    uint _270;
    uint _271;
    if (_179)
    {
        uvec4 _249 = texelFetch(l_geomAttrib_0, int(_247 >> 2u));
        uint _250 = _249.x;
        _268 = _250 & 255u;
        _269 = (_250 >> 8u) & 255u;
        _270 = (_250 >> 16u) & 255u;
        _271 = 20u;
    }
    else
    {
        uint _256 = _247 >> 2u;
        uvec2 _262 = uvec2(texelFetch(l_geomAttrib_0, int(_256)).x, texelFetch(l_geomAttrib_0, int(_256 + 1u)).x);
        uint _263 = _262.x;
        _268 = _263 & 65535u;
        _269 = _263 >> 16u;
        _270 = _262.y & 65535u;
        _271 = 24u;
    }
    uint _275;
    if (_214)
    {
        _275 = _271;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _271 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _271 + 8u;
        }
        _275 = frontier_phi_16_17_ladder;
    }
    uint _279 = _176 ? (_275 + 4u) : _275;
    uint _280 = _174 * _168;
    uvec4 _284 = texelFetch(l_geomAttrib_0, int(((_280 + 4u) + _279) >> 2u));
    uint _285 = _284.x;
    float _289 = float(int(uint(int(_285 << 16u) >> int(16u))));
    float _290 = float(int(uint(int(_285) >> int(16u))));
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_280 + 8u) + _279) >> 2u));
    uint _295 = _294.x;
    uint _305 = (_174 * _169) + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_179)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 20u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 24u;
    }
    uint _333;
    if (_214)
    {
        _333 = _329;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _329 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 8u;
        }
        _333 = frontier_phi_23_24_ladder;
    }
    uint _337 = _176 ? (_333 + 4u) : _333;
    uint _338 = _174 * _169;
    uvec4 _342 = texelFetch(l_geomAttrib_0, int(((_338 + 4u) + _337) >> 2u));
    uint _343 = _342.x;
    float _347 = float(int(uint(int(_343 << 16u) >> int(16u))));
    float _348 = float(int(uint(int(_343) >> int(16u))));
    uvec4 _352 = texelFetch(l_geomAttrib_0, int(((_338 + 8u) + _337) >> 2u));
    uint _353 = _352.x;
    bool _363 = _126.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _166 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _166 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _168 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _168 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _169 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _169 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _521 = (_289 - _231) * 0.00048828125;
    float _523 = (_290 - _232) * 0.00048828125;
    float _526 = (_347 - _231) * 0.00048828125;
    float _527 = (_348 - _232) * 0.00048828125;
    float _549 = _437 - _399;
    float _550 = _438 - _400;
    float _551 = _439 - _401;
    float _554 = fma(_551, gl_ObjectToWorldEXT[2u].x, fma(_550, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _549));
    float _557 = fma(_551, gl_ObjectToWorldEXT[2u].y, fma(_550, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _549));
    float _560 = fma(_551, gl_ObjectToWorldEXT[2u].z, fma(_550, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _549));
    float _561 = _475 - _399;
    float _562 = _476 - _400;
    float _563 = _477 - _401;
    float _566 = fma(_563, gl_ObjectToWorldEXT[2u].x, fma(_562, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _561));
    float _569 = fma(_563, gl_ObjectToWorldEXT[2u].y, fma(_562, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _561));
    float _572 = fma(_563, gl_ObjectToWorldEXT[2u].z, fma(_562, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _561));
    float _573 = (((_289 * hit._m0.x) + (_231 * _480)) + (_347 * hit._m0.y)) * 0.00048828125;
    float _574 = (((_290 * hit._m0.x) + (_232 * _480)) + (_348 * hit._m0.y)) * 0.00048828125;
    float _578 = (((float(_205) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _581 = (((float(_206) * _480) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _584 = (((float(_207) * _480) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _585 = _578 * 0.0078740157186985015869140625;
    float _587 = _581 * 0.0078740157186985015869140625;
    float _588 = _584 * 0.0078740157186985015869140625;
    uvec2 _610 = uvec2(textureSize(S_E_Billboard_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    bool _615 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _668;
    if (_615)
    {
        float _626 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _632 = (_572 * _557) - (_569 * _560);
        float _635 = (_566 * _560) - (_572 * _554);
        float _638 = (_569 * _554) - (_566 * _557);
        float _665 = ((log2((((float(_610.y) * 0.5) * float(_610.x)) * abs((_527 * _521) - (_526 * _523))) / (sqrt(((_635 * _635) + (_638 * _638)) + (_632 * _632)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_626 * gl_WorldRayDirectionEXT.x, _626 * gl_WorldRayDirectionEXT.y, _626 * gl_WorldRayDirectionEXT.z), vec3(_585, _587, _588))));
        _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    }
    else
    {
        _668 = 0.0;
    }
    vec4 _672 = textureLod(sampler2D(S_E_Billboard_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _573) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _574) + cbTextureTilingScale._m0[0u].w), _668);
    float _678 = (cbMtdParam._m0[9u].x * cbMtdParam._m0[11u].y) * _672.x;
    float _680 = (cbMtdParam._m0[9u].y * cbMtdParam._m0[11u].y) * _672.y;
    float _682 = (cbMtdParam._m0[9u].z * cbMtdParam._m0[11u].y) * _672.z;
    uvec2 _701 = uvec2(textureSize(S_E_Billboard_Emissive_Glow_snp_0_Texture2D_2, int(0u)));
    float _705 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _706 = _705 * gl_WorldRayDirectionEXT.x;
    float _707 = _705 * gl_WorldRayDirectionEXT.y;
    float _708 = _705 * gl_WorldRayDirectionEXT.z;
    float _752;
    if (_615)
    {
        float _718 = (_572 * _557) - (_569 * _560);
        float _721 = (_566 * _560) - (_572 * _554);
        float _724 = (_569 * _554) - (_566 * _557);
        float _750 = ((log2((((float(_701.y) * 0.5) * float(_701.x)) * abs((_527 * _521) - (_526 * _523))) / (sqrt(((_721 * _721) + (_724 * _724)) + (_718 * _718)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_706, _707, _708), vec3(_585, _587, _588))));
        _752 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    }
    else
    {
        _752 = 0.0;
    }
    vec4 _754 = textureLod(sampler2D(S_E_Billboard_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _573) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _574) + cbTextureTilingScale._m0[1u].w), _752);
    float _765 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1170 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _1170 : (isnan(_1170) ? 1.0 : min(_1170, 1.0));
    float _773 = ((_766 * _766) * (3.0 - (_766 * 2.0))) - cbMtdParam._m0[11u].w;
    float _792 = inversesqrt(dot(vec3(_585, _587, _588), vec3(_585, _587, _588)));
    float _793 = _792 * _585;
    float _794 = _792 * _587;
    float _795 = _792 * _588;
    float _807 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _808 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _809 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _810 = (-0.0) - _706;
    float _812 = (-0.0) - _707;
    float _813 = (-0.0) - _708;
    float _819 = float(gl_LaunchIDEXT.x);
    float _820 = float(gl_LaunchIDEXT.y);
    float _823 = float(gl_LaunchSizeEXT.x);
    float _837 = fract(fract(sin(dot(vec2(_819 / _823, _820 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _850 = fract(fract(sin(dot(vec2((_819 + 128.0) / _823, (_820 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _860 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _861 = _860.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _861, _860.w, _861, vec3(_807, _808, _809), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _927;
    float _928;
    float _929;
    if (_64._m0 == 0u)
    {
        float _882 = g_sceneCB._m0[4u].x - _706;
        float _883 = g_sceneCB._m0[4u].y - _707;
        float _884 = g_sceneCB._m0[4u].z - _708;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _892 = dot(vec3(_793, _794, _795), vec3(g_sceneCB._m0[4u].xyz));
        float _1181 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _895 = isnan(1.0) ? _1181 : (isnan(_1181) ? 1.0 : min(_1181, 1.0));
        float _896 = dot(vec3(_793, _794, _795), vec3(_810, _812, _813));
        float _1192 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_882 * _888, _883 * _888, _884 * _888));
        float _1203 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _911 = (exp2(log2(1.0 - (isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _917 = (0.5 / ((_895 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1192 : (isnan(_1192) ? 1.0 : min(_1192, 1.0))))) * _895;
        float _1214 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _919 = (isnan(1.0) ? _1214 : (isnan(_1214) ? 1.0 : min(_1214, 1.0))) * 0.31831014156341552734375;
        _927 = (_911 * g_sceneCB._m0[5u].x) * _919;
        _928 = (_911 * g_sceneCB._m0[5u].y) * _919;
        _929 = (_911 * g_sceneCB._m0[5u].z) * _919;
    }
    else
    {
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    bool _931 = abs(_794) < 0.89999997615814208984375;
    float _933 = float(_931);
    float _934 = _931 ? 0.0 : 1.0;
    float _937 = (_933 * _795) - (_934 * _794);
    float _938 = _934 * _793;
    float _940 = (-0.0) - (_793 * _933);
    float _944 = inversesqrt(dot(vec3(_937, _938, _940), vec3(_937, _938, _940)));
    float _945 = _937 * _944;
    float _946 = _938 * _944;
    float _947 = _944 * _940;
    float _950 = (_946 * _795) - (_947 * _794);
    float _953 = (_947 * _793) - (_945 * _795);
    float _956 = (_945 * _794) - (_946 * _793);
    float _958;
    float _966;
    float _957 = 0.0;
    uint _959 = 0u;
    float _963;
    bool _965;
    for (;;)
    {
        _963 = (float(_959) + _837) * 0.03125;
        _965 = _959 == 0u;
        float frontier_phi_43_pred;
        if (_965)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1089;
            float _1090;
            uint _1092;
            _1089 = 0.0;
            _1090 = 0.5;
            _1092 = _959;
            float _967;
            for (;;)
            {
                _967 = ((_1092 & 1u) != 0u) ? (_1090 + _1089) : _1089;
                uint _1093 = _1092 >> 1u;
                if (_1093 == 0u)
                {
                    break;
                }
                else
                {
                    _1089 = _967;
                    _1090 *= 0.5;
                    _1092 = _1093;
                }
            }
            frontier_phi_43_pred = _967;
        }
        _966 = frontier_phi_43_pred;
        float _968 = _966 + _850;
        float _972 = sqrt(_963);
        float _973 = ((_968 > 1.0) ? (_968 + (-1.0)) : _968) * 6.283185482025146484375;
        float _976 = cos(_973) * _972;
        float _978 = sin(_973) * _972;
        float _980 = sqrt(1.0 - _963);
        float _993 = ((_980 * _793) + (_976 * _950)) + (_978 * _945);
        float _994 = ((_980 * _794) + (_976 * _953)) + (_978 * _946);
        float _995 = ((_980 * _795) + (_976 * _956)) + (_978 * _947);
        _63._m0 = 1u;
        uvec4 _999 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1000 = _999.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1000, _999.w, _1000, vec3(_807, _808, _809), 9.9999997473787516355514526367188e-05, vec3(_993, _994, _995), 10000.0, 1);
        float _1006 = dot(vec3(_793, _794, _795), vec3(_993, _994, _995));
        float _1225 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1009 = isnan(1.0) ? _1225 : (isnan(_1225) ? 1.0 : min(_1225, 1.0));
        _958 = ((float(_63._m0 == 0u) * _1009) / (_1009 * 0.3183098733425140380859375)) + _957;
        uint _960 = _959 + 1u;
        if (_960 == 32u)
        {
            break;
        }
        else
        {
            _957 = _958;
            _959 = _960;
            continue;
        }
    }
    float _1018 = _958 * 0.009947183541953563690185546875;
    float _1023 = dot(vec3(_706, _707, _708), vec3(_793, _794, _795)) * 2.0;
    vec4 _1035 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_706 - (_1023 * _793), _707 - (_1023 * _794), _708 - (_1023 * _795)), 4.0);
    float _1040 = dot(vec3(_810, _812, _813), vec3(_793, _794, _795));
    float _1236 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1049 = (exp2(log2(1.0 - (isnan(1.0) ? _1236 : (isnan(_1236) ? 1.0 : min(_1236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1058 = (((((((float(_295 & 255u) * hit._m0.x) + (float(_237 & 255u) * _480)) + (float(_353 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _754.x) * _773) - _678)) + _678) + _927) + ((_1035.x * _1018) * _1049);
    float _1061 = (((((((float((_295 >> 8u) & 255u) * hit._m0.x) + (float((_237 >> 8u) & 255u) * _480)) + (float((_353 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _754.y) * _773) - _680)) + _680) + _928) + ((_1035.y * _1018) * _1049);
    float _1064 = (((((((float((_295 >> 16u) & 255u) * hit._m0.x) + (float((_237 >> 16u) & 255u) * _480)) + (float((_353 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _754.z) * _773) - _682)) + _682) + _929) + ((_1035.z * _1018) * _1049);
    float _1247 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1258 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1269 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    bool _1072 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1083;
    _1083.x = _1072 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0)));
    _1083.y = _1072 ? ((_581 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1258 : (isnan(_1258) ? 1.0 : min(_1258, 1.0)));
    _1083.z = _1072 ? ((_584 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1269 : (isnan(_1269) ? 1.0 : min(_1269, 1.0)));
    payload._m0 = _1083;
}


