#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

uint _252;
uint _347;
uint _442;
vec3 _1954;

void main()
{
    float _75 = float(gl_LaunchSizeEXT.y);
    float _105 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _114 = sqrt(((_106 * _106) + (_105 * _105)) + (_107 * _107)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _75)))));
    uvec4 _125 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _126 = _125.y;
    uint _166;
    uint _168;
    uint _169;
    if (_125.x == 0u)
    {
        uint _134 = (_126 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_126 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _163;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _164;
        }
        else
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _161 >> 16u;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder;
        _169 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _125.w == 0u;
    bool _179 = _176 || _178;
    uint _180 = _174 * _166;
    uint _181 = _180 + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 16u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 20u;
    }
    uvec4 _216 = texelFetch(l_geomAttrib_0, int((_208 + _180) >> 2u));
    uint _217 = _216.x;
    uint _229 = _180 + 4u;
    uvec4 _233 = texelFetch(l_geomAttrib_0, int((_229 + _208) >> 2u));
    uint _234 = _233.x;
    uint _243 = _208 | 8u;
    bool _244 = _175 == 0u;
    uint _245;
    if (_244)
    {
        _245 = _243;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _243 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _243 + 8u;
        }
        _245 = frontier_phi_9_10_ladder;
    }
    uint _249 = _176 ? (_245 + 4u) : _245;
    uvec2 _256 = uvec2(_252, texelFetch(l_geomAttrib_0, int(((_229 + _249) >> 2u) + 1u)).x);
    uint _257 = _256.y;
    float _261 = float(int(uint(int(_257 << 16u) >> int(16u))));
    float _262 = float(int(uint(int(_257) >> int(16u))));
    uvec4 _266 = texelFetch(l_geomAttrib_0, int(((_180 + 12u) + _249) >> 2u));
    uint _267 = _266.x;
    uvec4 _276 = texelFetch(l_geomAttrib_0, int(((_180 + 16u) + _249) >> 2u));
    uint _277 = _276.x;
    uint _283 = _174 * _168;
    uint _284 = _283 + 12u;
    uint _305;
    uint _306;
    uint _307;
    uint _308;
    if (_179)
    {
        uvec4 _286 = texelFetch(l_geomAttrib_0, int(_284 >> 2u));
        uint _287 = _286.x;
        _305 = _287 & 255u;
        _306 = (_287 >> 8u) & 255u;
        _307 = (_287 >> 16u) & 255u;
        _308 = 16u;
    }
    else
    {
        uint _293 = _284 >> 2u;
        uvec2 _299 = uvec2(texelFetch(l_geomAttrib_0, int(_293)).x, texelFetch(l_geomAttrib_0, int(_293 + 1u)).x);
        uint _300 = _299.x;
        _305 = _300 & 65535u;
        _306 = _300 >> 16u;
        _307 = _299.y & 65535u;
        _308 = 20u;
    }
    uvec4 _314 = texelFetch(l_geomAttrib_0, int((_308 + _283) >> 2u));
    uint _315 = _314.x;
    uint _326 = _283 + 4u;
    uvec4 _329 = texelFetch(l_geomAttrib_0, int((_326 + _308) >> 2u));
    uint _330 = _329.x;
    uint _339 = _308 | 8u;
    uint _340;
    if (_244)
    {
        _340 = _339;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _339 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _339 + 8u;
        }
        _340 = frontier_phi_16_17_ladder;
    }
    uint _344 = _176 ? (_340 + 4u) : _340;
    uvec2 _351 = uvec2(_347, texelFetch(l_geomAttrib_0, int(((_326 + _344) >> 2u) + 1u)).x);
    uint _352 = _351.y;
    float _356 = float(int(uint(int(_352 << 16u) >> int(16u))));
    float _357 = float(int(uint(int(_352) >> int(16u))));
    uvec4 _361 = texelFetch(l_geomAttrib_0, int(((_283 + 12u) + _344) >> 2u));
    uint _362 = _361.x;
    uvec4 _371 = texelFetch(l_geomAttrib_0, int(((_283 + 16u) + _344) >> 2u));
    uint _372 = _371.x;
    uint _378 = _174 * _169;
    uint _379 = _378 + 12u;
    uint _400;
    uint _401;
    uint _402;
    uint _403;
    if (_179)
    {
        uvec4 _381 = texelFetch(l_geomAttrib_0, int(_379 >> 2u));
        uint _382 = _381.x;
        _400 = _382 & 255u;
        _401 = (_382 >> 8u) & 255u;
        _402 = (_382 >> 16u) & 255u;
        _403 = 16u;
    }
    else
    {
        uint _388 = _379 >> 2u;
        uvec2 _394 = uvec2(texelFetch(l_geomAttrib_0, int(_388)).x, texelFetch(l_geomAttrib_0, int(_388 + 1u)).x);
        uint _395 = _394.x;
        _400 = _395 & 65535u;
        _401 = _395 >> 16u;
        _402 = _394.y & 65535u;
        _403 = 20u;
    }
    uvec4 _409 = texelFetch(l_geomAttrib_0, int((_403 + _378) >> 2u));
    uint _410 = _409.x;
    uint _421 = _378 + 4u;
    uvec4 _424 = texelFetch(l_geomAttrib_0, int((_421 + _403) >> 2u));
    uint _425 = _424.x;
    uint _434 = _403 | 8u;
    uint _435;
    if (_244)
    {
        _435 = _434;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _434 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _434 + 8u;
        }
        _435 = frontier_phi_23_24_ladder;
    }
    uint _439 = _176 ? (_435 + 4u) : _435;
    uvec2 _446 = uvec2(_442, texelFetch(l_geomAttrib_0, int(((_421 + _439) >> 2u) + 1u)).x);
    uint _447 = _446.y;
    float _451 = float(int(uint(int(_447 << 16u) >> int(16u))));
    float _452 = float(int(uint(int(_447) >> int(16u))));
    uvec4 _456 = texelFetch(l_geomAttrib_0, int(((_378 + 12u) + _439) >> 2u));
    uint _457 = _456.x;
    uvec4 _466 = texelFetch(l_geomAttrib_0, int(((_378 + 16u) + _439) >> 2u));
    uint _467 = _466.x;
    bool _474 = _125.z == 0u;
    float _510;
    float _511;
    float _512;
    if (_474)
    {
        uint _477 = _166 * 3u;
        uvec3 _486 = uvec3(texelFetch(l_geomPositionBuffer, int(_477)).x, texelFetch(l_geomPositionBuffer, int(_477 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_477 + 2u)).x);
        _510 = uintBitsToFloat(_486.x);
        _511 = uintBitsToFloat(_486.y);
        _512 = uintBitsToFloat(_486.z);
    }
    else
    {
        uint _494 = _166 * 2u;
        uvec2 _500 = uvec2(texelFetch(l_geomPositionBuffer, int(_494)).x, texelFetch(l_geomPositionBuffer, int(_494 + 1u)).x);
        uint _501 = _500.x;
        _510 = unpackHalf2x16(_501).x;
        _511 = unpackHalf2x16(_501 >> 16u).x;
        _512 = unpackHalf2x16(_500.y).x;
    }
    float _548;
    float _549;
    float _550;
    if (_474)
    {
        uint _515 = _168 * 3u;
        uvec3 _524 = uvec3(texelFetch(l_geomPositionBuffer, int(_515)).x, texelFetch(l_geomPositionBuffer, int(_515 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_515 + 2u)).x);
        _548 = uintBitsToFloat(_524.x);
        _549 = uintBitsToFloat(_524.y);
        _550 = uintBitsToFloat(_524.z);
    }
    else
    {
        uint _532 = _168 * 2u;
        uvec2 _538 = uvec2(texelFetch(l_geomPositionBuffer, int(_532)).x, texelFetch(l_geomPositionBuffer, int(_532 + 1u)).x);
        uint _539 = _538.x;
        _548 = unpackHalf2x16(_539).x;
        _549 = unpackHalf2x16(_539 >> 16u).x;
        _550 = unpackHalf2x16(_538.y).x;
    }
    float _586;
    float _587;
    float _588;
    if (_474)
    {
        uint _553 = _169 * 3u;
        uvec3 _562 = uvec3(texelFetch(l_geomPositionBuffer, int(_553)).x, texelFetch(l_geomPositionBuffer, int(_553 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_553 + 2u)).x);
        _586 = uintBitsToFloat(_562.x);
        _587 = uintBitsToFloat(_562.y);
        _588 = uintBitsToFloat(_562.z);
    }
    else
    {
        uint _570 = _169 * 2u;
        uvec2 _576 = uvec2(texelFetch(l_geomPositionBuffer, int(_570)).x, texelFetch(l_geomPositionBuffer, int(_570 + 1u)).x);
        uint _577 = _576.x;
        _586 = unpackHalf2x16(_577).x;
        _587 = unpackHalf2x16(_577 >> 16u).x;
        _588 = unpackHalf2x16(_576.y).x;
    }
    float _591 = (1.0 - hit._m0.x) - hit._m0.y;
    float _632 = _591 * 0.0039215688593685626983642578125;
    float _636 = hit._m0.x * 0.0039215688593685626983642578125;
    float _639 = hit._m0.y * 0.0039215688593685626983642578125;
    float _650 = (((float(_372 & 255u) * hit._m0.x) + (float(_277 & 255u) * _591)) + (float(_467 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _653 = (((float((_372 >> 8u) & 255u) * hit._m0.x) + (float((_277 >> 8u) & 255u) * _591)) + (float((_467 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _656 = (_356 - _261) * 0.00048828125;
    float _658 = (_357 - _262) * 0.00048828125;
    float _661 = (_451 - _261) * 0.00048828125;
    float _662 = (_452 - _262) * 0.00048828125;
    float _684 = _548 - _510;
    float _685 = _549 - _511;
    float _686 = _550 - _512;
    float _689 = fma(_686, gl_ObjectToWorldEXT[2u].x, fma(_685, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _684));
    float _692 = fma(_686, gl_ObjectToWorldEXT[2u].y, fma(_685, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _684));
    float _695 = fma(_686, gl_ObjectToWorldEXT[2u].z, fma(_685, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _684));
    float _696 = _586 - _510;
    float _697 = _587 - _511;
    float _698 = _588 - _512;
    float _701 = fma(_698, gl_ObjectToWorldEXT[2u].x, fma(_697, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _696));
    float _704 = fma(_698, gl_ObjectToWorldEXT[2u].y, fma(_697, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _696));
    float _707 = fma(_698, gl_ObjectToWorldEXT[2u].z, fma(_697, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _696));
    float _708 = (((_356 * hit._m0.x) + (_261 * _591)) + (_451 * hit._m0.y)) * 0.00048828125;
    float _709 = (((_357 * hit._m0.x) + (_262 * _591)) + (_452 * hit._m0.y)) * 0.00048828125;
    float _713 = (((float(_205) * _591) + (-127.0)) + (float(_305) * hit._m0.x)) + (float(_400) * hit._m0.y);
    float _716 = (((float(_206) * _591) + (-127.0)) + (float(_306) * hit._m0.x)) + (float(_401) * hit._m0.y);
    float _719 = (((float(_207) * _591) + (-127.0)) + (float(_307) * hit._m0.x)) + (float(_402) * hit._m0.y);
    float _720 = _713 * 0.0078740157186985015869140625;
    float _722 = _716 * 0.0078740157186985015869140625;
    float _723 = _719 * 0.0078740157186985015869140625;
    float _736 = ((((float(_217 & 255u) * _591) + (-127.0)) + (float(_315 & 255u) * hit._m0.x)) + (float(_410 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _737 = ((((float((_217 >> 8u) & 255u) * _591) + (-127.0)) + (float((_315 >> 8u) & 255u) * hit._m0.x)) + (float((_410 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _738 = ((((float((_217 >> 16u) & 255u) * _591) + (-127.0)) + (float((_315 >> 16u) & 255u) * hit._m0.x)) + (float((_410 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _739 = ((((float(_217 >> 24u) * _591) + (-127.0)) + (float(_315 >> 24u) * hit._m0.x)) + (float(_410 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _749 = ((((float(_234 & 255u) * _591) + (-127.0)) + (float(_330 & 255u) * hit._m0.x)) + (float(_425 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _750 = ((((float((_234 >> 8u) & 255u) * _591) + (-127.0)) + (float((_330 >> 8u) & 255u) * hit._m0.x)) + (float((_425 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _751 = ((((float((_234 >> 16u) & 255u) * _591) + (-127.0)) + (float((_330 >> 16u) & 255u) * hit._m0.x)) + (float((_425 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _761 = ((_737 * _723) - (_738 * _722)) * _739;
    float _762 = ((_738 * _720) - (_736 * _723)) * _739;
    float _763 = ((_736 * _722) - (_737 * _720)) * _739;
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _767 * _761;
    float _769 = _767 * _762;
    float _770 = _767 * _763;
    float _786 = (((((1.0 - (_632 * float((_267 >> 8u) & 255u))) - (_636 * float((_362 >> 8u) & 255u))) - (_639 * float((_457 >> 8u) & 255u))) * (-2.7999999523162841796875)) * cbMtdParam._m0[15u].z) + 1.0;
    float _2040 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    uvec2 _804 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3, int(0u)));
    bool _809 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _861;
    if (_809)
    {
        float _820 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _826 = (_707 * _692) - (_704 * _695);
        float _829 = (_701 * _695) - (_707 * _689);
        float _832 = (_704 * _689) - (_701 * _692);
        float _859 = ((log2((((float(_804.y) * 0.5) * float(_804.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_829 * _829) + (_832 * _832)) + (_826 * _826)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_820 * gl_WorldRayDirectionEXT.x, _820 * gl_WorldRayDirectionEXT.y, _820 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _861 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    }
    else
    {
        _861 = 0.0;
    }
    vec4 _865 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _708) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _709) + cbTextureTilingScale._m0[3u].w), _861);
    float _867 = _865.x;
    float _876 = ((cbMtdParam._m0[15u].w * (-1.39999997615814208984375)) * ((_867 + (-1.0)) + ((((1.0 - (_632 * float(_267 & 255u))) - (_636 * float(_362 & 255u))) - (_639 * float(_457 & 255u))) * 2.0))) + 1.0;
    float _2056 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    uvec2 _891 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5, int(0u)));
    float _942;
    if (_809)
    {
        float _902 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _908 = (_707 * _692) - (_704 * _695);
        float _911 = (_701 * _695) - (_707 * _689);
        float _914 = (_704 * _689) - (_701 * _692);
        float _940 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_911 * _911) + (_914 * _914)) + (_908 * _908)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_902 * gl_WorldRayDirectionEXT.x, _902 * gl_WorldRayDirectionEXT.y, _902 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _942 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    }
    else
    {
        _942 = 0.0;
    }
    vec4 _945 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _708) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _709) + cbTextureTilingScale._m0[4u].w), _942);
    float _949 = _945.z;
    float _952 = (_945.x * 2.0) + (-1.0);
    float _953 = (_945.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _2072 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _959 = sqrt(1.0 - (isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0))));
    float _961 = fma(_959, _720, fma(_953, _749, 0.0));
    float _963 = fma(_959, _722, fma(_953, _750, 0.0));
    float _965 = fma(_959, _723, fma(_953, _751, 0.0));
    float _969 = inversesqrt(dot(vec3(_961, _963, _965), vec3(_961, _963, _965)));
    float _970 = _969 * _961;
    float _971 = _969 * _963;
    float _972 = _969 * _965;
    float _976 = exp2(log2(_971) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[15u].x;
    float _2083 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = ((isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0))) + (isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0)))) * (1.0 - (isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0))));
    float _984 = cbMtdParam._m0[13u].y * _867;
    float _995 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * ((_653 - _984) + (cbMtdParam._m0[13u].w * _653))) + 1.0;
    float _2094 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = 1.0 - (isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0)));
    float _998 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = isnan(1.0) ? _998 : (isnan(_998) ? 1.0 : min(_998, 1.0));
    float _1007 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((_650 - _984) + (cbMtdParam._m0[13u].z * _650))) + 1.0;
    float _2115 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1009 = 1.0 - (isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0)));
    float _1010 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
    uvec2 _1029 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13, int(0u)));
    float _1080;
    if (_809)
    {
        float _1040 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1046 = (_707 * _692) - (_704 * _695);
        float _1049 = (_701 * _695) - (_707 * _689);
        float _1052 = (_704 * _689) - (_701 * _692);
        float _1078 = ((log2((((float(_1029.y) * 0.5) * float(_1029.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_1049 * _1049) + (_1052 * _1052)) + (_1046 * _1046)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1040 * gl_WorldRayDirectionEXT.x, _1040 * gl_WorldRayDirectionEXT.y, _1040 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _1080 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    }
    else
    {
        _1080 = 0.0;
    }
    vec4 _1083 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _708) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _709) + cbTextureTilingScale._m0[1u].w), _1080);
    float _1085 = _1083.x;
    float _1086 = _1083.y;
    float _1087 = _1083.z;
    float _1088 = cbMtdParam._m0[11u].x * _1011;
    float _1090 = cbMtdParam._m0[11u].y * _1011;
    float _1092 = cbMtdParam._m0[11u].z * _1011;
    float _1112 = _1009 + _997;
    float _1113 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1114 = isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0));
    uvec2 _1132 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1, int(0u)));
    float _1183;
    if (_809)
    {
        float _1143 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1149 = (_707 * _692) - (_704 * _695);
        float _1152 = (_701 * _695) - (_707 * _689);
        float _1155 = (_704 * _689) - (_701 * _692);
        float _1181 = ((log2((((float(_1132.y) * 0.5) * float(_1132.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_1152 * _1152) + (_1155 * _1155)) + (_1149 * _1149)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1143 * gl_WorldRayDirectionEXT.x, _1143 * gl_WorldRayDirectionEXT.y, _1143 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _1183 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    }
    else
    {
        _1183 = 0.0;
    }
    vec4 _1185 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _708) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _709) + cbTextureTilingScale._m0[0u].w), _1183);
    float _1190 = _1185.x * cbMtdParam._m0[10u].x;
    float _1191 = _1185.y * cbMtdParam._m0[10u].y;
    float _1192 = _1185.z * cbMtdParam._m0[10u].z;
    float _1209 = (_1190 - (_1114 * _1190)) + ((((((_1085 * (cbMtdParam._m0[9u].x - _1088)) * _999) + (_1088 * _1085)) * 4.55000019073486328125) * _1114) * _1190);
    float _1210 = (_1191 - (_1114 * _1191)) + ((((((_1086 * (cbMtdParam._m0[9u].y - _1090)) * _999) + (_1090 * _1086)) * 4.55000019073486328125) * _1114) * _1191);
    float _1211 = (_1192 - (_1114 * _1192)) + ((((((_1087 * (cbMtdParam._m0[9u].z - _1092)) * _999) + (_1092 * _1087)) * 4.55000019073486328125) * _1114) * _1192);
    float _2156 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1212 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    float _1214 = 3.0 - (_1212 * 2.0);
    float _1216 = _1212 * _1212;
    float _1226 = ((_1216 * (cbMtdParam._m0[12u].x - _1209)) * _1214) + _1209;
    float _1227 = ((_1216 * (cbMtdParam._m0[12u].y - _1210)) * _1214) + _1210;
    float _1228 = ((_1216 * (cbMtdParam._m0[12u].z - _1211)) * _1214) + _1211;
    uvec2 _1244 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6, int(0u)));
    float _1295;
    if (_809)
    {
        float _1255 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1261 = (_707 * _692) - (_704 * _695);
        float _1264 = (_701 * _695) - (_707 * _689);
        float _1267 = (_704 * _689) - (_701 * _692);
        float _1293 = ((log2((((float(_1244.y) * 0.5) * float(_1244.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_1264 * _1264) + (_1267 * _1267)) + (_1261 * _1261)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1255 * gl_WorldRayDirectionEXT.x, _1255 * gl_WorldRayDirectionEXT.y, _1255 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _1295 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    }
    else
    {
        _1295 = 0.0;
    }
    vec4 _1297 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _708) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _709) + cbTextureTilingScale._m0[5u].w), _1295);
    float _1304 = (_1297.x * 2.0) + (-1.0);
    float _1305 = (_1297.y * 2.0) + (-1.0);
    float _1306 = dot(vec2(_1304, _1305), vec2(_1304, _1305));
    float _2172 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1314 = ((_1297.z - _949) * _979) + _949;
    uvec2 _1326 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2, int(0u)));
    float _1377;
    if (_809)
    {
        float _1337 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1343 = (_707 * _692) - (_704 * _695);
        float _1346 = (_701 * _695) - (_707 * _689);
        float _1349 = (_704 * _689) - (_701 * _692);
        float _1375 = ((log2((((float(_1326.y) * 0.5) * float(_1326.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_1346 * _1346) + (_1349 * _1349)) + (_1343 * _1343)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1337 * gl_WorldRayDirectionEXT.x, _1337 * gl_WorldRayDirectionEXT.y, _1337 * gl_WorldRayDirectionEXT.z), vec3(_720, _722, _723))));
        _1377 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    }
    else
    {
        _1377 = 0.0;
    }
    vec4 _1379 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _708) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _709) + cbTextureTilingScale._m0[2u].w), _1377);
    float _1385 = (_1379.x * 2.0) + (-1.0);
    float _1386 = (_1379.y * 2.0) + (-1.0);
    float _1387 = dot(vec2(_1385, _1386), vec2(_1385, _1386));
    float _2188 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1392 = sqrt(1.0 - (isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0))));
    float _1394 = fma(_1392, _720, fma(_1386, _749, 0.0));
    float _1396 = fma(_1392, _722, fma(_1386, _750, 0.0));
    float _1398 = fma(_1392, _723, fma(_1386, _751, 0.0));
    float _1402 = inversesqrt(dot(vec3(_1394, _1396, _1398), vec3(_1394, _1396, _1398)));
    float _1403 = _1402 * _1394;
    float _1404 = _1402 * _1396;
    float _1405 = _1402 * _1398;
    float _1408 = fma(_1405, _770, fma(_1404, _769, _1403 * _768));
    float _1411 = fma(_1405, _738, fma(_1404, _737, _1403 * _736));
    float _1414 = fma(_1405, _723, fma(_1404, _722, _1403 * _720));
    float _1418 = inversesqrt(dot(vec3(_1408, _1411, _1414), vec3(_1408, _1411, _1414)));
    float _1422 = fma(_972, _770, fma(_971, _769, _970 * _768));
    float _1425 = fma(_972, _738, fma(_971, _737, _970 * _736));
    float _1428 = fma(_972, _723, fma(_971, _722, _970 * _720));
    float _1432 = inversesqrt(dot(vec3(_1422, _1425, _1428), vec3(_1422, _1425, _1428)));
    float _1435 = _1432 * _1428;
    uvec2 _1447 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7, int(0u)));
    float _1451 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1452 = _1451 * gl_WorldRayDirectionEXT.x;
    float _1453 = _1451 * gl_WorldRayDirectionEXT.y;
    float _1454 = _1451 * gl_WorldRayDirectionEXT.z;
    float _1498;
    if (_809)
    {
        float _1464 = (_707 * _692) - (_704 * _695);
        float _1467 = (_701 * _695) - (_707 * _689);
        float _1470 = (_704 * _689) - (_701 * _692);
        float _1496 = ((log2((((float(_1447.y) * 0.5) * float(_1447.x)) * abs((_662 * _656) - (_661 * _658))) / (sqrt(((_1467 * _1467) + (_1470 * _1470)) + (_1464 * _1464)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1452, _1453, _1454), vec3(_720, _722, _723))));
        _1498 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    }
    else
    {
        _1498 = 0.0;
    }
    vec4 _1500 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _708) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _709) + cbTextureTilingScale._m0[6u].w), _1498);
    float _1506 = (_1500.x * 2.0) + (-1.0);
    float _1507 = (_1500.y * 2.0) + (-1.0);
    float _1508 = dot(vec2(_1506, _1507), vec2(_1506, _1507));
    float _2204 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1513 = sqrt(1.0 - (isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0))));
    float _1515 = fma(_1513, _720, fma(_1507, _749, 0.0));
    float _1517 = fma(_1513, _722, fma(_1507, _750, 0.0));
    float _1519 = fma(_1513, _723, fma(_1507, _751, 0.0));
    float _1523 = inversesqrt(dot(vec3(_1515, _1517, _1519), vec3(_1515, _1517, _1519)));
    float _1524 = _1523 * _1515;
    float _1525 = _1523 * _1517;
    float _1526 = _1523 * _1519;
    float _1529 = fma(_1526, _770, fma(_1525, _769, _1524 * _768));
    float _1532 = fma(_1526, _738, fma(_1525, _737, _1524 * _736));
    float _1535 = fma(_1526, _723, fma(_1525, _722, _1524 * _720));
    float _1539 = inversesqrt(dot(vec3(_1529, _1532, _1535), vec3(_1529, _1532, _1535)));
    float _1554 = ((_1432 * _1422) + (((_1408 * _999) * _1418) * cbMtdParam._m0[14u].w)) + (((_1529 * _1011) * _1539) * cbMtdParam._m0[14u].z);
    float _1556 = ((_1432 * _1425) + (((_1411 * _999) * _1418) * cbMtdParam._m0[14u].w)) + (((_1532 * _1011) * _1539) * cbMtdParam._m0[14u].z);
    float _1563 = ((_1304 - _1554) * _979) + _1554;
    float _1564 = (_979 * (_1305 - _1556)) + _1556;
    float _1565 = (_979 * (sqrt(1.0 - (isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0)))) - _1435)) + _1435;
    float _1568 = fma(_1565, _720, fma(_1564, _736, _1563 * _768));
    float _1571 = fma(_1565, _722, fma(_1564, _737, _1563 * _769));
    float _1574 = fma(_1565, _723, fma(_1564, _738, _1563 * _770));
    float _1578 = inversesqrt(dot(vec3(_1568, _1571, _1574), vec3(_1568, _1571, _1574)));
    float _1579 = _1578 * _1568;
    float _1580 = _1578 * _1571;
    float _1581 = _1578 * _1574;
    float _1593 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1594 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1595 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1596 = (-0.0) - _1452;
    float _1598 = (-0.0) - _1453;
    float _1599 = (-0.0) - _1454;
    float _1605 = float(gl_LaunchIDEXT.x);
    float _1606 = float(gl_LaunchIDEXT.y);
    float _1609 = float(gl_LaunchSizeEXT.x);
    float _1623 = fract(fract(sin(dot(vec2(_1605 / _1609, _1606 / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1636 = fract(fract(sin(dot(vec2((_1605 + 128.0) / _1609, (_1606 + 128.0) / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1637 = 1.0 - cbMtdParam._m0[16u].x;
    float _1638 = _1226 * _1637;
    float _1639 = _1227 * _1637;
    float _1640 = _1228 * _1637;
    float _1645 = (_1226 + (-0.039999999105930328369140625)) * cbMtdParam._m0[16u].x;
    float _1646 = (_1227 + (-0.039999999105930328369140625)) * cbMtdParam._m0[16u].x;
    float _1647 = (_1228 + (-0.039999999105930328369140625)) * cbMtdParam._m0[16u].x;
    float _1648 = _1645 + 0.039999999105930328369140625;
    float _1650 = _1646 + 0.039999999105930328369140625;
    float _1651 = _1647 + 0.039999999105930328369140625;
    _67._m0 = 1u;
    uvec4 _1661 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1662 = _1661.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1662, _1661.w, _1662, vec3(_1593, _1594, _1595), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (_67._m0 == 0u)
    {
        float _1682 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1579, _1580, _1581));
        float _2215 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1685 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        float _1704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1314) * 0.949999988079071044921875);
        float _1705 = _1704 * _1704;
        float _1706 = g_sceneCB._m0[4u].x - _1452;
        float _1707 = g_sceneCB._m0[4u].y - _1453;
        float _1708 = g_sceneCB._m0[4u].z - _1454;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1713 = _1712 * _1706;
        float _1714 = _1712 * _1707;
        float _1715 = _1712 * _1708;
        float _1716 = dot(vec3(_1579, _1580, _1581), vec3(g_sceneCB._m0[4u].xyz));
        float _2226 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1719 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        float _1720 = dot(vec3(_1579, _1580, _1581), vec3(_1596, _1598, _1599));
        float _2237 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1723 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        float _1724 = dot(vec3(_1579, _1580, _1581), vec3(_1713, _1714, _1715));
        float _2248 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1727 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        float _1728 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1713, _1714, _1715));
        float _2259 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = _1705 * _1705;
        float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
        float _1745 = exp2(log2(1.0 - (isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0)))) * 5.0);
        float _1756 = 1.0 - _1705;
        float _1767 = (0.5 / (((_1723 * ((_1719 * _1756) + _1705)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1756) + _1705) * _1719))) * _1719;
        float _2270 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1769 = (isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
        _1776 = ((_1638 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1685;
        _1777 = ((_1639 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1685;
        _1778 = ((_1640 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1685;
        _1779 = (((_1745 * (0.959999978542327880859375 - _1645)) + _1648) * g_sceneCB._m0[5u].x) * _1769;
        _1780 = (((_1745 * (0.959999978542327880859375 - _1646)) + _1650) * g_sceneCB._m0[5u].y) * _1769;
        _1781 = (((_1745 * (0.959999978542327880859375 - _1647)) + _1651) * g_sceneCB._m0[5u].z) * _1769;
    }
    else
    {
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    bool _1783 = abs(_1580) < 0.89999997615814208984375;
    float _1785 = float(_1783);
    float _1786 = _1783 ? 0.0 : 1.0;
    float _1789 = (_1785 * _1581) - (_1786 * _1580);
    float _1790 = _1786 * _1579;
    float _1792 = (-0.0) - (_1579 * _1785);
    float _1796 = inversesqrt(dot(vec3(_1789, _1790, _1792), vec3(_1789, _1790, _1792)));
    float _1797 = _1789 * _1796;
    float _1798 = _1790 * _1796;
    float _1799 = _1796 * _1792;
    float _1802 = (_1798 * _1581) - (_1799 * _1580);
    float _1805 = (_1799 * _1579) - (_1797 * _1581);
    float _1808 = (_1797 * _1580) - (_1798 * _1579);
    float _1810;
    float _1818;
    float _1809 = 0.0;
    uint _1811 = 0u;
    float _1815;
    bool _1817;
    for (;;)
    {
        _1815 = (float(_1811) + _1623) * 0.03125;
        _1817 = _1811 == 0u;
        float frontier_phi_53_pred;
        if (_1817)
        {
            frontier_phi_53_pred = 0.0;
        }
        else
        {
            float _1959;
            float _1960;
            uint _1962;
            _1959 = 0.0;
            _1960 = 0.5;
            _1962 = _1811;
            float _1819;
            for (;;)
            {
                _1819 = ((_1962 & 1u) != 0u) ? (_1960 + _1959) : _1959;
                uint _1963 = _1962 >> 1u;
                if (_1963 == 0u)
                {
                    break;
                }
                else
                {
                    _1959 = _1819;
                    _1960 *= 0.5;
                    _1962 = _1963;
                }
            }
            frontier_phi_53_pred = _1819;
        }
        _1818 = frontier_phi_53_pred;
        float _1820 = _1818 + _1636;
        float _1824 = sqrt(_1815);
        float _1825 = ((_1820 > 1.0) ? (_1820 + (-1.0)) : _1820) * 6.283185482025146484375;
        float _1828 = cos(_1825) * _1824;
        float _1830 = sin(_1825) * _1824;
        float _1832 = sqrt(1.0 - _1815);
        float _1845 = ((_1832 * _1579) + (_1828 * _1802)) + (_1830 * _1797);
        float _1846 = ((_1832 * _1580) + (_1828 * _1805)) + (_1830 * _1798);
        float _1847 = ((_1832 * _1581) + (_1828 * _1808)) + (_1830 * _1799);
        _66._m0 = 1u;
        uvec4 _1851 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1852 = _1851.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1852, _1851.w, _1852, vec3(_1593, _1594, _1595), 9.9999997473787516355514526367188e-05, vec3(_1845, _1846, _1847), 10000.0, 1);
        float _1858 = dot(vec3(_1579, _1580, _1581), vec3(_1845, _1846, _1847));
        float _2281 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _1810 = ((float(_66._m0 == 0u) * _1861) / (_1861 * 0.3183098733425140380859375)) + _1809;
        uint _1812 = _1811 + 1u;
        if (_1812 == 32u)
        {
            break;
        }
        else
        {
            _1809 = _1810;
            _1811 = _1812;
            continue;
        }
    }
    float _1869 = _1810 * 0.009947183541953563690185546875;
    float _1874 = dot(vec3(_1452, _1453, _1454), vec3(_1579, _1580, _1581)) * 2.0;
    vec4 _1888 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1452 - (_1874 * _1579), _1453 - (_1874 * _1580), _1454 - (_1874 * _1581)), 4.0 - (_1314 * 4.0));
    float _1893 = dot(vec3(_1596, _1598, _1599), vec3(_1579, _1580, _1581));
    float _2292 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1903 = exp2(log2(1.0 - (isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0)))) * 5.0);
    vec4 _1915 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1579, _1580, _1581), 0.0);
    float _1926 = (_1779 + _1776) + (((_1915.x * _1638) + (((_1903 * (0.959999978542327880859375 - _1645)) + _1648) * _1888.x)) * _1869);
    float _1930 = (_1780 + _1777) + (((_1915.y * _1639) + (((_1903 * (0.959999978542327880859375 - _1646)) + _1650) * _1888.y)) * _1869);
    float _1934 = (_1781 + _1778) + (((_1915.z * _1640) + (((_1903 * (0.959999978542327880859375 - _1647)) + _1651) * _1888.z)) * _1869);
    float _2303 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _2314 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _2325 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    bool _1942 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1953;
    _1953.x = _1942 ? ((_713 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0)));
    _1953.y = _1942 ? ((_716 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0)));
    _1953.z = _1942 ? ((_719 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0)));
    payload._m0 = _1953;
}


