#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _56
{
    vec3 _m0;
};

struct _60
{
    vec2 _m0;
};

struct _63
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _56 payload;
hitAttributeEXT _60 hit;
layout(location = 1) rayPayloadEXT _63 _65;
layout(location = 2) rayPayloadEXT _63 _66;

vec3 _1507;

void main()
{
    float _74 = float(gl_LaunchSizeEXT.y);
    float _104 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _105 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _113 = sqrt(((_105 * _105) + (_104 * _104)) + (_106 * _106)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _74)))));
    uvec4 _124 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _125 = _124.y;
    uint _165;
    uint _167;
    uint _168;
    if (_124.x == 0u)
    {
        uint _133 = (_125 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _142 = uvec3(texelFetch(l_geomIndexBuffer, int(_133)).x, texelFetch(l_geomIndexBuffer, int(_133 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_133 + 2u)).x);
        _165 = _142.x;
        _167 = _142.y;
        _168 = _142.z;
    }
    else
    {
        uint _146 = uint(gl_PrimitiveID) * 6u;
        uint _148 = _146 & 4294967292u;
        uint _151 = (_125 + _148) >> 2u;
        uvec2 _158 = uvec2(texelFetch(l_geomIndexBuffer, int(_151)).x, texelFetch(l_geomIndexBuffer, int(_151 + 1u)).x);
        uint _159 = _158.x;
        uint _160 = _158.y;
        uint _162 = _159 >> 16u;
        uint _163 = _160 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_148 == _146)
        {
            frontier_phi_3_2_ladder = _162;
            frontier_phi_3_2_ladder_1 = _159 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _163;
            frontier_phi_3_2_ladder_1 = _162;
            frontier_phi_3_2_ladder_2 = _160 >> 16u;
        }
        _165 = frontier_phi_3_2_ladder_1;
        _167 = frontier_phi_3_2_ladder;
        _168 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _172 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _173 = _172.x;
    uint _174 = _172.z;
    bool _175 = _174 != 0u;
    bool _177 = _124.w == 0u;
    bool _178 = _175 || _177;
    uint _179 = _173 * _165;
    uint _180 = _179 + 12u;
    uint _204;
    uint _205;
    uint _206;
    uint _207;
    if (_178)
    {
        uvec4 _183 = texelFetch(l_geomAttrib_0, int(_180 >> 2u));
        uint _184 = _183.x;
        _204 = _184 & 255u;
        _205 = (_184 >> 8u) & 255u;
        _206 = (_184 >> 16u) & 255u;
        _207 = 16u;
    }
    else
    {
        uint _192 = _180 >> 2u;
        uvec2 _198 = uvec2(texelFetch(l_geomAttrib_0, int(_192)).x, texelFetch(l_geomAttrib_0, int(_192 + 1u)).x);
        uint _199 = _198.x;
        _204 = _199 & 65535u;
        _205 = _199 >> 16u;
        _206 = _198.y & 65535u;
        _207 = 20u;
    }
    uvec4 _215 = texelFetch(l_geomAttrib_0, int((_207 + _179) >> 2u));
    uint _216 = _215.x;
    bool _230 = _174 == 0u;
    uint _231;
    if (_230)
    {
        _231 = _207 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_177)
        {
            frontier_phi_9_10_ladder = _207 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _207 + 12u;
        }
        _231 = frontier_phi_9_10_ladder;
    }
    uvec4 _239 = texelFetch(l_geomAttrib_0, int(((_179 + 4u) + (_175 ? (_231 + 4u) : _231)) >> 2u));
    uint _240 = _239.x;
    float _244 = float(int(uint(int(_240 << 16u) >> int(16u))));
    float _245 = float(int(uint(int(_240) >> int(16u))));
    uint _246 = _173 * _167;
    uint _247 = _246 + 12u;
    uint _268;
    uint _269;
    uint _270;
    uint _271;
    if (_178)
    {
        uvec4 _249 = texelFetch(l_geomAttrib_0, int(_247 >> 2u));
        uint _250 = _249.x;
        _268 = _250 & 255u;
        _269 = (_250 >> 8u) & 255u;
        _270 = (_250 >> 16u) & 255u;
        _271 = 16u;
    }
    else
    {
        uint _256 = _247 >> 2u;
        uvec2 _262 = uvec2(texelFetch(l_geomAttrib_0, int(_256)).x, texelFetch(l_geomAttrib_0, int(_256 + 1u)).x);
        uint _263 = _262.x;
        _268 = _263 & 65535u;
        _269 = _263 >> 16u;
        _270 = _262.y & 65535u;
        _271 = 20u;
    }
    uvec4 _277 = texelFetch(l_geomAttrib_0, int((_271 + _246) >> 2u));
    uint _278 = _277.x;
    uint _290;
    if (_230)
    {
        _290 = _271 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_177)
        {
            frontier_phi_16_17_ladder = _271 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _271 + 12u;
        }
        _290 = frontier_phi_16_17_ladder;
    }
    uvec4 _298 = texelFetch(l_geomAttrib_0, int(((_246 + 4u) + (_175 ? (_290 + 4u) : _290)) >> 2u));
    uint _299 = _298.x;
    float _303 = float(int(uint(int(_299 << 16u) >> int(16u))));
    float _304 = float(int(uint(int(_299) >> int(16u))));
    uint _305 = _173 * _168;
    uint _306 = _305 + 12u;
    uint _327;
    uint _328;
    uint _329;
    uint _330;
    if (_178)
    {
        uvec4 _308 = texelFetch(l_geomAttrib_0, int(_306 >> 2u));
        uint _309 = _308.x;
        _327 = _309 & 255u;
        _328 = (_309 >> 8u) & 255u;
        _329 = (_309 >> 16u) & 255u;
        _330 = 16u;
    }
    else
    {
        uint _315 = _306 >> 2u;
        uvec2 _321 = uvec2(texelFetch(l_geomAttrib_0, int(_315)).x, texelFetch(l_geomAttrib_0, int(_315 + 1u)).x);
        uint _322 = _321.x;
        _327 = _322 & 65535u;
        _328 = _322 >> 16u;
        _329 = _321.y & 65535u;
        _330 = 20u;
    }
    uvec4 _336 = texelFetch(l_geomAttrib_0, int((_330 + _305) >> 2u));
    uint _337 = _336.x;
    uint _349;
    if (_230)
    {
        _349 = _330 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_177)
        {
            frontier_phi_23_24_ladder = _330 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _330 + 12u;
        }
        _349 = frontier_phi_23_24_ladder;
    }
    uvec4 _357 = texelFetch(l_geomAttrib_0, int(((_305 + 4u) + (_175 ? (_349 + 4u) : _349)) >> 2u));
    uint _358 = _357.x;
    float _362 = float(int(uint(int(_358 << 16u) >> int(16u))));
    float _363 = float(int(uint(int(_358) >> int(16u))));
    bool _365 = _124.z == 0u;
    float _401;
    float _402;
    float _403;
    if (_365)
    {
        uint _368 = _165 * 3u;
        uvec3 _377 = uvec3(texelFetch(l_geomPositionBuffer, int(_368)).x, texelFetch(l_geomPositionBuffer, int(_368 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_368 + 2u)).x);
        _401 = uintBitsToFloat(_377.x);
        _402 = uintBitsToFloat(_377.y);
        _403 = uintBitsToFloat(_377.z);
    }
    else
    {
        uint _385 = _165 * 2u;
        uvec2 _391 = uvec2(texelFetch(l_geomPositionBuffer, int(_385)).x, texelFetch(l_geomPositionBuffer, int(_385 + 1u)).x);
        uint _392 = _391.x;
        _401 = unpackHalf2x16(_392).x;
        _402 = unpackHalf2x16(_392 >> 16u).x;
        _403 = unpackHalf2x16(_391.y).x;
    }
    float _439;
    float _440;
    float _441;
    if (_365)
    {
        uint _406 = _167 * 3u;
        uvec3 _415 = uvec3(texelFetch(l_geomPositionBuffer, int(_406)).x, texelFetch(l_geomPositionBuffer, int(_406 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_406 + 2u)).x);
        _439 = uintBitsToFloat(_415.x);
        _440 = uintBitsToFloat(_415.y);
        _441 = uintBitsToFloat(_415.z);
    }
    else
    {
        uint _423 = _167 * 2u;
        uvec2 _429 = uvec2(texelFetch(l_geomPositionBuffer, int(_423)).x, texelFetch(l_geomPositionBuffer, int(_423 + 1u)).x);
        uint _430 = _429.x;
        _439 = unpackHalf2x16(_430).x;
        _440 = unpackHalf2x16(_430 >> 16u).x;
        _441 = unpackHalf2x16(_429.y).x;
    }
    float _477;
    float _478;
    float _479;
    if (_365)
    {
        uint _444 = _168 * 3u;
        uvec3 _453 = uvec3(texelFetch(l_geomPositionBuffer, int(_444)).x, texelFetch(l_geomPositionBuffer, int(_444 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_444 + 2u)).x);
        _477 = uintBitsToFloat(_453.x);
        _478 = uintBitsToFloat(_453.y);
        _479 = uintBitsToFloat(_453.z);
    }
    else
    {
        uint _461 = _168 * 2u;
        uvec2 _467 = uvec2(texelFetch(l_geomPositionBuffer, int(_461)).x, texelFetch(l_geomPositionBuffer, int(_461 + 1u)).x);
        uint _468 = _467.x;
        _477 = unpackHalf2x16(_468).x;
        _478 = unpackHalf2x16(_468 >> 16u).x;
        _479 = unpackHalf2x16(_467.y).x;
    }
    float _482 = (1.0 - hit._m0.x) - hit._m0.y;
    float _516 = (_303 - _244) * 0.00048828125;
    float _518 = (_304 - _245) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _522 = (_363 - _245) * 0.00048828125;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _546 = _441 - _403;
    float _549 = fma(_546, gl_ObjectToWorldEXT[2u].x, fma(_545, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _544));
    float _552 = fma(_546, gl_ObjectToWorldEXT[2u].y, fma(_545, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _544));
    float _555 = fma(_546, gl_ObjectToWorldEXT[2u].z, fma(_545, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _544));
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _558 = _479 - _403;
    float _561 = fma(_558, gl_ObjectToWorldEXT[2u].x, fma(_557, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _556));
    float _564 = fma(_558, gl_ObjectToWorldEXT[2u].y, fma(_557, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _556));
    float _567 = fma(_558, gl_ObjectToWorldEXT[2u].z, fma(_557, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _556));
    float _568 = (((_303 * hit._m0.x) + (_244 * _482)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _569 = (((_304 * hit._m0.x) + (_245 * _482)) + (_363 * hit._m0.y)) * 0.00048828125;
    float _573 = (((float(_204) * _482) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _576 = (((float(_205) * _482) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = (((float(_206) * _482) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_329) * hit._m0.y);
    float _580 = _573 * 0.0078740157186985015869140625;
    float _582 = _576 * 0.0078740157186985015869140625;
    float _583 = _579 * 0.0078740157186985015869140625;
    float _596 = ((((float(_216 & 255u) * _482) + (-127.0)) + (float(_278 & 255u) * hit._m0.x)) + (float(_337 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_216 >> 8u) & 255u) * _482) + (-127.0)) + (float((_278 >> 8u) & 255u) * hit._m0.x)) + (float((_337 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float((_216 >> 16u) & 255u) * _482) + (-127.0)) + (float((_278 >> 16u) & 255u) * hit._m0.x)) + (float((_337 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _599 = ((((float(_216 >> 24u) * _482) + (-127.0)) + (float(_278 >> 24u) * hit._m0.x)) + (float(_337 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _609 = ((_597 * _583) - (_598 * _582)) * _599;
    float _610 = ((_598 * _580) - (_596 * _583)) * _599;
    float _611 = ((_596 * _582) - (_597 * _580)) * _599;
    float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
    float _616 = _615 * _609;
    float _617 = _615 * _610;
    float _618 = _615 * _611;
    uvec2 _636 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_1, int(0u)));
    bool _641 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _694;
    if (_641)
    {
        float _652 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _658 = (_567 * _552) - (_564 * _555);
        float _661 = (_561 * _555) - (_567 * _549);
        float _664 = (_564 * _549) - (_561 * _552);
        float _691 = ((log2((((float(_636.y) * 0.5) * float(_636.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_661 * _661) + (_664 * _664)) + (_658 * _658)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_652 * gl_WorldRayDirectionEXT.x, _652 * gl_WorldRayDirectionEXT.y, _652 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    }
    else
    {
        _694 = 0.0;
    }
    vec4 _698 = textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _568) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _569) + cbTextureTilingScale._m0[1u].w), _694);
    float _702 = _698.z;
    float _705 = (_698.x * 2.0) + (-1.0);
    float _707 = (_698.y * 2.0) + (-1.0);
    float _708 = dot(vec2(_705, _707), vec2(_705, _707));
    float _1596 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0))));
    float _716 = fma(_713, _580, fma(_707, _596, _705 * _616));
    float _719 = fma(_713, _582, fma(_707, _597, _705 * _617));
    float _722 = fma(_713, _583, fma(_707, _598, _705 * _618));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    uvec2 _746 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_5, int(0u)));
    float _797;
    if (_641)
    {
        float _757 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _763 = (_567 * _552) - (_564 * _555);
        float _766 = (_561 * _555) - (_567 * _549);
        float _769 = (_564 * _549) - (_561 * _552);
        float _795 = ((log2((((float(_746.y) * 0.5) * float(_746.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_766 * _766) + (_769 * _769)) + (_763 * _763)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_757 * gl_WorldRayDirectionEXT.x, _757 * gl_WorldRayDirectionEXT.y, _757 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _797 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    }
    else
    {
        _797 = 0.0;
    }
    float _809 = dot(vec4(textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _568) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _569) + cbTextureTilingScale._m0[5u].w), _797)), vec4(cbMtdParam._m0[9u].x)) + dot(vec4(_726 * _716, _726 * _719, _726 * _722, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _1612 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uvec2 _822 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_0, int(0u)));
    float _873;
    if (_641)
    {
        float _833 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _839 = (_567 * _552) - (_564 * _555);
        float _842 = (_561 * _555) - (_567 * _549);
        float _845 = (_564 * _549) - (_561 * _552);
        float _871 = ((log2((((float(_822.y) * 0.5) * float(_822.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_842 * _842) + (_845 * _845)) + (_839 * _839)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_833 * gl_WorldRayDirectionEXT.x, _833 * gl_WorldRayDirectionEXT.y, _833 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _873 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    }
    else
    {
        _873 = 0.0;
    }
    vec4 _876 = textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _568) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _569) + cbTextureTilingScale._m0[0u].w), _873);
    uvec2 _892 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_2, int(0u)));
    float _943;
    if (_641)
    {
        float _903 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _909 = (_567 * _552) - (_564 * _555);
        float _912 = (_561 * _555) - (_567 * _549);
        float _915 = (_564 * _549) - (_561 * _552);
        float _941 = ((log2((((float(_892.y) * 0.5) * float(_892.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_912 * _912) + (_915 * _915)) + (_909 * _909)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_903 * gl_WorldRayDirectionEXT.x, _903 * gl_WorldRayDirectionEXT.y, _903 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _943 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    }
    else
    {
        _943 = 0.0;
    }
    vec4 _945 = textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _568) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _569) + cbTextureTilingScale._m0[2u].w), _943);
    float _947 = _945.x;
    float _948 = _945.y;
    float _949 = _945.z;
    float _956 = ((_876.x - _947) * _810) + _947;
    float _957 = ((_876.y - _948) * _810) + _948;
    float _958 = ((_876.z - _949) * _810) + _949;
    uvec2 _970 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_4, int(0u)));
    float _1021;
    if (_641)
    {
        float _981 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _987 = (_567 * _552) - (_564 * _555);
        float _990 = (_561 * _555) - (_567 * _549);
        float _993 = (_564 * _549) - (_561 * _552);
        float _1019 = ((log2((((float(_970.y) * 0.5) * float(_970.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_990 * _990) + (_993 * _993)) + (_987 * _987)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_981 * gl_WorldRayDirectionEXT.x, _981 * gl_WorldRayDirectionEXT.y, _981 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _1021 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    }
    else
    {
        _1021 = 0.0;
    }
    vec4 _1023 = textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _568) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _569) + cbTextureTilingScale._m0[4u].w), _1021);
    float _1025 = _1023.x;
    float _1027 = _1025 - (_1025 * _810);
    uvec2 _1039 = uvec2(textureSize(M_AMSN_V_Snow3_snp_0_Texture2D_3, int(0u)));
    float _1043 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1044 = _1043 * gl_WorldRayDirectionEXT.x;
    float _1045 = _1043 * gl_WorldRayDirectionEXT.y;
    float _1046 = _1043 * gl_WorldRayDirectionEXT.z;
    float _1090;
    if (_641)
    {
        float _1056 = (_567 * _552) - (_564 * _555);
        float _1059 = (_561 * _555) - (_567 * _549);
        float _1062 = (_564 * _549) - (_561 * _552);
        float _1088 = ((log2((((float(_1039.y) * 0.5) * float(_1039.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_1059 * _1059) + (_1062 * _1062)) + (_1056 * _1056)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_1044, _1045, _1046), vec3(_580, _582, _583))));
        _1090 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    }
    else
    {
        _1090 = 0.0;
    }
    vec4 _1092 = textureLod(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _568) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _569) + cbTextureTilingScale._m0[3u].w), _1090);
    float _1099 = (_1092.x * 2.0) + (-1.0);
    float _1100 = (_1092.y * 2.0) + (-1.0);
    float _1101 = dot(vec2(_1099, _1100), vec2(_1099, _1100));
    float _1643 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1109 = ((_1092.z - _702) * _810) + _702;
    float _1116 = ((_1099 - _705) * _810) + _705;
    float _1117 = ((_1100 - _707) * _810) + _707;
    float _1118 = ((sqrt(1.0 - (isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0)))) - _713) * _810) + _713;
    float _1121 = fma(_1118, _580, fma(_1117, _596, _1116 * _616));
    float _1124 = fma(_1118, _582, fma(_1117, _597, _1116 * _617));
    float _1127 = fma(_1118, _583, fma(_1117, _598, _1116 * _618));
    float _1131 = inversesqrt(dot(vec3(_1121, _1124, _1127), vec3(_1121, _1124, _1127)));
    float _1132 = _1131 * _1121;
    float _1133 = _1131 * _1124;
    float _1134 = _1131 * _1127;
    float _1146 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1147 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1148 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1149 = (-0.0) - _1044;
    float _1151 = (-0.0) - _1045;
    float _1152 = (-0.0) - _1046;
    float _1158 = float(gl_LaunchIDEXT.x);
    float _1159 = float(gl_LaunchIDEXT.y);
    float _1162 = float(gl_LaunchSizeEXT.x);
    float _1176 = fract(fract(sin(dot(vec2(_1158 / _1162, _1159 / _74), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1189 = fract(fract(sin(dot(vec2((_1158 + 128.0) / _1162, (_1159 + 128.0) / _74), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1190 = 1.0 - _1027;
    float _1191 = _1190 * _956;
    float _1192 = _1190 * _957;
    float _1193 = _1190 * _958;
    float _1198 = _1027 * (_956 + (-0.039999999105930328369140625));
    float _1199 = _1027 * (_957 + (-0.039999999105930328369140625));
    float _1200 = _1027 * (_958 + (-0.039999999105930328369140625));
    float _1201 = _1198 + 0.039999999105930328369140625;
    float _1203 = _1199 + 0.039999999105930328369140625;
    float _1204 = _1200 + 0.039999999105930328369140625;
    _66._m0 = 1u;
    uvec4 _1214 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1215 = _1214.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1215, _1214.w, _1215, vec3(_1146, _1147, _1148), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (_66._m0 == 0u)
    {
        float _1235 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1132, _1133, _1134));
        float _1654 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1238 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        float _1257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1109) * 0.949999988079071044921875);
        float _1258 = _1257 * _1257;
        float _1259 = g_sceneCB._m0[4u].x - _1044;
        float _1260 = g_sceneCB._m0[4u].y - _1045;
        float _1261 = g_sceneCB._m0[4u].z - _1046;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1266 = _1265 * _1259;
        float _1267 = _1265 * _1260;
        float _1268 = _1265 * _1261;
        float _1269 = dot(vec3(_1132, _1133, _1134), vec3(g_sceneCB._m0[4u].xyz));
        float _1665 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1272 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        float _1273 = dot(vec3(_1132, _1133, _1134), vec3(_1149, _1151, _1152));
        float _1676 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1276 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        float _1277 = dot(vec3(_1132, _1133, _1134), vec3(_1266, _1267, _1268));
        float _1687 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1280 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
        float _1281 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1266, _1267, _1268));
        float _1698 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1258 * _1258;
        float _1289 = ((_1280 * _1280) * (_1285 + (-1.0))) + 1.0;
        float _1298 = exp2(log2(1.0 - (isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0)))) * 5.0);
        float _1309 = 1.0 - _1258;
        float _1320 = (0.5 / (((_1276 * ((_1272 * _1309) + _1258)) + 9.9999999392252902907785028219223e-09) + (((_1276 * _1309) + _1258) * _1272))) * _1272;
        float _1709 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1322 = (isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0))) * (_1285 / ((_1289 * _1289) * 3.141590118408203125));
        _1329 = ((_1191 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1238;
        _1330 = ((_1192 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1238;
        _1331 = ((_1193 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1238;
        _1332 = (((_1298 * (0.959999978542327880859375 - _1198)) + _1201) * g_sceneCB._m0[5u].x) * _1322;
        _1333 = (((_1298 * (0.959999978542327880859375 - _1199)) + _1203) * g_sceneCB._m0[5u].y) * _1322;
        _1334 = (((_1298 * (0.959999978542327880859375 - _1200)) + _1204) * g_sceneCB._m0[5u].z) * _1322;
    }
    else
    {
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    bool _1336 = abs(_1133) < 0.89999997615814208984375;
    float _1338 = float(_1336);
    float _1339 = _1336 ? 0.0 : 1.0;
    float _1342 = (_1338 * _1134) - (_1339 * _1133);
    float _1343 = _1339 * _1132;
    float _1345 = (-0.0) - (_1132 * _1338);
    float _1349 = inversesqrt(dot(vec3(_1342, _1343, _1345), vec3(_1342, _1343, _1345)));
    float _1350 = _1342 * _1349;
    float _1351 = _1343 * _1349;
    float _1352 = _1349 * _1345;
    float _1355 = (_1351 * _1134) - (_1352 * _1133);
    float _1358 = (_1352 * _1132) - (_1350 * _1134);
    float _1361 = (_1350 * _1133) - (_1351 * _1132);
    float _1363;
    float _1371;
    float _1362 = 0.0;
    uint _1364 = 0u;
    float _1368;
    bool _1370;
    for (;;)
    {
        _1368 = (float(_1364) + _1176) * 0.03125;
        _1370 = _1364 == 0u;
        float frontier_phi_51_pred;
        if (_1370)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1512;
            float _1513;
            uint _1515;
            _1512 = 0.0;
            _1513 = 0.5;
            _1515 = _1364;
            float _1372;
            for (;;)
            {
                _1372 = ((_1515 & 1u) != 0u) ? (_1513 + _1512) : _1512;
                uint _1516 = _1515 >> 1u;
                if (_1516 == 0u)
                {
                    break;
                }
                else
                {
                    _1512 = _1372;
                    _1513 *= 0.5;
                    _1515 = _1516;
                }
            }
            frontier_phi_51_pred = _1372;
        }
        _1371 = frontier_phi_51_pred;
        float _1373 = _1371 + _1189;
        float _1377 = sqrt(_1368);
        float _1378 = ((_1373 > 1.0) ? (_1373 + (-1.0)) : _1373) * 6.283185482025146484375;
        float _1381 = cos(_1378) * _1377;
        float _1383 = sin(_1378) * _1377;
        float _1385 = sqrt(1.0 - _1368);
        float _1398 = ((_1385 * _1132) + (_1381 * _1355)) + (_1383 * _1350);
        float _1399 = ((_1385 * _1133) + (_1381 * _1358)) + (_1383 * _1351);
        float _1400 = ((_1385 * _1134) + (_1381 * _1361)) + (_1383 * _1352);
        _65._m0 = 1u;
        uvec4 _1404 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1405 = _1404.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1405, _1404.w, _1405, vec3(_1146, _1147, _1148), 9.9999997473787516355514526367188e-05, vec3(_1398, _1399, _1400), 10000.0, 1);
        float _1411 = dot(vec3(_1132, _1133, _1134), vec3(_1398, _1399, _1400));
        float _1720 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1414 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1363 = ((float(_65._m0 == 0u) * _1414) / (_1414 * 0.3183098733425140380859375)) + _1362;
        uint _1365 = _1364 + 1u;
        if (_1365 == 32u)
        {
            break;
        }
        else
        {
            _1362 = _1363;
            _1364 = _1365;
            continue;
        }
    }
    float _1422 = _1363 * 0.009947183541953563690185546875;
    float _1427 = dot(vec3(_1044, _1045, _1046), vec3(_1132, _1133, _1134)) * 2.0;
    vec4 _1441 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1044 - (_1427 * _1132), _1045 - (_1427 * _1133), _1046 - (_1427 * _1134)), 4.0 - (_1109 * 4.0));
    float _1446 = dot(vec3(_1149, _1151, _1152), vec3(_1132, _1133, _1134));
    float _1731 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _1456 = exp2(log2(1.0 - (isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0)))) * 5.0);
    vec4 _1468 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1132, _1133, _1134), 0.0);
    float _1479 = (_1332 + _1329) + (((_1468.x * _1191) + (((_1456 * (0.959999978542327880859375 - _1198)) + _1201) * _1441.x)) * _1422);
    float _1483 = (_1333 + _1330) + (((_1468.y * _1192) + (((_1456 * (0.959999978542327880859375 - _1199)) + _1203) * _1441.y)) * _1422);
    float _1487 = (_1334 + _1331) + (((_1468.z * _1193) + (((_1456 * (0.959999978542327880859375 - _1200)) + _1204) * _1441.z)) * _1422);
    float _1742 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _1753 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
    float _1764 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    bool _1495 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1506;
    _1506.x = _1495 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0)));
    _1506.y = _1495 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0)));
    _1506.z = _1495 ? ((_579 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0)));
    payload._m0 = _1506;
}


