#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

float _959;
vec3 _1401;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _157 & 65535u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        else
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _158 >> 16u;
        }
        _163 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
        _166 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    bool _228 = _172 == 0u;
    uint _229;
    if (_228)
    {
        _229 = _205 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 12u;
        }
        _229 = frontier_phi_9_10_ladder;
    }
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + (_173 ? (_229 + 4u) : _229)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _171 * _165;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_176)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _288;
    if (_228)
    {
        _288 = _269 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _269 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 12u;
        }
        _288 = frontier_phi_16_17_ladder;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int(((_244 + 4u) + (_173 ? (_288 + 4u) : _288)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _171 * _166;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_176)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _347;
    if (_228)
    {
        _347 = _328 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _328 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _328 + 12u;
        }
        _347 = frontier_phi_23_24_ladder;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_303 + 4u) + (_173 ? (_347 + 4u) : _347)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _122.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _163 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _163 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _165 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _165 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _166 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _166 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_202) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_203) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_204) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_214 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_214 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_214 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_214 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    float _614 = _613 * _607;
    float _615 = _613 * _608;
    float _616 = _613 * _609;
    uvec2 _634 = uvec2(textureSize(Test_M_Interior_snp_0_Texture2D_1, int(0u)));
    bool _639 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _692;
    if (_639)
    {
        float _650 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _656 = (_565 * _550) - (_562 * _553);
        float _659 = (_559 * _553) - (_565 * _547);
        float _662 = (_562 * _547) - (_559 * _550);
        float _689 = ((log2((((float(_634.y) * 0.5) * float(_634.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_659 * _659) + (_662 * _662)) + (_656 * _656)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_650 * gl_WorldRayDirectionEXT.x, _650 * gl_WorldRayDirectionEXT.y, _650 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    }
    else
    {
        _692 = 0.0;
    }
    vec4 _696 = textureLod(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _566) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _567) + cbTextureTilingScale._m0[0u].w), _692);
    float _701 = _696.w;
    float _715 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _701) + cbMtdParam._m0[11u].x) * _696.x;
    float _717 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _701) + cbMtdParam._m0[11u].y) * _696.y;
    float _719 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _701) + cbMtdParam._m0[11u].z) * _696.z;
    uvec2 _731 = uvec2(textureSize(Test_M_Interior_snp_0_Texture2D_2, int(0u)));
    float _782;
    if (_639)
    {
        float _742 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _748 = (_565 * _550) - (_562 * _553);
        float _751 = (_559 * _553) - (_565 * _547);
        float _754 = (_562 * _547) - (_559 * _550);
        float _780 = ((log2((((float(_731.y) * 0.5) * float(_731.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_751 * _751) + (_754 * _754)) + (_748 * _748)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_742 * gl_WorldRayDirectionEXT.x, _742 * gl_WorldRayDirectionEXT.y, _742 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _782 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    }
    else
    {
        _782 = 0.0;
    }
    vec4 _785 = textureLod(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _782);
    float _789 = _785.z;
    float _792 = (_785.x * 2.0) + (-1.0);
    float _794 = (_785.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_792, _794), vec2(_792, _794));
    float _1517 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0))));
    uvec2 _834 = uvec2(textureSize(Test_M_Interior_snp_0_Texture2D_4, int(0u)));
    float _885;
    if (_639)
    {
        float _845 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _851 = (_565 * _550) - (_562 * _553);
        float _854 = (_559 * _553) - (_565 * _547);
        float _857 = (_562 * _547) - (_559 * _550);
        float _883 = ((log2((((float(_834.y) * 0.5) * float(_834.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_854 * _854) + (_857 * _857)) + (_851 * _851)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_845 * gl_WorldRayDirectionEXT.x, _845 * gl_WorldRayDirectionEXT.y, _845 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _885 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    }
    else
    {
        _885 = 0.0;
    }
    vec4 _887 = textureLod(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _566) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _567) + cbTextureTilingScale._m0[3u].w), _885);
    float _900 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _907 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _924 = (-0.0) - dot(vec3(0.0), vec3(_900 * _614, _900 * _615, _900 * _616));
    float _925 = (-0.0) - dot(vec3(0.0), vec3(_907 * _594, _907 * _595, _907 * _596));
    float _926 = (-0.0) - dot(vec3(0.0), vec3((-0.0) - _578, (-0.0) - _580, (-0.0) - _581));
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _930 * _926;
    float _936 = ((cbMtdParam._m0[15u].y * _924) * _930) + (((_887.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _937 = ((cbMtdParam._m0[15u].z * _925) * _930) + (((_887.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _940 = fract(cbMtdParam._m0[15u].y * _566);
    float _941 = fract(cbMtdParam._m0[15u].z * _567);
    float _957;
    float _960;
    float _962;
    if (_936 > 0.0)
    {
        float _944 = (1.0 - _940) / _936;
        _957 = _944;
        _960 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_944 * _931)) * 0.16666667163372039794921875;
        _962 = (fract((_944 * _937) + _941) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_44_43_ladder;
        float frontier_phi_44_43_ladder_1;
        float frontier_phi_44_43_ladder_2;
        if (_936 < 0.0)
        {
            float _958 = ((-0.0) - _940) / _936;
            frontier_phi_44_43_ladder = (fract(_958 * _931) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_44_43_ladder_1 = _958;
            frontier_phi_44_43_ladder_2 = (fract((_958 * _937) + _941) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_44_43_ladder = 0.0;
            frontier_phi_44_43_ladder_1 = _959;
            frontier_phi_44_43_ladder_2 = 0.0;
        }
        _957 = frontier_phi_44_43_ladder_1;
        _960 = frontier_phi_44_43_ladder;
        _962 = frontier_phi_44_43_ladder_2;
    }
    float _988;
    float _990;
    float _992;
    if (_937 > 0.0)
    {
        float _975 = (1.0 - _941) / _937;
        float frontier_phi_49_46_ladder;
        float frontier_phi_49_46_ladder_1;
        float frontier_phi_49_46_ladder_2;
        if (_975 < _957)
        {
            frontier_phi_49_46_ladder = (fract(_975 * _931) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_49_46_ladder_1 = (fract((_975 * _936) + _940) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_49_46_ladder_2 = _975;
        }
        else
        {
            frontier_phi_49_46_ladder = _962;
            frontier_phi_49_46_ladder_1 = _960;
            frontier_phi_49_46_ladder_2 = _957;
        }
        _988 = frontier_phi_49_46_ladder_2;
        _990 = frontier_phi_49_46_ladder_1;
        _992 = frontier_phi_49_46_ladder;
    }
    else
    {
        float frontier_phi_49_47_ladder;
        float frontier_phi_49_47_ladder_1;
        float frontier_phi_49_47_ladder_2;
        if (_937 < 0.0)
        {
            float _989 = ((-0.0) - _941) / _937;
            float frontier_phi_49_47_ladder_50_ladder;
            float frontier_phi_49_47_ladder_50_ladder_1;
            float frontier_phi_49_47_ladder_50_ladder_2;
            if (_989 < _957)
            {
                frontier_phi_49_47_ladder_50_ladder = fract(_989 * _931) * 0.16666667163372039794921875;
                frontier_phi_49_47_ladder_50_ladder_1 = (fract((_989 * _936) + _940) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_49_47_ladder_50_ladder_2 = _989;
            }
            else
            {
                frontier_phi_49_47_ladder_50_ladder = _962;
                frontier_phi_49_47_ladder_50_ladder_1 = _960;
                frontier_phi_49_47_ladder_50_ladder_2 = _957;
            }
            frontier_phi_49_47_ladder = frontier_phi_49_47_ladder_50_ladder;
            frontier_phi_49_47_ladder_1 = frontier_phi_49_47_ladder_50_ladder_1;
            frontier_phi_49_47_ladder_2 = frontier_phi_49_47_ladder_50_ladder_2;
        }
        else
        {
            frontier_phi_49_47_ladder = _962;
            frontier_phi_49_47_ladder_1 = _960;
            frontier_phi_49_47_ladder_2 = _957;
        }
        _988 = frontier_phi_49_47_ladder_2;
        _990 = frontier_phi_49_47_ladder_1;
        _992 = frontier_phi_49_47_ladder;
    }
    float _996 = (_931 > 0.0) ? (cbMtdParam._m0[13u].w / _931) : 5000.0;
    float _1009;
    float _1010;
    if (_996 < _988)
    {
        _1009 = ((_940 + cbMtdParam._m0[14u].x) + (_996 * _936)) * 0.16666667163372039794921875;
        _1010 = (((_996 * _937) + _941) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _1009 = _990;
        _1010 = _992;
    }
    vec4 _1014 = textureLod(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_1009, _1010), 0.0);
    float _1027 = fma(_800, _578, fma(_794, _594, _792 * _614));
    float _1030 = fma(_800, _580, fma(_794, _595, _792 * _615));
    float _1033 = fma(_800, _581, fma(_794, _596, _792 * _616));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _1052 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1053 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1054 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1058 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1059 = _1058 * gl_WorldRayDirectionEXT.x;
    float _1060 = _1058 * gl_WorldRayDirectionEXT.y;
    float _1061 = _1058 * gl_WorldRayDirectionEXT.z;
    float _1062 = (-0.0) - _1059;
    float _1063 = (-0.0) - _1060;
    float _1064 = (-0.0) - _1061;
    float _1070 = float(gl_LaunchIDEXT.x);
    float _1071 = float(gl_LaunchIDEXT.y);
    float _1074 = float(gl_LaunchSizeEXT.x);
    float _1088 = fract(fract(sin(dot(vec2(_1070 / _1074, _1071 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1101 = fract(fract(sin(dot(vec2((_1070 + 128.0) / _1074, (_1071 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _1111 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1112 = _1111.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1112, _1111.w, _1112, vec3(_1052, _1053, _1054), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (_64._m0 == 0u)
    {
        float _1139 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1038, _1039, _1040));
        float _1533 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1142 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        float _1161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _789) * 0.949999988079071044921875);
        float _1162 = _1161 * _1161;
        float _1163 = g_sceneCB._m0[4u].x - _1059;
        float _1164 = g_sceneCB._m0[4u].y - _1060;
        float _1165 = g_sceneCB._m0[4u].z - _1061;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1170 = _1169 * _1163;
        float _1171 = _1169 * _1164;
        float _1172 = _1169 * _1165;
        float _1173 = dot(vec3(_1038, _1039, _1040), vec3(g_sceneCB._m0[4u].xyz));
        float _1544 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1176 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        float _1177 = dot(vec3(_1038, _1039, _1040), vec3(_1062, _1063, _1064));
        float _1555 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1180 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        float _1181 = dot(vec3(_1038, _1039, _1040), vec3(_1170, _1171, _1172));
        float _1566 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1184 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        float _1185 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1170, _1171, _1172));
        float _1577 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1162 * _1162;
        float _1193 = ((_1184 * _1184) * (_1189 + (-1.0))) + 1.0;
        float _1205 = (exp2(log2(1.0 - (isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1207 = 1.0 - _1162;
        float _1218 = (0.5 / (((_1180 * ((_1176 * _1207) + _1162)) + 9.9999999392252902907785028219223e-09) + (((_1180 * _1207) + _1162) * _1176))) * _1176;
        float _1588 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1220 = (isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0))) * (_1189 / ((_1193 * _1193) * 3.141590118408203125));
        _1227 = ((_715 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1142;
        _1228 = ((_717 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1142;
        _1229 = ((_719 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1142;
        _1230 = (_1205 * g_sceneCB._m0[5u].x) * _1220;
        _1231 = (_1205 * g_sceneCB._m0[5u].y) * _1220;
        _1232 = (_1205 * g_sceneCB._m0[5u].z) * _1220;
    }
    else
    {
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    bool _1234 = abs(_1039) < 0.89999997615814208984375;
    float _1236 = float(_1234);
    float _1237 = _1234 ? 0.0 : 1.0;
    float _1240 = (_1236 * _1040) - (_1237 * _1039);
    float _1241 = _1237 * _1038;
    float _1243 = (-0.0) - (_1038 * _1236);
    float _1247 = inversesqrt(dot(vec3(_1240, _1241, _1243), vec3(_1240, _1241, _1243)));
    float _1248 = _1240 * _1247;
    float _1249 = _1241 * _1247;
    float _1250 = _1247 * _1243;
    float _1253 = (_1249 * _1040) - (_1250 * _1039);
    float _1256 = (_1250 * _1038) - (_1248 * _1040);
    float _1259 = (_1248 * _1039) - (_1249 * _1038);
    float _1261;
    float _1269;
    float _1260 = 0.0;
    uint _1262 = 0u;
    float _1266;
    bool _1268;
    for (;;)
    {
        _1266 = (float(_1262) + _1088) * 0.03125;
        _1268 = _1262 == 0u;
        float frontier_phi_57_pred;
        if (_1268)
        {
            frontier_phi_57_pred = 0.0;
        }
        else
        {
            float _1406;
            float _1407;
            uint _1409;
            _1406 = 0.0;
            _1407 = 0.5;
            _1409 = _1262;
            float _1270;
            for (;;)
            {
                _1270 = ((_1409 & 1u) != 0u) ? (_1407 + _1406) : _1406;
                uint _1410 = _1409 >> 1u;
                if (_1410 == 0u)
                {
                    break;
                }
                else
                {
                    _1406 = _1270;
                    _1407 *= 0.5;
                    _1409 = _1410;
                }
            }
            frontier_phi_57_pred = _1270;
        }
        _1269 = frontier_phi_57_pred;
        float _1271 = _1269 + _1101;
        float _1275 = sqrt(_1266);
        float _1276 = ((_1271 > 1.0) ? (_1271 + (-1.0)) : _1271) * 6.283185482025146484375;
        float _1279 = cos(_1276) * _1275;
        float _1281 = sin(_1276) * _1275;
        float _1283 = sqrt(1.0 - _1266);
        float _1296 = ((_1283 * _1038) + (_1279 * _1253)) + (_1281 * _1248);
        float _1297 = ((_1283 * _1039) + (_1279 * _1256)) + (_1281 * _1249);
        float _1298 = ((_1283 * _1040) + (_1279 * _1259)) + (_1281 * _1250);
        _63._m0 = 1u;
        uvec4 _1302 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1303 = _1302.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1303, _1302.w, _1303, vec3(_1052, _1053, _1054), 9.9999997473787516355514526367188e-05, vec3(_1296, _1297, _1298), 10000.0, 1);
        float _1309 = dot(vec3(_1038, _1039, _1040), vec3(_1296, _1297, _1298));
        float _1599 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1312 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1261 = ((float(_63._m0 == 0u) * _1312) / (_1312 * 0.3183098733425140380859375)) + _1260;
        uint _1263 = _1262 + 1u;
        if (_1263 == 32u)
        {
            break;
        }
        else
        {
            _1260 = _1261;
            _1262 = _1263;
            continue;
        }
    }
    float _1320 = _1261 * 0.009947183541953563690185546875;
    float _1325 = dot(vec3(_1059, _1060, _1061), vec3(_1038, _1039, _1040)) * 2.0;
    vec4 _1339 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1059 - (_1325 * _1038), _1060 - (_1325 * _1039), _1061 - (_1325 * _1040)), 4.0 - (_789 * 4.0));
    float _1344 = dot(vec3(_1062, _1063, _1064), vec3(_1038, _1039, _1040));
    float _1610 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1353 = (exp2(log2(1.0 - (isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1359 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1038, _1039, _1040), 0.0);
    float _1371 = ((_1227 + ((cbMtdParam._m0[12u].x * _701) * _1014.x)) + _1230) + (((_1359.x * _715) + (_1353 * _1339.x)) * _1320);
    float _1376 = ((_1228 + ((cbMtdParam._m0[12u].y * _701) * _1014.y)) + _1231) + (((_1359.y * _717) + (_1353 * _1339.y)) * _1320);
    float _1381 = ((_1229 + ((cbMtdParam._m0[12u].z * _701) * _1014.z)) + _1232) + (((_1359.z * _719) + (_1353 * _1339.z)) * _1320);
    float _1621 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1632 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
    float _1643 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
    bool _1389 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1400;
    _1400.x = _1389 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0)));
    _1400.y = _1389 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0)));
    _1400.z = _1389 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0)));
    payload._m0 = _1400;
}


