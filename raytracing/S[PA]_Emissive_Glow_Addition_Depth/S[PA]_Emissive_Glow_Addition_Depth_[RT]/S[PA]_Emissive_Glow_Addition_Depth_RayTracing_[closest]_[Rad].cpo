#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[22];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_18;
layout(set = 0, binding = 3) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _1471;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _164 & 65535u;
            frontier_phi_3_2_ladder_2 = _168;
        }
        else
        {
            frontier_phi_3_2_ladder = _168;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _165 >> 16u;
        }
        _170 = frontier_phi_3_2_ladder_1;
        _172 = frontier_phi_3_2_ladder;
        _173 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _177.z;
    bool _180 = _179 != 0u;
    bool _182 = _129.w == 0u;
    bool _183 = _180 || _182;
    uint _185 = (_178 * _170) + 12u;
    uint _209;
    uint _210;
    uint _211;
    uint _212;
    if (_183)
    {
        uvec4 _188 = texelFetch(l_geomAttrib_0, int(_185 >> 2u));
        uint _189 = _188.x;
        _209 = _189 & 255u;
        _210 = (_189 >> 8u) & 255u;
        _211 = (_189 >> 16u) & 255u;
        _212 = 20u;
    }
    else
    {
        uint _197 = _185 >> 2u;
        uvec2 _203 = uvec2(texelFetch(l_geomAttrib_0, int(_197)).x, texelFetch(l_geomAttrib_0, int(_197 + 1u)).x);
        uint _204 = _203.x;
        _209 = _204 & 65535u;
        _210 = _204 >> 16u;
        _211 = _203.y & 65535u;
        _212 = 24u;
    }
    bool _218 = _179 == 0u;
    uint _219;
    if (_218)
    {
        _219 = _212;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_182)
        {
            frontier_phi_9_10_ladder = _212 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _212 + 8u;
        }
        _219 = frontier_phi_9_10_ladder;
    }
    uint _224 = _180 ? (_219 + 4u) : _219;
    uint _225 = _178 * _170;
    uvec4 _230 = texelFetch(l_geomAttrib_0, int(((_225 + 4u) + _224) >> 2u));
    uint _231 = _230.x;
    float _235 = float(int(uint(int(_231 << 16u) >> int(16u))));
    float _236 = float(int(uint(int(_231) >> int(16u))));
    uint _245 = (_178 * _172) + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_183)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 20u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 24u;
    }
    uint _273;
    if (_218)
    {
        _273 = _269;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_182)
        {
            frontier_phi_16_17_ladder = _269 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 8u;
        }
        _273 = frontier_phi_16_17_ladder;
    }
    uint _277 = _180 ? (_273 + 4u) : _273;
    uint _278 = _178 * _172;
    uvec4 _282 = texelFetch(l_geomAttrib_0, int(((_278 + 4u) + _277) >> 2u));
    uint _283 = _282.x;
    float _287 = float(int(uint(int(_283 << 16u) >> int(16u))));
    float _288 = float(int(uint(int(_283) >> int(16u))));
    uint _297 = (_178 * _173) + 12u;
    uint _318;
    uint _319;
    uint _320;
    uint _321;
    if (_183)
    {
        uvec4 _299 = texelFetch(l_geomAttrib_0, int(_297 >> 2u));
        uint _300 = _299.x;
        _318 = _300 & 255u;
        _319 = (_300 >> 8u) & 255u;
        _320 = (_300 >> 16u) & 255u;
        _321 = 20u;
    }
    else
    {
        uint _306 = _297 >> 2u;
        uvec2 _312 = uvec2(texelFetch(l_geomAttrib_0, int(_306)).x, texelFetch(l_geomAttrib_0, int(_306 + 1u)).x);
        uint _313 = _312.x;
        _318 = _313 & 65535u;
        _319 = _313 >> 16u;
        _320 = _312.y & 65535u;
        _321 = 24u;
    }
    uint _325;
    if (_218)
    {
        _325 = _321;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_182)
        {
            frontier_phi_23_24_ladder = _321 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _321 + 8u;
        }
        _325 = frontier_phi_23_24_ladder;
    }
    uint _329 = _180 ? (_325 + 4u) : _325;
    uint _330 = _178 * _173;
    uvec4 _334 = texelFetch(l_geomAttrib_0, int(((_330 + 4u) + _329) >> 2u));
    uint _335 = _334.x;
    float _339 = float(int(uint(int(_335 << 16u) >> int(16u))));
    float _340 = float(int(uint(int(_335) >> int(16u))));
    bool _349 = _129.z == 0u;
    float _385;
    float _386;
    float _387;
    if (_349)
    {
        uint _352 = _170 * 3u;
        uvec3 _361 = uvec3(texelFetch(l_geomPositionBuffer, int(_352)).x, texelFetch(l_geomPositionBuffer, int(_352 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_352 + 2u)).x);
        _385 = uintBitsToFloat(_361.x);
        _386 = uintBitsToFloat(_361.y);
        _387 = uintBitsToFloat(_361.z);
    }
    else
    {
        uint _369 = _170 * 2u;
        uvec2 _375 = uvec2(texelFetch(l_geomPositionBuffer, int(_369)).x, texelFetch(l_geomPositionBuffer, int(_369 + 1u)).x);
        uint _376 = _375.x;
        _385 = unpackHalf2x16(_376).x;
        _386 = unpackHalf2x16(_376 >> 16u).x;
        _387 = unpackHalf2x16(_375.y).x;
    }
    float _423;
    float _424;
    float _425;
    if (_349)
    {
        uint _390 = _172 * 3u;
        uvec3 _399 = uvec3(texelFetch(l_geomPositionBuffer, int(_390)).x, texelFetch(l_geomPositionBuffer, int(_390 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_390 + 2u)).x);
        _423 = uintBitsToFloat(_399.x);
        _424 = uintBitsToFloat(_399.y);
        _425 = uintBitsToFloat(_399.z);
    }
    else
    {
        uint _407 = _172 * 2u;
        uvec2 _413 = uvec2(texelFetch(l_geomPositionBuffer, int(_407)).x, texelFetch(l_geomPositionBuffer, int(_407 + 1u)).x);
        uint _414 = _413.x;
        _423 = unpackHalf2x16(_414).x;
        _424 = unpackHalf2x16(_414 >> 16u).x;
        _425 = unpackHalf2x16(_413.y).x;
    }
    float _461;
    float _462;
    float _463;
    if (_349)
    {
        uint _428 = _173 * 3u;
        uvec3 _437 = uvec3(texelFetch(l_geomPositionBuffer, int(_428)).x, texelFetch(l_geomPositionBuffer, int(_428 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_428 + 2u)).x);
        _461 = uintBitsToFloat(_437.x);
        _462 = uintBitsToFloat(_437.y);
        _463 = uintBitsToFloat(_437.z);
    }
    else
    {
        uint _445 = _173 * 2u;
        uvec2 _451 = uvec2(texelFetch(l_geomPositionBuffer, int(_445)).x, texelFetch(l_geomPositionBuffer, int(_445 + 1u)).x);
        uint _452 = _451.x;
        _461 = unpackHalf2x16(_452).x;
        _462 = unpackHalf2x16(_452 >> 16u).x;
        _463 = unpackHalf2x16(_451.y).x;
    }
    float _466 = (1.0 - hit._m0.x) - hit._m0.y;
    float _495 = (_287 - _235) * 0.00048828125;
    float _497 = (_288 - _236) * 0.00048828125;
    float _500 = (_339 - _235) * 0.00048828125;
    float _501 = (_340 - _236) * 0.00048828125;
    float _523 = _423 - _385;
    float _524 = _424 - _386;
    float _525 = _425 - _387;
    float _528 = fma(_525, gl_ObjectToWorldEXT[2u].x, fma(_524, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _523));
    float _531 = fma(_525, gl_ObjectToWorldEXT[2u].y, fma(_524, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _523));
    float _534 = fma(_525, gl_ObjectToWorldEXT[2u].z, fma(_524, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _523));
    float _535 = _461 - _385;
    float _536 = _462 - _386;
    float _537 = _463 - _387;
    float _540 = fma(_537, gl_ObjectToWorldEXT[2u].x, fma(_536, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _535));
    float _543 = fma(_537, gl_ObjectToWorldEXT[2u].y, fma(_536, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _535));
    float _546 = fma(_537, gl_ObjectToWorldEXT[2u].z, fma(_536, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _535));
    float _547 = (((_287 * hit._m0.x) + (_235 * _466)) + (_339 * hit._m0.y)) * 0.00048828125;
    float _548 = (((_288 * hit._m0.x) + (_236 * _466)) + (_340 * hit._m0.y)) * 0.00048828125;
    float _552 = (((float(_209) * _466) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_318) * hit._m0.y);
    float _555 = (((float(_210) * _466) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_319) * hit._m0.y);
    float _558 = (((float(_211) * _466) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_320) * hit._m0.y);
    float _559 = _552 * 0.0078740157186985015869140625;
    float _561 = _555 * 0.0078740157186985015869140625;
    float _562 = _558 * 0.0078740157186985015869140625;
    float _572 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1555 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    float _582 = (cbMtdParam._m0[16u].y * 0.949999988079071044921875) * ((_574 * _574) * (3.0 - (_574 * 2.0)));
    float _587 = fract(abs(_582));
    float _593 = (((((float(texelFetch(l_geomAttrib_0, int(((_278 + 8u) + _277) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_225 + 8u) + _224) >> 2u)).x & 255u) * _466)) + (float(texelFetch(l_geomAttrib_0, int(((_330 + 8u) + _329) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) + 0.5) - (((_582 >= ((-0.0) - _582)) ? _587 : ((-0.0) - _587)) * 2.0);
    float _594 = ceil(_593);
    float _1566 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _607 = cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x;
    float _610 = (_607 * cbMtdParam._m0[20u].w) + _547;
    float _611 = (_607 * cbMtdParam._m0[21u].x) + _548;
    uvec2 _623 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_10, int(0u)));
    bool _628 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _679;
    if (_628)
    {
        float _639 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _645 = (_546 * _531) - (_543 * _534);
        float _648 = (_540 * _534) - (_546 * _528);
        float _651 = (_543 * _528) - (_540 * _531);
        float _677 = ((log2((((float(_623.y) * 0.5) * float(_623.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_648 * _648) + (_651 * _651)) + (_645 * _645)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_639 * gl_WorldRayDirectionEXT.x, _639 * gl_WorldRayDirectionEXT.y, _639 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _679 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    }
    else
    {
        _679 = 0.0;
    }
    vec4 _683 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_10, SS_DiffuseMap), vec2((_610 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_611 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _679);
    float _685 = _683.x;
    float _688 = abs(cbMtdParam._m0[16u].z * _593);
    float _693 = (((_688 * (-0.20000000298023223876953125)) - _685) * _688) + _685;
    float _1582 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = (isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0))) * 100.0;
    float _1593 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uvec2 _716 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_5, int(0u)));
    float _767;
    if (_628)
    {
        float _727 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _733 = (_546 * _531) - (_543 * _534);
        float _736 = (_540 * _534) - (_546 * _528);
        float _739 = (_543 * _528) - (_540 * _531);
        float _765 = ((log2((((float(_716.y) * 0.5) * float(_716.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_736 * _736) + (_739 * _739)) + (_733 * _733)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_727 * gl_WorldRayDirectionEXT.x, _727 * gl_WorldRayDirectionEXT.y, _727 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _767 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    }
    else
    {
        _767 = 0.0;
    }
    vec4 _769 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _610) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _611) + cbTextureTilingScale._m0[5u].w), _767);
    float _775 = (cbMtdParam._m0[9u].x * _697) * _769.x;
    float _777 = (cbMtdParam._m0[9u].y * _697) * _769.y;
    float _779 = (cbMtdParam._m0[9u].z * _697) * _769.z;
    float _780 = 1.0 - (isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0)));
    float _799 = inversesqrt(dot(vec3(_559, _561, _562), vec3(_559, _561, _562)));
    float _800 = _799 * _559;
    float _801 = _799 * _561;
    float _802 = _799 * _562;
    float _807 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_800, _801, _802, 0.0)) - cbMtdParam._m0[15u].x;
    float _1609 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _814 = exp2(log2(1.0 - (isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _827 = cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x;
    uvec2 _843 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_3, int(0u)));
    float _894;
    if (_628)
    {
        float _854 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _860 = (_546 * _531) - (_543 * _534);
        float _863 = (_540 * _534) - (_546 * _528);
        float _866 = (_543 * _528) - (_540 * _531);
        float _892 = ((log2((((float(_843.y) * 0.5) * float(_843.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_863 * _863) + (_866 * _866)) + (_860 * _860)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_854 * gl_WorldRayDirectionEXT.x, _854 * gl_WorldRayDirectionEXT.y, _854 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _894 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    }
    else
    {
        _894 = 0.0;
    }
    vec4 _896 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_827 * cbMtdParam._m0[20u].y) + _547) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_827 * cbMtdParam._m0[20u].z) + _548) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), _894);
    uvec2 _929 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_2, int(0u)));
    float _980;
    if (_628)
    {
        float _940 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _946 = (_546 * _531) - (_543 * _534);
        float _949 = (_540 * _534) - (_546 * _528);
        float _952 = (_543 * _528) - (_540 * _531);
        float _978 = ((log2((((float(_929.y) * 0.5) * float(_929.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_949 * _949) + (_952 * _952)) + (_946 * _946)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_940 * gl_WorldRayDirectionEXT.x, _940 * gl_WorldRayDirectionEXT.y, _940 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _980 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    }
    else
    {
        _980 = 0.0;
    }
    vec4 _982 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[18u].w * _827) + _547) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[19u].x * _827) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), _980);
    uvec2 _1013 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_1, int(0u)));
    float _1064;
    if (_628)
    {
        float _1024 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1030 = (_546 * _531) - (_543 * _534);
        float _1033 = (_540 * _534) - (_546 * _528);
        float _1036 = (_543 * _528) - (_540 * _531);
        float _1062 = ((log2((((float(_1013.y) * 0.5) * float(_1013.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_1033 * _1033) + (_1036 * _1036)) + (_1030 * _1030)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_1024 * gl_WorldRayDirectionEXT.x, _1024 * gl_WorldRayDirectionEXT.y, _1024 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _1064 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    }
    else
    {
        _1064 = 0.0;
    }
    vec4 _1066 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].w * _827) + _547) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[20u].x * _827) + _548) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1064);
    uvec2 _1109 = uvec2(textureSize(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_18, int(0u)));
    float _1113 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1114 = _1113 * gl_WorldRayDirectionEXT.x;
    float _1115 = _1113 * gl_WorldRayDirectionEXT.y;
    float _1116 = _1113 * gl_WorldRayDirectionEXT.z;
    float _1160;
    if (_628)
    {
        float _1126 = (_546 * _531) - (_543 * _534);
        float _1129 = (_540 * _534) - (_546 * _528);
        float _1132 = (_543 * _528) - (_540 * _531);
        float _1158 = ((log2((((float(_1109.y) * 0.5) * float(_1109.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_1129 * _1129) + (_1132 * _1132)) + (_1126 * _1126)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_1114, _1115, _1116), vec3(_559, _561, _562))));
        _1160 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    }
    else
    {
        _1160 = 0.0;
    }
    vec4 _1162 = textureLod(sampler2D(S_PA_Emissive_Glow_Addition_Depth_snp_0_Texture2D_18, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * _827) + _547) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[19u].z * _827) + _548) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _1160);
    float _1173 = ((_1162.x * cbMtdParam._m0[10u].x) + (((((_896.x * cbMtdParam._m0[14u].x) + (_814 * cbMtdParam._m0[11u].x)) + (_982.x * cbMtdParam._m0[12u].x)) + (_1066.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[18u].x)) * _780;
    float _1174 = ((_1162.y * cbMtdParam._m0[10u].y) + (((((_896.y * cbMtdParam._m0[14u].y) + (_814 * cbMtdParam._m0[11u].y)) + (_982.y * cbMtdParam._m0[12u].y)) + (_1066.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[18u].x)) * _780;
    float _1175 = ((_1162.z * cbMtdParam._m0[10u].z) + (((((_896.z * cbMtdParam._m0[14u].z) + (_814 * cbMtdParam._m0[11u].z)) + (_982.z * cbMtdParam._m0[12u].z)) + (_1066.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[18u].x)) * _780;
    float _1193 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1194 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1195 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1196 = (-0.0) - _1114;
    float _1197 = (-0.0) - _1115;
    float _1198 = (-0.0) - _1116;
    float _1204 = float(gl_LaunchIDEXT.x);
    float _1205 = float(gl_LaunchIDEXT.y);
    float _1208 = float(gl_LaunchSizeEXT.x);
    float _1222 = fract(fract(sin(dot(vec2(_1204 / _1208, _1205 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1235 = fract(fract(sin(dot(vec2((_1204 + 128.0) / _1208, (_1205 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _68._m0 = 1u;
    uvec4 _1245 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1246 = _1245.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1246, _1245.w, _1246, vec3(_1193, _1194, _1195), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1311;
    float _1312;
    float _1313;
    if (_68._m0 == 0u)
    {
        float _1266 = g_sceneCB._m0[4u].x - _1114;
        float _1267 = g_sceneCB._m0[4u].y - _1115;
        float _1268 = g_sceneCB._m0[4u].z - _1116;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1276 = dot(vec3(_800, _801, _802), vec3(g_sceneCB._m0[4u].xyz));
        float _1645 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1279 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        float _1280 = dot(vec3(_800, _801, _802), vec3(_1196, _1197, _1198));
        float _1656 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1266 * _1272, _1267 * _1272, _1268 * _1272));
        float _1667 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1295 = (exp2(log2(1.0 - (isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1301 = (0.5 / ((_1279 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0))))) * _1279;
        float _1678 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1303 = (isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0))) * 0.31831014156341552734375;
        _1311 = (_1295 * g_sceneCB._m0[5u].x) * _1303;
        _1312 = (_1295 * g_sceneCB._m0[5u].y) * _1303;
        _1313 = (_1295 * g_sceneCB._m0[5u].z) * _1303;
    }
    else
    {
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    bool _1315 = abs(_801) < 0.89999997615814208984375;
    float _1317 = float(_1315);
    float _1318 = _1315 ? 0.0 : 1.0;
    float _1321 = (_1317 * _802) - (_1318 * _801);
    float _1322 = _1318 * _800;
    float _1324 = (-0.0) - (_800 * _1317);
    float _1328 = inversesqrt(dot(vec3(_1321, _1322, _1324), vec3(_1321, _1322, _1324)));
    float _1329 = _1321 * _1328;
    float _1330 = _1322 * _1328;
    float _1331 = _1328 * _1324;
    float _1334 = (_1330 * _802) - (_1331 * _801);
    float _1337 = (_1331 * _800) - (_1329 * _802);
    float _1340 = (_1329 * _801) - (_1330 * _800);
    float _1342;
    float _1350;
    float _1341 = 0.0;
    uint _1343 = 0u;
    float _1347;
    bool _1349;
    for (;;)
    {
        _1347 = (float(_1343) + _1222) * 0.03125;
        _1349 = _1343 == 0u;
        float frontier_phi_51_pred;
        if (_1349)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1476;
            float _1477;
            uint _1479;
            _1476 = 0.0;
            _1477 = 0.5;
            _1479 = _1343;
            float _1351;
            for (;;)
            {
                _1351 = ((_1479 & 1u) != 0u) ? (_1477 + _1476) : _1476;
                uint _1480 = _1479 >> 1u;
                if (_1480 == 0u)
                {
                    break;
                }
                else
                {
                    _1476 = _1351;
                    _1477 *= 0.5;
                    _1479 = _1480;
                }
            }
            frontier_phi_51_pred = _1351;
        }
        _1350 = frontier_phi_51_pred;
        float _1352 = _1350 + _1235;
        float _1356 = sqrt(_1347);
        float _1357 = ((_1352 > 1.0) ? (_1352 + (-1.0)) : _1352) * 6.283185482025146484375;
        float _1360 = cos(_1357) * _1356;
        float _1362 = sin(_1357) * _1356;
        float _1364 = sqrt(1.0 - _1347);
        float _1377 = ((_1364 * _800) + (_1360 * _1334)) + (_1362 * _1329);
        float _1378 = ((_1364 * _801) + (_1360 * _1337)) + (_1362 * _1330);
        float _1379 = ((_1364 * _802) + (_1360 * _1340)) + (_1362 * _1331);
        _67._m0 = 1u;
        uvec4 _1383 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1384 = _1383.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1384, _1383.w, _1384, vec3(_1193, _1194, _1195), 9.9999997473787516355514526367188e-05, vec3(_1377, _1378, _1379), 10000.0, 1);
        float _1390 = dot(vec3(_800, _801, _802), vec3(_1377, _1378, _1379));
        float _1689 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1393 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1342 = ((float(_67._m0 == 0u) * _1393) / (_1393 * 0.3183098733425140380859375)) + _1341;
        uint _1344 = _1343 + 1u;
        if (_1344 == 32u)
        {
            break;
        }
        else
        {
            _1341 = _1342;
            _1343 = _1344;
            continue;
        }
    }
    float _1402 = _1342 * 0.009947183541953563690185546875;
    float _1407 = dot(vec3(_1114, _1115, _1116), vec3(_800, _801, _802)) * 2.0;
    vec4 _1419 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1114 - (_1407 * _800), _1115 - (_1407 * _801), _1116 - (_1407 * _802)), 4.0);
    float _1424 = dot(vec3(_1196, _1197, _1198), vec3(_800, _801, _802));
    float _1700 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1433 = (exp2(log2(1.0 - (isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1443 = (((_1173 + _775) + ((_775 - _1173) * _697)) + _1311) + ((_1419.x * _1402) * _1433);
    float _1447 = (((_1174 + _777) + ((_777 - _1174) * _697)) + _1312) + ((_1419.y * _1402) * _1433);
    float _1451 = (((_1175 + _779) + ((_779 - _1175) * _697)) + _1313) + ((_1419.z * _1402) * _1433);
    float _1711 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _1722 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _1733 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    bool _1459 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1470;
    _1470.x = _1459 ? ((_552 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0)));
    _1470.y = _1459 ? ((_555 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0)));
    _1470.z = _1459 ? ((_558 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0)));
    payload._m0 = _1470;
}


