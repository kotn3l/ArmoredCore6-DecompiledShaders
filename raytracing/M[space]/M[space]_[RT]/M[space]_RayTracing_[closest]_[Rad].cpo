#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_space_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_space_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_space_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1161;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _154 & 65535u;
            frontier_phi_3_2_ladder_2 = _157;
        }
        else
        {
            frontier_phi_3_2_ladder = _155 >> 16u;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _158;
        }
        _160 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder_2;
        _163 = frontier_phi_3_2_ladder;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _168 * _160;
    uint _171 = _169 >> 2u;
    uvec3 _180 = uvec3(texelFetch(l_geomAttrib_0, int(_171)).x, texelFetch(l_geomAttrib_0, int(_171 + 1u)).x, texelFetch(l_geomAttrib_0, int(_171 + 2u)).x);
    uint _187 = _167.z;
    bool _188 = _187 != 0u;
    bool _190 = _119.w == 0u;
    bool _191 = _188 || _190;
    uint _192 = _169 + 12u;
    uint _215;
    uint _216;
    uint _217;
    uint _218;
    if (_191)
    {
        uvec4 _194 = texelFetch(l_geomAttrib_0, int(_192 >> 2u));
        uint _195 = _194.x;
        _215 = _195 & 255u;
        _216 = (_195 >> 8u) & 255u;
        _217 = (_195 >> 16u) & 255u;
        _218 = 20u;
    }
    else
    {
        uint _203 = _192 >> 2u;
        uvec2 _209 = uvec2(texelFetch(l_geomAttrib_0, int(_203)).x, texelFetch(l_geomAttrib_0, int(_203 + 1u)).x);
        uint _210 = _209.x;
        _215 = _210 & 65535u;
        _216 = _210 >> 16u;
        _217 = _209.y & 65535u;
        _218 = 24u;
    }
    bool _224 = _187 == 0u;
    uint _225;
    if (_224)
    {
        _225 = _218;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_190)
        {
            frontier_phi_9_10_ladder = _218 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _218 + 8u;
        }
        _225 = frontier_phi_9_10_ladder;
    }
    uvec4 _234 = texelFetch(l_geomAttrib_0, int(((_169 + 4u) + (_188 ? (_225 + 4u) : _225)) >> 2u));
    uint _235 = _234.x;
    float _239 = float(int(uint(int(_235 << 16u) >> int(16u))));
    float _240 = float(int(uint(int(_235) >> int(16u))));
    uint _241 = _168 * _162;
    uint _242 = _241 >> 2u;
    uvec3 _251 = uvec3(texelFetch(l_geomAttrib_0, int(_242)).x, texelFetch(l_geomAttrib_0, int(_242 + 1u)).x, texelFetch(l_geomAttrib_0, int(_242 + 2u)).x);
    uint _258 = _241 + 12u;
    uint _279;
    uint _280;
    uint _281;
    uint _282;
    if (_191)
    {
        uvec4 _260 = texelFetch(l_geomAttrib_0, int(_258 >> 2u));
        uint _261 = _260.x;
        _279 = _261 & 255u;
        _280 = (_261 >> 8u) & 255u;
        _281 = (_261 >> 16u) & 255u;
        _282 = 20u;
    }
    else
    {
        uint _267 = _258 >> 2u;
        uvec2 _273 = uvec2(texelFetch(l_geomAttrib_0, int(_267)).x, texelFetch(l_geomAttrib_0, int(_267 + 1u)).x);
        uint _274 = _273.x;
        _279 = _274 & 65535u;
        _280 = _274 >> 16u;
        _281 = _273.y & 65535u;
        _282 = 24u;
    }
    uint _286;
    if (_224)
    {
        _286 = _282;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_190)
        {
            frontier_phi_16_17_ladder = _282 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _282 + 8u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_241 + 4u) + (_188 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _168 * _163;
    uint _302 = _301 >> 2u;
    uvec3 _311 = uvec3(texelFetch(l_geomAttrib_0, int(_302)).x, texelFetch(l_geomAttrib_0, int(_302 + 1u)).x, texelFetch(l_geomAttrib_0, int(_302 + 2u)).x);
    uint _318 = _301 + 12u;
    uint _339;
    uint _340;
    uint _341;
    uint _342;
    if (_191)
    {
        uvec4 _320 = texelFetch(l_geomAttrib_0, int(_318 >> 2u));
        uint _321 = _320.x;
        _339 = _321 & 255u;
        _340 = (_321 >> 8u) & 255u;
        _341 = (_321 >> 16u) & 255u;
        _342 = 20u;
    }
    else
    {
        uint _327 = _318 >> 2u;
        uvec2 _333 = uvec2(texelFetch(l_geomAttrib_0, int(_327)).x, texelFetch(l_geomAttrib_0, int(_327 + 1u)).x);
        uint _334 = _333.x;
        _339 = _334 & 65535u;
        _340 = _334 >> 16u;
        _341 = _333.y & 65535u;
        _342 = 24u;
    }
    uint _346;
    if (_224)
    {
        _346 = _342;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_190)
        {
            frontier_phi_23_24_ladder = _342 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _342 + 8u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_188 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _119.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _160 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _160 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _162 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _162 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _163 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _163 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _492 = ((uintBitsToFloat(_251.x) * hit._m0.x) + (uintBitsToFloat(_180.x) * _479)) + (uintBitsToFloat(_311.x) * hit._m0.y);
    float _493 = ((uintBitsToFloat(_251.y) * hit._m0.x) + (uintBitsToFloat(_180.y) * _479)) + (uintBitsToFloat(_311.y) * hit._m0.y);
    float _494 = ((uintBitsToFloat(_251.z) * hit._m0.x) + (uintBitsToFloat(_180.z) * _479)) + (uintBitsToFloat(_311.z) * hit._m0.y);
    float _516 = (_299 - _239) * 0.00048828125;
    float _518 = (_300 - _240) * 0.00048828125;
    float _521 = (_359 - _239) * 0.00048828125;
    float _522 = (_360 - _240) * 0.00048828125;
    float _544 = _436 - _398;
    float _545 = _437 - _399;
    float _546 = _438 - _400;
    float _549 = fma(_546, gl_ObjectToWorldEXT[2u].x, fma(_545, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _544));
    float _552 = fma(_546, gl_ObjectToWorldEXT[2u].y, fma(_545, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _544));
    float _555 = fma(_546, gl_ObjectToWorldEXT[2u].z, fma(_545, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _544));
    float _556 = _474 - _398;
    float _557 = _475 - _399;
    float _558 = _476 - _400;
    float _561 = fma(_558, gl_ObjectToWorldEXT[2u].x, fma(_557, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _556));
    float _564 = fma(_558, gl_ObjectToWorldEXT[2u].y, fma(_557, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _556));
    float _567 = fma(_558, gl_ObjectToWorldEXT[2u].z, fma(_557, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _556));
    float _568 = (((_299 * hit._m0.x) + (_239 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _569 = (((_300 * hit._m0.x) + (_240 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _573 = (((float(_215) * _479) + (-127.0)) + (float(_279) * hit._m0.x)) + (float(_339) * hit._m0.y);
    float _576 = (((float(_216) * _479) + (-127.0)) + (float(_280) * hit._m0.x)) + (float(_340) * hit._m0.y);
    float _579 = (((float(_217) * _479) + (-127.0)) + (float(_281) * hit._m0.x)) + (float(_341) * hit._m0.y);
    float _580 = _573 * 0.0078740157186985015869140625;
    float _582 = _576 * 0.0078740157186985015869140625;
    float _583 = _579 * 0.0078740157186985015869140625;
    float _598 = exp2(log2(abs(_580)) * 3.0);
    float _599 = exp2(log2(abs(_582)) * 3.0);
    float _600 = exp2(log2(abs(_583)) * 3.0);
    float _604 = inversesqrt(dot(vec3(_598, _599, _600), vec3(_598, _599, _600)));
    float _605 = _604 * _598;
    float _606 = _604 * _599;
    float _607 = _604 * _600;
    float _610 = _493 * 0.00999999977648258209228515625;
    float _620 = (cbTextureTilingScale._m0[2u].x * (_492 * 0.00999999977648258209228515625)) + cbTextureTilingScale._m0[2u].z;
    float _621 = (cbTextureTilingScale._m0[2u].y * (_494 * 0.00999999977648258209228515625)) + cbTextureTilingScale._m0[2u].w;
    vec4 _627 = textureLod(sampler2D(M_space_snp_0_Texture2D_3, SS_DiffuseMap), vec2(_620, _621), 0.0);
    vec4 _637 = textureLod(sampler2D(M_space_snp_0_Texture2D_3, SS_DiffuseMap), vec2(_620, (cbTextureTilingScale._m0[2u].y * _610) + cbTextureTilingScale._m0[2u].w), 0.0);
    vec4 _647 = textureLod(sampler2D(M_space_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _610) + cbTextureTilingScale._m0[2u].z, _621), 0.0);
    uvec2 _679 = uvec2(textureSize(M_space_snp_0_Texture2D_1, int(0u)));
    bool _684 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _736;
    if (_684)
    {
        float _695 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _701 = (_567 * _552) - (_564 * _555);
        float _704 = (_561 * _555) - (_567 * _549);
        float _707 = (_564 * _549) - (_561 * _552);
        float _734 = ((log2((((float(_679.y) * 0.5) * float(_679.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_704 * _704) + (_707 * _707)) + (_701 * _701)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_695 * gl_WorldRayDirectionEXT.x, _695 * gl_WorldRayDirectionEXT.y, _695 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _736 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    }
    else
    {
        _736 = 0.0;
    }
    float _742 = textureLod(sampler2D(M_space_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _568) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _569) + cbTextureTilingScale._m0[0u].w), _736).x * cbMtdParam._m0[11u].y;
    uvec2 _758 = uvec2(textureSize(M_space_snp_0_Texture2D_2, int(0u)));
    float _762 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _763 = _762 * gl_WorldRayDirectionEXT.x;
    float _764 = _762 * gl_WorldRayDirectionEXT.y;
    float _765 = _762 * gl_WorldRayDirectionEXT.z;
    float _809;
    if (_684)
    {
        float _775 = (_567 * _552) - (_564 * _555);
        float _778 = (_561 * _555) - (_567 * _549);
        float _781 = (_564 * _549) - (_561 * _552);
        float _807 = ((log2((((float(_758.y) * 0.5) * float(_758.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_778 * _778) + (_781 * _781)) + (_775 * _775)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_763, _764, _765), vec3(_580, _582, _583))));
        _809 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    }
    else
    {
        _809 = 0.0;
    }
    vec4 _811 = textureLod(sampler2D(M_space_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _568) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _569) + cbTextureTilingScale._m0[1u].w), _809);
    float _826 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
    float _838 = inversesqrt(dot(vec3(cbMtdParam._m0[11u].zw, cbMtdParam._m0[12u].x), vec3(cbMtdParam._m0[11u].zw, cbMtdParam._m0[12u].x)));
    float _842 = dot(vec4(_826 * _492, _826 * _493, _826 * _494, 0.0), vec4(_838 * cbMtdParam._m0[11u].z, _838 * cbMtdParam._m0[11u].w, _838 * cbMtdParam._m0[12u].x, 0.0));
    float _1247 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _854 = (-0.0) - (((1.0 - exp2(log2(isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0))) * cbMtdParam._m0[10u].z)) - cbMtdParam._m0[10u].w) * cbMtdParam._m0[11u].x);
    float _1258 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = isnan(1.0) ? _1258 : (isnan(_1258) ? 1.0 : min(_1258, 1.0));
    float _869 = inversesqrt(dot(vec3(_580, _582, _583), vec3(_580, _582, _583)));
    float _870 = _869 * _580;
    float _871 = _869 * _582;
    float _872 = _869 * _583;
    float _884 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _885 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _886 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _887 = (-0.0) - _763;
    float _888 = (-0.0) - _764;
    float _889 = (-0.0) - _765;
    float _895 = float(gl_LaunchIDEXT.x);
    float _896 = float(gl_LaunchIDEXT.y);
    float _899 = float(gl_LaunchSizeEXT.x);
    float _913 = fract(fract(sin(dot(vec2(_895 / _899, _896 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _926 = fract(fract(sin(dot(vec2((_895 + 128.0) / _899, (_896 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _936 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _937 = _936.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _937, _936.w, _937, vec3(_884, _885, _886), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1003;
    float _1004;
    float _1005;
    if (_61._m0 == 0u)
    {
        float _958 = g_sceneCB._m0[4u].x - _763;
        float _959 = g_sceneCB._m0[4u].y - _764;
        float _960 = g_sceneCB._m0[4u].z - _765;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _968 = dot(vec3(_870, _871, _872), vec3(g_sceneCB._m0[4u].xyz));
        float _1269 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _971 = isnan(1.0) ? _1269 : (isnan(_1269) ? 1.0 : min(_1269, 1.0));
        float _972 = dot(vec3(_870, _871, _872), vec3(_887, _888, _889));
        float _1280 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_958 * _964, _959 * _964, _960 * _964));
        float _1291 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _987 = (exp2(log2(1.0 - (isnan(1.0) ? _1291 : (isnan(_1291) ? 1.0 : min(_1291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _993 = (0.5 / ((_971 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1280 : (isnan(_1280) ? 1.0 : min(_1280, 1.0))))) * _971;
        float _1302 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _995 = (isnan(1.0) ? _1302 : (isnan(_1302) ? 1.0 : min(_1302, 1.0))) * 0.31831014156341552734375;
        _1003 = (_987 * g_sceneCB._m0[5u].x) * _995;
        _1004 = (_987 * g_sceneCB._m0[5u].y) * _995;
        _1005 = (_987 * g_sceneCB._m0[5u].z) * _995;
    }
    else
    {
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    bool _1007 = abs(_871) < 0.89999997615814208984375;
    float _1009 = float(_1007);
    float _1010 = _1007 ? 0.0 : 1.0;
    float _1013 = (_1009 * _872) - (_1010 * _871);
    float _1014 = _1010 * _870;
    float _1016 = (-0.0) - (_870 * _1009);
    float _1020 = inversesqrt(dot(vec3(_1013, _1014, _1016), vec3(_1013, _1014, _1016)));
    float _1021 = _1013 * _1020;
    float _1022 = _1014 * _1020;
    float _1023 = _1020 * _1016;
    float _1026 = (_1022 * _872) - (_1023 * _871);
    float _1029 = (_1023 * _870) - (_1021 * _872);
    float _1032 = (_1021 * _871) - (_1022 * _870);
    float _1034;
    float _1042;
    float _1033 = 0.0;
    uint _1035 = 0u;
    float _1039;
    bool _1041;
    for (;;)
    {
        _1039 = (float(_1035) + _913) * 0.03125;
        _1041 = _1035 == 0u;
        float frontier_phi_43_pred;
        if (_1041)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1166;
            float _1167;
            uint _1169;
            _1166 = 0.0;
            _1167 = 0.5;
            _1169 = _1035;
            float _1043;
            for (;;)
            {
                _1043 = ((_1169 & 1u) != 0u) ? (_1167 + _1166) : _1166;
                uint _1170 = _1169 >> 1u;
                if (_1170 == 0u)
                {
                    break;
                }
                else
                {
                    _1166 = _1043;
                    _1167 *= 0.5;
                    _1169 = _1170;
                }
            }
            frontier_phi_43_pred = _1043;
        }
        _1042 = frontier_phi_43_pred;
        float _1044 = _1042 + _926;
        float _1049 = sqrt(_1039);
        float _1050 = ((_1044 > 1.0) ? (_1044 + (-1.0)) : _1044) * 6.283185482025146484375;
        float _1053 = cos(_1050) * _1049;
        float _1055 = sin(_1050) * _1049;
        float _1057 = sqrt(1.0 - _1039);
        float _1070 = ((_1057 * _870) + (_1053 * _1026)) + (_1055 * _1021);
        float _1071 = ((_1057 * _871) + (_1053 * _1029)) + (_1055 * _1022);
        float _1072 = ((_1057 * _872) + (_1053 * _1032)) + (_1055 * _1023);
        _60._m0 = 1u;
        uvec4 _1076 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1077 = _1076.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1077, _1076.w, _1077, vec3(_884, _885, _886), 9.9999997473787516355514526367188e-05, vec3(_1070, _1071, _1072), 10000.0, 1);
        float _1083 = dot(vec3(_870, _871, _872), vec3(_1070, _1071, _1072));
        float _1313 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1086 = isnan(1.0) ? _1313 : (isnan(_1313) ? 1.0 : min(_1313, 1.0));
        _1034 = ((float(_60._m0 == 0u) * _1086) / (_1086 * 0.3183098733425140380859375)) + _1033;
        uint _1036 = _1035 + 1u;
        if (_1036 == 32u)
        {
            break;
        }
        else
        {
            _1033 = _1034;
            _1035 = _1036;
            continue;
        }
    }
    float _1095 = _1034 * 0.009947183541953563690185546875;
    float _1100 = dot(vec3(_763, _764, _765), vec3(_870, _871, _872)) * 2.0;
    vec4 _1112 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_763 - (_1100 * _870), _764 - (_1100 * _871), _765 - (_1100 * _872)), 4.0);
    float _1117 = dot(vec3(_887, _888, _889), vec3(_870, _871, _872));
    float _1324 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1126 = (exp2(log2(1.0 - (isnan(1.0) ? _1324 : (isnan(_1324) ? 1.0 : min(_1324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1135 = (((cbMtdParam._m0[9u].x * _856) + (((_742 + ((((_637.x * _607) + (_627.x * _606)) + (_647.x * _605)) * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[10u].x) * _811.x)) + _1003) + ((_1112.x * _1095) * _1126);
    float _1138 = (((cbMtdParam._m0[9u].y * _856) + (((_742 + ((((_637.y * _607) + (_627.y * _606)) + (_647.y * _605)) * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[10u].x) * _811.y)) + _1004) + ((_1112.y * _1095) * _1126);
    float _1141 = (((cbMtdParam._m0[9u].z * _856) + (((_742 + ((((_637.z * _607) + (_627.z * _606)) + (_647.z * _605)) * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[10u].x) * _811.z)) + _1005) + ((_1112.z * _1095) * _1126);
    float _1335 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1346 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1357 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    bool _1149 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1160;
    _1160.x = _1149 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1335 : (isnan(_1335) ? 1.0 : min(_1335, 1.0)));
    _1160.y = _1149 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1346 : (isnan(_1346) ? 1.0 : min(_1346, 1.0)));
    _1160.z = _1149 ? ((_579 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0)));
    payload._m0 = _1160;
}


