#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1361;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _162;
    uint _164;
    uint _165;
    if (_122.x == 0u)
    {
        uint _130 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_123 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _156 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _157 >> 16u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _162 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    uint _173 = _122.w;
    bool _175 = _172 || (_173 == 0u);
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    uint _225 = _169.y;
    bool _226 = _171 == 0u;
    uint _229 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _238 = texelFetch(l_geomAttrib_1, int((((_225 * _162) + 4u) + (_172 ? (_229 + 4u) : _229)) >> 2u));
    uint _239 = _238.x;
    float _243 = float(int(uint(int(_239 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_239) >> int(16u))));
    uint _245 = _170 * _164;
    uint _246 = _245 + 12u;
    uint _267;
    uint _268;
    uint _269;
    uint _270;
    if (_175)
    {
        uvec4 _248 = texelFetch(l_geomAttrib_0, int(_246 >> 2u));
        uint _249 = _248.x;
        _267 = _249 & 255u;
        _268 = (_249 >> 8u) & 255u;
        _269 = (_249 >> 16u) & 255u;
        _270 = 16u;
    }
    else
    {
        uint _255 = _246 >> 2u;
        uvec2 _261 = uvec2(texelFetch(l_geomAttrib_0, int(_255)).x, texelFetch(l_geomAttrib_0, int(_255 + 1u)).x);
        uint _262 = _261.x;
        _267 = _262 & 65535u;
        _268 = _262 >> 16u;
        _269 = _261.y & 65535u;
        _270 = 20u;
    }
    uvec4 _276 = texelFetch(l_geomAttrib_0, int((_270 + _245) >> 2u));
    uint _277 = _276.x;
    uint _290 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _297 = texelFetch(l_geomAttrib_1, int((((_225 * _164) + 4u) + (_172 ? (_290 + 4u) : _290)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    uint _304 = _170 * _165;
    uint _305 = _304 + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_175)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 16u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 20u;
    }
    uvec4 _335 = texelFetch(l_geomAttrib_0, int((_329 + _304) >> 2u));
    uint _336 = _335.x;
    uint _349 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _356 = texelFetch(l_geomAttrib_1, int((((_225 * _165) + 4u) + (_172 ? (_349 + 4u) : _349)) >> 2u));
    uint _357 = _356.x;
    float _361 = float(int(uint(int(_357 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_357) >> int(16u))));
    bool _364 = _122.z == 0u;
    float _400;
    float _401;
    float _402;
    if (_364)
    {
        uint _367 = _162 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _162 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_364)
    {
        uint _405 = _164 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _164 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _476;
    float _477;
    float _478;
    if (_364)
    {
        uint _443 = _165 * 3u;
        uvec3 _452 = uvec3(texelFetch(l_geomPositionBuffer, int(_443)).x, texelFetch(l_geomPositionBuffer, int(_443 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_443 + 2u)).x);
        _476 = uintBitsToFloat(_452.x);
        _477 = uintBitsToFloat(_452.y);
        _478 = uintBitsToFloat(_452.z);
    }
    else
    {
        uint _460 = _165 * 2u;
        uvec2 _466 = uvec2(texelFetch(l_geomPositionBuffer, int(_460)).x, texelFetch(l_geomPositionBuffer, int(_460 + 1u)).x);
        uint _467 = _466.x;
        _476 = unpackHalf2x16(_467).x;
        _477 = unpackHalf2x16(_467 >> 16u).x;
        _478 = unpackHalf2x16(_466.y).x;
    }
    float _481 = (1.0 - hit._m0.x) - hit._m0.y;
    float _515 = (_302 - _243) * 0.00048828125;
    float _517 = (_303 - _244) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_302 * hit._m0.x) + (_243 * _481)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_303 * hit._m0.x) + (_244 * _481)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_201) * _481) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_202) * _481) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_203) * _481) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _595 = ((((float(_213 & 255u) * _481) + (-127.0)) + (float(_277 & 255u) * hit._m0.x)) + (float(_336 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_213 >> 8u) & 255u) * _481) + (-127.0)) + (float((_277 >> 8u) & 255u) * hit._m0.x)) + (float((_336 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_213 >> 16u) & 255u) * _481) + (-127.0)) + (float((_277 >> 16u) & 255u) * hit._m0.x)) + (float((_336 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float(_213 >> 24u) * _481) + (-127.0)) + (float(_277 >> 24u) * hit._m0.x)) + (float(_336 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _608 = ((_596 * _582) - (_597 * _581)) * _598;
    float _609 = ((_597 * _579) - (_595 * _582)) * _598;
    float _610 = ((_595 * _581) - (_596 * _579)) * _598;
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _614 * _608;
    float _616 = _614 * _609;
    float _617 = _614 * _610;
    uvec2 _638 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, int(0u)));
    bool _643 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _696;
    if (_643)
    {
        float _654 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _660 = (_566 * _551) - (_563 * _554);
        float _663 = (_560 * _554) - (_566 * _548);
        float _666 = (_563 * _548) - (_560 * _551);
        float _693 = ((log2((((float(_638.y) * 0.5) * float(_638.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_663 * _663) + (_666 * _666)) + (_660 * _660)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_654 * gl_WorldRayDirectionEXT.x, _654 * gl_WorldRayDirectionEXT.y, _654 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    }
    else
    {
        _696 = 0.0;
    }
    vec4 _700 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _567) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _568) + cbTextureTilingScale._m0[1u].w), _696);
    float _704 = _700.z;
    float _707 = (_700.x * 2.0) + (-1.0);
    float _709 = (_700.y * 2.0) + (-1.0);
    float _710 = dot(vec2(_707, _709), vec2(_707, _709));
    float _1428 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _715 = sqrt(1.0 - (isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0))));
    float _718 = fma(_715, _579, fma(_709, _595, _707 * _615));
    float _721 = fma(_715, _581, fma(_709, _596, _707 * _616));
    float _724 = fma(_715, _582, fma(_709, _597, _707 * _617));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _736 = cbMtdParam._m0[10u].x + dot(vec4(_729, _730, _731, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _1439 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _744 = dot(vec4(_729, _730, _731, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _1450 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _746 = (isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0))) + (isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0)));
    uvec2 _764 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, int(0u)));
    float _815;
    if (_643)
    {
        float _775 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _781 = (_566 * _551) - (_563 * _554);
        float _784 = (_560 * _554) - (_566 * _548);
        float _787 = (_563 * _548) - (_560 * _551);
        float _813 = ((log2((((float(_764.y) * 0.5) * float(_764.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_784 * _784) + (_787 * _787)) + (_781 * _781)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_775 * gl_WorldRayDirectionEXT.x, _775 * gl_WorldRayDirectionEXT.y, _775 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _815 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    }
    else
    {
        _815 = 0.0;
    }
    vec4 _818 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _567) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _568) + cbTextureTilingScale._m0[0u].w), _815);
    float _823 = _818.x * cbMtdParam._m0[9u].x;
    float _824 = _818.y * cbMtdParam._m0[9u].y;
    float _825 = _818.z * cbMtdParam._m0[9u].z;
    uvec2 _837 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, int(0u)));
    float _888;
    if (_643)
    {
        float _848 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _854 = (_566 * _551) - (_563 * _554);
        float _857 = (_560 * _554) - (_566 * _548);
        float _860 = (_563 * _548) - (_560 * _551);
        float _886 = ((log2((((float(_837.y) * 0.5) * float(_837.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_857 * _857) + (_860 * _860)) + (_854 * _854)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_848 * gl_WorldRayDirectionEXT.x, _848 * gl_WorldRayDirectionEXT.y, _848 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _888 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    }
    else
    {
        _888 = 0.0;
    }
    vec4 _890 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _567) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _568) + cbTextureTilingScale._m0[3u].w), _888);
    float _901 = ((_890.x - _823) * _746) + _823;
    float _902 = ((_890.y - _824) * _746) + _824;
    float _903 = ((_890.z - _825) * _746) + _825;
    uvec2 _915 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, int(0u)));
    float _919 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _920 = _919 * gl_WorldRayDirectionEXT.x;
    float _921 = _919 * gl_WorldRayDirectionEXT.y;
    float _922 = _919 * gl_WorldRayDirectionEXT.z;
    float _966;
    if (_643)
    {
        float _932 = (_566 * _551) - (_563 * _554);
        float _935 = (_560 * _554) - (_566 * _548);
        float _938 = (_563 * _548) - (_560 * _551);
        float _964 = ((log2((((float(_915.y) * 0.5) * float(_915.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_935 * _935) + (_938 * _938)) + (_932 * _932)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_920, _921, _922), vec3(_579, _581, _582))));
        _966 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    }
    else
    {
        _966 = 0.0;
    }
    vec4 _968 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _567) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _568) + cbTextureTilingScale._m0[4u].w), _966);
    float _975 = (_968.x * 2.0) + (-1.0);
    float _976 = (_968.y * 2.0) + (-1.0);
    float _977 = dot(vec2(_975, _976), vec2(_975, _976));
    float _1476 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _985 = ((_968.z - _704) * _746) + _704;
    float _994 = ((sqrt(1.0 - (isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0)))) - _715) * _746) + _715;
    float _998 = (((_975 - _707) * _746) + _707) + (cbMtdParam._m0[10u].y * _707);
    float _999 = (((_976 - _709) * _746) + _709) + (cbMtdParam._m0[10u].y * _709);
    float _1002 = fma(_994, _579, fma(_999, _595, _998 * _615));
    float _1005 = fma(_994, _581, fma(_999, _596, _998 * _616));
    float _1008 = fma(_994, _582, fma(_999, _597, _998 * _617));
    float _1012 = inversesqrt(dot(vec3(_1002, _1005, _1008), vec3(_1002, _1005, _1008)));
    float _1013 = _1012 * _1002;
    float _1014 = _1012 * _1005;
    float _1015 = _1012 * _1008;
    float _1027 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1028 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1029 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1030 = (-0.0) - _920;
    float _1032 = (-0.0) - _921;
    float _1033 = (-0.0) - _922;
    float _1039 = float(gl_LaunchIDEXT.x);
    float _1040 = float(gl_LaunchIDEXT.y);
    float _1043 = float(gl_LaunchSizeEXT.x);
    float _1057 = fract(fract(sin(dot(vec2(_1039 / _1043, _1040 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1070 = fract(fract(sin(dot(vec2((_1039 + 128.0) / _1043, (_1040 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _1080 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1081 = _1080.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1081, _1080.w, _1081, vec3(_1027, _1028, _1029), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (_64._m0 == 0u)
    {
        float _1102 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1013, _1014, _1015));
        float _1487 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1105 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        float _1124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _985) * 0.949999988079071044921875);
        float _1125 = _1124 * _1124;
        float _1126 = g_sceneCB._m0[4u].x - _920;
        float _1127 = g_sceneCB._m0[4u].y - _921;
        float _1128 = g_sceneCB._m0[4u].z - _922;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1133 = _1132 * _1126;
        float _1134 = _1132 * _1127;
        float _1135 = _1132 * _1128;
        float _1136 = dot(vec3(_1013, _1014, _1015), vec3(g_sceneCB._m0[4u].xyz));
        float _1498 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1139 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        float _1140 = dot(vec3(_1013, _1014, _1015), vec3(_1030, _1032, _1033));
        float _1509 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1143 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        float _1144 = dot(vec3(_1013, _1014, _1015), vec3(_1133, _1134, _1135));
        float _1520 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1147 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        float _1148 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1133, _1134, _1135));
        float _1531 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1125 * _1125;
        float _1156 = ((_1147 * _1147) * (_1152 + (-1.0))) + 1.0;
        float _1168 = (exp2(log2(1.0 - (isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1170 = 1.0 - _1125;
        float _1181 = (0.5 / (((_1143 * ((_1139 * _1170) + _1125)) + 9.9999999392252902907785028219223e-09) + (((_1143 * _1170) + _1125) * _1139))) * _1139;
        float _1542 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1183 = (isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0))) * (_1152 / ((_1156 * _1156) * 3.141590118408203125));
        _1190 = ((_901 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1105;
        _1191 = ((_902 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1105;
        _1192 = ((_903 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1105;
        _1193 = (_1168 * g_sceneCB._m0[5u].x) * _1183;
        _1194 = (_1168 * g_sceneCB._m0[5u].y) * _1183;
        _1195 = (_1168 * g_sceneCB._m0[5u].z) * _1183;
    }
    else
    {
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    bool _1197 = abs(_1014) < 0.89999997615814208984375;
    float _1199 = float(_1197);
    float _1200 = _1197 ? 0.0 : 1.0;
    float _1203 = (_1199 * _1015) - (_1200 * _1014);
    float _1204 = _1200 * _1013;
    float _1206 = (-0.0) - (_1013 * _1199);
    float _1210 = inversesqrt(dot(vec3(_1203, _1204, _1206), vec3(_1203, _1204, _1206)));
    float _1211 = _1203 * _1210;
    float _1212 = _1204 * _1210;
    float _1213 = _1210 * _1206;
    float _1216 = (_1212 * _1015) - (_1213 * _1014);
    float _1219 = (_1213 * _1013) - (_1211 * _1015);
    float _1222 = (_1211 * _1014) - (_1212 * _1013);
    float _1224;
    float _1232;
    float _1223 = 0.0;
    uint _1225 = 0u;
    float _1229;
    bool _1231;
    for (;;)
    {
        _1229 = (float(_1225) + _1057) * 0.03125;
        _1231 = _1225 == 0u;
        float frontier_phi_35_pred;
        if (_1231)
        {
            frontier_phi_35_pred = 0.0;
        }
        else
        {
            float _1366;
            float _1367;
            uint _1369;
            _1366 = 0.0;
            _1367 = 0.5;
            _1369 = _1225;
            float _1233;
            for (;;)
            {
                _1233 = ((_1369 & 1u) != 0u) ? (_1367 + _1366) : _1366;
                uint _1370 = _1369 >> 1u;
                if (_1370 == 0u)
                {
                    break;
                }
                else
                {
                    _1366 = _1233;
                    _1367 *= 0.5;
                    _1369 = _1370;
                }
            }
            frontier_phi_35_pred = _1233;
        }
        _1232 = frontier_phi_35_pred;
        float _1234 = _1232 + _1070;
        float _1238 = sqrt(_1229);
        float _1239 = ((_1234 > 1.0) ? (_1234 + (-1.0)) : _1234) * 6.283185482025146484375;
        float _1242 = cos(_1239) * _1238;
        float _1244 = sin(_1239) * _1238;
        float _1246 = sqrt(1.0 - _1229);
        float _1259 = ((_1246 * _1013) + (_1242 * _1216)) + (_1244 * _1211);
        float _1260 = ((_1246 * _1014) + (_1242 * _1219)) + (_1244 * _1212);
        float _1261 = ((_1246 * _1015) + (_1242 * _1222)) + (_1244 * _1213);
        _63._m0 = 1u;
        uvec4 _1265 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1266 = _1265.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1266, _1265.w, _1266, vec3(_1027, _1028, _1029), 9.9999997473787516355514526367188e-05, vec3(_1259, _1260, _1261), 10000.0, 1);
        float _1272 = dot(vec3(_1013, _1014, _1015), vec3(_1259, _1260, _1261));
        float _1553 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1275 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1224 = ((float(_63._m0 == 0u) * _1275) / (_1275 * 0.3183098733425140380859375)) + _1223;
        uint _1226 = _1225 + 1u;
        if (_1226 == 32u)
        {
            break;
        }
        else
        {
            _1223 = _1224;
            _1225 = _1226;
            continue;
        }
    }
    float _1283 = _1224 * 0.009947183541953563690185546875;
    float _1288 = dot(vec3(_920, _921, _922), vec3(_1013, _1014, _1015)) * 2.0;
    vec4 _1302 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_920 - (_1288 * _1013), _921 - (_1288 * _1014), _922 - (_1288 * _1015)), 4.0 - (_985 * 4.0));
    float _1307 = dot(vec3(_1030, _1032, _1033), vec3(_1013, _1014, _1015));
    float _1564 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _1316 = (exp2(log2(1.0 - (isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1322 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1013, _1014, _1015), 0.0);
    float _1333 = (_1193 + _1190) + (((_1322.x * _901) + (_1316 * _1302.x)) * _1283);
    float _1337 = (_1194 + _1191) + (((_1322.y * _902) + (_1316 * _1302.y)) * _1283);
    float _1341 = (_1195 + _1192) + (((_1322.z * _903) + (_1316 * _1302.z)) * _1283);
    float _1575 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1586 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1597 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    bool _1349 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1360;
    _1360.x = _1349 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0)));
    _1360.y = _1349 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0)));
    _1360.z = _1349 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0)));
    payload._m0 = _1360;
}


