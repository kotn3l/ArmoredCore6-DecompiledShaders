#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _40
{
    vec3 _m0;
};

struct _44
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _40 payload;
hitAttributeEXT _44 hit;

uint _208;
uint _257;
uint _306;

void main()
{
    vec3 _50 = payload._m0;
    float _87 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _107 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _108 = _107.y;
    uint _148;
    uint _150;
    uint _151;
    if (_107.x == 0u)
    {
        uint _116 = (_108 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _125 = uvec3(texelFetch(l_geomIndexBuffer, int(_116)).x, texelFetch(l_geomIndexBuffer, int(_116 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_116 + 2u)).x);
        _148 = _125.x;
        _150 = _125.y;
        _151 = _125.z;
    }
    else
    {
        uint _129 = uint(gl_PrimitiveID) * 6u;
        uint _131 = _129 & 4294967292u;
        uint _134 = (_108 + _131) >> 2u;
        uvec2 _141 = uvec2(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x);
        uint _142 = _141.x;
        uint _143 = _141.y;
        uint _145 = _142 >> 16u;
        uint _146 = _143 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_131 == _129)
        {
            frontier_phi_3_2_ladder = _142 & 65535u;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _146;
        }
        else
        {
            frontier_phi_3_2_ladder = _145;
            frontier_phi_3_2_ladder_1 = _146;
            frontier_phi_3_2_ladder_2 = _143 >> 16u;
        }
        _148 = frontier_phi_3_2_ladder;
        _150 = frontier_phi_3_2_ladder_1;
        _151 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _155 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _156 = _155.x;
    uint _157 = _155.z;
    bool _158 = _157 != 0u;
    bool _160 = _107.w == 0u;
    bool _161 = _158 || _160;
    uint _163 = (_156 * _148) + 12u;
    uint _187;
    uint _188;
    uint _189;
    uint _190;
    if (_161)
    {
        uvec4 _166 = texelFetch(l_geomAttrib_0, int(_163 >> 2u));
        uint _167 = _166.x;
        _187 = _167 & 255u;
        _188 = (_167 >> 8u) & 255u;
        _189 = (_167 >> 16u) & 255u;
        _190 = 24u;
    }
    else
    {
        uint _175 = _163 >> 2u;
        uvec2 _181 = uvec2(texelFetch(l_geomAttrib_0, int(_175)).x, texelFetch(l_geomAttrib_0, int(_175 + 1u)).x);
        uint _182 = _181.x;
        _187 = _182 & 65535u;
        _188 = _182 >> 16u;
        _189 = _181.y & 65535u;
        _190 = 28u;
    }
    bool _196 = _157 == 0u;
    uint _197;
    if (_196)
    {
        _197 = _190;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_160)
        {
            frontier_phi_9_10_ladder = _190 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _190 + 8u;
        }
        _197 = frontier_phi_9_10_ladder;
    }
    uvec2 _212 = uvec2(_208, texelFetch(l_geomAttrib_0, int(((((_156 * _148) + 4u) + (_158 ? (_197 + 4u) : _197)) >> 2u) + 1u)).x);
    uint _213 = _212.y;
    float _217 = float(int(uint(int(_213 << 16u) >> int(16u))));
    float _218 = float(int(uint(int(_213) >> int(16u))));
    uint _220 = (_156 * _150) + 12u;
    uint _241;
    uint _242;
    uint _243;
    uint _244;
    if (_161)
    {
        uvec4 _222 = texelFetch(l_geomAttrib_0, int(_220 >> 2u));
        uint _223 = _222.x;
        _241 = _223 & 255u;
        _242 = (_223 >> 8u) & 255u;
        _243 = (_223 >> 16u) & 255u;
        _244 = 24u;
    }
    else
    {
        uint _229 = _220 >> 2u;
        uvec2 _235 = uvec2(texelFetch(l_geomAttrib_0, int(_229)).x, texelFetch(l_geomAttrib_0, int(_229 + 1u)).x);
        uint _236 = _235.x;
        _241 = _236 & 65535u;
        _242 = _236 >> 16u;
        _243 = _235.y & 65535u;
        _244 = 28u;
    }
    uint _248;
    if (_196)
    {
        _248 = _244;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_160)
        {
            frontier_phi_16_17_ladder = _244 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _244 + 8u;
        }
        _248 = frontier_phi_16_17_ladder;
    }
    uvec2 _261 = uvec2(_257, texelFetch(l_geomAttrib_0, int(((((_156 * _150) + 4u) + (_158 ? (_248 + 4u) : _248)) >> 2u) + 1u)).x);
    uint _262 = _261.y;
    float _266 = float(int(uint(int(_262 << 16u) >> int(16u))));
    float _267 = float(int(uint(int(_262) >> int(16u))));
    uint _269 = (_156 * _151) + 12u;
    uint _290;
    uint _291;
    uint _292;
    uint _293;
    if (_161)
    {
        uvec4 _271 = texelFetch(l_geomAttrib_0, int(_269 >> 2u));
        uint _272 = _271.x;
        _290 = _272 & 255u;
        _291 = (_272 >> 8u) & 255u;
        _292 = (_272 >> 16u) & 255u;
        _293 = 24u;
    }
    else
    {
        uint _278 = _269 >> 2u;
        uvec2 _284 = uvec2(texelFetch(l_geomAttrib_0, int(_278)).x, texelFetch(l_geomAttrib_0, int(_278 + 1u)).x);
        uint _285 = _284.x;
        _290 = _285 & 65535u;
        _291 = _285 >> 16u;
        _292 = _284.y & 65535u;
        _293 = 28u;
    }
    uint _297;
    if (_196)
    {
        _297 = _293;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_160)
        {
            frontier_phi_23_24_ladder = _293 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _293 + 8u;
        }
        _297 = frontier_phi_23_24_ladder;
    }
    uvec2 _310 = uvec2(_306, texelFetch(l_geomAttrib_0, int(((((_156 * _151) + 4u) + (_158 ? (_297 + 4u) : _297)) >> 2u) + 1u)).x);
    uint _311 = _310.y;
    float _315 = float(int(uint(int(_311 << 16u) >> int(16u))));
    float _316 = float(int(uint(int(_311) >> int(16u))));
    bool _318 = _107.z == 0u;
    float _354;
    float _355;
    float _356;
    if (_318)
    {
        uint _321 = _148 * 3u;
        uvec3 _330 = uvec3(texelFetch(l_geomPositionBuffer, int(_321)).x, texelFetch(l_geomPositionBuffer, int(_321 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_321 + 2u)).x);
        _354 = uintBitsToFloat(_330.x);
        _355 = uintBitsToFloat(_330.y);
        _356 = uintBitsToFloat(_330.z);
    }
    else
    {
        uint _338 = _148 * 2u;
        uvec2 _344 = uvec2(texelFetch(l_geomPositionBuffer, int(_338)).x, texelFetch(l_geomPositionBuffer, int(_338 + 1u)).x);
        uint _345 = _344.x;
        _354 = unpackHalf2x16(_345).x;
        _355 = unpackHalf2x16(_345 >> 16u).x;
        _356 = unpackHalf2x16(_344.y).x;
    }
    float _392;
    float _393;
    float _394;
    if (_318)
    {
        uint _359 = _150 * 3u;
        uvec3 _368 = uvec3(texelFetch(l_geomPositionBuffer, int(_359)).x, texelFetch(l_geomPositionBuffer, int(_359 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_359 + 2u)).x);
        _392 = uintBitsToFloat(_368.x);
        _393 = uintBitsToFloat(_368.y);
        _394 = uintBitsToFloat(_368.z);
    }
    else
    {
        uint _376 = _150 * 2u;
        uvec2 _382 = uvec2(texelFetch(l_geomPositionBuffer, int(_376)).x, texelFetch(l_geomPositionBuffer, int(_376 + 1u)).x);
        uint _383 = _382.x;
        _392 = unpackHalf2x16(_383).x;
        _393 = unpackHalf2x16(_383 >> 16u).x;
        _394 = unpackHalf2x16(_382.y).x;
    }
    float _430;
    float _431;
    float _432;
    if (_318)
    {
        uint _397 = _151 * 3u;
        uvec3 _406 = uvec3(texelFetch(l_geomPositionBuffer, int(_397)).x, texelFetch(l_geomPositionBuffer, int(_397 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_397 + 2u)).x);
        _430 = uintBitsToFloat(_406.x);
        _431 = uintBitsToFloat(_406.y);
        _432 = uintBitsToFloat(_406.z);
    }
    else
    {
        uint _414 = _151 * 2u;
        uvec2 _420 = uvec2(texelFetch(l_geomPositionBuffer, int(_414)).x, texelFetch(l_geomPositionBuffer, int(_414 + 1u)).x);
        uint _421 = _420.x;
        _430 = unpackHalf2x16(_421).x;
        _431 = unpackHalf2x16(_421 >> 16u).x;
        _432 = unpackHalf2x16(_420.y).x;
    }
    float _435 = (1.0 - hit._m0.x) - hit._m0.y;
    float _467 = _392 - _354;
    float _468 = _393 - _355;
    float _469 = _394 - _356;
    float _472 = fma(_469, gl_ObjectToWorldEXT[2u].x, fma(_468, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _467));
    float _475 = fma(_469, gl_ObjectToWorldEXT[2u].y, fma(_468, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _467));
    float _478 = fma(_469, gl_ObjectToWorldEXT[2u].z, fma(_468, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _467));
    float _479 = _430 - _354;
    float _480 = _431 - _355;
    float _481 = _432 - _356;
    float _484 = fma(_481, gl_ObjectToWorldEXT[2u].x, fma(_480, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _479));
    float _487 = fma(_481, gl_ObjectToWorldEXT[2u].y, fma(_480, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _479));
    float _490 = fma(_481, gl_ObjectToWorldEXT[2u].z, fma(_480, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _479));
    uvec2 _505 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, int(0u)));
    float _592;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _548 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _554 = (_490 * _475) - (_487 * _478);
        float _557 = (_484 * _478) - (_490 * _472);
        float _560 = (_487 * _472) - (_484 * _475);
        float _587 = log2(abs(sqrt(((_88 * _88) + (_87 * _87)) + (_89 * _89)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_548 * gl_WorldRayDirectionEXT.x, _548 * gl_WorldRayDirectionEXT.y, _548 * gl_WorldRayDirectionEXT.z), vec3(((((float(_187) * _435) + (-127.0)) + (float(_241) * hit._m0.x)) + (float(_290) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _435) + (-127.0)) + (float(_242) * hit._m0.x)) + (float(_291) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_189) * _435) + (-127.0)) + (float(_243) * hit._m0.x)) + (float(_292) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _589 = ((log2((((float(_505.y) * 0.5) * float(_505.x)) * abs((((_316 - _218) * (_266 - _217)) - ((_315 - _217) * (_267 - _218))) * 2.384185791015625e-07)) / (sqrt(((_557 * _557) + (_560 * _560)) + (_554 * _554)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _587;
        _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    }
    else
    {
        _592 = 0.0;
    }
    if (textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_266 * hit._m0.x) + (_217 * _435)) + (_315 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_267 * hit._m0.x) + (_218 * _435)) + (_316 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _592).w < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _50;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _50;
        return;
    }
}


