#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _56
{
    vec3 _m0;
};

struct _60
{
    vec2 _m0;
};

struct _63
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _56 payload;
hitAttributeEXT _60 hit;
layout(location = 1) rayPayloadEXT _63 _65;
layout(location = 2) rayPayloadEXT _63 _66;

uint _251;
uint _336;
uint _421;
vec3 _1769;

void main()
{
    float _74 = float(gl_LaunchSizeEXT.y);
    float _104 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _105 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _113 = sqrt(((_105 * _105) + (_104 * _104)) + (_106 * _106)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _74)))));
    uvec4 _124 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _125 = _124.y;
    uint _165;
    uint _167;
    uint _168;
    if (_124.x == 0u)
    {
        uint _133 = (_125 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _142 = uvec3(texelFetch(l_geomIndexBuffer, int(_133)).x, texelFetch(l_geomIndexBuffer, int(_133 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_133 + 2u)).x);
        _165 = _142.x;
        _167 = _142.y;
        _168 = _142.z;
    }
    else
    {
        uint _146 = uint(gl_PrimitiveID) * 6u;
        uint _148 = _146 & 4294967292u;
        uint _151 = (_125 + _148) >> 2u;
        uvec2 _158 = uvec2(texelFetch(l_geomIndexBuffer, int(_151)).x, texelFetch(l_geomIndexBuffer, int(_151 + 1u)).x);
        uint _159 = _158.x;
        uint _160 = _158.y;
        uint _162 = _159 >> 16u;
        uint _163 = _160 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_148 == _146)
        {
            frontier_phi_3_2_ladder = _162;
            frontier_phi_3_2_ladder_1 = _159 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _163;
            frontier_phi_3_2_ladder_1 = _162;
            frontier_phi_3_2_ladder_2 = _160 >> 16u;
        }
        _165 = frontier_phi_3_2_ladder_1;
        _167 = frontier_phi_3_2_ladder;
        _168 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _172 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _173 = _172.x;
    uint _174 = _172.z;
    bool _175 = _174 != 0u;
    bool _177 = _124.w == 0u;
    bool _178 = _175 || _177;
    uint _179 = _173 * _165;
    uint _180 = _179 + 12u;
    uint _204;
    uint _205;
    uint _206;
    uint _207;
    if (_178)
    {
        uvec4 _183 = texelFetch(l_geomAttrib_0, int(_180 >> 2u));
        uint _184 = _183.x;
        _204 = _184 & 255u;
        _205 = (_184 >> 8u) & 255u;
        _206 = (_184 >> 16u) & 255u;
        _207 = 16u;
    }
    else
    {
        uint _192 = _180 >> 2u;
        uvec2 _198 = uvec2(texelFetch(l_geomAttrib_0, int(_192)).x, texelFetch(l_geomAttrib_0, int(_192 + 1u)).x);
        uint _199 = _198.x;
        _204 = _199 & 65535u;
        _205 = _199 >> 16u;
        _206 = _198.y & 65535u;
        _207 = 20u;
    }
    uvec4 _215 = texelFetch(l_geomAttrib_0, int((_207 + _179) >> 2u));
    uint _216 = _215.x;
    uint _228 = _179 + 4u;
    uvec4 _232 = texelFetch(l_geomAttrib_0, int((_228 + _207) >> 2u));
    uint _233 = _232.x;
    uint _242 = _207 | 8u;
    bool _243 = _174 == 0u;
    uint _244;
    if (_243)
    {
        _244 = _242;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_177)
        {
            frontier_phi_9_10_ladder = _242 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _242 + 8u;
        }
        _244 = frontier_phi_9_10_ladder;
    }
    uint _248 = _175 ? (_244 + 4u) : _244;
    uvec2 _255 = uvec2(_251, texelFetch(l_geomAttrib_0, int(((_228 + _248) >> 2u) + 1u)).x);
    uint _256 = _255.y;
    float _260 = float(int(uint(int(_256 << 16u) >> int(16u))));
    float _261 = float(int(uint(int(_256) >> int(16u))));
    uvec4 _265 = texelFetch(l_geomAttrib_0, int(((_179 + 12u) + _248) >> 2u));
    uint _266 = _265.x;
    uint _272 = _173 * _167;
    uint _273 = _272 + 12u;
    uint _294;
    uint _295;
    uint _296;
    uint _297;
    if (_178)
    {
        uvec4 _275 = texelFetch(l_geomAttrib_0, int(_273 >> 2u));
        uint _276 = _275.x;
        _294 = _276 & 255u;
        _295 = (_276 >> 8u) & 255u;
        _296 = (_276 >> 16u) & 255u;
        _297 = 16u;
    }
    else
    {
        uint _282 = _273 >> 2u;
        uvec2 _288 = uvec2(texelFetch(l_geomAttrib_0, int(_282)).x, texelFetch(l_geomAttrib_0, int(_282 + 1u)).x);
        uint _289 = _288.x;
        _294 = _289 & 65535u;
        _295 = _289 >> 16u;
        _296 = _288.y & 65535u;
        _297 = 20u;
    }
    uvec4 _303 = texelFetch(l_geomAttrib_0, int((_297 + _272) >> 2u));
    uint _304 = _303.x;
    uint _315 = _272 + 4u;
    uvec4 _318 = texelFetch(l_geomAttrib_0, int((_315 + _297) >> 2u));
    uint _319 = _318.x;
    uint _328 = _297 | 8u;
    uint _329;
    if (_243)
    {
        _329 = _328;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_177)
        {
            frontier_phi_16_17_ladder = _328 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _328 + 8u;
        }
        _329 = frontier_phi_16_17_ladder;
    }
    uint _333 = _175 ? (_329 + 4u) : _329;
    uvec2 _340 = uvec2(_336, texelFetch(l_geomAttrib_0, int(((_315 + _333) >> 2u) + 1u)).x);
    uint _341 = _340.y;
    float _345 = float(int(uint(int(_341 << 16u) >> int(16u))));
    float _346 = float(int(uint(int(_341) >> int(16u))));
    uvec4 _350 = texelFetch(l_geomAttrib_0, int(((_272 + 12u) + _333) >> 2u));
    uint _351 = _350.x;
    uint _357 = _173 * _168;
    uint _358 = _357 + 12u;
    uint _379;
    uint _380;
    uint _381;
    uint _382;
    if (_178)
    {
        uvec4 _360 = texelFetch(l_geomAttrib_0, int(_358 >> 2u));
        uint _361 = _360.x;
        _379 = _361 & 255u;
        _380 = (_361 >> 8u) & 255u;
        _381 = (_361 >> 16u) & 255u;
        _382 = 16u;
    }
    else
    {
        uint _367 = _358 >> 2u;
        uvec2 _373 = uvec2(texelFetch(l_geomAttrib_0, int(_367)).x, texelFetch(l_geomAttrib_0, int(_367 + 1u)).x);
        uint _374 = _373.x;
        _379 = _374 & 65535u;
        _380 = _374 >> 16u;
        _381 = _373.y & 65535u;
        _382 = 20u;
    }
    uvec4 _388 = texelFetch(l_geomAttrib_0, int((_382 + _357) >> 2u));
    uint _389 = _388.x;
    uint _400 = _357 + 4u;
    uvec4 _403 = texelFetch(l_geomAttrib_0, int((_400 + _382) >> 2u));
    uint _404 = _403.x;
    uint _413 = _382 | 8u;
    uint _414;
    if (_243)
    {
        _414 = _413;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_177)
        {
            frontier_phi_23_24_ladder = _413 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _413 + 8u;
        }
        _414 = frontier_phi_23_24_ladder;
    }
    uint _418 = _175 ? (_414 + 4u) : _414;
    uvec2 _425 = uvec2(_421, texelFetch(l_geomAttrib_0, int(((_400 + _418) >> 2u) + 1u)).x);
    uint _426 = _425.y;
    float _430 = float(int(uint(int(_426 << 16u) >> int(16u))));
    float _431 = float(int(uint(int(_426) >> int(16u))));
    uvec4 _435 = texelFetch(l_geomAttrib_0, int(((_357 + 12u) + _418) >> 2u));
    uint _436 = _435.x;
    bool _443 = _124.z == 0u;
    float _479;
    float _480;
    float _481;
    if (_443)
    {
        uint _446 = _165 * 3u;
        uvec3 _455 = uvec3(texelFetch(l_geomPositionBuffer, int(_446)).x, texelFetch(l_geomPositionBuffer, int(_446 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_446 + 2u)).x);
        _479 = uintBitsToFloat(_455.x);
        _480 = uintBitsToFloat(_455.y);
        _481 = uintBitsToFloat(_455.z);
    }
    else
    {
        uint _463 = _165 * 2u;
        uvec2 _469 = uvec2(texelFetch(l_geomPositionBuffer, int(_463)).x, texelFetch(l_geomPositionBuffer, int(_463 + 1u)).x);
        uint _470 = _469.x;
        _479 = unpackHalf2x16(_470).x;
        _480 = unpackHalf2x16(_470 >> 16u).x;
        _481 = unpackHalf2x16(_469.y).x;
    }
    float _517;
    float _518;
    float _519;
    if (_443)
    {
        uint _484 = _167 * 3u;
        uvec3 _493 = uvec3(texelFetch(l_geomPositionBuffer, int(_484)).x, texelFetch(l_geomPositionBuffer, int(_484 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_484 + 2u)).x);
        _517 = uintBitsToFloat(_493.x);
        _518 = uintBitsToFloat(_493.y);
        _519 = uintBitsToFloat(_493.z);
    }
    else
    {
        uint _501 = _167 * 2u;
        uvec2 _507 = uvec2(texelFetch(l_geomPositionBuffer, int(_501)).x, texelFetch(l_geomPositionBuffer, int(_501 + 1u)).x);
        uint _508 = _507.x;
        _517 = unpackHalf2x16(_508).x;
        _518 = unpackHalf2x16(_508 >> 16u).x;
        _519 = unpackHalf2x16(_507.y).x;
    }
    float _555;
    float _556;
    float _557;
    if (_443)
    {
        uint _522 = _168 * 3u;
        uvec3 _531 = uvec3(texelFetch(l_geomPositionBuffer, int(_522)).x, texelFetch(l_geomPositionBuffer, int(_522 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_522 + 2u)).x);
        _555 = uintBitsToFloat(_531.x);
        _556 = uintBitsToFloat(_531.y);
        _557 = uintBitsToFloat(_531.z);
    }
    else
    {
        uint _539 = _168 * 2u;
        uvec2 _545 = uvec2(texelFetch(l_geomPositionBuffer, int(_539)).x, texelFetch(l_geomPositionBuffer, int(_539 + 1u)).x);
        uint _546 = _545.x;
        _555 = unpackHalf2x16(_546).x;
        _556 = unpackHalf2x16(_546 >> 16u).x;
        _557 = unpackHalf2x16(_545.y).x;
    }
    float _560 = (1.0 - hit._m0.x) - hit._m0.y;
    float _609 = (((float(_351 & 255u) * hit._m0.x) + (float(_266 & 255u) * _560)) + (float(_436 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _613 = (((float((_351 >> 8u) & 255u) * hit._m0.x) + (float((_266 >> 8u) & 255u) * _560)) + (float((_436 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _616 = (_345 - _260) * 0.00048828125;
    float _618 = (_346 - _261) * 0.00048828125;
    float _621 = (_430 - _260) * 0.00048828125;
    float _622 = (_431 - _261) * 0.00048828125;
    float _644 = _517 - _479;
    float _645 = _518 - _480;
    float _646 = _519 - _481;
    float _649 = fma(_646, gl_ObjectToWorldEXT[2u].x, fma(_645, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _644));
    float _652 = fma(_646, gl_ObjectToWorldEXT[2u].y, fma(_645, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _644));
    float _655 = fma(_646, gl_ObjectToWorldEXT[2u].z, fma(_645, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _644));
    float _656 = _555 - _479;
    float _657 = _556 - _480;
    float _658 = _557 - _481;
    float _661 = fma(_658, gl_ObjectToWorldEXT[2u].x, fma(_657, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _656));
    float _664 = fma(_658, gl_ObjectToWorldEXT[2u].y, fma(_657, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _656));
    float _667 = fma(_658, gl_ObjectToWorldEXT[2u].z, fma(_657, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _656));
    float _668 = (((_345 * hit._m0.x) + (_260 * _560)) + (_430 * hit._m0.y)) * 0.00048828125;
    float _669 = (((_346 * hit._m0.x) + (_261 * _560)) + (_431 * hit._m0.y)) * 0.00048828125;
    float _673 = (((float(_204) * _560) + (-127.0)) + (float(_294) * hit._m0.x)) + (float(_379) * hit._m0.y);
    float _676 = (((float(_205) * _560) + (-127.0)) + (float(_295) * hit._m0.x)) + (float(_380) * hit._m0.y);
    float _679 = (((float(_206) * _560) + (-127.0)) + (float(_296) * hit._m0.x)) + (float(_381) * hit._m0.y);
    float _680 = _673 * 0.0078740157186985015869140625;
    float _682 = _676 * 0.0078740157186985015869140625;
    float _683 = _679 * 0.0078740157186985015869140625;
    float _696 = ((((float(_216 & 255u) * _560) + (-127.0)) + (float(_304 & 255u) * hit._m0.x)) + (float(_389 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _697 = ((((float((_216 >> 8u) & 255u) * _560) + (-127.0)) + (float((_304 >> 8u) & 255u) * hit._m0.x)) + (float((_389 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _698 = ((((float((_216 >> 16u) & 255u) * _560) + (-127.0)) + (float((_304 >> 16u) & 255u) * hit._m0.x)) + (float((_389 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _699 = ((((float(_216 >> 24u) * _560) + (-127.0)) + (float(_304 >> 24u) * hit._m0.x)) + (float(_389 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _709 = ((((float(_233 & 255u) * _560) + (-127.0)) + (float(_319 & 255u) * hit._m0.x)) + (float(_404 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _710 = ((((float((_233 >> 8u) & 255u) * _560) + (-127.0)) + (float((_319 >> 8u) & 255u) * hit._m0.x)) + (float((_404 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _711 = ((((float((_233 >> 16u) & 255u) * _560) + (-127.0)) + (float((_319 >> 16u) & 255u) * hit._m0.x)) + (float((_404 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _721 = ((_697 * _683) - (_698 * _682)) * _699;
    float _722 = ((_698 * _680) - (_696 * _683)) * _699;
    float _723 = ((_696 * _682) - (_697 * _680)) * _699;
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _727 * _721;
    float _729 = _727 * _722;
    float _730 = _727 * _723;
    uvec2 _746 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, int(0u)));
    bool _751 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _804;
    if (_751)
    {
        float _762 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _768 = (_667 * _652) - (_664 * _655);
        float _771 = (_661 * _655) - (_667 * _649);
        float _774 = (_664 * _649) - (_661 * _652);
        float _801 = ((log2((((float(_746.y) * 0.5) * float(_746.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_771 * _771) + (_774 * _774)) + (_768 * _768)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_762 * gl_WorldRayDirectionEXT.x, _762 * gl_WorldRayDirectionEXT.y, _762 * gl_WorldRayDirectionEXT.z), vec3(_680, _682, _683))));
        _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    }
    else
    {
        _804 = 0.0;
    }
    float _811 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _668) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _669) + cbTextureTilingScale._m0[4u].w), _804).x * cbMtdParam._m0[13u].x;
    float _823 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((_613 - _811) + (cbMtdParam._m0[13u].z * _613))) + 1.0;
    float _1858 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = 1.0 - (isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0)));
    float _826 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
    float _835 = ((cbMtdParam._m0[13u].w * (-1.39999997615814208984375)) * ((_609 - _811) + (cbMtdParam._m0[13u].y * _609))) + 1.0;
    float _1879 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = 1.0 - (isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0)));
    float _838 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
    uvec2 _857 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, int(0u)));
    float _908;
    if (_751)
    {
        float _868 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _874 = (_667 * _652) - (_664 * _655);
        float _877 = (_661 * _655) - (_667 * _649);
        float _880 = (_664 * _649) - (_661 * _652);
        float _906 = ((log2((((float(_857.y) * 0.5) * float(_857.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_877 * _877) + (_880 * _880)) + (_874 * _874)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_868 * gl_WorldRayDirectionEXT.x, _868 * gl_WorldRayDirectionEXT.y, _868 * gl_WorldRayDirectionEXT.z), vec3(_680, _682, _683))));
        _908 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    }
    else
    {
        _908 = 0.0;
    }
    vec4 _911 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _668) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _669) + cbTextureTilingScale._m0[2u].w), _908);
    float _913 = _911.x;
    float _914 = _911.y;
    float _915 = _911.z;
    float _916 = cbMtdParam._m0[11u].x * _839;
    float _918 = cbMtdParam._m0[11u].y * _839;
    float _920 = cbMtdParam._m0[11u].z * _839;
    float _940 = _837 + _825;
    float _941 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
    uvec2 _960 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, int(0u)));
    float _1011;
    if (_751)
    {
        float _971 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _977 = (_667 * _652) - (_664 * _655);
        float _980 = (_661 * _655) - (_667 * _649);
        float _983 = (_664 * _649) - (_661 * _652);
        float _1009 = ((log2((((float(_960.y) * 0.5) * float(_960.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_980 * _980) + (_983 * _983)) + (_977 * _977)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_971 * gl_WorldRayDirectionEXT.x, _971 * gl_WorldRayDirectionEXT.y, _971 * gl_WorldRayDirectionEXT.z), vec3(_680, _682, _683))));
        _1011 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    }
    else
    {
        _1011 = 0.0;
    }
    vec4 _1013 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _668) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _669) + cbTextureTilingScale._m0[0u].w), _1011);
    float _1018 = _1013.x * cbMtdParam._m0[10u].x;
    float _1019 = _1013.y * cbMtdParam._m0[10u].y;
    float _1020 = _1013.z * cbMtdParam._m0[10u].z;
    float _1037 = (_1018 - (_942 * _1018)) + ((((((_913 * (cbMtdParam._m0[9u].x - _916)) * _827) + (_916 * _913)) * 4.55000019073486328125) * _942) * _1018);
    float _1038 = (_1019 - (_942 * _1019)) + ((((((_914 * (cbMtdParam._m0[9u].y - _918)) * _827) + (_918 * _914)) * 4.55000019073486328125) * _942) * _1019);
    float _1039 = (_1020 - (_942 * _1020)) + ((((((_915 * (cbMtdParam._m0[9u].z - _920)) * _827) + (_920 * _915)) * 4.55000019073486328125) * _942) * _1020);
    uvec2 _1056 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, int(0u)));
    float _1107;
    if (_751)
    {
        float _1067 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1073 = (_667 * _652) - (_664 * _655);
        float _1076 = (_661 * _655) - (_667 * _649);
        float _1079 = (_664 * _649) - (_661 * _652);
        float _1105 = ((log2((((float(_1056.y) * 0.5) * float(_1056.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_1076 * _1076) + (_1079 * _1079)) + (_1073 * _1073)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_1067 * gl_WorldRayDirectionEXT.x, _1067 * gl_WorldRayDirectionEXT.y, _1067 * gl_WorldRayDirectionEXT.z), vec3(_680, _682, _683))));
        _1107 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    }
    else
    {
        _1107 = 0.0;
    }
    vec4 _1110 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _668) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _669) + cbTextureTilingScale._m0[5u].w), _1107);
    float _1114 = _1110.z;
    float _1117 = (_1110.x * 2.0) + (-1.0);
    float _1119 = (_1110.y * 2.0) + (-1.0);
    float _1120 = dot(vec2(_1117, _1119), vec2(_1117, _1119));
    float _1925 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1125 = sqrt(1.0 - (isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0))));
    float _1127 = fma(_1125, _680, fma(_1119, _709, 0.0));
    float _1129 = fma(_1125, _682, fma(_1119, _710, 0.0));
    float _1131 = fma(_1125, _683, fma(_1119, _711, 0.0));
    float _1135 = inversesqrt(dot(vec3(_1127, _1129, _1131), vec3(_1127, _1129, _1131)));
    float _1136 = _1135 * _1127;
    float _1137 = _1135 * _1129;
    float _1138 = _1135 * _1131;
    uvec2 _1150 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, int(0u)));
    float _1201;
    if (_751)
    {
        float _1161 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1167 = (_667 * _652) - (_664 * _655);
        float _1170 = (_661 * _655) - (_667 * _649);
        float _1173 = (_664 * _649) - (_661 * _652);
        float _1199 = ((log2((((float(_1150.y) * 0.5) * float(_1150.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_1170 * _1170) + (_1173 * _1173)) + (_1167 * _1167)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_1161 * gl_WorldRayDirectionEXT.x, _1161 * gl_WorldRayDirectionEXT.y, _1161 * gl_WorldRayDirectionEXT.z), vec3(_680, _682, _683))));
        _1201 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    }
    else
    {
        _1201 = 0.0;
    }
    vec4 _1203 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _668) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _669) + cbTextureTilingScale._m0[3u].w), _1201);
    float _1209 = (_1203.x * 2.0) + (-1.0);
    float _1210 = (_1203.y * 2.0) + (-1.0);
    float _1211 = dot(vec2(_1209, _1210), vec2(_1209, _1210));
    float _1941 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1216 = sqrt(1.0 - (isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0))));
    float _1218 = fma(_1216, _680, fma(_1210, _709, 0.0));
    float _1220 = fma(_1216, _682, fma(_1210, _710, 0.0));
    float _1222 = fma(_1216, _683, fma(_1210, _711, 0.0));
    float _1226 = inversesqrt(dot(vec3(_1218, _1220, _1222), vec3(_1218, _1220, _1222)));
    float _1227 = _1226 * _1218;
    float _1228 = _1226 * _1220;
    float _1229 = _1226 * _1222;
    float _1232 = fma(_1229, _730, fma(_1228, _729, _1227 * _728));
    float _1235 = fma(_1229, _698, fma(_1228, _697, _1227 * _696));
    float _1238 = fma(_1229, _683, fma(_1228, _682, _1227 * _680));
    float _1242 = inversesqrt(dot(vec3(_1232, _1235, _1238), vec3(_1232, _1235, _1238)));
    float _1246 = fma(_1138, _730, fma(_1137, _729, _1136 * _728));
    float _1249 = fma(_1138, _698, fma(_1137, _697, _1136 * _696));
    float _1252 = fma(_1138, _683, fma(_1137, _682, _1136 * _680));
    float _1256 = inversesqrt(dot(vec3(_1246, _1249, _1252), vec3(_1246, _1249, _1252)));
    float _1259 = _1256 * _1252;
    uvec2 _1271 = uvec2(textureSize(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, int(0u)));
    float _1275 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1276 = _1275 * gl_WorldRayDirectionEXT.x;
    float _1277 = _1275 * gl_WorldRayDirectionEXT.y;
    float _1278 = _1275 * gl_WorldRayDirectionEXT.z;
    float _1322;
    if (_751)
    {
        float _1288 = (_667 * _652) - (_664 * _655);
        float _1291 = (_661 * _655) - (_667 * _649);
        float _1294 = (_664 * _649) - (_661 * _652);
        float _1320 = ((log2((((float(_1271.y) * 0.5) * float(_1271.x)) * abs((_622 * _616) - (_621 * _618))) / (sqrt(((_1291 * _1291) + (_1294 * _1294)) + (_1288 * _1288)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_113) / abs(dot(vec3(_1276, _1277, _1278), vec3(_680, _682, _683))));
        _1322 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    }
    else
    {
        _1322 = 0.0;
    }
    vec4 _1324 = textureLod(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _668) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _669) + cbTextureTilingScale._m0[6u].w), _1322);
    float _1330 = (_1324.x * 2.0) + (-1.0);
    float _1331 = (_1324.y * 2.0) + (-1.0);
    float _1332 = dot(vec2(_1330, _1331), vec2(_1330, _1331));
    float _1957 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1337 = sqrt(1.0 - (isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0))));
    float _1339 = fma(_1337, _680, fma(_1331, _709, 0.0));
    float _1341 = fma(_1337, _682, fma(_1331, _710, 0.0));
    float _1343 = fma(_1337, _683, fma(_1331, _711, 0.0));
    float _1347 = inversesqrt(dot(vec3(_1339, _1341, _1343), vec3(_1339, _1341, _1343)));
    float _1348 = _1347 * _1339;
    float _1349 = _1347 * _1341;
    float _1350 = _1347 * _1343;
    float _1353 = fma(_1350, _730, fma(_1349, _729, _1348 * _728));
    float _1356 = fma(_1350, _698, fma(_1349, _697, _1348 * _696));
    float _1359 = fma(_1350, _683, fma(_1349, _682, _1348 * _680));
    float _1363 = inversesqrt(dot(vec3(_1353, _1356, _1359), vec3(_1353, _1356, _1359)));
    float _1378 = ((_1256 * _1246) + (((_1232 * _827) * _1242) * cbMtdParam._m0[14u].z)) + (((_1353 * _839) * _1363) * cbMtdParam._m0[14u].y);
    float _1380 = ((_1256 * _1249) + (((_1235 * _827) * _1242) * cbMtdParam._m0[14u].z)) + (((_1356 * _839) * _1363) * cbMtdParam._m0[14u].y);
    float _1383 = fma(_1259, _680, fma(_1380, _696, _1378 * _728));
    float _1386 = fma(_1259, _682, fma(_1380, _697, _1378 * _729));
    float _1389 = fma(_1259, _683, fma(_1380, _698, _1378 * _730));
    float _1393 = inversesqrt(dot(vec3(_1383, _1386, _1389), vec3(_1383, _1386, _1389)));
    float _1394 = _1393 * _1383;
    float _1395 = _1393 * _1386;
    float _1396 = _1393 * _1389;
    float _1408 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1409 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1410 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1411 = (-0.0) - _1276;
    float _1413 = (-0.0) - _1277;
    float _1414 = (-0.0) - _1278;
    float _1420 = float(gl_LaunchIDEXT.x);
    float _1421 = float(gl_LaunchIDEXT.y);
    float _1424 = float(gl_LaunchSizeEXT.x);
    float _1438 = fract(fract(sin(dot(vec2(_1420 / _1424, _1421 / _74), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1451 = fract(fract(sin(dot(vec2((_1420 + 128.0) / _1424, (_1421 + 128.0) / _74), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1452 = 1.0 - cbMtdParam._m0[15u].w;
    float _1453 = _1452 * _1037;
    float _1454 = _1452 * _1038;
    float _1455 = _1039 * _1452;
    float _1460 = cbMtdParam._m0[15u].w * (_1037 + (-0.039999999105930328369140625));
    float _1461 = (_1038 + (-0.039999999105930328369140625)) * cbMtdParam._m0[15u].w;
    float _1462 = (_1039 + (-0.039999999105930328369140625)) * cbMtdParam._m0[15u].w;
    float _1463 = _1460 + 0.039999999105930328369140625;
    float _1465 = _1461 + 0.039999999105930328369140625;
    float _1466 = _1462 + 0.039999999105930328369140625;
    _66._m0 = 1u;
    uvec4 _1476 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1477 = _1476.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1477, _1476.w, _1477, vec3(_1408, _1409, _1410), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (_66._m0 == 0u)
    {
        float _1497 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1394, _1395, _1396));
        float _1968 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1500 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        float _1519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1114) * 0.949999988079071044921875);
        float _1520 = _1519 * _1519;
        float _1521 = g_sceneCB._m0[4u].x - _1276;
        float _1522 = g_sceneCB._m0[4u].y - _1277;
        float _1523 = g_sceneCB._m0[4u].z - _1278;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1528 = _1527 * _1521;
        float _1529 = _1527 * _1522;
        float _1530 = _1527 * _1523;
        float _1531 = dot(vec3(_1394, _1395, _1396), vec3(g_sceneCB._m0[4u].xyz));
        float _1979 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1534 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        float _1535 = dot(vec3(_1394, _1395, _1396), vec3(_1411, _1413, _1414));
        float _1990 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1538 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        float _1539 = dot(vec3(_1394, _1395, _1396), vec3(_1528, _1529, _1530));
        float _2001 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1542 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        float _1543 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1528, _1529, _1530));
        float _2012 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = _1520 * _1520;
        float _1551 = ((_1542 * _1542) * (_1547 + (-1.0))) + 1.0;
        float _1560 = exp2(log2(1.0 - (isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0)))) * 5.0);
        float _1571 = 1.0 - _1520;
        float _1582 = (0.5 / (((_1538 * ((_1534 * _1571) + _1520)) + 9.9999999392252902907785028219223e-09) + (((_1538 * _1571) + _1520) * _1534))) * _1534;
        float _2023 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1584 = (isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0))) * (_1547 / ((_1551 * _1551) * 3.141590118408203125));
        _1591 = ((_1453 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1500;
        _1592 = ((_1454 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1500;
        _1593 = ((_1455 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1500;
        _1594 = (((_1560 * (0.959999978542327880859375 - _1460)) + _1463) * g_sceneCB._m0[5u].x) * _1584;
        _1595 = (((_1560 * (0.959999978542327880859375 - _1461)) + _1465) * g_sceneCB._m0[5u].y) * _1584;
        _1596 = (((_1560 * (0.959999978542327880859375 - _1462)) + _1466) * g_sceneCB._m0[5u].z) * _1584;
    }
    else
    {
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    bool _1598 = abs(_1395) < 0.89999997615814208984375;
    float _1600 = float(_1598);
    float _1601 = _1598 ? 0.0 : 1.0;
    float _1604 = (_1600 * _1396) - (_1601 * _1395);
    float _1605 = _1601 * _1394;
    float _1607 = (-0.0) - (_1394 * _1600);
    float _1611 = inversesqrt(dot(vec3(_1604, _1605, _1607), vec3(_1604, _1605, _1607)));
    float _1612 = _1604 * _1611;
    float _1613 = _1605 * _1611;
    float _1614 = _1611 * _1607;
    float _1617 = (_1613 * _1396) - (_1614 * _1395);
    float _1620 = (_1614 * _1394) - (_1612 * _1396);
    float _1623 = (_1612 * _1395) - (_1613 * _1394);
    float _1625;
    float _1633;
    float _1624 = 0.0;
    uint _1626 = 0u;
    float _1630;
    bool _1632;
    for (;;)
    {
        _1630 = (float(_1626) + _1438) * 0.03125;
        _1632 = _1626 == 0u;
        float frontier_phi_51_pred;
        if (_1632)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1774;
            float _1775;
            uint _1777;
            _1774 = 0.0;
            _1775 = 0.5;
            _1777 = _1626;
            float _1634;
            for (;;)
            {
                _1634 = ((_1777 & 1u) != 0u) ? (_1775 + _1774) : _1774;
                uint _1778 = _1777 >> 1u;
                if (_1778 == 0u)
                {
                    break;
                }
                else
                {
                    _1774 = _1634;
                    _1775 *= 0.5;
                    _1777 = _1778;
                }
            }
            frontier_phi_51_pred = _1634;
        }
        _1633 = frontier_phi_51_pred;
        float _1635 = _1633 + _1451;
        float _1639 = sqrt(_1630);
        float _1640 = ((_1635 > 1.0) ? (_1635 + (-1.0)) : _1635) * 6.283185482025146484375;
        float _1643 = cos(_1640) * _1639;
        float _1645 = sin(_1640) * _1639;
        float _1647 = sqrt(1.0 - _1630);
        float _1660 = ((_1647 * _1394) + (_1643 * _1617)) + (_1645 * _1612);
        float _1661 = ((_1647 * _1395) + (_1643 * _1620)) + (_1645 * _1613);
        float _1662 = ((_1647 * _1396) + (_1643 * _1623)) + (_1645 * _1614);
        _65._m0 = 1u;
        uvec4 _1666 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1667 = _1666.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1667, _1666.w, _1667, vec3(_1408, _1409, _1410), 9.9999997473787516355514526367188e-05, vec3(_1660, _1661, _1662), 10000.0, 1);
        float _1673 = dot(vec3(_1394, _1395, _1396), vec3(_1660, _1661, _1662));
        float _2034 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1676 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _1625 = ((float(_65._m0 == 0u) * _1676) / (_1676 * 0.3183098733425140380859375)) + _1624;
        uint _1627 = _1626 + 1u;
        if (_1627 == 32u)
        {
            break;
        }
        else
        {
            _1624 = _1625;
            _1626 = _1627;
            continue;
        }
    }
    float _1684 = _1625 * 0.009947183541953563690185546875;
    float _1689 = dot(vec3(_1276, _1277, _1278), vec3(_1394, _1395, _1396)) * 2.0;
    vec4 _1703 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1276 - (_1689 * _1394), _1277 - (_1689 * _1395), _1278 - (_1689 * _1396)), 4.0 - (_1114 * 4.0));
    float _1708 = dot(vec3(_1411, _1413, _1414), vec3(_1394, _1395, _1396));
    float _2045 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1718 = exp2(log2(1.0 - (isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0)))) * 5.0);
    vec4 _1730 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1394, _1395, _1396), 0.0);
    float _1741 = (_1594 + _1591) + (((_1730.x * _1453) + (((_1718 * (0.959999978542327880859375 - _1460)) + _1463) * _1703.x)) * _1684);
    float _1745 = (_1595 + _1592) + (((_1730.y * _1454) + (((_1718 * (0.959999978542327880859375 - _1461)) + _1465) * _1703.y)) * _1684);
    float _1749 = (_1596 + _1593) + (((_1730.z * _1455) + (((_1718 * (0.959999978542327880859375 - _1462)) + _1466) * _1703.z)) * _1684);
    float _2056 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _2067 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _2078 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    bool _1757 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1768;
    _1768.x = _1757 ? ((_673 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0)));
    _1768.y = _1757 ? ((_676 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0)));
    _1768.z = _1757 ? ((_679 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0)));
    payload._m0 = _1768;
}


