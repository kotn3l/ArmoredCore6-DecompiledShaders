#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1371;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _161;
    uint _163;
    uint _164;
    if (_121.x == 0u)
    {
        uint _129 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_122 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _155 & 65535u;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _156 >> 16u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _161 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _121.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uint _231 = _171 ? (_227 + 4u) : _227;
    uvec4 _241 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + _231) >> 2u));
    uint _242 = _241.x;
    float _246 = float(int(uint(int(_242 << 16u) >> int(16u))));
    float _247 = float(int(uint(int(_242) >> int(16u))));
    uint _248 = _169 * _163;
    uint _249 = _248 + 12u;
    uint _270;
    uint _271;
    uint _272;
    uint _273;
    if (_174)
    {
        uvec4 _251 = texelFetch(l_geomAttrib_0, int(_249 >> 2u));
        uint _252 = _251.x;
        _270 = _252 & 255u;
        _271 = (_252 >> 8u) & 255u;
        _272 = (_252 >> 16u) & 255u;
        _273 = 16u;
    }
    else
    {
        uint _258 = _249 >> 2u;
        uvec2 _264 = uvec2(texelFetch(l_geomAttrib_0, int(_258)).x, texelFetch(l_geomAttrib_0, int(_258 + 1u)).x);
        uint _265 = _264.x;
        _270 = _265 & 65535u;
        _271 = _265 >> 16u;
        _272 = _264.y & 65535u;
        _273 = 20u;
    }
    uvec4 _279 = texelFetch(l_geomAttrib_0, int((_273 + _248) >> 2u));
    uint _280 = _279.x;
    uint _292;
    if (_226)
    {
        _292 = _273 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _273 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _273 + 12u;
        }
        _292 = frontier_phi_16_17_ladder;
    }
    uint _296 = _171 ? (_292 + 4u) : _292;
    uvec4 _306 = texelFetch(l_geomAttrib_0, int(((_248 + 4u) + _296) >> 2u));
    uint _307 = _306.x;
    float _311 = float(int(uint(int(_307 << 16u) >> int(16u))));
    float _312 = float(int(uint(int(_307) >> int(16u))));
    uint _313 = _169 * _164;
    uint _314 = _313 + 12u;
    uint _335;
    uint _336;
    uint _337;
    uint _338;
    if (_174)
    {
        uvec4 _316 = texelFetch(l_geomAttrib_0, int(_314 >> 2u));
        uint _317 = _316.x;
        _335 = _317 & 255u;
        _336 = (_317 >> 8u) & 255u;
        _337 = (_317 >> 16u) & 255u;
        _338 = 16u;
    }
    else
    {
        uint _323 = _314 >> 2u;
        uvec2 _329 = uvec2(texelFetch(l_geomAttrib_0, int(_323)).x, texelFetch(l_geomAttrib_0, int(_323 + 1u)).x);
        uint _330 = _329.x;
        _335 = _330 & 65535u;
        _336 = _330 >> 16u;
        _337 = _329.y & 65535u;
        _338 = 20u;
    }
    uvec4 _344 = texelFetch(l_geomAttrib_0, int((_338 + _313) >> 2u));
    uint _345 = _344.x;
    uint _357;
    if (_226)
    {
        _357 = _338 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _338 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _338 + 12u;
        }
        _357 = frontier_phi_23_24_ladder;
    }
    uint _361 = _171 ? (_357 + 4u) : _357;
    uvec4 _371 = texelFetch(l_geomAttrib_0, int(((_313 + 4u) + _361) >> 2u));
    uint _372 = _371.x;
    float _376 = float(int(uint(int(_372 << 16u) >> int(16u))));
    float _377 = float(int(uint(int(_372) >> int(16u))));
    bool _379 = _121.z == 0u;
    float _415;
    float _416;
    float _417;
    if (_379)
    {
        uint _382 = _161 * 3u;
        uvec3 _391 = uvec3(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_382 + 2u)).x);
        _415 = uintBitsToFloat(_391.x);
        _416 = uintBitsToFloat(_391.y);
        _417 = uintBitsToFloat(_391.z);
    }
    else
    {
        uint _399 = _161 * 2u;
        uvec2 _405 = uvec2(texelFetch(l_geomPositionBuffer, int(_399)).x, texelFetch(l_geomPositionBuffer, int(_399 + 1u)).x);
        uint _406 = _405.x;
        _415 = unpackHalf2x16(_406).x;
        _416 = unpackHalf2x16(_406 >> 16u).x;
        _417 = unpackHalf2x16(_405.y).x;
    }
    float _453;
    float _454;
    float _455;
    if (_379)
    {
        uint _420 = _163 * 3u;
        uvec3 _429 = uvec3(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_420 + 2u)).x);
        _453 = uintBitsToFloat(_429.x);
        _454 = uintBitsToFloat(_429.y);
        _455 = uintBitsToFloat(_429.z);
    }
    else
    {
        uint _437 = _163 * 2u;
        uvec2 _443 = uvec2(texelFetch(l_geomPositionBuffer, int(_437)).x, texelFetch(l_geomPositionBuffer, int(_437 + 1u)).x);
        uint _444 = _443.x;
        _453 = unpackHalf2x16(_444).x;
        _454 = unpackHalf2x16(_444 >> 16u).x;
        _455 = unpackHalf2x16(_443.y).x;
    }
    float _491;
    float _492;
    float _493;
    if (_379)
    {
        uint _458 = _164 * 3u;
        uvec3 _467 = uvec3(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_458 + 2u)).x);
        _491 = uintBitsToFloat(_467.x);
        _492 = uintBitsToFloat(_467.y);
        _493 = uintBitsToFloat(_467.z);
    }
    else
    {
        uint _475 = _164 * 2u;
        uvec2 _481 = uvec2(texelFetch(l_geomPositionBuffer, int(_475)).x, texelFetch(l_geomPositionBuffer, int(_475 + 1u)).x);
        uint _482 = _481.x;
        _491 = unpackHalf2x16(_482).x;
        _492 = unpackHalf2x16(_482 >> 16u).x;
        _493 = unpackHalf2x16(_481.y).x;
    }
    float _496 = (1.0 - hit._m0.x) - hit._m0.y;
    float _535 = (_311 - _246) * 0.00048828125;
    float _537 = (_312 - _247) * 0.00048828125;
    float _540 = (_376 - _246) * 0.00048828125;
    float _541 = (_377 - _247) * 0.00048828125;
    float _563 = _453 - _415;
    float _564 = _454 - _416;
    float _565 = _455 - _417;
    float _568 = fma(_565, gl_ObjectToWorldEXT[2u].x, fma(_564, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _563));
    float _571 = fma(_565, gl_ObjectToWorldEXT[2u].y, fma(_564, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _563));
    float _574 = fma(_565, gl_ObjectToWorldEXT[2u].z, fma(_564, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _563));
    float _575 = _491 - _415;
    float _576 = _492 - _416;
    float _577 = _493 - _417;
    float _580 = fma(_577, gl_ObjectToWorldEXT[2u].x, fma(_576, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _575));
    float _583 = fma(_577, gl_ObjectToWorldEXT[2u].y, fma(_576, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _575));
    float _586 = fma(_577, gl_ObjectToWorldEXT[2u].z, fma(_576, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _575));
    float _587 = (((_311 * hit._m0.x) + (_246 * _496)) + (_376 * hit._m0.y)) * 0.00048828125;
    float _588 = (((_312 * hit._m0.x) + (_247 * _496)) + (_377 * hit._m0.y)) * 0.00048828125;
    float _592 = (((float(_200) * _496) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_335) * hit._m0.y);
    float _595 = (((float(_201) * _496) + (-127.0)) + (float(_271) * hit._m0.x)) + (float(_336) * hit._m0.y);
    float _598 = (((float(_202) * _496) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_337) * hit._m0.y);
    float _599 = _592 * 0.0078740157186985015869140625;
    float _601 = _595 * 0.0078740157186985015869140625;
    float _602 = _598 * 0.0078740157186985015869140625;
    float _615 = ((((float(_212 & 255u) * _496) + (-127.0)) + (float(_280 & 255u) * hit._m0.x)) + (float(_345 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _616 = ((((float((_212 >> 8u) & 255u) * _496) + (-127.0)) + (float((_280 >> 8u) & 255u) * hit._m0.x)) + (float((_345 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _617 = ((((float((_212 >> 16u) & 255u) * _496) + (-127.0)) + (float((_280 >> 16u) & 255u) * hit._m0.x)) + (float((_345 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _618 = ((((float(_212 >> 24u) * _496) + (-127.0)) + (float(_280 >> 24u) * hit._m0.x)) + (float(_345 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _628 = ((_616 * _602) - (_617 * _601)) * _618;
    float _629 = ((_617 * _599) - (_615 * _602)) * _618;
    float _630 = ((_615 * _601) - (_616 * _599)) * _618;
    float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
    float _635 = _634 * _628;
    float _636 = _634 * _629;
    float _637 = _634 * _630;
    uvec2 _649 = uvec2(textureSize(M_Planet_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _654 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _707;
    if (_654)
    {
        float _665 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _671 = (_586 * _571) - (_583 * _574);
        float _674 = (_580 * _574) - (_586 * _568);
        float _677 = (_583 * _568) - (_580 * _571);
        float _704 = ((log2((((float(_649.y) * 0.5) * float(_649.x)) * abs((_541 * _535) - (_540 * _537))) / (sqrt(((_674 * _674) + (_677 * _677)) + (_671 * _671)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_665 * gl_WorldRayDirectionEXT.x, _665 * gl_WorldRayDirectionEXT.y, _665 * gl_WorldRayDirectionEXT.z), vec3(_599, _601, _602))));
        _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    }
    else
    {
        _707 = 0.0;
    }
    vec4 _711 = textureLod(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _587) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _588) + cbTextureTilingScale._m0[0u].w), _707);
    float _722 = cbMtdParam._m0[10u].x * _711.x;
    float _723 = cbMtdParam._m0[10u].y * _711.y;
    float _724 = cbMtdParam._m0[10u].z * _711.z;
    uvec2 _736 = uvec2(textureSize(M_Planet_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _787;
    if (_654)
    {
        float _747 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _753 = (_586 * _571) - (_583 * _574);
        float _756 = (_580 * _574) - (_586 * _568);
        float _759 = (_583 * _568) - (_580 * _571);
        float _785 = ((log2((((float(_736.y) * 0.5) * float(_736.x)) * abs((_541 * _535) - (_540 * _537))) / (sqrt(((_756 * _756) + (_759 * _759)) + (_753 * _753)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_747 * gl_WorldRayDirectionEXT.x, _747 * gl_WorldRayDirectionEXT.y, _747 * gl_WorldRayDirectionEXT.z), vec3(_599, _601, _602))));
        _787 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    }
    else
    {
        _787 = 0.0;
    }
    vec4 _790 = textureLod(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _587) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _588) + cbTextureTilingScale._m0[1u].w), _787);
    float _794 = _790.z;
    float _797 = (_790.x * 2.0) + (-1.0);
    float _799 = (_790.y * 2.0) + (-1.0);
    float _800 = dot(vec2(_797, _799), vec2(_797, _799));
    float _1461 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _805 = sqrt(1.0 - (isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0))));
    uvec2 _821 = uvec2(textureSize(M_Planet_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    float _872;
    if (_654)
    {
        float _832 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _838 = (_586 * _571) - (_583 * _574);
        float _841 = (_580 * _574) - (_586 * _568);
        float _844 = (_583 * _568) - (_580 * _571);
        float _870 = ((log2((((float(_821.y) * 0.5) * float(_821.x)) * abs((_541 * _535) - (_540 * _537))) / (sqrt(((_841 * _841) + (_844 * _844)) + (_838 * _838)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_832 * gl_WorldRayDirectionEXT.x, _832 * gl_WorldRayDirectionEXT.y, _832 * gl_WorldRayDirectionEXT.z), vec3(_599, _601, _602))));
        _872 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    }
    else
    {
        _872 = 0.0;
    }
    vec4 _874 = textureLod(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _587) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _588) + cbTextureTilingScale._m0[3u].w), _872);
    uvec2 _894 = uvec2(textureSize(M_Planet_Emissive_Glow_snp_0_Texture2D_2, int(0u)));
    float _898 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _899 = _898 * gl_WorldRayDirectionEXT.x;
    float _900 = _898 * gl_WorldRayDirectionEXT.y;
    float _901 = _898 * gl_WorldRayDirectionEXT.z;
    float _945;
    if (_654)
    {
        float _911 = (_586 * _571) - (_583 * _574);
        float _914 = (_580 * _574) - (_586 * _568);
        float _917 = (_583 * _568) - (_580 * _571);
        float _943 = ((log2((((float(_894.y) * 0.5) * float(_894.x)) * abs((_541 * _535) - (_540 * _537))) / (sqrt(((_914 * _914) + (_917 * _917)) + (_911 * _911)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_899, _900, _901), vec3(_599, _601, _602))));
        _945 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    }
    else
    {
        _945 = 0.0;
    }
    vec4 _947 = textureLod(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _587) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _588) + cbTextureTilingScale._m0[2u].w), _945);
    float _966 = fma(0.989949524402618408203125, _599, fma(-0.10000002384185791015625, _615, _635 * (-0.10000002384185791015625)));
    float _970 = fma(0.989949524402618408203125, _601, fma(-0.10000002384185791015625, _616, _636 * (-0.10000002384185791015625)));
    float _973 = fma(0.989949524402618408203125, _602, fma(-0.10000002384185791015625, _617, _637 * (-0.10000002384185791015625)));
    float _977 = inversesqrt(dot(vec3(_966, _970, _973), vec3(_966, _970, _973)));
    float _985 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_977 * _966, _977 * _970, _977 * _973, 0.0)) - cbMtdParam._m0[11u].z;
    float _1482 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _992 = exp2(log2(1.0 - (isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _993 = (((float(texelFetch(l_geomAttrib_0, int((_296 + _248) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_231 + _175) >> 2u)).x >> 24u) * _496)) + (float(texelFetch(l_geomAttrib_0, int((_361 + _313) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0392156876623630523681640625;
    float _1003 = fma(_805, _599, fma(_799, _615, _797 * _635));
    float _1006 = fma(_805, _601, fma(_799, _616, _797 * _636));
    float _1009 = fma(_805, _602, fma(_799, _617, _797 * _637));
    float _1013 = inversesqrt(dot(vec3(_1003, _1006, _1009), vec3(_1003, _1006, _1009)));
    float _1014 = _1013 * _1003;
    float _1015 = _1013 * _1006;
    float _1016 = _1013 * _1009;
    float _1028 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1029 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1030 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1031 = (-0.0) - _899;
    float _1033 = (-0.0) - _900;
    float _1034 = (-0.0) - _901;
    float _1040 = float(gl_LaunchIDEXT.x);
    float _1041 = float(gl_LaunchIDEXT.y);
    float _1044 = float(gl_LaunchSizeEXT.x);
    float _1058 = fract(fract(sin(dot(vec2(_1040 / _1044, _1041 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1071 = fract(fract(sin(dot(vec2((_1040 + 128.0) / _1044, (_1041 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _1081 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1082 = _1081.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1082, _1081.w, _1082, vec3(_1028, _1029, _1030), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (_63._m0 == 0u)
    {
        float _1103 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1014, _1015, _1016));
        float _1498 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1106 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        float _1125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _794) * 0.949999988079071044921875);
        float _1126 = _1125 * _1125;
        float _1127 = g_sceneCB._m0[4u].x - _899;
        float _1128 = g_sceneCB._m0[4u].y - _900;
        float _1129 = g_sceneCB._m0[4u].z - _901;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1134 = _1133 * _1127;
        float _1135 = _1133 * _1128;
        float _1136 = _1133 * _1129;
        float _1137 = dot(vec3(_1014, _1015, _1016), vec3(g_sceneCB._m0[4u].xyz));
        float _1509 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1140 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        float _1141 = dot(vec3(_1014, _1015, _1016), vec3(_1031, _1033, _1034));
        float _1520 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1144 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        float _1145 = dot(vec3(_1014, _1015, _1016), vec3(_1134, _1135, _1136));
        float _1531 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1148 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        float _1149 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1134, _1135, _1136));
        float _1542 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1126 * _1126;
        float _1157 = ((_1148 * _1148) * (_1153 + (-1.0))) + 1.0;
        float _1169 = (exp2(log2(1.0 - (isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1171 = 1.0 - _1126;
        float _1182 = (0.5 / (((_1144 * ((_1140 * _1171) + _1126)) + 9.9999999392252902907785028219223e-09) + (((_1144 * _1171) + _1126) * _1140))) * _1140;
        float _1553 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1184 = (isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0))) * (_1153 / ((_1157 * _1157) * 3.141590118408203125));
        _1191 = ((_722 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1106;
        _1192 = ((_723 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1106;
        _1193 = ((_724 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1106;
        _1194 = (_1169 * g_sceneCB._m0[5u].x) * _1184;
        _1195 = (_1169 * g_sceneCB._m0[5u].y) * _1184;
        _1196 = (_1169 * g_sceneCB._m0[5u].z) * _1184;
    }
    else
    {
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    bool _1198 = abs(_1015) < 0.89999997615814208984375;
    float _1200 = float(_1198);
    float _1201 = _1198 ? 0.0 : 1.0;
    float _1204 = (_1200 * _1016) - (_1201 * _1015);
    float _1205 = _1201 * _1014;
    float _1207 = (-0.0) - (_1014 * _1200);
    float _1211 = inversesqrt(dot(vec3(_1204, _1205, _1207), vec3(_1204, _1205, _1207)));
    float _1212 = _1204 * _1211;
    float _1213 = _1205 * _1211;
    float _1214 = _1211 * _1207;
    float _1217 = (_1213 * _1016) - (_1214 * _1015);
    float _1220 = (_1214 * _1014) - (_1212 * _1016);
    float _1223 = (_1212 * _1015) - (_1213 * _1014);
    float _1225;
    float _1233;
    float _1224 = 0.0;
    uint _1226 = 0u;
    float _1230;
    bool _1232;
    for (;;)
    {
        _1230 = (float(_1226) + _1058) * 0.03125;
        _1232 = _1226 == 0u;
        float frontier_phi_47_pred;
        if (_1232)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1376;
            float _1377;
            uint _1379;
            _1376 = 0.0;
            _1377 = 0.5;
            _1379 = _1226;
            float _1234;
            for (;;)
            {
                _1234 = ((_1379 & 1u) != 0u) ? (_1377 + _1376) : _1376;
                uint _1380 = _1379 >> 1u;
                if (_1380 == 0u)
                {
                    break;
                }
                else
                {
                    _1376 = _1234;
                    _1377 *= 0.5;
                    _1379 = _1380;
                }
            }
            frontier_phi_47_pred = _1234;
        }
        _1233 = frontier_phi_47_pred;
        float _1235 = _1233 + _1071;
        float _1239 = sqrt(_1230);
        float _1240 = ((_1235 > 1.0) ? (_1235 + (-1.0)) : _1235) * 6.283185482025146484375;
        float _1243 = cos(_1240) * _1239;
        float _1245 = sin(_1240) * _1239;
        float _1247 = sqrt(1.0 - _1230);
        float _1260 = ((_1247 * _1014) + (_1243 * _1217)) + (_1245 * _1212);
        float _1261 = ((_1247 * _1015) + (_1243 * _1220)) + (_1245 * _1213);
        float _1262 = ((_1247 * _1016) + (_1243 * _1223)) + (_1245 * _1214);
        _62._m0 = 1u;
        uvec4 _1266 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1267 = _1266.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1267, _1266.w, _1267, vec3(_1028, _1029, _1030), 9.9999997473787516355514526367188e-05, vec3(_1260, _1261, _1262), 10000.0, 1);
        float _1273 = dot(vec3(_1014, _1015, _1016), vec3(_1260, _1261, _1262));
        float _1564 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1276 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1225 = ((float(_62._m0 == 0u) * _1276) / (_1276 * 0.3183098733425140380859375)) + _1224;
        uint _1227 = _1226 + 1u;
        if (_1227 == 32u)
        {
            break;
        }
        else
        {
            _1224 = _1225;
            _1226 = _1227;
            continue;
        }
    }
    float _1284 = _1225 * 0.009947183541953563690185546875;
    float _1289 = dot(vec3(_899, _900, _901), vec3(_1014, _1015, _1016)) * 2.0;
    vec4 _1303 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_899 - (_1289 * _1014), _900 - (_1289 * _1015), _901 - (_1289 * _1016)), 4.0 - (_794 * 4.0));
    float _1308 = dot(vec3(_1031, _1033, _1034), vec3(_1014, _1015, _1016));
    float _1575 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1317 = (exp2(log2(1.0 - (isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1323 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1014, _1015, _1016), 0.0);
    float _1337 = (((((_947.x * cbMtdParam._m0[11u].w) + (_874.x * cbMtdParam._m0[11u].y)) + ((_993 * cbMtdParam._m0[9u].x) * _992)) + _1191) + _1194) + (((_1323.x * _722) + (_1317 * _1303.x)) * _1284);
    float _1344 = (((((_947.y * cbMtdParam._m0[11u].w) + (_874.y * cbMtdParam._m0[11u].y)) + ((_993 * cbMtdParam._m0[9u].y) * _992)) + _1192) + _1195) + (((_1323.y * _723) + (_1317 * _1303.y)) * _1284);
    float _1351 = (((((_947.z * cbMtdParam._m0[11u].w) + (_874.z * cbMtdParam._m0[11u].y)) + ((_993 * cbMtdParam._m0[9u].z) * _992)) + _1193) + _1196) + (((_1323.z * _724) + (_1317 * _1303.z)) * _1284);
    float _1586 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1597 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1608 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    bool _1359 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1370;
    _1370.x = _1359 ? ((_592 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0)));
    _1370.y = _1359 ? ((_595 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0)));
    _1370.z = _1359 ? ((_598 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0)));
    payload._m0 = _1370;
}


