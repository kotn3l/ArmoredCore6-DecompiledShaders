#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _48
{
    vec3 _m0;
};

struct _52
{
    vec2 _m0;
};

struct _55
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_SHL_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _48 payload;
hitAttributeEXT _52 hit;
layout(location = 1) rayPayloadEXT _55 _57;
layout(location = 2) rayPayloadEXT _55 _58;

vec3 _987;

void main()
{
    float _66 = float(gl_LaunchSizeEXT.y);
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _157;
    uint _159;
    uint _160;
    if (_116.x == 0u)
    {
        uint _125 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_117 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _151 & 65535u;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _154;
        }
        else
        {
            frontier_phi_3_2_ladder = _154;
            frontier_phi_3_2_ladder_1 = _152 >> 16u;
            frontier_phi_3_2_ladder_2 = _155;
        }
        _157 = frontier_phi_3_2_ladder;
        _159 = frontier_phi_3_2_ladder_2;
        _160 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    bool _169 = _116.w == 0u;
    bool _170 = _167 || _169;
    uint _172 = (_165 * _157) + 12u;
    uint _196;
    uint _197;
    uint _198;
    uint _199;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
        _199 = 20u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
        _199 = 24u;
    }
    bool _205 = _166 == 0u;
    uint _206;
    if (_205)
    {
        _206 = _199;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_169)
        {
            frontier_phi_9_10_ladder = _199 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _199 + 8u;
        }
        _206 = frontier_phi_9_10_ladder;
    }
    uvec4 _217 = texelFetch(l_geomAttrib_0, int((((_165 * _157) + 4u) + (_167 ? (_206 + 4u) : _206)) >> 2u));
    uint _218 = _217.x;
    float _222 = float(int(uint(int(_218 << 16u) >> int(16u))));
    float _223 = float(int(uint(int(_218) >> int(16u))));
    uint _225 = (_165 * _159) + 12u;
    uint _246;
    uint _247;
    uint _248;
    uint _249;
    if (_170)
    {
        uvec4 _227 = texelFetch(l_geomAttrib_0, int(_225 >> 2u));
        uint _228 = _227.x;
        _246 = _228 & 255u;
        _247 = (_228 >> 8u) & 255u;
        _248 = (_228 >> 16u) & 255u;
        _249 = 20u;
    }
    else
    {
        uint _234 = _225 >> 2u;
        uvec2 _240 = uvec2(texelFetch(l_geomAttrib_0, int(_234)).x, texelFetch(l_geomAttrib_0, int(_234 + 1u)).x);
        uint _241 = _240.x;
        _246 = _241 & 65535u;
        _247 = _241 >> 16u;
        _248 = _240.y & 65535u;
        _249 = 24u;
    }
    uint _253;
    if (_205)
    {
        _253 = _249;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_169)
        {
            frontier_phi_16_17_ladder = _249 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _249 + 8u;
        }
        _253 = frontier_phi_16_17_ladder;
    }
    uvec4 _262 = texelFetch(l_geomAttrib_0, int((((_165 * _159) + 4u) + (_167 ? (_253 + 4u) : _253)) >> 2u));
    uint _263 = _262.x;
    float _267 = float(int(uint(int(_263 << 16u) >> int(16u))));
    float _268 = float(int(uint(int(_263) >> int(16u))));
    uint _270 = (_165 * _160) + 12u;
    uint _291;
    uint _292;
    uint _293;
    uint _294;
    if (_170)
    {
        uvec4 _272 = texelFetch(l_geomAttrib_0, int(_270 >> 2u));
        uint _273 = _272.x;
        _291 = _273 & 255u;
        _292 = (_273 >> 8u) & 255u;
        _293 = (_273 >> 16u) & 255u;
        _294 = 20u;
    }
    else
    {
        uint _279 = _270 >> 2u;
        uvec2 _285 = uvec2(texelFetch(l_geomAttrib_0, int(_279)).x, texelFetch(l_geomAttrib_0, int(_279 + 1u)).x);
        uint _286 = _285.x;
        _291 = _286 & 65535u;
        _292 = _286 >> 16u;
        _293 = _285.y & 65535u;
        _294 = 24u;
    }
    uint _298;
    if (_205)
    {
        _298 = _294;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_169)
        {
            frontier_phi_23_24_ladder = _294 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _294 + 8u;
        }
        _298 = frontier_phi_23_24_ladder;
    }
    uvec4 _307 = texelFetch(l_geomAttrib_0, int((((_165 * _160) + 4u) + (_167 ? (_298 + 4u) : _298)) >> 2u));
    uint _308 = _307.x;
    float _312 = float(int(uint(int(_308 << 16u) >> int(16u))));
    float _313 = float(int(uint(int(_308) >> int(16u))));
    bool _315 = _116.z == 0u;
    float _351;
    float _352;
    float _353;
    if (_315)
    {
        uint _318 = _157 * 3u;
        uvec3 _327 = uvec3(texelFetch(l_geomPositionBuffer, int(_318)).x, texelFetch(l_geomPositionBuffer, int(_318 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_318 + 2u)).x);
        _351 = uintBitsToFloat(_327.x);
        _352 = uintBitsToFloat(_327.y);
        _353 = uintBitsToFloat(_327.z);
    }
    else
    {
        uint _335 = _157 * 2u;
        uvec2 _341 = uvec2(texelFetch(l_geomPositionBuffer, int(_335)).x, texelFetch(l_geomPositionBuffer, int(_335 + 1u)).x);
        uint _342 = _341.x;
        _351 = unpackHalf2x16(_342).x;
        _352 = unpackHalf2x16(_342 >> 16u).x;
        _353 = unpackHalf2x16(_341.y).x;
    }
    float _389;
    float _390;
    float _391;
    if (_315)
    {
        uint _356 = _159 * 3u;
        uvec3 _365 = uvec3(texelFetch(l_geomPositionBuffer, int(_356)).x, texelFetch(l_geomPositionBuffer, int(_356 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_356 + 2u)).x);
        _389 = uintBitsToFloat(_365.x);
        _390 = uintBitsToFloat(_365.y);
        _391 = uintBitsToFloat(_365.z);
    }
    else
    {
        uint _373 = _159 * 2u;
        uvec2 _379 = uvec2(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x);
        uint _380 = _379.x;
        _389 = unpackHalf2x16(_380).x;
        _390 = unpackHalf2x16(_380 >> 16u).x;
        _391 = unpackHalf2x16(_379.y).x;
    }
    float _427;
    float _428;
    float _429;
    if (_315)
    {
        uint _394 = _160 * 3u;
        uvec3 _403 = uvec3(texelFetch(l_geomPositionBuffer, int(_394)).x, texelFetch(l_geomPositionBuffer, int(_394 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_394 + 2u)).x);
        _427 = uintBitsToFloat(_403.x);
        _428 = uintBitsToFloat(_403.y);
        _429 = uintBitsToFloat(_403.z);
    }
    else
    {
        uint _411 = _160 * 2u;
        uvec2 _417 = uvec2(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x);
        uint _418 = _417.x;
        _427 = unpackHalf2x16(_418).x;
        _428 = unpackHalf2x16(_418 >> 16u).x;
        _429 = unpackHalf2x16(_417.y).x;
    }
    float _432 = (1.0 - hit._m0.x) - hit._m0.y;
    float _473 = _389 - _351;
    float _474 = _390 - _352;
    float _475 = _391 - _353;
    float _478 = fma(_475, gl_ObjectToWorldEXT[2u].x, fma(_474, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _473));
    float _481 = fma(_475, gl_ObjectToWorldEXT[2u].y, fma(_474, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _473));
    float _484 = fma(_475, gl_ObjectToWorldEXT[2u].z, fma(_474, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _473));
    float _485 = _427 - _351;
    float _486 = _428 - _352;
    float _487 = _429 - _353;
    float _490 = fma(_487, gl_ObjectToWorldEXT[2u].x, fma(_486, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _485));
    float _493 = fma(_487, gl_ObjectToWorldEXT[2u].y, fma(_486, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _485));
    float _496 = fma(_487, gl_ObjectToWorldEXT[2u].z, fma(_486, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _485));
    float _503 = (((float(_196) * _432) + (-127.0)) + (float(_246) * hit._m0.x)) + (float(_291) * hit._m0.y);
    float _506 = (((float(_197) * _432) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y);
    float _509 = (((float(_198) * _432) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _510 = _503 * 0.0078740157186985015869140625;
    float _512 = _506 * 0.0078740157186985015869140625;
    float _513 = _509 * 0.0078740157186985015869140625;
    uvec2 _529 = uvec2(textureSize(M_SHL_snp_0_Texture2D_2, int(0u)));
    float _593;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _549 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _555 = (_496 * _481) - (_493 * _484);
        float _558 = (_490 * _484) - (_496 * _478);
        float _561 = (_493 * _478) - (_490 * _481);
        float _590 = ((log2((((float(_529.y) * 0.5) * float(_529.x)) * abs((((_313 - _223) * (_267 - _222)) - ((_312 - _222) * (_268 - _223))) * 2.384185791015625e-07)) / (sqrt(((_558 * _558) + (_561 * _561)) + (_555 * _555)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _66)))))) / abs(dot(vec3(_549 * gl_WorldRayDirectionEXT.x, _549 * gl_WorldRayDirectionEXT.y, _549 * gl_WorldRayDirectionEXT.z), vec3(_510, _512, _513))));
        _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    }
    else
    {
        _593 = 0.0;
    }
    vec4 _597 = textureLod(sampler2D(M_SHL_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((((_267 * hit._m0.x) + (_222 * _432)) + (_312 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_268 * hit._m0.x) + (_223 * _432)) + (_313 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _593);
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _609 = (cbMtdParam._m0[9u].y * _599) * cbMtdParam._m0[9u].z;
    float _611 = (cbMtdParam._m0[9u].y * _600) * cbMtdParam._m0[9u].z;
    float _613 = (cbMtdParam._m0[9u].y * _601) * cbMtdParam._m0[9u].z;
    float _614 = isnan(_611) ? _609 : (isnan(_609) ? _611 : max(_609, _611));
    float _615 = isnan(_613) ? _614 : (isnan(_614) ? _613 : max(_614, _613));
    float _618;
    float _620;
    if (_615 < 1.1920928955078125e-07)
    {
        _618 = 0.0;
        _620 = 0.0;
    }
    else
    {
        float _644 = isnan(_611) ? _609 : (isnan(_609) ? _611 : min(_609, _611));
        float _646 = _615 - (isnan(_613) ? _644 : (isnan(_644) ? _613 : min(_644, _613)));
        float _621 = _646 / _615;
        float frontier_phi_38_39_ladder;
        float frontier_phi_38_39_ladder_1;
        if (_646 < 1.1920928955078125e-07)
        {
            frontier_phi_38_39_ladder = _621;
            frontier_phi_38_39_ladder_1 = 0.0;
        }
        else
        {
            float _851;
            if (_615 == _609)
            {
                _851 = (((cbMtdParam._m0[9u].y * (_600 - _601)) * cbMtdParam._m0[9u].z) / _646) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_50_47_ladder;
                if (_615 == _611)
                {
                    frontier_phi_50_47_ladder = ((((cbMtdParam._m0[9u].y * (_601 - _599)) * cbMtdParam._m0[9u].z) / _646) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_50_47_ladder = ((((cbMtdParam._m0[9u].y * (_599 - _600)) * cbMtdParam._m0[9u].z) / _646) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _851 = frontier_phi_50_47_ladder;
            }
            float _856 = (_851 < 0.0) ? (_851 + 1.0) : _851;
            frontier_phi_38_39_ladder = _621;
            frontier_phi_38_39_ladder_1 = _856 - floor(_856);
        }
        _618 = frontier_phi_38_39_ladder_1;
        _620 = frontier_phi_38_39_ladder;
    }
    float _622 = _620 + cbMtdParam._m0[10u].x;
    float _626 = fract(cbMtdParam._m0[9u].w + _618) * 6.0;
    uint _629 = uint(int(floor(_626)));
    float _631 = _626 - float(int(_629));
    float _633 = (1.0 - _622) * _615;
    float _636 = (1.0 - (_631 * _622)) * _615;
    float _640 = (1.0 - ((1.0 - _631) * _622)) * _615;
    float _648;
    float _650;
    float _651;
    if ((_629 == 0u) || (_629 == 6u))
    {
        _648 = _615;
        _650 = _640;
        _651 = _633;
    }
    else
    {
        float frontier_phi_40_41_ladder;
        float frontier_phi_40_41_ladder_1;
        float frontier_phi_40_41_ladder_2;
        if (_629 == 1u)
        {
            frontier_phi_40_41_ladder = _633;
            frontier_phi_40_41_ladder_1 = _636;
            frontier_phi_40_41_ladder_2 = _615;
        }
        else
        {
            float frontier_phi_40_41_ladder_45_ladder;
            float frontier_phi_40_41_ladder_45_ladder_1;
            float frontier_phi_40_41_ladder_45_ladder_2;
            if (_629 == 2u)
            {
                frontier_phi_40_41_ladder_45_ladder = _640;
                frontier_phi_40_41_ladder_45_ladder_1 = _633;
                frontier_phi_40_41_ladder_45_ladder_2 = _615;
            }
            else
            {
                float frontier_phi_40_41_ladder_45_ladder_49_ladder;
                float frontier_phi_40_41_ladder_45_ladder_49_ladder_1;
                float frontier_phi_40_41_ladder_45_ladder_49_ladder_2;
                if (_629 == 3u)
                {
                    frontier_phi_40_41_ladder_45_ladder_49_ladder = _615;
                    frontier_phi_40_41_ladder_45_ladder_49_ladder_1 = _633;
                    frontier_phi_40_41_ladder_45_ladder_49_ladder_2 = _636;
                }
                else
                {
                    bool _923 = _629 == 4u;
                    frontier_phi_40_41_ladder_45_ladder_49_ladder = _923 ? _615 : _636;
                    frontier_phi_40_41_ladder_45_ladder_49_ladder_1 = _923 ? _640 : _615;
                    frontier_phi_40_41_ladder_45_ladder_49_ladder_2 = _633;
                }
                frontier_phi_40_41_ladder_45_ladder = frontier_phi_40_41_ladder_45_ladder_49_ladder;
                frontier_phi_40_41_ladder_45_ladder_1 = frontier_phi_40_41_ladder_45_ladder_49_ladder_1;
                frontier_phi_40_41_ladder_45_ladder_2 = frontier_phi_40_41_ladder_45_ladder_49_ladder_2;
            }
            frontier_phi_40_41_ladder = frontier_phi_40_41_ladder_45_ladder;
            frontier_phi_40_41_ladder_1 = frontier_phi_40_41_ladder_45_ladder_1;
            frontier_phi_40_41_ladder_2 = frontier_phi_40_41_ladder_45_ladder_2;
        }
        _648 = frontier_phi_40_41_ladder_1;
        _650 = frontier_phi_40_41_ladder_2;
        _651 = frontier_phi_40_41_ladder;
    }
    float _659 = inversesqrt(dot(vec3(_510, _512, _513), vec3(_510, _512, _513)));
    float _660 = _659 * _510;
    float _661 = _659 * _512;
    float _662 = _659 * _513;
    float _674 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _675 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _676 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _680 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _681 = _680 * gl_WorldRayDirectionEXT.x;
    float _682 = _680 * gl_WorldRayDirectionEXT.y;
    float _683 = _680 * gl_WorldRayDirectionEXT.z;
    float _684 = (-0.0) - _681;
    float _686 = (-0.0) - _682;
    float _687 = (-0.0) - _683;
    float _693 = float(gl_LaunchIDEXT.x);
    float _694 = float(gl_LaunchIDEXT.y);
    float _697 = float(gl_LaunchSizeEXT.x);
    float _711 = fract(fract(sin(dot(vec2(_693 / _697, _694 / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _724 = fract(fract(sin(dot(vec2((_693 + 128.0) / _697, (_694 + 128.0) / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _58._m0 = 1u;
    uvec4 _734 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _735 = _734.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _735, _734.w, _735, vec3(_674, _675, _676), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _803;
    float _804;
    float _805;
    if (_58._m0 == 0u)
    {
        float _758 = g_sceneCB._m0[4u].x - _681;
        float _759 = g_sceneCB._m0[4u].y - _682;
        float _760 = g_sceneCB._m0[4u].z - _683;
        float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
        float _768 = dot(vec3(_660, _661, _662), vec3(g_sceneCB._m0[4u].xyz));
        float _1116 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _771 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        float _772 = dot(vec3(_660, _661, _662), vec3(_684, _686, _687));
        float _1127 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_758 * _764, _759 * _764, _760 * _764));
        float _1138 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _787 = (exp2(log2(1.0 - (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _793 = (0.5 / ((_771 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0))))) * _771;
        float _1149 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _795 = (isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0))) * 0.31831014156341552734375;
        _803 = (_787 * g_sceneCB._m0[5u].x) * _795;
        _804 = (_787 * g_sceneCB._m0[5u].y) * _795;
        _805 = (_787 * g_sceneCB._m0[5u].z) * _795;
    }
    else
    {
        _803 = 0.0;
        _804 = 0.0;
        _805 = 0.0;
    }
    bool _807 = abs(_661) < 0.89999997615814208984375;
    float _809 = float(_807);
    float _810 = _807 ? 0.0 : 1.0;
    float _813 = (_809 * _662) - (_810 * _661);
    float _814 = _810 * _660;
    float _816 = (-0.0) - (_660 * _809);
    float _820 = inversesqrt(dot(vec3(_813, _814, _816), vec3(_813, _814, _816)));
    float _821 = _813 * _820;
    float _822 = _814 * _820;
    float _823 = _820 * _816;
    float _826 = (_822 * _662) - (_823 * _661);
    float _829 = (_823 * _660) - (_821 * _662);
    float _832 = (_821 * _661) - (_822 * _660);
    float _842;
    float _870;
    float _841 = 0.0;
    uint _843 = 0u;
    float _847;
    bool _849;
    for (;;)
    {
        _847 = (float(_843) + _711) * 0.03125;
        _849 = _843 == 0u;
        float frontier_phi_53_pred;
        if (_849)
        {
            frontier_phi_53_pred = 0.0;
        }
        else
        {
            float _992;
            float _993;
            uint _995;
            _992 = 0.0;
            _993 = 0.5;
            _995 = _843;
            float _871;
            for (;;)
            {
                _871 = ((_995 & 1u) != 0u) ? (_993 + _992) : _992;
                uint _996 = _995 >> 1u;
                if (_996 == 0u)
                {
                    break;
                }
                else
                {
                    _992 = _871;
                    _993 *= 0.5;
                    _995 = _996;
                }
            }
            frontier_phi_53_pred = _871;
        }
        _870 = frontier_phi_53_pred;
        float _872 = _870 + _724;
        float _877 = sqrt(_847);
        float _878 = ((_872 > 1.0) ? (_872 + (-1.0)) : _872) * 6.283185482025146484375;
        float _881 = cos(_878) * _877;
        float _883 = sin(_878) * _877;
        float _885 = sqrt(1.0 - _847);
        float _898 = ((_885 * _660) + (_881 * _826)) + (_883 * _821);
        float _899 = ((_885 * _661) + (_881 * _829)) + (_883 * _822);
        float _900 = ((_885 * _662) + (_881 * _832)) + (_883 * _823);
        _57._m0 = 1u;
        uvec4 _904 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _905 = _904.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _905, _904.w, _905, vec3(_674, _675, _676), 9.9999997473787516355514526367188e-05, vec3(_898, _899, _900), 10000.0, 1);
        float _911 = dot(vec3(_660, _661, _662), vec3(_898, _899, _900));
        float _1160 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _914 = isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0));
        _842 = ((float(_57._m0 == 0u) * _914) / (_914 * 0.3183098733425140380859375)) + _841;
        uint _844 = _843 + 1u;
        if (_844 == 32u)
        {
            break;
        }
        else
        {
            _841 = _842;
            _843 = _844;
            continue;
        }
    }
    float _924 = _842 * 0.009947183541953563690185546875;
    float _929 = dot(vec3(_681, _682, _683), vec3(_660, _661, _662)) * 2.0;
    vec4 _941 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_681 - (_929 * _660), _682 - (_929 * _661), _683 - (_929 * _662)), 4.0);
    float _946 = dot(vec3(_684, _686, _687), vec3(_660, _661, _662));
    float _1171 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _955 = (exp2(log2(1.0 - (isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _963 = (_803 + (_648 * cbMtdParam._m0[9u].x)) + ((_941.x * _924) * _955);
    float _965 = (_804 + (_650 * cbMtdParam._m0[9u].x)) + ((_941.y * _924) * _955);
    float _967 = (_805 + (_651 * cbMtdParam._m0[9u].x)) + ((_941.z * _924) * _955);
    float _1182 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _1193 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _1204 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    bool _975 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _986;
    _986.x = _975 ? ((_503 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0)));
    _986.y = _975 ? ((_506 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0)));
    _986.z = _975 ? ((_509 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0)));
    payload._m0 = _986;
}


