#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1333;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _156 & 65535u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _157 >> 16u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        _162 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
        _165 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _612 * _606;
    float _614 = _612 * _607;
    float _615 = _612 * _608;
    uvec2 _633 = uvec2(textureSize(M_AMSN_V_Snow2_snp_0_Texture2D_1, int(0u)));
    bool _638 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _691;
    if (_638)
    {
        float _649 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _655 = (_564 * _549) - (_561 * _552);
        float _658 = (_558 * _552) - (_564 * _546);
        float _661 = (_561 * _546) - (_558 * _549);
        float _688 = ((log2((((float(_633.y) * 0.5) * float(_633.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_658 * _658) + (_661 * _661)) + (_655 * _655)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_649 * gl_WorldRayDirectionEXT.x, _649 * gl_WorldRayDirectionEXT.y, _649 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    }
    else
    {
        _691 = 0.0;
    }
    vec4 _695 = textureLod(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _565) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _566) + cbTextureTilingScale._m0[1u].w), _691);
    float _699 = _695.z;
    float _702 = (_695.x * 2.0) + (-1.0);
    float _704 = (_695.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _1418 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0))));
    float _713 = fma(_710, _577, fma(_704, _593, _702 * _613));
    float _716 = fma(_710, _579, fma(_704, _594, _702 * _614));
    float _719 = fma(_710, _580, fma(_704, _595, _702 * _615));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    float _731 = cbMtdParam._m0[9u].x + dot(vec4(_723 * _713, _723 * _716, _723 * _719, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _1429 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
    uvec2 _744 = uvec2(textureSize(M_AMSN_V_Snow2_snp_0_Texture2D_0, int(0u)));
    float _795;
    if (_638)
    {
        float _755 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _761 = (_564 * _549) - (_561 * _552);
        float _764 = (_558 * _552) - (_564 * _546);
        float _767 = (_561 * _546) - (_558 * _549);
        float _793 = ((log2((((float(_744.y) * 0.5) * float(_744.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_764 * _764) + (_767 * _767)) + (_761 * _761)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_755 * gl_WorldRayDirectionEXT.x, _755 * gl_WorldRayDirectionEXT.y, _755 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _795 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    }
    else
    {
        _795 = 0.0;
    }
    vec4 _798 = textureLod(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _565) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _566) + cbTextureTilingScale._m0[0u].w), _795);
    uvec2 _814 = uvec2(textureSize(M_AMSN_V_Snow2_snp_0_Texture2D_2, int(0u)));
    float _865;
    if (_638)
    {
        float _825 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _831 = (_564 * _549) - (_561 * _552);
        float _834 = (_558 * _552) - (_564 * _546);
        float _837 = (_561 * _546) - (_558 * _549);
        float _863 = ((log2((((float(_814.y) * 0.5) * float(_814.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_834 * _834) + (_837 * _837)) + (_831 * _831)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_825 * gl_WorldRayDirectionEXT.x, _825 * gl_WorldRayDirectionEXT.y, _825 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _865 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    }
    else
    {
        _865 = 0.0;
    }
    vec4 _867 = textureLod(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _565) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _566) + cbTextureTilingScale._m0[2u].w), _865);
    float _869 = _867.x;
    float _870 = _867.y;
    float _871 = _867.z;
    float _878 = ((_798.x - _869) * _732) + _869;
    float _879 = ((_798.y - _870) * _732) + _870;
    float _880 = ((_798.z - _871) * _732) + _871;
    uvec2 _892 = uvec2(textureSize(M_AMSN_V_Snow2_snp_0_Texture2D_3, int(0u)));
    float _896 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _897 = _896 * gl_WorldRayDirectionEXT.x;
    float _898 = _896 * gl_WorldRayDirectionEXT.y;
    float _899 = _896 * gl_WorldRayDirectionEXT.z;
    float _943;
    if (_638)
    {
        float _909 = (_564 * _549) - (_561 * _552);
        float _912 = (_558 * _552) - (_564 * _546);
        float _915 = (_561 * _546) - (_558 * _549);
        float _941 = ((log2((((float(_892.y) * 0.5) * float(_892.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_912 * _912) + (_915 * _915)) + (_909 * _909)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_897, _898, _899), vec3(_577, _579, _580))));
        _943 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    }
    else
    {
        _943 = 0.0;
    }
    vec4 _945 = textureLod(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _565) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _566) + cbTextureTilingScale._m0[3u].w), _943);
    float _952 = (_945.x * 2.0) + (-1.0);
    float _953 = (_945.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _1455 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _962 = ((_945.z - _699) * _732) + _699;
    float _969 = ((_952 - _702) * _732) + _702;
    float _970 = ((_953 - _704) * _732) + _704;
    float _971 = ((sqrt(1.0 - (isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0)))) - _710) * _732) + _710;
    float _974 = fma(_971, _577, fma(_970, _593, _969 * _613));
    float _977 = fma(_971, _579, fma(_970, _594, _969 * _614));
    float _980 = fma(_971, _580, fma(_970, _595, _969 * _615));
    float _984 = inversesqrt(dot(vec3(_974, _977, _980), vec3(_974, _977, _980)));
    float _985 = _984 * _974;
    float _986 = _984 * _977;
    float _987 = _984 * _980;
    float _999 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1000 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1001 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1002 = (-0.0) - _897;
    float _1004 = (-0.0) - _898;
    float _1005 = (-0.0) - _899;
    float _1011 = float(gl_LaunchIDEXT.x);
    float _1012 = float(gl_LaunchIDEXT.y);
    float _1015 = float(gl_LaunchSizeEXT.x);
    float _1029 = fract(fract(sin(dot(vec2(_1011 / _1015, _1012 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1042 = fract(fract(sin(dot(vec2((_1011 + 128.0) / _1015, (_1012 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _1052 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1053 = _1052.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1053, _1052.w, _1053, vec3(_999, _1000, _1001), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (_63._m0 == 0u)
    {
        float _1074 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_985, _986, _987));
        float _1466 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1077 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
        float _1096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _962) * 0.949999988079071044921875);
        float _1097 = _1096 * _1096;
        float _1098 = g_sceneCB._m0[4u].x - _897;
        float _1099 = g_sceneCB._m0[4u].y - _898;
        float _1100 = g_sceneCB._m0[4u].z - _899;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1105 = _1104 * _1098;
        float _1106 = _1104 * _1099;
        float _1107 = _1104 * _1100;
        float _1108 = dot(vec3(_985, _986, _987), vec3(g_sceneCB._m0[4u].xyz));
        float _1477 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1111 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        float _1112 = dot(vec3(_985, _986, _987), vec3(_1002, _1004, _1005));
        float _1488 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1115 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        float _1116 = dot(vec3(_985, _986, _987), vec3(_1105, _1106, _1107));
        float _1499 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1119 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        float _1120 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1105, _1106, _1107));
        float _1510 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1097 * _1097;
        float _1128 = ((_1119 * _1119) * (_1124 + (-1.0))) + 1.0;
        float _1140 = (exp2(log2(1.0 - (isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1142 = 1.0 - _1097;
        float _1153 = (0.5 / (((_1115 * ((_1111 * _1142) + _1097)) + 9.9999999392252902907785028219223e-09) + (((_1115 * _1142) + _1097) * _1111))) * _1111;
        float _1521 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1155 = (isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0))) * (_1124 / ((_1128 * _1128) * 3.141590118408203125));
        _1162 = ((_878 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1077;
        _1163 = ((_879 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1077;
        _1164 = ((_880 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1077;
        _1165 = (_1140 * g_sceneCB._m0[5u].x) * _1155;
        _1166 = (_1140 * g_sceneCB._m0[5u].y) * _1155;
        _1167 = (_1140 * g_sceneCB._m0[5u].z) * _1155;
    }
    else
    {
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    bool _1169 = abs(_986) < 0.89999997615814208984375;
    float _1171 = float(_1169);
    float _1172 = _1169 ? 0.0 : 1.0;
    float _1175 = (_1171 * _987) - (_1172 * _986);
    float _1176 = _1172 * _985;
    float _1178 = (-0.0) - (_985 * _1171);
    float _1182 = inversesqrt(dot(vec3(_1175, _1176, _1178), vec3(_1175, _1176, _1178)));
    float _1183 = _1175 * _1182;
    float _1184 = _1176 * _1182;
    float _1185 = _1182 * _1178;
    float _1188 = (_1184 * _987) - (_1185 * _986);
    float _1191 = (_1185 * _985) - (_1183 * _987);
    float _1194 = (_1183 * _986) - (_1184 * _985);
    float _1196;
    float _1204;
    float _1195 = 0.0;
    uint _1197 = 0u;
    float _1201;
    bool _1203;
    for (;;)
    {
        _1201 = (float(_1197) + _1029) * 0.03125;
        _1203 = _1197 == 0u;
        float frontier_phi_47_pred;
        if (_1203)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1338;
            float _1339;
            uint _1341;
            _1338 = 0.0;
            _1339 = 0.5;
            _1341 = _1197;
            float _1205;
            for (;;)
            {
                _1205 = ((_1341 & 1u) != 0u) ? (_1339 + _1338) : _1338;
                uint _1342 = _1341 >> 1u;
                if (_1342 == 0u)
                {
                    break;
                }
                else
                {
                    _1338 = _1205;
                    _1339 *= 0.5;
                    _1341 = _1342;
                }
            }
            frontier_phi_47_pred = _1205;
        }
        _1204 = frontier_phi_47_pred;
        float _1206 = _1204 + _1042;
        float _1210 = sqrt(_1201);
        float _1211 = ((_1206 > 1.0) ? (_1206 + (-1.0)) : _1206) * 6.283185482025146484375;
        float _1214 = cos(_1211) * _1210;
        float _1216 = sin(_1211) * _1210;
        float _1218 = sqrt(1.0 - _1201);
        float _1231 = ((_1218 * _985) + (_1214 * _1188)) + (_1216 * _1183);
        float _1232 = ((_1218 * _986) + (_1214 * _1191)) + (_1216 * _1184);
        float _1233 = ((_1218 * _987) + (_1214 * _1194)) + (_1216 * _1185);
        _62._m0 = 1u;
        uvec4 _1237 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1238 = _1237.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1238, _1237.w, _1238, vec3(_999, _1000, _1001), 9.9999997473787516355514526367188e-05, vec3(_1231, _1232, _1233), 10000.0, 1);
        float _1244 = dot(vec3(_985, _986, _987), vec3(_1231, _1232, _1233));
        float _1532 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1247 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1196 = ((float(_62._m0 == 0u) * _1247) / (_1247 * 0.3183098733425140380859375)) + _1195;
        uint _1198 = _1197 + 1u;
        if (_1198 == 32u)
        {
            break;
        }
        else
        {
            _1195 = _1196;
            _1197 = _1198;
            continue;
        }
    }
    float _1255 = _1196 * 0.009947183541953563690185546875;
    float _1260 = dot(vec3(_897, _898, _899), vec3(_985, _986, _987)) * 2.0;
    vec4 _1274 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_897 - (_1260 * _985), _898 - (_1260 * _986), _899 - (_1260 * _987)), 4.0 - (_962 * 4.0));
    float _1279 = dot(vec3(_1002, _1004, _1005), vec3(_985, _986, _987));
    float _1543 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1288 = (exp2(log2(1.0 - (isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1294 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_985, _986, _987), 0.0);
    float _1305 = (_1165 + _1162) + (((_1294.x * _878) + (_1288 * _1274.x)) * _1255);
    float _1309 = (_1166 + _1163) + (((_1294.y * _879) + (_1288 * _1274.y)) * _1255);
    float _1313 = (_1167 + _1164) + (((_1294.z * _880) + (_1288 * _1274.z)) * _1255);
    float _1554 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _1565 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
    float _1576 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    bool _1321 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1332;
    _1332.x = _1321 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0)));
    _1332.y = _1321 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0)));
    _1332.z = _1321 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0)));
    payload._m0 = _1332;
}


