#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _39
{
    uint _m0;
};

struct _43
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _39 payload;
hitAttributeEXT _43 hit;

void main()
{
    uint _49 = payload._m0;
    float _87 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _107 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _108 = _107.y;
    uint _148;
    uint _150;
    uint _151;
    if (_107.x == 0u)
    {
        uint _116 = (_108 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _125 = uvec3(texelFetch(l_geomIndexBuffer, int(_116)).x, texelFetch(l_geomIndexBuffer, int(_116 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_116 + 2u)).x);
        _148 = _125.x;
        _150 = _125.y;
        _151 = _125.z;
    }
    else
    {
        uint _129 = uint(gl_PrimitiveID) * 6u;
        uint _131 = _129 & 4294967292u;
        uint _134 = (_108 + _131) >> 2u;
        uvec2 _141 = uvec2(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x);
        uint _142 = _141.x;
        uint _143 = _141.y;
        uint _145 = _142 >> 16u;
        uint _146 = _143 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_131 == _129)
        {
            frontier_phi_3_2_ladder = _142 & 65535u;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _146;
        }
        else
        {
            frontier_phi_3_2_ladder = _145;
            frontier_phi_3_2_ladder_1 = _146;
            frontier_phi_3_2_ladder_2 = _143 >> 16u;
        }
        _148 = frontier_phi_3_2_ladder;
        _150 = frontier_phi_3_2_ladder_1;
        _151 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _155 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _156 = _155.x;
    uint _157 = _155.z;
    bool _158 = _157 != 0u;
    bool _160 = _107.w == 0u;
    bool _161 = _158 || _160;
    uint _163 = (_156 * _148) + 12u;
    uint _187;
    uint _188;
    uint _189;
    uint _190;
    if (_161)
    {
        uvec4 _166 = texelFetch(l_geomAttrib_0, int(_163 >> 2u));
        uint _167 = _166.x;
        _187 = _167 & 255u;
        _188 = (_167 >> 8u) & 255u;
        _189 = (_167 >> 16u) & 255u;
        _190 = 20u;
    }
    else
    {
        uint _175 = _163 >> 2u;
        uvec2 _181 = uvec2(texelFetch(l_geomAttrib_0, int(_175)).x, texelFetch(l_geomAttrib_0, int(_175 + 1u)).x);
        uint _182 = _181.x;
        _187 = _182 & 65535u;
        _188 = _182 >> 16u;
        _189 = _181.y & 65535u;
        _190 = 24u;
    }
    bool _196 = _157 == 0u;
    uint _197;
    if (_196)
    {
        _197 = _190;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_160)
        {
            frontier_phi_9_10_ladder = _190 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _190 + 8u;
        }
        _197 = frontier_phi_9_10_ladder;
    }
    uvec4 _208 = texelFetch(l_geomAttrib_0, int((((_156 * _148) + 4u) + (_158 ? (_197 + 4u) : _197)) >> 2u));
    uint _209 = _208.x;
    float _213 = float(int(uint(int(_209 << 16u) >> int(16u))));
    float _214 = float(int(uint(int(_209) >> int(16u))));
    uint _216 = (_156 * _150) + 12u;
    uint _237;
    uint _238;
    uint _239;
    uint _240;
    if (_161)
    {
        uvec4 _218 = texelFetch(l_geomAttrib_0, int(_216 >> 2u));
        uint _219 = _218.x;
        _237 = _219 & 255u;
        _238 = (_219 >> 8u) & 255u;
        _239 = (_219 >> 16u) & 255u;
        _240 = 20u;
    }
    else
    {
        uint _225 = _216 >> 2u;
        uvec2 _231 = uvec2(texelFetch(l_geomAttrib_0, int(_225)).x, texelFetch(l_geomAttrib_0, int(_225 + 1u)).x);
        uint _232 = _231.x;
        _237 = _232 & 65535u;
        _238 = _232 >> 16u;
        _239 = _231.y & 65535u;
        _240 = 24u;
    }
    uint _244;
    if (_196)
    {
        _244 = _240;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_160)
        {
            frontier_phi_16_17_ladder = _240 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _240 + 8u;
        }
        _244 = frontier_phi_16_17_ladder;
    }
    uvec4 _253 = texelFetch(l_geomAttrib_0, int((((_156 * _150) + 4u) + (_158 ? (_244 + 4u) : _244)) >> 2u));
    uint _254 = _253.x;
    float _258 = float(int(uint(int(_254 << 16u) >> int(16u))));
    float _259 = float(int(uint(int(_254) >> int(16u))));
    uint _261 = (_156 * _151) + 12u;
    uint _282;
    uint _283;
    uint _284;
    uint _285;
    if (_161)
    {
        uvec4 _263 = texelFetch(l_geomAttrib_0, int(_261 >> 2u));
        uint _264 = _263.x;
        _282 = _264 & 255u;
        _283 = (_264 >> 8u) & 255u;
        _284 = (_264 >> 16u) & 255u;
        _285 = 20u;
    }
    else
    {
        uint _270 = _261 >> 2u;
        uvec2 _276 = uvec2(texelFetch(l_geomAttrib_0, int(_270)).x, texelFetch(l_geomAttrib_0, int(_270 + 1u)).x);
        uint _277 = _276.x;
        _282 = _277 & 65535u;
        _283 = _277 >> 16u;
        _284 = _276.y & 65535u;
        _285 = 24u;
    }
    uint _289;
    if (_196)
    {
        _289 = _285;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_160)
        {
            frontier_phi_23_24_ladder = _285 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _285 + 8u;
        }
        _289 = frontier_phi_23_24_ladder;
    }
    uvec4 _298 = texelFetch(l_geomAttrib_0, int((((_156 * _151) + 4u) + (_158 ? (_289 + 4u) : _289)) >> 2u));
    uint _299 = _298.x;
    float _303 = float(int(uint(int(_299 << 16u) >> int(16u))));
    float _304 = float(int(uint(int(_299) >> int(16u))));
    bool _306 = _107.z == 0u;
    float _342;
    float _343;
    float _344;
    if (_306)
    {
        uint _309 = _148 * 3u;
        uvec3 _318 = uvec3(texelFetch(l_geomPositionBuffer, int(_309)).x, texelFetch(l_geomPositionBuffer, int(_309 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_309 + 2u)).x);
        _342 = uintBitsToFloat(_318.x);
        _343 = uintBitsToFloat(_318.y);
        _344 = uintBitsToFloat(_318.z);
    }
    else
    {
        uint _326 = _148 * 2u;
        uvec2 _332 = uvec2(texelFetch(l_geomPositionBuffer, int(_326)).x, texelFetch(l_geomPositionBuffer, int(_326 + 1u)).x);
        uint _333 = _332.x;
        _342 = unpackHalf2x16(_333).x;
        _343 = unpackHalf2x16(_333 >> 16u).x;
        _344 = unpackHalf2x16(_332.y).x;
    }
    float _380;
    float _381;
    float _382;
    if (_306)
    {
        uint _347 = _150 * 3u;
        uvec3 _356 = uvec3(texelFetch(l_geomPositionBuffer, int(_347)).x, texelFetch(l_geomPositionBuffer, int(_347 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_347 + 2u)).x);
        _380 = uintBitsToFloat(_356.x);
        _381 = uintBitsToFloat(_356.y);
        _382 = uintBitsToFloat(_356.z);
    }
    else
    {
        uint _364 = _150 * 2u;
        uvec2 _370 = uvec2(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x);
        uint _371 = _370.x;
        _380 = unpackHalf2x16(_371).x;
        _381 = unpackHalf2x16(_371 >> 16u).x;
        _382 = unpackHalf2x16(_370.y).x;
    }
    float _418;
    float _419;
    float _420;
    if (_306)
    {
        uint _385 = _151 * 3u;
        uvec3 _394 = uvec3(texelFetch(l_geomPositionBuffer, int(_385)).x, texelFetch(l_geomPositionBuffer, int(_385 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_385 + 2u)).x);
        _418 = uintBitsToFloat(_394.x);
        _419 = uintBitsToFloat(_394.y);
        _420 = uintBitsToFloat(_394.z);
    }
    else
    {
        uint _402 = _151 * 2u;
        uvec2 _408 = uvec2(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x);
        uint _409 = _408.x;
        _418 = unpackHalf2x16(_409).x;
        _419 = unpackHalf2x16(_409 >> 16u).x;
        _420 = unpackHalf2x16(_408.y).x;
    }
    float _423 = (1.0 - hit._m0.x) - hit._m0.y;
    float _455 = _380 - _342;
    float _456 = _381 - _343;
    float _457 = _382 - _344;
    float _460 = fma(_457, gl_ObjectToWorldEXT[2u].x, fma(_456, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _455));
    float _463 = fma(_457, gl_ObjectToWorldEXT[2u].y, fma(_456, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _455));
    float _466 = fma(_457, gl_ObjectToWorldEXT[2u].z, fma(_456, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _455));
    float _467 = _418 - _342;
    float _468 = _419 - _343;
    float _469 = _420 - _344;
    float _472 = fma(_469, gl_ObjectToWorldEXT[2u].x, fma(_468, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _467));
    float _475 = fma(_469, gl_ObjectToWorldEXT[2u].y, fma(_468, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _467));
    float _478 = fma(_469, gl_ObjectToWorldEXT[2u].z, fma(_468, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _467));
    uvec2 _493 = uvec2(textureSize(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, int(0u)));
    float _580;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _536 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _542 = (_478 * _463) - (_475 * _466);
        float _545 = (_472 * _466) - (_478 * _460);
        float _548 = (_475 * _460) - (_472 * _463);
        float _575 = log2(abs(sqrt(((_88 * _88) + (_87 * _87)) + (_89 * _89)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_536 * gl_WorldRayDirectionEXT.x, _536 * gl_WorldRayDirectionEXT.y, _536 * gl_WorldRayDirectionEXT.z), vec3(((((float(_187) * _423) + (-127.0)) + (float(_237) * hit._m0.x)) + (float(_282) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _423) + (-127.0)) + (float(_238) * hit._m0.x)) + (float(_283) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_189) * _423) + (-127.0)) + (float(_239) * hit._m0.x)) + (float(_284) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _577 = ((log2((((float(_493.y) * 0.5) * float(_493.x)) * abs((((_304 - _214) * (_258 - _213)) - ((_303 - _213) * (_259 - _214))) * 2.384185791015625e-07)) / (sqrt(((_545 * _545) + (_548 * _548)) + (_542 * _542)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _575;
        _580 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    }
    else
    {
        _580 = 0.0;
    }
    if (textureLod(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((((_258 * hit._m0.x) + (_213 * _423)) + (_303 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_259 * hit._m0.x) + (_214 * _423)) + (_304 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _580).w < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _49;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _49;
        return;
    }
}


