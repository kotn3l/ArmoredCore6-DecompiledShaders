#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _44
{
    uint _m0;
};

struct _48
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _44 payload;
hitAttributeEXT _48 hit;

void main()
{
    uint _54 = payload._m0;
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _157;
    uint _159;
    uint _160;
    if (_116.x == 0u)
    {
        uint _125 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_117 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _151 & 65535u;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _155;
        }
        else
        {
            frontier_phi_3_2_ladder = _154;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _152 >> 16u;
        }
        _157 = frontier_phi_3_2_ladder;
        _159 = frontier_phi_3_2_ladder_1;
        _160 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    bool _169 = _116.w == 0u;
    bool _170 = _167 || _169;
    uint _172 = (_165 * _157) + 12u;
    uint _196;
    uint _197;
    uint _198;
    uint _199;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
        _199 = 20u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
        _199 = 24u;
    }
    bool _205 = _166 == 0u;
    uint _206;
    if (_205)
    {
        _206 = _199;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_169)
        {
            frontier_phi_9_10_ladder = _199 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _199 + 8u;
        }
        _206 = frontier_phi_9_10_ladder;
    }
    uvec4 _217 = texelFetch(l_geomAttrib_0, int((((_165 * _157) + 4u) + (_167 ? (_206 + 4u) : _206)) >> 2u));
    uint _218 = _217.x;
    float _222 = float(int(uint(int(_218 << 16u) >> int(16u))));
    float _223 = float(int(uint(int(_218) >> int(16u))));
    uint _225 = (_165 * _159) + 12u;
    uint _246;
    uint _247;
    uint _248;
    uint _249;
    if (_170)
    {
        uvec4 _227 = texelFetch(l_geomAttrib_0, int(_225 >> 2u));
        uint _228 = _227.x;
        _246 = _228 & 255u;
        _247 = (_228 >> 8u) & 255u;
        _248 = (_228 >> 16u) & 255u;
        _249 = 20u;
    }
    else
    {
        uint _234 = _225 >> 2u;
        uvec2 _240 = uvec2(texelFetch(l_geomAttrib_0, int(_234)).x, texelFetch(l_geomAttrib_0, int(_234 + 1u)).x);
        uint _241 = _240.x;
        _246 = _241 & 65535u;
        _247 = _241 >> 16u;
        _248 = _240.y & 65535u;
        _249 = 24u;
    }
    uint _253;
    if (_205)
    {
        _253 = _249;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_169)
        {
            frontier_phi_16_17_ladder = _249 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _249 + 8u;
        }
        _253 = frontier_phi_16_17_ladder;
    }
    uvec4 _262 = texelFetch(l_geomAttrib_0, int((((_165 * _159) + 4u) + (_167 ? (_253 + 4u) : _253)) >> 2u));
    uint _263 = _262.x;
    float _267 = float(int(uint(int(_263 << 16u) >> int(16u))));
    float _268 = float(int(uint(int(_263) >> int(16u))));
    uint _270 = (_165 * _160) + 12u;
    uint _291;
    uint _292;
    uint _293;
    uint _294;
    if (_170)
    {
        uvec4 _272 = texelFetch(l_geomAttrib_0, int(_270 >> 2u));
        uint _273 = _272.x;
        _291 = _273 & 255u;
        _292 = (_273 >> 8u) & 255u;
        _293 = (_273 >> 16u) & 255u;
        _294 = 20u;
    }
    else
    {
        uint _279 = _270 >> 2u;
        uvec2 _285 = uvec2(texelFetch(l_geomAttrib_0, int(_279)).x, texelFetch(l_geomAttrib_0, int(_279 + 1u)).x);
        uint _286 = _285.x;
        _291 = _286 & 65535u;
        _292 = _286 >> 16u;
        _293 = _285.y & 65535u;
        _294 = 24u;
    }
    uint _298;
    if (_205)
    {
        _298 = _294;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_169)
        {
            frontier_phi_23_24_ladder = _294 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _294 + 8u;
        }
        _298 = frontier_phi_23_24_ladder;
    }
    uvec4 _307 = texelFetch(l_geomAttrib_0, int((((_165 * _160) + 4u) + (_167 ? (_298 + 4u) : _298)) >> 2u));
    uint _308 = _307.x;
    float _312 = float(int(uint(int(_308 << 16u) >> int(16u))));
    float _313 = float(int(uint(int(_308) >> int(16u))));
    bool _315 = _116.z == 0u;
    float _351;
    float _352;
    float _353;
    if (_315)
    {
        uint _318 = _157 * 3u;
        uvec3 _327 = uvec3(texelFetch(l_geomPositionBuffer, int(_318)).x, texelFetch(l_geomPositionBuffer, int(_318 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_318 + 2u)).x);
        _351 = uintBitsToFloat(_327.x);
        _352 = uintBitsToFloat(_327.y);
        _353 = uintBitsToFloat(_327.z);
    }
    else
    {
        uint _335 = _157 * 2u;
        uvec2 _341 = uvec2(texelFetch(l_geomPositionBuffer, int(_335)).x, texelFetch(l_geomPositionBuffer, int(_335 + 1u)).x);
        uint _342 = _341.x;
        _351 = unpackHalf2x16(_342).x;
        _352 = unpackHalf2x16(_342 >> 16u).x;
        _353 = unpackHalf2x16(_341.y).x;
    }
    float _389;
    float _390;
    float _391;
    if (_315)
    {
        uint _356 = _159 * 3u;
        uvec3 _365 = uvec3(texelFetch(l_geomPositionBuffer, int(_356)).x, texelFetch(l_geomPositionBuffer, int(_356 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_356 + 2u)).x);
        _389 = uintBitsToFloat(_365.x);
        _390 = uintBitsToFloat(_365.y);
        _391 = uintBitsToFloat(_365.z);
    }
    else
    {
        uint _373 = _159 * 2u;
        uvec2 _379 = uvec2(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x);
        uint _380 = _379.x;
        _389 = unpackHalf2x16(_380).x;
        _390 = unpackHalf2x16(_380 >> 16u).x;
        _391 = unpackHalf2x16(_379.y).x;
    }
    float _427;
    float _428;
    float _429;
    if (_315)
    {
        uint _394 = _160 * 3u;
        uvec3 _403 = uvec3(texelFetch(l_geomPositionBuffer, int(_394)).x, texelFetch(l_geomPositionBuffer, int(_394 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_394 + 2u)).x);
        _427 = uintBitsToFloat(_403.x);
        _428 = uintBitsToFloat(_403.y);
        _429 = uintBitsToFloat(_403.z);
    }
    else
    {
        uint _411 = _160 * 2u;
        uvec2 _417 = uvec2(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x);
        uint _418 = _417.x;
        _427 = unpackHalf2x16(_418).x;
        _428 = unpackHalf2x16(_418 >> 16u).x;
        _429 = unpackHalf2x16(_417.y).x;
    }
    float _432 = (1.0 - hit._m0.x) - hit._m0.y;
    float _464 = _389 - _351;
    float _465 = _390 - _352;
    float _466 = _391 - _353;
    float _469 = fma(_466, gl_ObjectToWorldEXT[2u].x, fma(_465, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _464));
    float _472 = fma(_466, gl_ObjectToWorldEXT[2u].y, fma(_465, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _464));
    float _475 = fma(_466, gl_ObjectToWorldEXT[2u].z, fma(_465, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _464));
    float _476 = _427 - _351;
    float _477 = _428 - _352;
    float _478 = _429 - _353;
    float _481 = fma(_478, gl_ObjectToWorldEXT[2u].x, fma(_477, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _476));
    float _484 = fma(_478, gl_ObjectToWorldEXT[2u].y, fma(_477, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _476));
    float _487 = fma(_478, gl_ObjectToWorldEXT[2u].z, fma(_477, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _476));
    uvec2 _515 = uvec2(textureSize(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, int(0u)));
    float _602;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _558 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _564 = (_487 * _472) - (_484 * _475);
        float _567 = (_481 * _475) - (_487 * _469);
        float _570 = (_484 * _469) - (_481 * _472);
        float _597 = log2(abs(sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_558 * gl_WorldRayDirectionEXT.x, _558 * gl_WorldRayDirectionEXT.y, _558 * gl_WorldRayDirectionEXT.z), vec3(((((float(_196) * _432) + (-127.0)) + (float(_246) * hit._m0.x)) + (float(_291) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_197) * _432) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_198) * _432) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _599 = ((log2((((float(_515.y) * 0.5) * float(_515.x)) * abs((((_313 - _223) * (_267 - _222)) - ((_312 - _222) * (_268 - _223))) * 2.384185791015625e-07)) / (sqrt(((_567 * _567) + (_570 * _570)) + (_564 * _564)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _597;
        _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    }
    else
    {
        _602 = 0.0;
    }
    if ((textureLod(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + ((((_267 * hit._m0.x) + (_222 * _432)) + (_312 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + ((((_268 * hit._m0.x) + (_223 * _432)) + (_313 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _602).w * cbMtdParam._m0[9u].w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _54;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _54;
        return;
    }
}


