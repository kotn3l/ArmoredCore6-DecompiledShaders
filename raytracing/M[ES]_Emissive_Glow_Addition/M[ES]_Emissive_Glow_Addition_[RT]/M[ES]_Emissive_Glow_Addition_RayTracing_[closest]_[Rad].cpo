#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1284;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _164 & 65535u;
            frontier_phi_3_2_ladder_2 = _168;
        }
        else
        {
            frontier_phi_3_2_ladder = _168;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _165 >> 16u;
        }
        _170 = frontier_phi_3_2_ladder_1;
        _172 = frontier_phi_3_2_ladder;
        _173 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _177.z;
    bool _180 = _179 != 0u;
    bool _182 = _129.w == 0u;
    bool _183 = _180 || _182;
    uint _184 = _178 * _170;
    uint _185 = _184 + 12u;
    uint _209;
    uint _210;
    uint _211;
    uint _212;
    if (_183)
    {
        uvec4 _188 = texelFetch(l_geomAttrib_0, int(_185 >> 2u));
        uint _189 = _188.x;
        _209 = _189 & 255u;
        _210 = (_189 >> 8u) & 255u;
        _211 = (_189 >> 16u) & 255u;
        _212 = 16u;
    }
    else
    {
        uint _197 = _185 >> 2u;
        uvec2 _203 = uvec2(texelFetch(l_geomAttrib_0, int(_197)).x, texelFetch(l_geomAttrib_0, int(_197 + 1u)).x);
        uint _204 = _203.x;
        _209 = _204 & 65535u;
        _210 = _204 >> 16u;
        _211 = _203.y & 65535u;
        _212 = 20u;
    }
    uvec4 _220 = texelFetch(l_geomAttrib_0, int((_212 + _184) >> 2u));
    uint _221 = _220.x;
    bool _235 = _179 == 0u;
    uint _236;
    if (_235)
    {
        _236 = _212 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_182)
        {
            frontier_phi_9_10_ladder = _212 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _212 + 12u;
        }
        _236 = frontier_phi_9_10_ladder;
    }
    uvec4 _244 = texelFetch(l_geomAttrib_0, int(((_184 + 4u) + (_180 ? (_236 + 4u) : _236)) >> 2u));
    uint _245 = _244.x;
    float _249 = float(int(uint(int(_245 << 16u) >> int(16u))));
    float _250 = float(int(uint(int(_245) >> int(16u))));
    uint _251 = _178 * _172;
    uint _252 = _251 + 12u;
    uint _273;
    uint _274;
    uint _275;
    uint _276;
    if (_183)
    {
        uvec4 _254 = texelFetch(l_geomAttrib_0, int(_252 >> 2u));
        uint _255 = _254.x;
        _273 = _255 & 255u;
        _274 = (_255 >> 8u) & 255u;
        _275 = (_255 >> 16u) & 255u;
        _276 = 16u;
    }
    else
    {
        uint _261 = _252 >> 2u;
        uvec2 _267 = uvec2(texelFetch(l_geomAttrib_0, int(_261)).x, texelFetch(l_geomAttrib_0, int(_261 + 1u)).x);
        uint _268 = _267.x;
        _273 = _268 & 65535u;
        _274 = _268 >> 16u;
        _275 = _267.y & 65535u;
        _276 = 20u;
    }
    uvec4 _282 = texelFetch(l_geomAttrib_0, int((_276 + _251) >> 2u));
    uint _283 = _282.x;
    uint _295;
    if (_235)
    {
        _295 = _276 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_182)
        {
            frontier_phi_16_17_ladder = _276 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _276 + 12u;
        }
        _295 = frontier_phi_16_17_ladder;
    }
    uvec4 _303 = texelFetch(l_geomAttrib_0, int(((_251 + 4u) + (_180 ? (_295 + 4u) : _295)) >> 2u));
    uint _304 = _303.x;
    float _308 = float(int(uint(int(_304 << 16u) >> int(16u))));
    float _309 = float(int(uint(int(_304) >> int(16u))));
    uint _310 = _178 * _173;
    uint _311 = _310 + 12u;
    uint _332;
    uint _333;
    uint _334;
    uint _335;
    if (_183)
    {
        uvec4 _313 = texelFetch(l_geomAttrib_0, int(_311 >> 2u));
        uint _314 = _313.x;
        _332 = _314 & 255u;
        _333 = (_314 >> 8u) & 255u;
        _334 = (_314 >> 16u) & 255u;
        _335 = 16u;
    }
    else
    {
        uint _320 = _311 >> 2u;
        uvec2 _326 = uvec2(texelFetch(l_geomAttrib_0, int(_320)).x, texelFetch(l_geomAttrib_0, int(_320 + 1u)).x);
        uint _327 = _326.x;
        _332 = _327 & 65535u;
        _333 = _327 >> 16u;
        _334 = _326.y & 65535u;
        _335 = 20u;
    }
    uvec4 _341 = texelFetch(l_geomAttrib_0, int((_335 + _310) >> 2u));
    uint _342 = _341.x;
    uint _354;
    if (_235)
    {
        _354 = _335 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_182)
        {
            frontier_phi_23_24_ladder = _335 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _335 + 12u;
        }
        _354 = frontier_phi_23_24_ladder;
    }
    uvec4 _362 = texelFetch(l_geomAttrib_0, int(((_310 + 4u) + (_180 ? (_354 + 4u) : _354)) >> 2u));
    uint _363 = _362.x;
    float _367 = float(int(uint(int(_363 << 16u) >> int(16u))));
    float _368 = float(int(uint(int(_363) >> int(16u))));
    bool _370 = _129.z == 0u;
    float _406;
    float _407;
    float _408;
    if (_370)
    {
        uint _373 = _170 * 3u;
        uvec3 _382 = uvec3(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_373 + 2u)).x);
        _406 = uintBitsToFloat(_382.x);
        _407 = uintBitsToFloat(_382.y);
        _408 = uintBitsToFloat(_382.z);
    }
    else
    {
        uint _390 = _170 * 2u;
        uvec2 _396 = uvec2(texelFetch(l_geomPositionBuffer, int(_390)).x, texelFetch(l_geomPositionBuffer, int(_390 + 1u)).x);
        uint _397 = _396.x;
        _406 = unpackHalf2x16(_397).x;
        _407 = unpackHalf2x16(_397 >> 16u).x;
        _408 = unpackHalf2x16(_396.y).x;
    }
    float _444;
    float _445;
    float _446;
    if (_370)
    {
        uint _411 = _172 * 3u;
        uvec3 _420 = uvec3(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_411 + 2u)).x);
        _444 = uintBitsToFloat(_420.x);
        _445 = uintBitsToFloat(_420.y);
        _446 = uintBitsToFloat(_420.z);
    }
    else
    {
        uint _428 = _172 * 2u;
        uvec2 _434 = uvec2(texelFetch(l_geomPositionBuffer, int(_428)).x, texelFetch(l_geomPositionBuffer, int(_428 + 1u)).x);
        uint _435 = _434.x;
        _444 = unpackHalf2x16(_435).x;
        _445 = unpackHalf2x16(_435 >> 16u).x;
        _446 = unpackHalf2x16(_434.y).x;
    }
    float _482;
    float _483;
    float _484;
    if (_370)
    {
        uint _449 = _173 * 3u;
        uvec3 _458 = uvec3(texelFetch(l_geomPositionBuffer, int(_449)).x, texelFetch(l_geomPositionBuffer, int(_449 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_449 + 2u)).x);
        _482 = uintBitsToFloat(_458.x);
        _483 = uintBitsToFloat(_458.y);
        _484 = uintBitsToFloat(_458.z);
    }
    else
    {
        uint _466 = _173 * 2u;
        uvec2 _472 = uvec2(texelFetch(l_geomPositionBuffer, int(_466)).x, texelFetch(l_geomPositionBuffer, int(_466 + 1u)).x);
        uint _473 = _472.x;
        _482 = unpackHalf2x16(_473).x;
        _483 = unpackHalf2x16(_473 >> 16u).x;
        _484 = unpackHalf2x16(_472.y).x;
    }
    float _487 = (1.0 - hit._m0.x) - hit._m0.y;
    float _521 = (_308 - _249) * 0.00048828125;
    float _523 = (_309 - _250) * 0.00048828125;
    float _526 = (_367 - _249) * 0.00048828125;
    float _527 = (_368 - _250) * 0.00048828125;
    float _549 = _444 - _406;
    float _550 = _445 - _407;
    float _551 = _446 - _408;
    float _554 = fma(_551, gl_ObjectToWorldEXT[2u].x, fma(_550, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _549));
    float _557 = fma(_551, gl_ObjectToWorldEXT[2u].y, fma(_550, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _549));
    float _560 = fma(_551, gl_ObjectToWorldEXT[2u].z, fma(_550, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _549));
    float _561 = _482 - _406;
    float _562 = _483 - _407;
    float _563 = _484 - _408;
    float _566 = fma(_563, gl_ObjectToWorldEXT[2u].x, fma(_562, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _561));
    float _569 = fma(_563, gl_ObjectToWorldEXT[2u].y, fma(_562, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _561));
    float _572 = fma(_563, gl_ObjectToWorldEXT[2u].z, fma(_562, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _561));
    float _573 = (((_308 * hit._m0.x) + (_249 * _487)) + (_367 * hit._m0.y)) * 0.00048828125;
    float _574 = (((_309 * hit._m0.x) + (_250 * _487)) + (_368 * hit._m0.y)) * 0.00048828125;
    float _578 = (((float(_209) * _487) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_332) * hit._m0.y);
    float _581 = (((float(_210) * _487) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_333) * hit._m0.y);
    float _584 = (((float(_211) * _487) + (-127.0)) + (float(_275) * hit._m0.x)) + (float(_334) * hit._m0.y);
    float _585 = _578 * 0.0078740157186985015869140625;
    float _587 = _581 * 0.0078740157186985015869140625;
    float _588 = _584 * 0.0078740157186985015869140625;
    float _601 = ((((float(_221 & 255u) * _487) + (-127.0)) + (float(_283 & 255u) * hit._m0.x)) + (float(_342 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _602 = ((((float((_221 >> 8u) & 255u) * _487) + (-127.0)) + (float((_283 >> 8u) & 255u) * hit._m0.x)) + (float((_342 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _603 = ((((float((_221 >> 16u) & 255u) * _487) + (-127.0)) + (float((_283 >> 16u) & 255u) * hit._m0.x)) + (float((_342 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((((float(_221 >> 24u) * _487) + (-127.0)) + (float(_283 >> 24u) * hit._m0.x)) + (float(_342 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _614 = ((_602 * _588) - (_603 * _587)) * _604;
    float _615 = ((_603 * _585) - (_601 * _588)) * _604;
    float _616 = ((_601 * _587) - (_602 * _585)) * _604;
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _637 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + _573;
    float _638 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + _574;
    uvec2 _650 = uvec2(textureSize(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, int(0u)));
    bool _655 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _708;
    if (_655)
    {
        float _666 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _672 = (_572 * _557) - (_569 * _560);
        float _675 = (_566 * _560) - (_572 * _554);
        float _678 = (_569 * _554) - (_566 * _557);
        float _705 = ((log2((((float(_650.y) * 0.5) * float(_650.x)) * abs((_527 * _521) - (_526 * _523))) / (sqrt(((_675 * _675) + (_678 * _678)) + (_672 * _672)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_666 * gl_WorldRayDirectionEXT.x, _666 * gl_WorldRayDirectionEXT.y, _666 * gl_WorldRayDirectionEXT.z), vec3(_585, _587, _588))));
        _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    }
    else
    {
        _708 = 0.0;
    }
    vec4 _712 = textureLod(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_637 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_638 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _708);
    float _717 = _712.x * cbMtdParam._m0[9u].x;
    float _718 = _712.y * cbMtdParam._m0[9u].y;
    float _719 = _712.z * cbMtdParam._m0[9u].z;
    uvec2 _732 = uvec2(textureSize(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, int(0u)));
    float _783;
    if (_655)
    {
        float _743 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _749 = (_572 * _557) - (_569 * _560);
        float _752 = (_566 * _560) - (_572 * _554);
        float _755 = (_569 * _554) - (_566 * _557);
        float _781 = ((log2((((float(_732.y) * 0.5) * float(_732.x)) * abs((_527 * _521) - (_526 * _523))) / (sqrt(((_752 * _752) + (_755 * _755)) + (_749 * _749)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_743 * gl_WorldRayDirectionEXT.x, _743 * gl_WorldRayDirectionEXT.y, _743 * gl_WorldRayDirectionEXT.z), vec3(_585, _587, _588))));
        _783 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    }
    else
    {
        _783 = 0.0;
    }
    vec4 _786 = textureLod(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _637) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _638) + cbTextureTilingScale._m0[1u].w), _783);
    float _790 = _786.z;
    float _793 = (_786.x * 2.0) + (-1.0);
    float _795 = (_786.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_793, _795), vec2(_793, _795));
    float _1372 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _801 = sqrt(1.0 - (isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0))));
    uvec2 _828 = uvec2(textureSize(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, int(0u)));
    float _832 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _833 = _832 * gl_WorldRayDirectionEXT.x;
    float _834 = _832 * gl_WorldRayDirectionEXT.y;
    float _835 = _832 * gl_WorldRayDirectionEXT.z;
    float _879;
    if (_655)
    {
        float _845 = (_572 * _557) - (_569 * _560);
        float _848 = (_566 * _560) - (_572 * _554);
        float _851 = (_569 * _554) - (_566 * _557);
        float _877 = ((log2((((float(_828.y) * 0.5) * float(_828.x)) * abs((_527 * _521) - (_526 * _523))) / (sqrt(((_848 * _848) + (_851 * _851)) + (_845 * _845)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_833, _834, _835), vec3(_585, _587, _588))));
        _879 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    }
    else
    {
        _879 = 0.0;
    }
    vec4 _881 = textureLod(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + _573) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + _574) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _879);
    float _894 = fma(_801, _585, fma(_795, _601, (_620 * _614) * _793));
    float _897 = fma(_801, _587, fma(_795, _602, (_620 * _615) * _793));
    float _900 = fma(_801, _588, fma(_795, _603, (_620 * _616) * _793));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _919 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _920 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _921 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _922 = (-0.0) - _833;
    float _924 = (-0.0) - _834;
    float _925 = (-0.0) - _835;
    float _931 = float(gl_LaunchIDEXT.x);
    float _932 = float(gl_LaunchIDEXT.y);
    float _935 = float(gl_LaunchSizeEXT.x);
    float _949 = fract(fract(sin(dot(vec2(_931 / _935, _932 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _962 = fract(fract(sin(dot(vec2((_931 + 128.0) / _935, (_932 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _963 = 1.0 - cbMtdParam._m0[11u].y;
    float _964 = _963 * _717;
    float _965 = _963 * _718;
    float _966 = _963 * _719;
    float _971 = (_717 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].y;
    float _972 = (_718 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].y;
    float _973 = (_719 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].y;
    float _974 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    _67._m0 = 1u;
    uvec4 _987 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _988 = _987.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _988, _987.w, _988, vec3(_919, _920, _921), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (_67._m0 == 0u)
    {
        float _1009 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_905, _906, _907));
        float _1388 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1012 = isnan(1.0) ? _1388 : (isnan(_1388) ? 1.0 : min(_1388, 1.0));
        float _1031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _790) * 0.949999988079071044921875);
        float _1032 = _1031 * _1031;
        float _1033 = g_sceneCB._m0[4u].x - _833;
        float _1034 = g_sceneCB._m0[4u].y - _834;
        float _1035 = g_sceneCB._m0[4u].z - _835;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1040 = _1039 * _1033;
        float _1041 = _1039 * _1034;
        float _1042 = _1039 * _1035;
        float _1043 = dot(vec3(_905, _906, _907), vec3(g_sceneCB._m0[4u].xyz));
        float _1399 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1046 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
        float _1047 = dot(vec3(_905, _906, _907), vec3(_922, _924, _925));
        float _1410 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1050 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        float _1051 = dot(vec3(_905, _906, _907), vec3(_1040, _1041, _1042));
        float _1421 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1054 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
        float _1055 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1040, _1041, _1042));
        float _1432 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1032 * _1032;
        float _1063 = ((_1054 * _1054) * (_1059 + (-1.0))) + 1.0;
        float _1072 = exp2(log2(1.0 - (isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0)))) * 5.0);
        float _1083 = 1.0 - _1032;
        float _1094 = (0.5 / (((_1050 * ((_1046 * _1083) + _1032)) + 9.9999999392252902907785028219223e-09) + (((_1050 * _1083) + _1032) * _1046))) * _1046;
        float _1443 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1096 = (isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0))) * (_1059 / ((_1063 * _1063) * 3.141590118408203125));
        _1103 = ((_964 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1012;
        _1104 = ((_965 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1012;
        _1105 = ((_966 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1012;
        _1106 = (((_1072 * (0.959999978542327880859375 - _971)) + _974) * g_sceneCB._m0[5u].x) * _1096;
        _1107 = (((_1072 * (0.959999978542327880859375 - _972)) + _976) * g_sceneCB._m0[5u].y) * _1096;
        _1108 = (((_1072 * (0.959999978542327880859375 - _973)) + _977) * g_sceneCB._m0[5u].z) * _1096;
    }
    else
    {
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    bool _1110 = abs(_906) < 0.89999997615814208984375;
    float _1112 = float(_1110);
    float _1113 = _1110 ? 0.0 : 1.0;
    float _1116 = (_1112 * _907) - (_1113 * _906);
    float _1117 = _1113 * _905;
    float _1119 = (-0.0) - (_905 * _1112);
    float _1123 = inversesqrt(dot(vec3(_1116, _1117, _1119), vec3(_1116, _1117, _1119)));
    float _1124 = _1116 * _1123;
    float _1125 = _1117 * _1123;
    float _1126 = _1123 * _1119;
    float _1129 = (_1125 * _907) - (_1126 * _906);
    float _1132 = (_1126 * _905) - (_1124 * _907);
    float _1135 = (_1124 * _906) - (_1125 * _905);
    float _1137;
    float _1145;
    float _1136 = 0.0;
    uint _1138 = 0u;
    float _1142;
    bool _1144;
    for (;;)
    {
        _1142 = (float(_1138) + _949) * 0.03125;
        _1144 = _1138 == 0u;
        float frontier_phi_45_pred;
        if (_1144)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1289;
            float _1290;
            uint _1292;
            _1289 = 0.0;
            _1290 = 0.5;
            _1292 = _1138;
            float _1146;
            for (;;)
            {
                _1146 = ((_1292 & 1u) != 0u) ? (_1290 + _1289) : _1289;
                uint _1293 = _1292 >> 1u;
                if (_1293 == 0u)
                {
                    break;
                }
                else
                {
                    _1289 = _1146;
                    _1290 *= 0.5;
                    _1292 = _1293;
                }
            }
            frontier_phi_45_pred = _1146;
        }
        _1145 = frontier_phi_45_pred;
        float _1147 = _1145 + _962;
        float _1151 = sqrt(_1142);
        float _1152 = ((_1147 > 1.0) ? (_1147 + (-1.0)) : _1147) * 6.283185482025146484375;
        float _1155 = cos(_1152) * _1151;
        float _1157 = sin(_1152) * _1151;
        float _1159 = sqrt(1.0 - _1142);
        float _1172 = ((_1159 * _905) + (_1155 * _1129)) + (_1157 * _1124);
        float _1173 = ((_1159 * _906) + (_1155 * _1132)) + (_1157 * _1125);
        float _1174 = ((_1159 * _907) + (_1155 * _1135)) + (_1157 * _1126);
        _66._m0 = 1u;
        uvec4 _1178 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1179 = _1178.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1179, _1178.w, _1179, vec3(_919, _920, _921), 9.9999997473787516355514526367188e-05, vec3(_1172, _1173, _1174), 10000.0, 1);
        float _1185 = dot(vec3(_905, _906, _907), vec3(_1172, _1173, _1174));
        float _1454 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1188 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
        _1137 = ((float(_66._m0 == 0u) * _1188) / (_1188 * 0.3183098733425140380859375)) + _1136;
        uint _1139 = _1138 + 1u;
        if (_1139 == 32u)
        {
            break;
        }
        else
        {
            _1136 = _1137;
            _1138 = _1139;
            continue;
        }
    }
    float _1196 = _1137 * 0.009947183541953563690185546875;
    float _1201 = dot(vec3(_833, _834, _835), vec3(_905, _906, _907)) * 2.0;
    vec4 _1215 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_833 - (_1201 * _905), _834 - (_1201 * _906), _835 - (_1201 * _907)), 4.0 - (_790 * 4.0));
    float _1220 = dot(vec3(_922, _924, _925), vec3(_905, _906, _907));
    float _1465 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1230 = exp2(log2(1.0 - (isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0)))) * 5.0);
    vec4 _1242 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_905, _906, _907), 0.0);
    float _1254 = ((_1103 + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _881.x)) + _1106) + (((_1242.x * _964) + (((_1230 * (0.959999978542327880859375 - _971)) + _974) * _1215.x)) * _1196);
    float _1259 = ((_1104 + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _881.y)) + _1107) + (((_1242.y * _965) + (((_1230 * (0.959999978542327880859375 - _972)) + _976) * _1215.y)) * _1196);
    float _1264 = ((_1105 + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _881.z)) + _1108) + (((_1242.z * _966) + (((_1230 * (0.959999978542327880859375 - _973)) + _977) * _1215.z)) * _1196);
    float _1476 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _1487 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1498 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    bool _1272 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1283;
    _1283.x = _1272 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0)));
    _1283.y = _1272 ? ((_581 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0)));
    _1283.z = _1272 ? ((_584 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0)));
    payload._m0 = _1283;
}


