#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _52
{
    vec3 _m0;
};

struct _56
{
    vec2 _m0;
};

struct _59
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _52 payload;
hitAttributeEXT _56 hit;
layout(location = 1) rayPayloadEXT _59 _61;
layout(location = 2) rayPayloadEXT _59 _62;

vec3 _1231;

void main()
{
    float _70 = float(gl_LaunchSizeEXT.y);
    float _100 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _109 = sqrt(((_101 * _101) + (_100 * _100)) + (_102 * _102)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _70)))));
    uvec4 _120 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _121 = _120.y;
    uint _160;
    uint _162;
    uint _163;
    if (_120.x == 0u)
    {
        uint _128 = (_121 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_121 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _154 & 65535u;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _155 >> 16u;
        }
        _160 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _120.w == 0u;
    bool _173 = _170 || _172;
    uint _174 = _168 * _160;
    uint _175 = _174 + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 16u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 20u;
    }
    uvec4 _210 = texelFetch(l_geomAttrib_0, int((_202 + _174) >> 2u));
    uint _211 = _210.x;
    bool _225 = _169 == 0u;
    uint _226;
    if (_225)
    {
        _226 = _202 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 12u;
        }
        _226 = frontier_phi_9_10_ladder;
    }
    uvec4 _234 = texelFetch(l_geomAttrib_0, int(((_174 + 4u) + (_170 ? (_226 + 4u) : _226)) >> 2u));
    uint _235 = _234.x;
    float _239 = float(int(uint(int(_235 << 16u) >> int(16u))));
    float _240 = float(int(uint(int(_235) >> int(16u))));
    uint _241 = _168 * _162;
    uint _242 = _241 + 12u;
    uint _263;
    uint _264;
    uint _265;
    uint _266;
    if (_173)
    {
        uvec4 _244 = texelFetch(l_geomAttrib_0, int(_242 >> 2u));
        uint _245 = _244.x;
        _263 = _245 & 255u;
        _264 = (_245 >> 8u) & 255u;
        _265 = (_245 >> 16u) & 255u;
        _266 = 16u;
    }
    else
    {
        uint _251 = _242 >> 2u;
        uvec2 _257 = uvec2(texelFetch(l_geomAttrib_0, int(_251)).x, texelFetch(l_geomAttrib_0, int(_251 + 1u)).x);
        uint _258 = _257.x;
        _263 = _258 & 65535u;
        _264 = _258 >> 16u;
        _265 = _257.y & 65535u;
        _266 = 20u;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((_266 + _241) >> 2u));
    uint _273 = _272.x;
    uint _285;
    if (_225)
    {
        _285 = _266 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _266 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _266 + 12u;
        }
        _285 = frontier_phi_16_17_ladder;
    }
    uvec4 _293 = texelFetch(l_geomAttrib_0, int(((_241 + 4u) + (_170 ? (_285 + 4u) : _285)) >> 2u));
    uint _294 = _293.x;
    float _298 = float(int(uint(int(_294 << 16u) >> int(16u))));
    float _299 = float(int(uint(int(_294) >> int(16u))));
    uint _300 = _168 * _163;
    uint _301 = _300 + 12u;
    uint _322;
    uint _323;
    uint _324;
    uint _325;
    if (_173)
    {
        uvec4 _303 = texelFetch(l_geomAttrib_0, int(_301 >> 2u));
        uint _304 = _303.x;
        _322 = _304 & 255u;
        _323 = (_304 >> 8u) & 255u;
        _324 = (_304 >> 16u) & 255u;
        _325 = 16u;
    }
    else
    {
        uint _310 = _301 >> 2u;
        uvec2 _316 = uvec2(texelFetch(l_geomAttrib_0, int(_310)).x, texelFetch(l_geomAttrib_0, int(_310 + 1u)).x);
        uint _317 = _316.x;
        _322 = _317 & 65535u;
        _323 = _317 >> 16u;
        _324 = _316.y & 65535u;
        _325 = 20u;
    }
    uvec4 _331 = texelFetch(l_geomAttrib_0, int((_325 + _300) >> 2u));
    uint _332 = _331.x;
    uint _344;
    if (_225)
    {
        _344 = _325 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _325 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _325 + 12u;
        }
        _344 = frontier_phi_23_24_ladder;
    }
    uvec4 _352 = texelFetch(l_geomAttrib_0, int(((_300 + 4u) + (_170 ? (_344 + 4u) : _344)) >> 2u));
    uint _353 = _352.x;
    float _357 = float(int(uint(int(_353 << 16u) >> int(16u))));
    float _358 = float(int(uint(int(_353) >> int(16u))));
    bool _360 = _120.z == 0u;
    float _396;
    float _397;
    float _398;
    if (_360)
    {
        uint _363 = _160 * 3u;
        uvec3 _372 = uvec3(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_363 + 2u)).x);
        _396 = uintBitsToFloat(_372.x);
        _397 = uintBitsToFloat(_372.y);
        _398 = uintBitsToFloat(_372.z);
    }
    else
    {
        uint _380 = _160 * 2u;
        uvec2 _386 = uvec2(texelFetch(l_geomPositionBuffer, int(_380)).x, texelFetch(l_geomPositionBuffer, int(_380 + 1u)).x);
        uint _387 = _386.x;
        _396 = unpackHalf2x16(_387).x;
        _397 = unpackHalf2x16(_387 >> 16u).x;
        _398 = unpackHalf2x16(_386.y).x;
    }
    float _434;
    float _435;
    float _436;
    if (_360)
    {
        uint _401 = _162 * 3u;
        uvec3 _410 = uvec3(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_401 + 2u)).x);
        _434 = uintBitsToFloat(_410.x);
        _435 = uintBitsToFloat(_410.y);
        _436 = uintBitsToFloat(_410.z);
    }
    else
    {
        uint _418 = _162 * 2u;
        uvec2 _424 = uvec2(texelFetch(l_geomPositionBuffer, int(_418)).x, texelFetch(l_geomPositionBuffer, int(_418 + 1u)).x);
        uint _425 = _424.x;
        _434 = unpackHalf2x16(_425).x;
        _435 = unpackHalf2x16(_425 >> 16u).x;
        _436 = unpackHalf2x16(_424.y).x;
    }
    float _472;
    float _473;
    float _474;
    if (_360)
    {
        uint _439 = _163 * 3u;
        uvec3 _448 = uvec3(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_439 + 2u)).x);
        _472 = uintBitsToFloat(_448.x);
        _473 = uintBitsToFloat(_448.y);
        _474 = uintBitsToFloat(_448.z);
    }
    else
    {
        uint _456 = _163 * 2u;
        uvec2 _462 = uvec2(texelFetch(l_geomPositionBuffer, int(_456)).x, texelFetch(l_geomPositionBuffer, int(_456 + 1u)).x);
        uint _463 = _462.x;
        _472 = unpackHalf2x16(_463).x;
        _473 = unpackHalf2x16(_463 >> 16u).x;
        _474 = unpackHalf2x16(_462.y).x;
    }
    float _477 = (1.0 - hit._m0.x) - hit._m0.y;
    float _511 = (_298 - _239) * 0.00048828125;
    float _513 = (_299 - _240) * 0.00048828125;
    float _516 = (_357 - _239) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _544 = fma(_541, gl_ObjectToWorldEXT[2u].x, fma(_540, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _539));
    float _547 = fma(_541, gl_ObjectToWorldEXT[2u].y, fma(_540, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _539));
    float _550 = fma(_541, gl_ObjectToWorldEXT[2u].z, fma(_540, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _539));
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _556 = fma(_553, gl_ObjectToWorldEXT[2u].x, fma(_552, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _551));
    float _559 = fma(_553, gl_ObjectToWorldEXT[2u].y, fma(_552, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _551));
    float _562 = fma(_553, gl_ObjectToWorldEXT[2u].z, fma(_552, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _551));
    float _563 = (((_298 * hit._m0.x) + (_239 * _477)) + (_357 * hit._m0.y)) * 0.00048828125;
    float _564 = (((_299 * hit._m0.x) + (_240 * _477)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _568 = (((float(_199) * _477) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y);
    float _571 = (((float(_200) * _477) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _574 = (((float(_201) * _477) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = _568 * 0.0078740157186985015869140625;
    float _577 = _571 * 0.0078740157186985015869140625;
    float _578 = _574 * 0.0078740157186985015869140625;
    float _591 = ((((float(_211 & 255u) * _477) + (-127.0)) + (float(_273 & 255u) * hit._m0.x)) + (float(_332 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _592 = ((((float((_211 >> 8u) & 255u) * _477) + (-127.0)) + (float((_273 >> 8u) & 255u) * hit._m0.x)) + (float((_332 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_211 >> 16u) & 255u) * _477) + (-127.0)) + (float((_273 >> 16u) & 255u) * hit._m0.x)) + (float((_332 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float(_211 >> 24u) * _477) + (-127.0)) + (float(_273 >> 24u) * hit._m0.x)) + (float(_332 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((_592 * _578) - (_593 * _577)) * _594;
    float _605 = ((_593 * _575) - (_591 * _578)) * _594;
    float _606 = ((_591 * _577) - (_592 * _575)) * _594;
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    uvec2 _631 = uvec2(textureSize(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _636 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _689;
    if (_636)
    {
        float _647 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _653 = (_562 * _547) - (_559 * _550);
        float _656 = (_556 * _550) - (_562 * _544);
        float _659 = (_559 * _544) - (_556 * _547);
        float _686 = ((log2((((float(_631.y) * 0.5) * float(_631.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_656 * _656) + (_659 * _659)) + (_653 * _653)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_647 * gl_WorldRayDirectionEXT.x, _647 * gl_WorldRayDirectionEXT.y, _647 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    }
    else
    {
        _689 = 0.0;
    }
    vec4 _693 = textureLod(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _563) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _564) + cbTextureTilingScale._m0[0u].w), _689);
    float _698 = _693.x * cbMtdParam._m0[9u].x;
    float _699 = _693.y * cbMtdParam._m0[9u].y;
    float _700 = _693.z * cbMtdParam._m0[9u].z;
    uvec2 _712 = uvec2(textureSize(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _763;
    if (_636)
    {
        float _723 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _729 = (_562 * _547) - (_559 * _550);
        float _732 = (_556 * _550) - (_562 * _544);
        float _735 = (_559 * _544) - (_556 * _547);
        float _761 = ((log2((((float(_712.y) * 0.5) * float(_712.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_732 * _732) + (_735 * _735)) + (_729 * _729)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_723 * gl_WorldRayDirectionEXT.x, _723 * gl_WorldRayDirectionEXT.y, _723 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _763 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    }
    else
    {
        _763 = 0.0;
    }
    vec4 _766 = textureLod(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _563) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _564) + cbTextureTilingScale._m0[1u].w), _763);
    float _770 = _766.z;
    float _773 = (_766.x * 2.0) + (-1.0);
    float _775 = (_766.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_773, _775), vec2(_773, _775));
    float _1319 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _1319 : (isnan(_1319) ? 1.0 : min(_1319, 1.0))));
    uvec2 _803 = uvec2(textureSize(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, int(0u)));
    float _807 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _808 = _807 * gl_WorldRayDirectionEXT.x;
    float _809 = _807 * gl_WorldRayDirectionEXT.y;
    float _810 = _807 * gl_WorldRayDirectionEXT.z;
    float _854;
    if (_636)
    {
        float _820 = (_562 * _547) - (_559 * _550);
        float _823 = (_556 * _550) - (_562 * _544);
        float _826 = (_559 * _544) - (_556 * _547);
        float _852 = ((log2((((float(_803.y) * 0.5) * float(_803.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_823 * _823) + (_826 * _826)) + (_820 * _820)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_808, _809, _810), vec3(_575, _577, _578))));
        _854 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    }
    else
    {
        _854 = 0.0;
    }
    vec4 _856 = textureLod(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _563) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _564) + cbTextureTilingScale._m0[3u].w), _854);
    float _869 = fma(_781, _575, fma(_775, _591, (_610 * _604) * _773));
    float _872 = fma(_781, _577, fma(_775, _592, (_610 * _605) * _773));
    float _875 = fma(_781, _578, fma(_775, _593, (_610 * _606) * _773));
    float _879 = inversesqrt(dot(vec3(_869, _872, _875), vec3(_869, _872, _875)));
    float _880 = _879 * _869;
    float _881 = _879 * _872;
    float _882 = _879 * _875;
    float _894 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _895 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _896 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _897 = (-0.0) - _808;
    float _899 = (-0.0) - _809;
    float _900 = (-0.0) - _810;
    float _906 = float(gl_LaunchIDEXT.x);
    float _907 = float(gl_LaunchIDEXT.y);
    float _910 = float(gl_LaunchSizeEXT.x);
    float _924 = fract(fract(sin(dot(vec2(_906 / _910, _907 / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _937 = fract(fract(sin(dot(vec2((_906 + 128.0) / _910, (_907 + 128.0) / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _62._m0 = 1u;
    uvec4 _947 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _948 = _947.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _948, _947.w, _948, vec3(_894, _895, _896), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (_62._m0 == 0u)
    {
        float _969 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_880, _881, _882));
        float _1335 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _972 = isnan(1.0) ? _1335 : (isnan(_1335) ? 1.0 : min(_1335, 1.0));
        float _991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _770) * 0.949999988079071044921875);
        float _992 = _991 * _991;
        float _993 = g_sceneCB._m0[4u].x - _808;
        float _994 = g_sceneCB._m0[4u].y - _809;
        float _995 = g_sceneCB._m0[4u].z - _810;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1000 = _999 * _993;
        float _1001 = _999 * _994;
        float _1002 = _999 * _995;
        float _1003 = dot(vec3(_880, _881, _882), vec3(g_sceneCB._m0[4u].xyz));
        float _1346 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1006 = isnan(1.0) ? _1346 : (isnan(_1346) ? 1.0 : min(_1346, 1.0));
        float _1007 = dot(vec3(_880, _881, _882), vec3(_897, _899, _900));
        float _1357 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1010 = isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0));
        float _1011 = dot(vec3(_880, _881, _882), vec3(_1000, _1001, _1002));
        float _1368 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1014 = isnan(1.0) ? _1368 : (isnan(_1368) ? 1.0 : min(_1368, 1.0));
        float _1015 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1000, _1001, _1002));
        float _1379 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _992 * _992;
        float _1023 = ((_1014 * _1014) * (_1019 + (-1.0))) + 1.0;
        float _1035 = (exp2(log2(1.0 - (isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1037 = 1.0 - _992;
        float _1048 = (0.5 / (((_1010 * ((_1006 * _1037) + _992)) + 9.9999999392252902907785028219223e-09) + (((_1010 * _1037) + _992) * _1006))) * _1006;
        float _1390 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1050 = (isnan(1.0) ? _1390 : (isnan(_1390) ? 1.0 : min(_1390, 1.0))) * (_1019 / ((_1023 * _1023) * 3.141590118408203125));
        _1057 = ((_698 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _972;
        _1058 = ((_699 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _972;
        _1059 = ((_700 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _972;
        _1060 = (_1035 * g_sceneCB._m0[5u].x) * _1050;
        _1061 = (_1035 * g_sceneCB._m0[5u].y) * _1050;
        _1062 = (_1035 * g_sceneCB._m0[5u].z) * _1050;
    }
    else
    {
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    bool _1064 = abs(_881) < 0.89999997615814208984375;
    float _1066 = float(_1064);
    float _1067 = _1064 ? 0.0 : 1.0;
    float _1070 = (_1066 * _882) - (_1067 * _881);
    float _1071 = _1067 * _880;
    float _1073 = (-0.0) - (_880 * _1066);
    float _1077 = inversesqrt(dot(vec3(_1070, _1071, _1073), vec3(_1070, _1071, _1073)));
    float _1078 = _1070 * _1077;
    float _1079 = _1071 * _1077;
    float _1080 = _1077 * _1073;
    float _1083 = (_1079 * _882) - (_1080 * _881);
    float _1086 = (_1080 * _880) - (_1078 * _882);
    float _1089 = (_1078 * _881) - (_1079 * _880);
    float _1091;
    float _1099;
    float _1090 = 0.0;
    uint _1092 = 0u;
    float _1096;
    bool _1098;
    for (;;)
    {
        _1096 = (float(_1092) + _924) * 0.03125;
        _1098 = _1092 == 0u;
        float frontier_phi_45_pred;
        if (_1098)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1236;
            float _1237;
            uint _1239;
            _1236 = 0.0;
            _1237 = 0.5;
            _1239 = _1092;
            float _1100;
            for (;;)
            {
                _1100 = ((_1239 & 1u) != 0u) ? (_1237 + _1236) : _1236;
                uint _1240 = _1239 >> 1u;
                if (_1240 == 0u)
                {
                    break;
                }
                else
                {
                    _1236 = _1100;
                    _1237 *= 0.5;
                    _1239 = _1240;
                }
            }
            frontier_phi_45_pred = _1100;
        }
        _1099 = frontier_phi_45_pred;
        float _1101 = _1099 + _937;
        float _1105 = sqrt(_1096);
        float _1106 = ((_1101 > 1.0) ? (_1101 + (-1.0)) : _1101) * 6.283185482025146484375;
        float _1109 = cos(_1106) * _1105;
        float _1111 = sin(_1106) * _1105;
        float _1113 = sqrt(1.0 - _1096);
        float _1126 = ((_1113 * _880) + (_1109 * _1083)) + (_1111 * _1078);
        float _1127 = ((_1113 * _881) + (_1109 * _1086)) + (_1111 * _1079);
        float _1128 = ((_1113 * _882) + (_1109 * _1089)) + (_1111 * _1080);
        _61._m0 = 1u;
        uvec4 _1132 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1133 = _1132.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1133, _1132.w, _1133, vec3(_894, _895, _896), 9.9999997473787516355514526367188e-05, vec3(_1126, _1127, _1128), 10000.0, 1);
        float _1139 = dot(vec3(_880, _881, _882), vec3(_1126, _1127, _1128));
        float _1401 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1142 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
        _1091 = ((float(_61._m0 == 0u) * _1142) / (_1142 * 0.3183098733425140380859375)) + _1090;
        uint _1093 = _1092 + 1u;
        if (_1093 == 32u)
        {
            break;
        }
        else
        {
            _1090 = _1091;
            _1092 = _1093;
            continue;
        }
    }
    float _1150 = _1091 * 0.009947183541953563690185546875;
    float _1155 = dot(vec3(_808, _809, _810), vec3(_880, _881, _882)) * 2.0;
    vec4 _1169 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_808 - (_1155 * _880), _809 - (_1155 * _881), _810 - (_1155 * _882)), 4.0 - (_770 * 4.0));
    float _1174 = dot(vec3(_897, _899, _900), vec3(_880, _881, _882));
    float _1412 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1183 = (exp2(log2(1.0 - (isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1189 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_880, _881, _882), 0.0);
    float _1201 = ((_1057 + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _856.x)) + _1060) + (((_1189.x * _698) + (_1183 * _1169.x)) * _1150);
    float _1206 = ((_1058 + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _856.y)) + _1061) + (((_1189.y * _699) + (_1183 * _1169.y)) * _1150);
    float _1211 = ((_1059 + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _856.z)) + _1062) + (((_1189.z * _700) + (_1183 * _1169.z)) * _1150);
    float _1423 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1434 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1445 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    bool _1219 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1230;
    _1230.x = _1219 ? ((_568 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0)));
    _1230.y = _1219 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0)));
    _1230.z = _1219 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0)));
    payload._m0 = _1230;
}


