#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _50
{
    uint _m0;
};

struct _54
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D Nolight_OpacityBlend_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D Nolight_OpacityBlend_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _50 payload;
hitAttributeEXT _54 hit;

uint _222;
uint _288;
uint _354;

void main()
{
    uint _60 = payload._m0;
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _157 & 65535u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _161;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _158 >> 16u;
        }
        _163 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_1;
        _166 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _178 = (_171 * _163) + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 20u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 24u;
    }
    bool _210 = _172 == 0u;
    uint _211;
    if (_210)
    {
        _211 = _205;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 8u;
        }
        _211 = frontier_phi_9_10_ladder;
    }
    uint _216 = _173 ? (_211 + 4u) : _211;
    uint _217 = _171 * _163;
    uvec2 _226 = uvec2(_222, texelFetch(l_geomAttrib_0, int((((_217 + 4u) + _216) >> 2u) + 1u)).x);
    uint _227 = _226.y;
    float _231 = float(int(uint(int(_227 << 16u) >> int(16u))));
    float _232 = float(int(uint(int(_227) >> int(16u))));
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_217 + 12u) + _216) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _251 = (_171 * _165) + 12u;
    uint _272;
    uint _273;
    uint _274;
    uint _275;
    if (_176)
    {
        uvec4 _253 = texelFetch(l_geomAttrib_0, int(_251 >> 2u));
        uint _254 = _253.x;
        _272 = _254 & 255u;
        _273 = (_254 >> 8u) & 255u;
        _274 = (_254 >> 16u) & 255u;
        _275 = 20u;
    }
    else
    {
        uint _260 = _251 >> 2u;
        uvec2 _266 = uvec2(texelFetch(l_geomAttrib_0, int(_260)).x, texelFetch(l_geomAttrib_0, int(_260 + 1u)).x);
        uint _267 = _266.x;
        _272 = _267 & 65535u;
        _273 = _267 >> 16u;
        _274 = _266.y & 65535u;
        _275 = 24u;
    }
    uint _279;
    if (_210)
    {
        _279 = _275;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _275 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _275 + 8u;
        }
        _279 = frontier_phi_16_17_ladder;
    }
    uint _283 = _173 ? (_279 + 4u) : _279;
    uint _284 = _171 * _165;
    uvec2 _292 = uvec2(_288, texelFetch(l_geomAttrib_0, int((((_284 + 4u) + _283) >> 2u) + 1u)).x);
    uint _293 = _292.y;
    float _297 = float(int(uint(int(_293 << 16u) >> int(16u))));
    float _298 = float(int(uint(int(_293) >> int(16u))));
    uvec4 _302 = texelFetch(l_geomAttrib_0, int(((_284 + 12u) + _283) >> 2u));
    uint _303 = _302.x;
    float _307 = float(int(uint(int(_303 << 16u) >> int(16u))));
    float _308 = float(int(uint(int(_303) >> int(16u))));
    uint _317 = (_171 * _166) + 12u;
    uint _338;
    uint _339;
    uint _340;
    uint _341;
    if (_176)
    {
        uvec4 _319 = texelFetch(l_geomAttrib_0, int(_317 >> 2u));
        uint _320 = _319.x;
        _338 = _320 & 255u;
        _339 = (_320 >> 8u) & 255u;
        _340 = (_320 >> 16u) & 255u;
        _341 = 20u;
    }
    else
    {
        uint _326 = _317 >> 2u;
        uvec2 _332 = uvec2(texelFetch(l_geomAttrib_0, int(_326)).x, texelFetch(l_geomAttrib_0, int(_326 + 1u)).x);
        uint _333 = _332.x;
        _338 = _333 & 65535u;
        _339 = _333 >> 16u;
        _340 = _332.y & 65535u;
        _341 = 24u;
    }
    uint _345;
    if (_210)
    {
        _345 = _341;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _341 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _341 + 8u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uint _349 = _173 ? (_345 + 4u) : _345;
    uint _350 = _171 * _166;
    uvec2 _358 = uvec2(_354, texelFetch(l_geomAttrib_0, int((((_350 + 4u) + _349) >> 2u) + 1u)).x);
    uint _359 = _358.y;
    float _363 = float(int(uint(int(_359 << 16u) >> int(16u))));
    float _364 = float(int(uint(int(_359) >> int(16u))));
    uvec4 _368 = texelFetch(l_geomAttrib_0, int(((_350 + 12u) + _349) >> 2u));
    uint _369 = _368.x;
    float _373 = float(int(uint(int(_369 << 16u) >> int(16u))));
    float _374 = float(int(uint(int(_369) >> int(16u))));
    bool _383 = _122.z == 0u;
    float _419;
    float _420;
    float _421;
    if (_383)
    {
        uint _386 = _163 * 3u;
        uvec3 _395 = uvec3(texelFetch(l_geomPositionBuffer, int(_386)).x, texelFetch(l_geomPositionBuffer, int(_386 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_386 + 2u)).x);
        _419 = uintBitsToFloat(_395.x);
        _420 = uintBitsToFloat(_395.y);
        _421 = uintBitsToFloat(_395.z);
    }
    else
    {
        uint _403 = _163 * 2u;
        uvec2 _409 = uvec2(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x);
        uint _410 = _409.x;
        _419 = unpackHalf2x16(_410).x;
        _420 = unpackHalf2x16(_410 >> 16u).x;
        _421 = unpackHalf2x16(_409.y).x;
    }
    float _457;
    float _458;
    float _459;
    if (_383)
    {
        uint _424 = _165 * 3u;
        uvec3 _433 = uvec3(texelFetch(l_geomPositionBuffer, int(_424)).x, texelFetch(l_geomPositionBuffer, int(_424 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_424 + 2u)).x);
        _457 = uintBitsToFloat(_433.x);
        _458 = uintBitsToFloat(_433.y);
        _459 = uintBitsToFloat(_433.z);
    }
    else
    {
        uint _441 = _165 * 2u;
        uvec2 _447 = uvec2(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x);
        uint _448 = _447.x;
        _457 = unpackHalf2x16(_448).x;
        _458 = unpackHalf2x16(_448 >> 16u).x;
        _459 = unpackHalf2x16(_447.y).x;
    }
    float _495;
    float _496;
    float _497;
    if (_383)
    {
        uint _462 = _166 * 3u;
        uvec3 _471 = uvec3(texelFetch(l_geomPositionBuffer, int(_462)).x, texelFetch(l_geomPositionBuffer, int(_462 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_462 + 2u)).x);
        _495 = uintBitsToFloat(_471.x);
        _496 = uintBitsToFloat(_471.y);
        _497 = uintBitsToFloat(_471.z);
    }
    else
    {
        uint _479 = _166 * 2u;
        uvec2 _485 = uvec2(texelFetch(l_geomPositionBuffer, int(_479)).x, texelFetch(l_geomPositionBuffer, int(_479 + 1u)).x);
        uint _486 = _485.x;
        _495 = unpackHalf2x16(_486).x;
        _496 = unpackHalf2x16(_486 >> 16u).x;
        _497 = unpackHalf2x16(_485.y).x;
    }
    float _500 = (1.0 - hit._m0.x) - hit._m0.y;
    float _560 = _457 - _419;
    float _561 = _458 - _420;
    float _562 = _459 - _421;
    float _565 = fma(_562, gl_ObjectToWorldEXT[2u].x, fma(_561, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _560));
    float _568 = fma(_562, gl_ObjectToWorldEXT[2u].y, fma(_561, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _560));
    float _571 = fma(_562, gl_ObjectToWorldEXT[2u].z, fma(_561, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _560));
    float _572 = _495 - _419;
    float _573 = _496 - _420;
    float _574 = _497 - _421;
    float _577 = fma(_574, gl_ObjectToWorldEXT[2u].x, fma(_573, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _572));
    float _580 = fma(_574, gl_ObjectToWorldEXT[2u].y, fma(_573, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _572));
    float _583 = fma(_574, gl_ObjectToWorldEXT[2u].z, fma(_573, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _572));
    float _599 = ((((float(_202) * _500) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_338) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _601 = ((((float(_203) * _500) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_339) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _602 = ((((float(_204) * _500) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_340) * hit._m0.y)) * 0.0078740157186985015869140625;
    uvec2 _623 = uvec2(textureSize(Nolight_OpacityBlend_snp_0_Texture2D_4, int(0u)));
    bool _628 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _687;
    if (_628)
    {
        float _643 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _649 = (_583 * _568) - (_580 * _571);
        float _652 = (_577 * _571) - (_583 * _565);
        float _655 = (_580 * _565) - (_577 * _568);
        float _684 = ((log2((((float(_623.y) * 0.5) * float(_623.x)) * abs((((_364 - _232) * (_297 - _231)) - ((_363 - _231) * (_298 - _232))) * 2.384185791015625e-07)) / (sqrt(((_652 * _652) + (_655 * _655)) + (_649 * _649)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_643 * gl_WorldRayDirectionEXT.x, _643 * gl_WorldRayDirectionEXT.y, _643 * gl_WorldRayDirectionEXT.z), vec3(_599, _601, _602))));
        _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    }
    else
    {
        _687 = 0.0;
    }
    uvec2 _711 = uvec2(textureSize(Nolight_OpacityBlend_snp_0_Texture2D_5, int(0u)));
    float _763;
    if (_628)
    {
        float _722 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _728 = (_583 * _568) - (_580 * _571);
        float _731 = (_577 * _571) - (_583 * _565);
        float _734 = (_580 * _565) - (_577 * _568);
        float _761 = ((log2((((float(_711.y) * 0.5) * float(_711.x)) * abs((((_374 - _242) * (_307 - _241)) - ((_373 - _241) * (_308 - _242))) * 2.384185791015625e-07)) / (sqrt(((_731 * _731) + (_734 * _734)) + (_728 * _728)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_722 * gl_WorldRayDirectionEXT.x, _722 * gl_WorldRayDirectionEXT.y, _722 * gl_WorldRayDirectionEXT.z), vec3(_599, _601, _602))));
        _763 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    }
    else
    {
        _763 = 0.0;
    }
    float _771 = (((((float(texelFetch(l_geomAttrib_0, int(((_284 + 16u) + _283) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_217 + 16u) + _216) >> 2u)).x & 255u) * _500)) + (float(texelFetch(l_geomAttrib_0, int(((_350 + 16u) + _349) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * textureLod(sampler2D(Nolight_OpacityBlend_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMatDynParam._m0[18u].z * cbPerFrame._m0[22u].x) + ((((_297 * hit._m0.x) + (_231 * _500)) + (_363 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMatDynParam._m0[18u].w * cbPerFrame._m0[22u].x) + ((((_298 * hit._m0.x) + (_232 * _500)) + (_364 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _687).x) * textureLod(sampler2D(Nolight_OpacityBlend_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((cbMatDynParam._m0[18u].x * cbPerFrame._m0[22u].x) + ((((_307 * hit._m0.x) + (_241 * _500)) + (_373 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMatDynParam._m0[18u].y * cbPerFrame._m0[22u].x) + ((((_308 * hit._m0.x) + (_242 * _500)) + (_374 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _763).x;
    if (_771 < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _60;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _60;
        return;
    }
}


