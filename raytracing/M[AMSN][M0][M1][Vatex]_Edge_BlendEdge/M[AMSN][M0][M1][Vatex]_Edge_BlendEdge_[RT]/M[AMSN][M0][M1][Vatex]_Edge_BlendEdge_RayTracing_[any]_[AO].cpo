#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _41
{
    uint _m0;
};

struct _45
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _41 payload;
hitAttributeEXT _45 hit;

void main()
{
    uint _51 = payload._m0;
    float _89 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _90 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _91 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _98 = sqrt(((_90 * _90) + (_89 * _89)) + (_91 * _91)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _109 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _110 = _109.y;
    uint _150;
    uint _152;
    uint _153;
    if (_109.x == 0u)
    {
        uint _118 = (_110 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _127 = uvec3(texelFetch(l_geomIndexBuffer, int(_118)).x, texelFetch(l_geomIndexBuffer, int(_118 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_118 + 2u)).x);
        _150 = _127.x;
        _152 = _127.y;
        _153 = _127.z;
    }
    else
    {
        uint _131 = uint(gl_PrimitiveID) * 6u;
        uint _133 = _131 & 4294967292u;
        uint _136 = (_110 + _133) >> 2u;
        uvec2 _143 = uvec2(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x);
        uint _144 = _143.x;
        uint _145 = _143.y;
        uint _147 = _144 >> 16u;
        uint _148 = _145 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_133 == _131)
        {
            frontier_phi_3_2_ladder = _144 & 65535u;
            frontier_phi_3_2_ladder_1 = _147;
            frontier_phi_3_2_ladder_2 = _148;
        }
        else
        {
            frontier_phi_3_2_ladder = _147;
            frontier_phi_3_2_ladder_1 = _148;
            frontier_phi_3_2_ladder_2 = _145 >> 16u;
        }
        _150 = frontier_phi_3_2_ladder;
        _152 = frontier_phi_3_2_ladder_1;
        _153 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _157 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _158 = _157.x;
    uint _159 = _157.z;
    bool _160 = _159 != 0u;
    bool _162 = _109.w == 0u;
    bool _163 = _160 || _162;
    uint _165 = (_158 * _150) + 12u;
    uint _189;
    uint _190;
    uint _191;
    uint _192;
    if (_163)
    {
        uvec4 _168 = texelFetch(l_geomAttrib_0, int(_165 >> 2u));
        uint _169 = _168.x;
        _189 = _169 & 255u;
        _190 = (_169 >> 8u) & 255u;
        _191 = (_169 >> 16u) & 255u;
        _192 = 20u;
    }
    else
    {
        uint _177 = _165 >> 2u;
        uvec2 _183 = uvec2(texelFetch(l_geomAttrib_0, int(_177)).x, texelFetch(l_geomAttrib_0, int(_177 + 1u)).x);
        uint _184 = _183.x;
        _189 = _184 & 65535u;
        _190 = _184 >> 16u;
        _191 = _183.y & 65535u;
        _192 = 24u;
    }
    bool _198 = _159 == 0u;
    uint _199;
    if (_198)
    {
        _199 = _192;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_162)
        {
            frontier_phi_9_10_ladder = _192 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _192 + 8u;
        }
        _199 = frontier_phi_9_10_ladder;
    }
    uint _204 = _160 ? (_199 + 4u) : _199;
    uint _205 = _158 * _150;
    uint _215 = ((_205 + 4u) + _204) >> 2u;
    uvec2 _221 = uvec2(texelFetch(l_geomAttrib_0, int(_215)).x, texelFetch(l_geomAttrib_0, int(_215 + 1u)).x);
    uint _222 = _221.x;
    uint _223 = _221.y;
    float _227 = float(int(uint(int(_222 << 16u) >> int(16u))));
    float _228 = float(int(uint(int(_222) >> int(16u))));
    float _232 = float(int(uint(int(_223 << 16u) >> int(16u))));
    float _233 = float(int(uint(int(_223) >> int(16u))));
    uint _235 = (_158 * _152) + 12u;
    uint _256;
    uint _257;
    uint _258;
    uint _259;
    if (_163)
    {
        uvec4 _237 = texelFetch(l_geomAttrib_0, int(_235 >> 2u));
        uint _238 = _237.x;
        _256 = _238 & 255u;
        _257 = (_238 >> 8u) & 255u;
        _258 = (_238 >> 16u) & 255u;
        _259 = 20u;
    }
    else
    {
        uint _244 = _235 >> 2u;
        uvec2 _250 = uvec2(texelFetch(l_geomAttrib_0, int(_244)).x, texelFetch(l_geomAttrib_0, int(_244 + 1u)).x);
        uint _251 = _250.x;
        _256 = _251 & 65535u;
        _257 = _251 >> 16u;
        _258 = _250.y & 65535u;
        _259 = 24u;
    }
    uint _263;
    if (_198)
    {
        _263 = _259;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_162)
        {
            frontier_phi_16_17_ladder = _259 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _259 + 8u;
        }
        _263 = frontier_phi_16_17_ladder;
    }
    uint _267 = _160 ? (_263 + 4u) : _263;
    uint _268 = _158 * _152;
    uint _277 = ((_268 + 4u) + _267) >> 2u;
    uvec2 _283 = uvec2(texelFetch(l_geomAttrib_0, int(_277)).x, texelFetch(l_geomAttrib_0, int(_277 + 1u)).x);
    uint _284 = _283.x;
    uint _285 = _283.y;
    float _289 = float(int(uint(int(_284 << 16u) >> int(16u))));
    float _290 = float(int(uint(int(_284) >> int(16u))));
    float _294 = float(int(uint(int(_285 << 16u) >> int(16u))));
    float _295 = float(int(uint(int(_285) >> int(16u))));
    uint _297 = (_158 * _153) + 12u;
    uint _318;
    uint _319;
    uint _320;
    uint _321;
    if (_163)
    {
        uvec4 _299 = texelFetch(l_geomAttrib_0, int(_297 >> 2u));
        uint _300 = _299.x;
        _318 = _300 & 255u;
        _319 = (_300 >> 8u) & 255u;
        _320 = (_300 >> 16u) & 255u;
        _321 = 20u;
    }
    else
    {
        uint _306 = _297 >> 2u;
        uvec2 _312 = uvec2(texelFetch(l_geomAttrib_0, int(_306)).x, texelFetch(l_geomAttrib_0, int(_306 + 1u)).x);
        uint _313 = _312.x;
        _318 = _313 & 65535u;
        _319 = _313 >> 16u;
        _320 = _312.y & 65535u;
        _321 = 24u;
    }
    uint _325;
    if (_198)
    {
        _325 = _321;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_162)
        {
            frontier_phi_23_24_ladder = _321 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _321 + 8u;
        }
        _325 = frontier_phi_23_24_ladder;
    }
    uint _329 = _160 ? (_325 + 4u) : _325;
    uint _330 = _158 * _153;
    uint _339 = ((_330 + 4u) + _329) >> 2u;
    uvec2 _345 = uvec2(texelFetch(l_geomAttrib_0, int(_339)).x, texelFetch(l_geomAttrib_0, int(_339 + 1u)).x);
    uint _346 = _345.x;
    uint _347 = _345.y;
    float _351 = float(int(uint(int(_346 << 16u) >> int(16u))));
    float _352 = float(int(uint(int(_346) >> int(16u))));
    float _356 = float(int(uint(int(_347 << 16u) >> int(16u))));
    float _357 = float(int(uint(int(_347) >> int(16u))));
    bool _359 = _109.z == 0u;
    float _395;
    float _396;
    float _397;
    if (_359)
    {
        uint _362 = _150 * 3u;
        uvec3 _371 = uvec3(texelFetch(l_geomPositionBuffer, int(_362)).x, texelFetch(l_geomPositionBuffer, int(_362 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_362 + 2u)).x);
        _395 = uintBitsToFloat(_371.x);
        _396 = uintBitsToFloat(_371.y);
        _397 = uintBitsToFloat(_371.z);
    }
    else
    {
        uint _379 = _150 * 2u;
        uvec2 _385 = uvec2(texelFetch(l_geomPositionBuffer, int(_379)).x, texelFetch(l_geomPositionBuffer, int(_379 + 1u)).x);
        uint _386 = _385.x;
        _395 = unpackHalf2x16(_386).x;
        _396 = unpackHalf2x16(_386 >> 16u).x;
        _397 = unpackHalf2x16(_385.y).x;
    }
    float _433;
    float _434;
    float _435;
    if (_359)
    {
        uint _400 = _152 * 3u;
        uvec3 _409 = uvec3(texelFetch(l_geomPositionBuffer, int(_400)).x, texelFetch(l_geomPositionBuffer, int(_400 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_400 + 2u)).x);
        _433 = uintBitsToFloat(_409.x);
        _434 = uintBitsToFloat(_409.y);
        _435 = uintBitsToFloat(_409.z);
    }
    else
    {
        uint _417 = _152 * 2u;
        uvec2 _423 = uvec2(texelFetch(l_geomPositionBuffer, int(_417)).x, texelFetch(l_geomPositionBuffer, int(_417 + 1u)).x);
        uint _424 = _423.x;
        _433 = unpackHalf2x16(_424).x;
        _434 = unpackHalf2x16(_424 >> 16u).x;
        _435 = unpackHalf2x16(_423.y).x;
    }
    float _471;
    float _472;
    float _473;
    if (_359)
    {
        uint _438 = _153 * 3u;
        uvec3 _447 = uvec3(texelFetch(l_geomPositionBuffer, int(_438)).x, texelFetch(l_geomPositionBuffer, int(_438 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_438 + 2u)).x);
        _471 = uintBitsToFloat(_447.x);
        _472 = uintBitsToFloat(_447.y);
        _473 = uintBitsToFloat(_447.z);
    }
    else
    {
        uint _455 = _153 * 2u;
        uvec2 _461 = uvec2(texelFetch(l_geomPositionBuffer, int(_455)).x, texelFetch(l_geomPositionBuffer, int(_455 + 1u)).x);
        uint _462 = _461.x;
        _471 = unpackHalf2x16(_462).x;
        _472 = unpackHalf2x16(_462 >> 16u).x;
        _473 = unpackHalf2x16(_461.y).x;
    }
    float _476 = (1.0 - hit._m0.x) - hit._m0.y;
    float _538 = _433 - _395;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _543 = fma(_540, gl_ObjectToWorldEXT[2u].x, fma(_539, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _538));
    float _546 = fma(_540, gl_ObjectToWorldEXT[2u].y, fma(_539, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _538));
    float _549 = fma(_540, gl_ObjectToWorldEXT[2u].z, fma(_539, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _538));
    float _550 = _471 - _395;
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _555 = fma(_552, gl_ObjectToWorldEXT[2u].x, fma(_551, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _550));
    float _558 = fma(_552, gl_ObjectToWorldEXT[2u].y, fma(_551, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _550));
    float _561 = fma(_552, gl_ObjectToWorldEXT[2u].z, fma(_551, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _550));
    float _577 = ((((float(_189) * _476) + (-127.0)) + (float(_256) * hit._m0.x)) + (float(_318) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _579 = ((((float(_190) * _476) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_319) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _580 = ((((float(_191) * _476) + (-127.0)) + (float(_258) * hit._m0.x)) + (float(_320) * hit._m0.y)) * 0.0078740157186985015869140625;
    uvec2 _592 = uvec2(textureSize(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, int(0u)));
    bool _597 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _656;
    if (_597)
    {
        float _612 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _618 = (_561 * _546) - (_558 * _549);
        float _621 = (_555 * _549) - (_561 * _543);
        float _624 = (_558 * _543) - (_555 * _546);
        float _653 = ((log2((((float(_592.y) * 0.5) * float(_592.x)) * abs((((_352 - _228) * (_289 - _227)) - ((_351 - _227) * (_290 - _228))) * 2.384185791015625e-07)) / (sqrt(((_621 * _621) + (_624 * _624)) + (_618 * _618)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_612 * gl_WorldRayDirectionEXT.x, _612 * gl_WorldRayDirectionEXT.y, _612 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    }
    else
    {
        _656 = 0.0;
    }
    uvec2 _678 = uvec2(textureSize(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, int(0u)));
    float _730;
    if (_597)
    {
        float _689 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _695 = (_561 * _546) - (_558 * _549);
        float _698 = (_555 * _549) - (_561 * _543);
        float _701 = (_558 * _543) - (_555 * _546);
        float _728 = ((log2((((float(_678.y) * 0.5) * float(_678.x)) * abs((((_357 - _233) * (_294 - _232)) - ((_356 - _232) * (_295 - _233))) * 2.384185791015625e-07)) / (sqrt(((_698 * _698) + (_701 * _701)) + (_695 * _695)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_689 * gl_WorldRayDirectionEXT.x, _689 * gl_WorldRayDirectionEXT.y, _689 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _730 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    }
    else
    {
        _730 = 0.0;
    }
    float _736 = textureLod(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_3, SS_WrapLinear), vec2((((((_294 * hit._m0.x) + (_232 * _476)) + (_356 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_295 * hit._m0.x) + (_233 * _476)) + (_357 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _730).x * cbMtdParam._m0[10u].x;
    float _737 = ((((float(texelFetch(l_geomAttrib_0, int((_267 + _268) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_204 + _205) >> 2u)).x >> 24u) * _476)) + (float(texelFetch(l_geomAttrib_0, int((_329 + _330) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125) * textureLod(sampler2D(M_AMSN_M0_M1_Vatex_Edge_BlendEdge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((((_289 * hit._m0.x) + (_227 * _476)) + (_351 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_290 * hit._m0.x) + (_228 * _476)) + (_352 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _656).w;
    float _745 = (_737 < 0.5) ? 0.0 : 1.0;
    float _755 = (((((_737 * 2.0) * (1.0 - _745)) * _736) + (-0.5)) + ((1.0 - (((1.0 - _737) * 2.0) * (1.0 - _736))) * _745)) * cbMtdParam._m0[10u].z;
    precise float _759 = _755 * ((_755 > 0.0) ? cbMtdParam._m0[10u].y : (1.0 - cbMtdParam._m0[10u].y));
    precise float _760 = cbMtdParam._m0[10u].y + _759;
    float _835 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
    if (((_761 * _761) * (3.0 - (_761 * 2.0))) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _51;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _51;
        return;
    }
}


