#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1349;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _161;
    uint _163;
    uint _164;
    if (_121.x == 0u)
    {
        uint _129 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_122 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _155 & 65535u;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _156 >> 16u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _161 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _121.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uvec4 _235 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + (_171 ? (_227 + 4u) : _227)) >> 2u));
    uint _236 = _235.x;
    float _240 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _241 = float(int(uint(int(_236) >> int(16u))));
    uint _242 = _169 * _163;
    uint _243 = _242 + 12u;
    uint _264;
    uint _265;
    uint _266;
    uint _267;
    if (_174)
    {
        uvec4 _245 = texelFetch(l_geomAttrib_0, int(_243 >> 2u));
        uint _246 = _245.x;
        _264 = _246 & 255u;
        _265 = (_246 >> 8u) & 255u;
        _266 = (_246 >> 16u) & 255u;
        _267 = 16u;
    }
    else
    {
        uint _252 = _243 >> 2u;
        uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
        uint _259 = _258.x;
        _264 = _259 & 65535u;
        _265 = _259 >> 16u;
        _266 = _258.y & 65535u;
        _267 = 20u;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((_267 + _242) >> 2u));
    uint _274 = _273.x;
    uint _286;
    if (_226)
    {
        _286 = _267 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _267 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _267 + 12u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_242 + 4u) + (_171 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _169 * _164;
    uint _302 = _301 + 12u;
    uint _323;
    uint _324;
    uint _325;
    uint _326;
    if (_174)
    {
        uvec4 _304 = texelFetch(l_geomAttrib_0, int(_302 >> 2u));
        uint _305 = _304.x;
        _323 = _305 & 255u;
        _324 = (_305 >> 8u) & 255u;
        _325 = (_305 >> 16u) & 255u;
        _326 = 16u;
    }
    else
    {
        uint _311 = _302 >> 2u;
        uvec2 _317 = uvec2(texelFetch(l_geomAttrib_0, int(_311)).x, texelFetch(l_geomAttrib_0, int(_311 + 1u)).x);
        uint _318 = _317.x;
        _323 = _318 & 65535u;
        _324 = _318 >> 16u;
        _325 = _317.y & 65535u;
        _326 = 20u;
    }
    uvec4 _332 = texelFetch(l_geomAttrib_0, int((_326 + _301) >> 2u));
    uint _333 = _332.x;
    uint _345;
    if (_226)
    {
        _345 = _326 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _326 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _326 + 12u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uvec4 _353 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_171 ? (_345 + 4u) : _345)) >> 2u));
    uint _354 = _353.x;
    float _358 = float(int(uint(int(_354 << 16u) >> int(16u))));
    float _359 = float(int(uint(int(_354) >> int(16u))));
    bool _361 = _121.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _161 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _161 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _163 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _163 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _164 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _164 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _240) * 0.00048828125;
    float _514 = (_300 - _241) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _564 = (((_299 * hit._m0.x) + (_240 * _478)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _565 = (((_300 * hit._m0.x) + (_241 * _478)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _569 = (((float(_200) * _478) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _572 = (((float(_201) * _478) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = (((float(_202) * _478) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _592 = ((((float(_212 & 255u) * _478) + (-127.0)) + (float(_274 & 255u) * hit._m0.x)) + (float(_333 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_212 >> 8u) & 255u) * _478) + (-127.0)) + (float((_274 >> 8u) & 255u) * hit._m0.x)) + (float((_333 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_212 >> 16u) & 255u) * _478) + (-127.0)) + (float((_274 >> 16u) & 255u) * hit._m0.x)) + (float((_333 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float(_212 >> 24u) * _478) + (-127.0)) + (float(_274 >> 24u) * hit._m0.x)) + (float(_333 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((_593 * _579) - (_594 * _578)) * _595;
    float _606 = ((_594 * _576) - (_592 * _579)) * _595;
    float _607 = ((_592 * _578) - (_593 * _576)) * _595;
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    float _612 = _611 * _605;
    float _613 = _611 * _606;
    float _614 = _611 * _607;
    uvec2 _632 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, int(0u)));
    bool _637 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _690;
    if (_637)
    {
        float _648 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _654 = (_563 * _548) - (_560 * _551);
        float _657 = (_557 * _551) - (_563 * _545);
        float _660 = (_560 * _545) - (_557 * _548);
        float _687 = ((log2((((float(_632.y) * 0.5) * float(_632.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_657 * _657) + (_660 * _660)) + (_654 * _654)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_648 * gl_WorldRayDirectionEXT.x, _648 * gl_WorldRayDirectionEXT.y, _648 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    }
    else
    {
        _690 = 0.0;
    }
    vec4 _694 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _564) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _565) + cbTextureTilingScale._m0[0u].w), _690);
    float _699 = _694.x * cbMtdParam._m0[9u].x;
    float _700 = _694.y * cbMtdParam._m0[9u].y;
    float _701 = _694.z * cbMtdParam._m0[9u].z;
    uvec2 _722 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, int(0u)));
    float _773;
    if (_637)
    {
        float _733 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _739 = (_563 * _548) - (_560 * _551);
        float _742 = (_557 * _551) - (_563 * _545);
        float _745 = (_560 * _545) - (_557 * _548);
        float _771 = ((log2((((float(_722.y) * 0.5) * float(_722.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_742 * _742) + (_745 * _745)) + (_739 * _739)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_733 * gl_WorldRayDirectionEXT.x, _733 * gl_WorldRayDirectionEXT.y, _733 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _773 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    }
    else
    {
        _773 = 0.0;
    }
    vec4 _776 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _564) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _565) + cbTextureTilingScale._m0[1u].w), _773);
    float _780 = _776.z;
    float _783 = (_776.x * 2.0) + (-1.0);
    float _785 = (_776.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_783, _785), vec2(_783, _785));
    float _1439 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0))));
    float _794 = fma(_791, _576, fma(_785, _592, _783 * _612));
    float _797 = fma(_791, _578, fma(_785, _593, _783 * _613));
    float _800 = fma(_791, _579, fma(_785, _594, _783 * _614));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _812 = cbMtdParam._m0[10u].x + dot(vec4(_804 * _794, _804 * _797, _804 * _800, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _1450 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _813 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
    uvec2 _825 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, int(0u)));
    float _876;
    if (_637)
    {
        float _836 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _842 = (_563 * _548) - (_560 * _551);
        float _845 = (_557 * _551) - (_563 * _545);
        float _848 = (_560 * _545) - (_557 * _548);
        float _874 = ((log2((((float(_825.y) * 0.5) * float(_825.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_845 * _845) + (_848 * _848)) + (_842 * _842)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_836 * gl_WorldRayDirectionEXT.x, _836 * gl_WorldRayDirectionEXT.y, _836 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _876 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    }
    else
    {
        _876 = 0.0;
    }
    vec4 _878 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _564) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _565) + cbTextureTilingScale._m0[3u].w), _876);
    float _889 = ((_878.x - _699) * _813) + _699;
    float _890 = ((_878.y - _700) * _813) + _700;
    float _891 = ((_878.z - _701) * _813) + _701;
    uvec2 _903 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, int(0u)));
    float _907 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _908 = _907 * gl_WorldRayDirectionEXT.x;
    float _909 = _907 * gl_WorldRayDirectionEXT.y;
    float _910 = _907 * gl_WorldRayDirectionEXT.z;
    float _954;
    if (_637)
    {
        float _920 = (_563 * _548) - (_560 * _551);
        float _923 = (_557 * _551) - (_563 * _545);
        float _926 = (_560 * _545) - (_557 * _548);
        float _952 = ((log2((((float(_903.y) * 0.5) * float(_903.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_923 * _923) + (_926 * _926)) + (_920 * _920)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_908, _909, _910), vec3(_576, _578, _579))));
        _954 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    }
    else
    {
        _954 = 0.0;
    }
    vec4 _956 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _564) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _565) + cbTextureTilingScale._m0[4u].w), _954);
    float _963 = (_956.x * 2.0) + (-1.0);
    float _964 = (_956.y * 2.0) + (-1.0);
    float _965 = dot(vec2(_963, _964), vec2(_963, _964));
    float _1471 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _973 = ((_956.z - _780) * _813) + _780;
    float _982 = ((sqrt(1.0 - (isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0)))) - _791) * _813) + _791;
    float _986 = (((_963 - _783) * _813) + _783) + (cbMtdParam._m0[10u].y * _783);
    float _987 = (((_964 - _785) * _813) + _785) + (cbMtdParam._m0[10u].y * _785);
    float _990 = fma(_982, _576, fma(_987, _592, _986 * _612));
    float _993 = fma(_982, _578, fma(_987, _593, _986 * _613));
    float _996 = fma(_982, _579, fma(_987, _594, _986 * _614));
    float _1000 = inversesqrt(dot(vec3(_990, _993, _996), vec3(_990, _993, _996)));
    float _1001 = _1000 * _990;
    float _1002 = _1000 * _993;
    float _1003 = _1000 * _996;
    float _1015 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1016 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1017 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1018 = (-0.0) - _908;
    float _1020 = (-0.0) - _909;
    float _1021 = (-0.0) - _910;
    float _1027 = float(gl_LaunchIDEXT.x);
    float _1028 = float(gl_LaunchIDEXT.y);
    float _1031 = float(gl_LaunchSizeEXT.x);
    float _1045 = fract(fract(sin(dot(vec2(_1027 / _1031, _1028 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1058 = fract(fract(sin(dot(vec2((_1027 + 128.0) / _1031, (_1028 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _1068 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1069 = _1068.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1069, _1068.w, _1069, vec3(_1015, _1016, _1017), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (_63._m0 == 0u)
    {
        float _1090 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1001, _1002, _1003));
        float _1482 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1093 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        float _1112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _973) * 0.949999988079071044921875);
        float _1113 = _1112 * _1112;
        float _1114 = g_sceneCB._m0[4u].x - _908;
        float _1115 = g_sceneCB._m0[4u].y - _909;
        float _1116 = g_sceneCB._m0[4u].z - _910;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1121 = _1120 * _1114;
        float _1122 = _1120 * _1115;
        float _1123 = _1120 * _1116;
        float _1124 = dot(vec3(_1001, _1002, _1003), vec3(g_sceneCB._m0[4u].xyz));
        float _1493 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1127 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        float _1128 = dot(vec3(_1001, _1002, _1003), vec3(_1018, _1020, _1021));
        float _1504 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1131 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        float _1132 = dot(vec3(_1001, _1002, _1003), vec3(_1121, _1122, _1123));
        float _1515 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1135 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
        float _1136 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1121, _1122, _1123));
        float _1526 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1113 * _1113;
        float _1144 = ((_1135 * _1135) * (_1140 + (-1.0))) + 1.0;
        float _1156 = (exp2(log2(1.0 - (isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1158 = 1.0 - _1113;
        float _1169 = (0.5 / (((_1131 * ((_1127 * _1158) + _1113)) + 9.9999999392252902907785028219223e-09) + (((_1131 * _1158) + _1113) * _1127))) * _1127;
        float _1537 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1171 = (isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0))) * (_1140 / ((_1144 * _1144) * 3.141590118408203125));
        _1178 = ((_889 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1093;
        _1179 = ((_890 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1093;
        _1180 = ((_891 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1093;
        _1181 = (_1156 * g_sceneCB._m0[5u].x) * _1171;
        _1182 = (_1156 * g_sceneCB._m0[5u].y) * _1171;
        _1183 = (_1156 * g_sceneCB._m0[5u].z) * _1171;
    }
    else
    {
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    bool _1185 = abs(_1002) < 0.89999997615814208984375;
    float _1187 = float(_1185);
    float _1188 = _1185 ? 0.0 : 1.0;
    float _1191 = (_1187 * _1003) - (_1188 * _1002);
    float _1192 = _1188 * _1001;
    float _1194 = (-0.0) - (_1001 * _1187);
    float _1198 = inversesqrt(dot(vec3(_1191, _1192, _1194), vec3(_1191, _1192, _1194)));
    float _1199 = _1191 * _1198;
    float _1200 = _1192 * _1198;
    float _1201 = _1198 * _1194;
    float _1204 = (_1200 * _1003) - (_1201 * _1002);
    float _1207 = (_1201 * _1001) - (_1199 * _1003);
    float _1210 = (_1199 * _1002) - (_1200 * _1001);
    float _1212;
    float _1220;
    float _1211 = 0.0;
    uint _1213 = 0u;
    float _1217;
    bool _1219;
    for (;;)
    {
        _1217 = (float(_1213) + _1045) * 0.03125;
        _1219 = _1213 == 0u;
        float frontier_phi_47_pred;
        if (_1219)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1354;
            float _1355;
            uint _1357;
            _1354 = 0.0;
            _1355 = 0.5;
            _1357 = _1213;
            float _1221;
            for (;;)
            {
                _1221 = ((_1357 & 1u) != 0u) ? (_1355 + _1354) : _1354;
                uint _1358 = _1357 >> 1u;
                if (_1358 == 0u)
                {
                    break;
                }
                else
                {
                    _1354 = _1221;
                    _1355 *= 0.5;
                    _1357 = _1358;
                }
            }
            frontier_phi_47_pred = _1221;
        }
        _1220 = frontier_phi_47_pred;
        float _1222 = _1220 + _1058;
        float _1226 = sqrt(_1217);
        float _1227 = ((_1222 > 1.0) ? (_1222 + (-1.0)) : _1222) * 6.283185482025146484375;
        float _1230 = cos(_1227) * _1226;
        float _1232 = sin(_1227) * _1226;
        float _1234 = sqrt(1.0 - _1217);
        float _1247 = ((_1234 * _1001) + (_1230 * _1204)) + (_1232 * _1199);
        float _1248 = ((_1234 * _1002) + (_1230 * _1207)) + (_1232 * _1200);
        float _1249 = ((_1234 * _1003) + (_1230 * _1210)) + (_1232 * _1201);
        _62._m0 = 1u;
        uvec4 _1253 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1254 = _1253.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1254, _1253.w, _1254, vec3(_1015, _1016, _1017), 9.9999997473787516355514526367188e-05, vec3(_1247, _1248, _1249), 10000.0, 1);
        float _1260 = dot(vec3(_1001, _1002, _1003), vec3(_1247, _1248, _1249));
        float _1548 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1263 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1212 = ((float(_62._m0 == 0u) * _1263) / (_1263 * 0.3183098733425140380859375)) + _1211;
        uint _1214 = _1213 + 1u;
        if (_1214 == 32u)
        {
            break;
        }
        else
        {
            _1211 = _1212;
            _1213 = _1214;
            continue;
        }
    }
    float _1271 = _1212 * 0.009947183541953563690185546875;
    float _1276 = dot(vec3(_908, _909, _910), vec3(_1001, _1002, _1003)) * 2.0;
    vec4 _1290 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_908 - (_1276 * _1001), _909 - (_1276 * _1002), _910 - (_1276 * _1003)), 4.0 - (_973 * 4.0));
    float _1295 = dot(vec3(_1018, _1020, _1021), vec3(_1001, _1002, _1003));
    float _1559 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    float _1304 = (exp2(log2(1.0 - (isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1310 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1001, _1002, _1003), 0.0);
    float _1321 = (_1181 + _1178) + (((_1310.x * _889) + (_1304 * _1290.x)) * _1271);
    float _1325 = (_1182 + _1179) + (((_1310.y * _890) + (_1304 * _1290.y)) * _1271);
    float _1329 = (_1183 + _1180) + (((_1310.z * _891) + (_1304 * _1290.z)) * _1271);
    float _1570 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1581 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1592 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    bool _1337 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1348;
    _1348.x = _1337 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0)));
    _1348.y = _1337 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0)));
    _1348.z = _1337 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0)));
    payload._m0 = _1348;
}


