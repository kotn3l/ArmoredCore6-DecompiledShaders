#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 2) uniform texture2D P_LaserBlade_001_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_LaserBlade_001_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_LaserBlade_001_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D P_LaserBlade_001_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D P_LaserBlade_001_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _1533;

void main()
{
    float _82 = float(gl_LaunchSizeEXT.y);
    float _110 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _119 = sqrt(((_111 * _111) + (_110 * _110)) + (_112 * _112)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _82)))));
    uvec4 _130 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _131 = _130.y;
    uint _171;
    uint _173;
    uint _174;
    if (_130.x == 0u)
    {
        uint _139 = (_131 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _148 = uvec3(texelFetch(l_geomIndexBuffer, int(_139)).x, texelFetch(l_geomIndexBuffer, int(_139 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_139 + 2u)).x);
        _171 = _148.x;
        _173 = _148.y;
        _174 = _148.z;
    }
    else
    {
        uint _152 = uint(gl_PrimitiveID) * 6u;
        uint _154 = _152 & 4294967292u;
        uint _157 = (_131 + _154) >> 2u;
        uvec2 _164 = uvec2(texelFetch(l_geomIndexBuffer, int(_157)).x, texelFetch(l_geomIndexBuffer, int(_157 + 1u)).x);
        uint _165 = _164.x;
        uint _166 = _164.y;
        uint _168 = _165 >> 16u;
        uint _169 = _166 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_154 == _152)
        {
            frontier_phi_3_2_ladder = _169;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _165 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _166 >> 16u;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _171 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder_1;
        _174 = frontier_phi_3_2_ladder;
    }
    uvec4 _178 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _179 = _178.x;
    uint _180 = _178.z;
    bool _181 = _180 != 0u;
    bool _183 = _130.w == 0u;
    bool _184 = _181 || _183;
    uint _186 = (_179 * _171) + 12u;
    uint _210;
    uint _211;
    uint _212;
    uint _213;
    if (_184)
    {
        uvec4 _189 = texelFetch(l_geomAttrib_0, int(_186 >> 2u));
        uint _190 = _189.x;
        _210 = _190 & 255u;
        _211 = (_190 >> 8u) & 255u;
        _212 = (_190 >> 16u) & 255u;
        _213 = 20u;
    }
    else
    {
        uint _198 = _186 >> 2u;
        uvec2 _204 = uvec2(texelFetch(l_geomAttrib_0, int(_198)).x, texelFetch(l_geomAttrib_0, int(_198 + 1u)).x);
        uint _205 = _204.x;
        _210 = _205 & 65535u;
        _211 = _205 >> 16u;
        _212 = _204.y & 65535u;
        _213 = 24u;
    }
    bool _219 = _180 == 0u;
    uint _220;
    if (_219)
    {
        _220 = _213;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_183)
        {
            frontier_phi_9_10_ladder = _213 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _213 + 8u;
        }
        _220 = frontier_phi_9_10_ladder;
    }
    uint _225 = _181 ? (_220 + 4u) : _220;
    uint _226 = _179 * _171;
    uvec4 _231 = texelFetch(l_geomAttrib_0, int(((_226 + 4u) + _225) >> 2u));
    uint _232 = _231.x;
    float _236 = float(int(uint(int(_232 << 16u) >> int(16u))));
    float _237 = float(int(uint(int(_232) >> int(16u))));
    uvec4 _241 = texelFetch(l_geomAttrib_0, int(((_226 + 8u) + _225) >> 2u));
    uint _242 = _241.x;
    uvec4 _254 = texelFetch(l_geomAttrib_0, int(((_226 + 16u) + _225) >> 2u));
    uint _255 = _254.x;
    uint _265 = (_179 * _173) + 12u;
    uint _286;
    uint _287;
    uint _288;
    uint _289;
    if (_184)
    {
        uvec4 _267 = texelFetch(l_geomAttrib_0, int(_265 >> 2u));
        uint _268 = _267.x;
        _286 = _268 & 255u;
        _287 = (_268 >> 8u) & 255u;
        _288 = (_268 >> 16u) & 255u;
        _289 = 20u;
    }
    else
    {
        uint _274 = _265 >> 2u;
        uvec2 _280 = uvec2(texelFetch(l_geomAttrib_0, int(_274)).x, texelFetch(l_geomAttrib_0, int(_274 + 1u)).x);
        uint _281 = _280.x;
        _286 = _281 & 65535u;
        _287 = _281 >> 16u;
        _288 = _280.y & 65535u;
        _289 = 24u;
    }
    uint _293;
    if (_219)
    {
        _293 = _289;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_183)
        {
            frontier_phi_16_17_ladder = _289 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _289 + 8u;
        }
        _293 = frontier_phi_16_17_ladder;
    }
    uint _297 = _181 ? (_293 + 4u) : _293;
    uint _298 = _179 * _173;
    uvec4 _302 = texelFetch(l_geomAttrib_0, int(((_298 + 4u) + _297) >> 2u));
    uint _303 = _302.x;
    float _307 = float(int(uint(int(_303 << 16u) >> int(16u))));
    float _308 = float(int(uint(int(_303) >> int(16u))));
    uvec4 _312 = texelFetch(l_geomAttrib_0, int(((_298 + 8u) + _297) >> 2u));
    uint _313 = _312.x;
    uvec4 _325 = texelFetch(l_geomAttrib_0, int(((_298 + 16u) + _297) >> 2u));
    uint _326 = _325.x;
    uint _336 = (_179 * _174) + 12u;
    uint _357;
    uint _358;
    uint _359;
    uint _360;
    if (_184)
    {
        uvec4 _338 = texelFetch(l_geomAttrib_0, int(_336 >> 2u));
        uint _339 = _338.x;
        _357 = _339 & 255u;
        _358 = (_339 >> 8u) & 255u;
        _359 = (_339 >> 16u) & 255u;
        _360 = 20u;
    }
    else
    {
        uint _345 = _336 >> 2u;
        uvec2 _351 = uvec2(texelFetch(l_geomAttrib_0, int(_345)).x, texelFetch(l_geomAttrib_0, int(_345 + 1u)).x);
        uint _352 = _351.x;
        _357 = _352 & 65535u;
        _358 = _352 >> 16u;
        _359 = _351.y & 65535u;
        _360 = 24u;
    }
    uint _364;
    if (_219)
    {
        _364 = _360;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_183)
        {
            frontier_phi_23_24_ladder = _360 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _360 + 8u;
        }
        _364 = frontier_phi_23_24_ladder;
    }
    uint _368 = _181 ? (_364 + 4u) : _364;
    uint _369 = _179 * _174;
    uvec4 _373 = texelFetch(l_geomAttrib_0, int(((_369 + 4u) + _368) >> 2u));
    uint _374 = _373.x;
    float _378 = float(int(uint(int(_374 << 16u) >> int(16u))));
    float _379 = float(int(uint(int(_374) >> int(16u))));
    uvec4 _383 = texelFetch(l_geomAttrib_0, int(((_369 + 8u) + _368) >> 2u));
    uint _384 = _383.x;
    uvec4 _396 = texelFetch(l_geomAttrib_0, int(((_369 + 16u) + _368) >> 2u));
    uint _397 = _396.x;
    bool _407 = _130.z == 0u;
    float _443;
    float _444;
    float _445;
    if (_407)
    {
        uint _410 = _171 * 3u;
        uvec3 _419 = uvec3(texelFetch(l_geomPositionBuffer, int(_410)).x, texelFetch(l_geomPositionBuffer, int(_410 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_410 + 2u)).x);
        _443 = uintBitsToFloat(_419.x);
        _444 = uintBitsToFloat(_419.y);
        _445 = uintBitsToFloat(_419.z);
    }
    else
    {
        uint _427 = _171 * 2u;
        uvec2 _433 = uvec2(texelFetch(l_geomPositionBuffer, int(_427)).x, texelFetch(l_geomPositionBuffer, int(_427 + 1u)).x);
        uint _434 = _433.x;
        _443 = unpackHalf2x16(_434).x;
        _444 = unpackHalf2x16(_434 >> 16u).x;
        _445 = unpackHalf2x16(_433.y).x;
    }
    float _481;
    float _482;
    float _483;
    if (_407)
    {
        uint _448 = _173 * 3u;
        uvec3 _457 = uvec3(texelFetch(l_geomPositionBuffer, int(_448)).x, texelFetch(l_geomPositionBuffer, int(_448 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_448 + 2u)).x);
        _481 = uintBitsToFloat(_457.x);
        _482 = uintBitsToFloat(_457.y);
        _483 = uintBitsToFloat(_457.z);
    }
    else
    {
        uint _465 = _173 * 2u;
        uvec2 _471 = uvec2(texelFetch(l_geomPositionBuffer, int(_465)).x, texelFetch(l_geomPositionBuffer, int(_465 + 1u)).x);
        uint _472 = _471.x;
        _481 = unpackHalf2x16(_472).x;
        _482 = unpackHalf2x16(_472 >> 16u).x;
        _483 = unpackHalf2x16(_471.y).x;
    }
    float _519;
    float _520;
    float _521;
    if (_407)
    {
        uint _486 = _174 * 3u;
        uvec3 _495 = uvec3(texelFetch(l_geomPositionBuffer, int(_486)).x, texelFetch(l_geomPositionBuffer, int(_486 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_486 + 2u)).x);
        _519 = uintBitsToFloat(_495.x);
        _520 = uintBitsToFloat(_495.y);
        _521 = uintBitsToFloat(_495.z);
    }
    else
    {
        uint _503 = _174 * 2u;
        uvec2 _509 = uvec2(texelFetch(l_geomPositionBuffer, int(_503)).x, texelFetch(l_geomPositionBuffer, int(_503 + 1u)).x);
        uint _510 = _509.x;
        _519 = unpackHalf2x16(_510).x;
        _520 = unpackHalf2x16(_510 >> 16u).x;
        _521 = unpackHalf2x16(_509.y).x;
    }
    float _524 = (1.0 - hit._m0.x) - hit._m0.y;
    float _583 = (_307 - _236) * 0.00048828125;
    float _585 = (_308 - _237) * 0.00048828125;
    float _588 = (_378 - _236) * 0.00048828125;
    float _589 = (_379 - _237) * 0.00048828125;
    float _611 = _481 - _443;
    float _612 = _482 - _444;
    float _613 = _483 - _445;
    float _616 = fma(_613, gl_ObjectToWorldEXT[2u].x, fma(_612, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _611));
    float _619 = fma(_613, gl_ObjectToWorldEXT[2u].y, fma(_612, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _611));
    float _622 = fma(_613, gl_ObjectToWorldEXT[2u].z, fma(_612, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _611));
    float _623 = _519 - _443;
    float _624 = _520 - _444;
    float _625 = _521 - _445;
    float _628 = fma(_625, gl_ObjectToWorldEXT[2u].x, fma(_624, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _623));
    float _631 = fma(_625, gl_ObjectToWorldEXT[2u].y, fma(_624, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _623));
    float _634 = fma(_625, gl_ObjectToWorldEXT[2u].z, fma(_624, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _623));
    float _635 = (((_307 * hit._m0.x) + (_236 * _524)) + (_378 * hit._m0.y)) * 0.00048828125;
    float _636 = (((_308 * hit._m0.x) + (_237 * _524)) + (_379 * hit._m0.y)) * 0.00048828125;
    float _640 = (((float(_210) * _524) + (-127.0)) + (float(_286) * hit._m0.x)) + (float(_357) * hit._m0.y);
    float _643 = (((float(_211) * _524) + (-127.0)) + (float(_287) * hit._m0.x)) + (float(_358) * hit._m0.y);
    float _646 = (((float(_212) * _524) + (-127.0)) + (float(_288) * hit._m0.x)) + (float(_359) * hit._m0.y);
    float _647 = _640 * 0.0078740157186985015869140625;
    float _649 = _643 * 0.0078740157186985015869140625;
    float _650 = _646 * 0.0078740157186985015869140625;
    float _659 = cbMtdParam._m0[21u].y * cbPerFrame._m0[22u].x;
    float _662 = (_659 * cbMtdParam._m0[22u].z) + _635;
    float _663 = (_659 * cbMtdParam._m0[22u].w) + _636;
    float _684 = (cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[23u].x * cbPerFrame._m0[22u].x) + _635)) + cbTextureTilingScale._m0[4u].z;
    float _685 = (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x) + _636)) + cbTextureTilingScale._m0[4u].w;
    uvec2 _687 = uvec2(textureSize(P_LaserBlade_001_snp_0_Texture2D_4, int(0u)));
    bool _692 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _745;
    if (_692)
    {
        float _703 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _709 = (_634 * _619) - (_631 * _622);
        float _712 = (_628 * _622) - (_634 * _616);
        float _715 = (_631 * _616) - (_628 * _619);
        float _742 = ((log2((((float(_687.y) * 0.5) * float(_687.x)) * abs((_589 * _583) - (_588 * _585))) / (sqrt(((_712 * _712) + (_715 * _715)) + (_709 * _709)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_703 * gl_WorldRayDirectionEXT.x, _703 * gl_WorldRayDirectionEXT.y, _703 * gl_WorldRayDirectionEXT.z), vec3(_647, _649, _650))));
        _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    }
    else
    {
        _745 = 0.0;
    }
    vec4 _749 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_4, SS_WrapLinear), vec2(_684, _685), _745);
    float _754 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[16u].z;
    float _760 = ((_749.y * 0.5) + (-0.25)) * cbMtdParam._m0[16u].y;
    float _762 = (-0.0) - (cbMtdParam._m0[16u].y * ((_749.x * 0.5) + (-0.25)));
    float _764 = fract(_754);
    float _766 = fract(_754 + 0.5);
    float _778 = abs((_764 * 2.0) + (-1.0));
    vec4 _796 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_764 * _762) + _662) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_760 * _764) + _663) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _798 = _796.x;
    float _799 = _796.y;
    float _800 = _796.z;
    vec4 _801 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_766 * _762) + _662) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_760 * _766) + _663) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _819 = (cbMtdParam._m0[22u].x * _659) + _635;
    float _820 = (cbMtdParam._m0[22u].y * _659) + _636;
    float _871;
    if (_692)
    {
        float _831 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _837 = (_634 * _619) - (_631 * _622);
        float _840 = (_628 * _622) - (_634 * _616);
        float _843 = (_631 * _616) - (_628 * _619);
        float _869 = ((log2((((float(_687.y) * 0.5) * float(_687.x)) * abs((_589 * _583) - (_588 * _585))) / (sqrt(((_840 * _840) + (_843 * _843)) + (_837 * _837)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_831 * gl_WorldRayDirectionEXT.x, _831 * gl_WorldRayDirectionEXT.y, _831 * gl_WorldRayDirectionEXT.z), vec3(_647, _649, _650))));
        _871 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    }
    else
    {
        _871 = 0.0;
    }
    vec4 _873 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_4, SS_WrapLinear), vec2(_684, _685), _871);
    float _881 = ((_873.y * 0.5) + (-0.25)) * cbMtdParam._m0[16u].y;
    float _883 = (-0.0) - (cbMtdParam._m0[16u].y * ((_873.x * 0.5) + (-0.25)));
    vec4 _908 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_764 * _883) + _819) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_881 * _764) + _820) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _910 = _908.x;
    float _911 = _908.y;
    float _912 = _908.z;
    vec4 _913 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_766 * _883) + _819) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_881 * _766) + _820) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _938 = cbMtdParam._m0[14u].x * (((_801.x - _798) * _778) + _798);
    float _939 = cbMtdParam._m0[14u].y * (((_801.y - _799) * _778) + _799);
    float _940 = cbMtdParam._m0[14u].z * (((_801.z - _800) * _778) + _800);
    float _956 = (((((float(_326 & 255u) * hit._m0.x) + (float(_255 & 255u) * _524)) + (float(_397 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((cbMtdParam._m0[13u].x * (((_913.x - _910) * _778) + _910)) - _938)) + _938;
    float _957 = (((((float((_326 >> 8u) & 255u) * hit._m0.x) + (float((_255 >> 8u) & 255u) * _524)) + (float((_397 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((cbMtdParam._m0[13u].y * (((_913.y - _911) * _778) + _911)) - _939)) + _939;
    float _958 = (((((float((_326 >> 16u) & 255u) * hit._m0.x) + (float((_255 >> 16u) & 255u) * _524)) + (float((_397 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * ((cbMtdParam._m0[13u].z * (((_913.z - _912) * _778) + _912)) - _940)) + _940;
    float _965 = (((((float(_313 & 255u) * hit._m0.x) + (float(_242 & 255u) * _524)) + (float(_384 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[12u].x - _956)) + _956;
    float _966 = (((((float((_313 >> 8u) & 255u) * hit._m0.x) + (float((_242 >> 8u) & 255u) * _524)) + (float((_384 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[12u].y - _957)) + _957;
    float _967 = (((((float((_313 >> 16u) & 255u) * hit._m0.x) + (float((_242 >> 16u) & 255u) * _524)) + (float((_384 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[12u].z - _958)) + _958;
    float _978 = (cbMtdParam._m0[23u].z * _659) + _635;
    float _979 = (cbMtdParam._m0[23u].w * _659) + _636;
    float _1030;
    if (_692)
    {
        float _990 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _996 = (_634 * _619) - (_631 * _622);
        float _999 = (_628 * _622) - (_634 * _616);
        float _1002 = (_631 * _616) - (_628 * _619);
        float _1028 = ((log2((((float(_687.y) * 0.5) * float(_687.x)) * abs((_589 * _583) - (_588 * _585))) / (sqrt(((_999 * _999) + (_1002 * _1002)) + (_996 * _996)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_990 * gl_WorldRayDirectionEXT.x, _990 * gl_WorldRayDirectionEXT.y, _990 * gl_WorldRayDirectionEXT.z), vec3(_647, _649, _650))));
        _1030 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    }
    else
    {
        _1030 = 0.0;
    }
    vec4 _1032 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_4, SS_WrapLinear), vec2(_684, _685), _1030);
    float _1040 = ((_1032.y * 0.5) + (-0.25)) * cbMtdParam._m0[16u].y;
    float _1042 = (-0.0) - (cbMtdParam._m0[16u].y * ((_1032.x * 0.5) + (-0.25)));
    vec4 _1068 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_764 * _1042) + _978) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1040 * _764) + _979) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1070 = _1068.x;
    float _1071 = _1068.y;
    float _1072 = _1068.z;
    vec4 _1073 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_766 * _1042) + _978) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1040 * _766) + _979) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1099 = abs((fract(cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1628 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1100 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    float _1111 = 1.0 - cbMtdParam._m0[15u].y;
    float _1114 = (((_1100 * _1100) * (3.0 - (_1100 * 2.0))) - cbMtdParam._m0[15u].y) / (isnan(0.001000000047497451305389404296875) ? _1111 : (isnan(_1111) ? 0.001000000047497451305389404296875 : max(_1111, 0.001000000047497451305389404296875)));
    float _1644 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = (isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0))) - cbMtdParam._m0[16u].w;
    float _1124 = (cbMtdParam._m0[21u].z * _659) + _635;
    float _1125 = (cbMtdParam._m0[21u].w * _659) + _636;
    float _1129 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1130 = _1129 * gl_WorldRayDirectionEXT.x;
    float _1131 = _1129 * gl_WorldRayDirectionEXT.y;
    float _1132 = _1129 * gl_WorldRayDirectionEXT.z;
    float _1176;
    if (_692)
    {
        float _1142 = (_634 * _619) - (_631 * _622);
        float _1145 = (_628 * _622) - (_634 * _616);
        float _1148 = (_631 * _616) - (_628 * _619);
        float _1174 = ((log2((((float(_687.y) * 0.5) * float(_687.x)) * abs((_589 * _583) - (_588 * _585))) / (sqrt(((_1145 * _1145) + (_1148 * _1148)) + (_1142 * _1142)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_1130, _1131, _1132), vec3(_647, _649, _650))));
        _1176 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    }
    else
    {
        _1176 = 0.0;
    }
    vec4 _1178 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_4, SS_WrapLinear), vec2(_684, _685), _1176);
    float _1186 = ((_1178.y * 0.5) + (-0.25)) * cbMtdParam._m0[16u].y;
    float _1188 = (-0.0) - (cbMtdParam._m0[16u].y * ((_1178.x * 0.5) + (-0.25)));
    vec4 _1213 = textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_764 * _1188) + _1124) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_1186 * _764) + _1125) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0);
    float _1215 = _1213.x;
    float _1221 = ((textureLod(sampler2D(P_LaserBlade_001_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_766 * _1188) + _1124) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_1186 * _766) + _1125) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0).x - _1215) * _778) + _1215;
    float _1245 = inversesqrt(dot(vec3(_647, _649, _650), vec3(_647, _649, _650)));
    float _1246 = _1245 * _647;
    float _1247 = _1245 * _649;
    float _1248 = _1245 * _650;
    float _1260 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1261 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1262 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1263 = (-0.0) - _1130;
    float _1264 = (-0.0) - _1131;
    float _1265 = (-0.0) - _1132;
    float _1271 = float(gl_LaunchIDEXT.x);
    float _1272 = float(gl_LaunchIDEXT.y);
    float _1275 = float(gl_LaunchSizeEXT.x);
    float _1289 = fract(fract(sin(dot(vec2(_1271 / _1275, _1272 / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1302 = fract(fract(sin(dot(vec2((_1271 + 128.0) / _1275, (_1272 + 128.0) / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _68._m0 = 1u;
    uvec4 _1312 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1313 = _1312.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1313, _1312.w, _1313, vec3(_1260, _1261, _1262), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1378;
    float _1379;
    float _1380;
    if (_68._m0 == 0u)
    {
        float _1333 = g_sceneCB._m0[4u].x - _1130;
        float _1334 = g_sceneCB._m0[4u].y - _1131;
        float _1335 = g_sceneCB._m0[4u].z - _1132;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1343 = dot(vec3(_1246, _1247, _1248), vec3(g_sceneCB._m0[4u].xyz));
        float _1660 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1346 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        float _1347 = dot(vec3(_1246, _1247, _1248), vec3(_1263, _1264, _1265));
        float _1671 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1333 * _1339, _1334 * _1339, _1335 * _1339));
        float _1682 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1362 = (exp2(log2(1.0 - (isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1368 = (0.5 / ((_1346 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0))))) * _1346;
        float _1693 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1370 = (isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0))) * 0.31831014156341552734375;
        _1378 = (_1362 * g_sceneCB._m0[5u].x) * _1370;
        _1379 = (_1362 * g_sceneCB._m0[5u].y) * _1370;
        _1380 = (_1362 * g_sceneCB._m0[5u].z) * _1370;
    }
    else
    {
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    bool _1382 = abs(_1247) < 0.89999997615814208984375;
    float _1384 = float(_1382);
    float _1385 = _1382 ? 0.0 : 1.0;
    float _1388 = (_1384 * _1248) - (_1385 * _1247);
    float _1389 = _1385 * _1246;
    float _1391 = (-0.0) - (_1246 * _1384);
    float _1395 = inversesqrt(dot(vec3(_1388, _1389, _1391), vec3(_1388, _1389, _1391)));
    float _1396 = _1388 * _1395;
    float _1397 = _1389 * _1395;
    float _1398 = _1395 * _1391;
    float _1401 = (_1397 * _1248) - (_1398 * _1247);
    float _1404 = (_1398 * _1246) - (_1396 * _1248);
    float _1407 = (_1396 * _1247) - (_1397 * _1246);
    float _1409;
    float _1417;
    float _1408 = 0.0;
    uint _1410 = 0u;
    float _1414;
    bool _1416;
    for (;;)
    {
        _1414 = (float(_1410) + _1289) * 0.03125;
        _1416 = _1410 == 0u;
        float frontier_phi_47_pred;
        if (_1416)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1538;
            float _1539;
            uint _1541;
            _1538 = 0.0;
            _1539 = 0.5;
            _1541 = _1410;
            float _1418;
            for (;;)
            {
                _1418 = ((_1541 & 1u) != 0u) ? (_1539 + _1538) : _1538;
                uint _1542 = _1541 >> 1u;
                if (_1542 == 0u)
                {
                    break;
                }
                else
                {
                    _1538 = _1418;
                    _1539 *= 0.5;
                    _1541 = _1542;
                }
            }
            frontier_phi_47_pred = _1418;
        }
        _1417 = frontier_phi_47_pred;
        float _1419 = _1417 + _1302;
        float _1423 = sqrt(_1414);
        float _1424 = ((_1419 > 1.0) ? (_1419 + (-1.0)) : _1419) * 6.283185482025146484375;
        float _1427 = cos(_1424) * _1423;
        float _1429 = sin(_1424) * _1423;
        float _1431 = sqrt(1.0 - _1414);
        float _1444 = ((_1431 * _1246) + (_1427 * _1401)) + (_1429 * _1396);
        float _1445 = ((_1431 * _1247) + (_1427 * _1404)) + (_1429 * _1397);
        float _1446 = ((_1431 * _1248) + (_1427 * _1407)) + (_1429 * _1398);
        _67._m0 = 1u;
        uvec4 _1450 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1451 = _1450.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1451, _1450.w, _1451, vec3(_1260, _1261, _1262), 9.9999997473787516355514526367188e-05, vec3(_1444, _1445, _1446), 10000.0, 1);
        float _1457 = dot(vec3(_1246, _1247, _1248), vec3(_1444, _1445, _1446));
        float _1704 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1460 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1409 = ((float(_67._m0 == 0u) * _1460) / (_1460 * 0.3183098733425140380859375)) + _1408;
        uint _1411 = _1410 + 1u;
        if (_1411 == 32u)
        {
            break;
        }
        else
        {
            _1408 = _1409;
            _1410 = _1411;
            continue;
        }
    }
    float _1469 = _1409 * 0.009947183541953563690185546875;
    float _1474 = dot(vec3(_1130, _1131, _1132), vec3(_1246, _1247, _1248)) * 2.0;
    vec4 _1486 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1130 - (_1474 * _1246), _1131 - (_1474 * _1247), _1132 - (_1474 * _1248)), 4.0);
    float _1491 = dot(vec3(_1263, _1264, _1265), vec3(_1246, _1247, _1248));
    float _1715 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1500 = (exp2(log2(1.0 - (isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1508 = (_1378 + ((((cbMtdParam._m0[15u].x * ((((((_1073.x - _1070) * _778) + _1070) * cbMtdParam._m0[9u].x) * _1116) - _965)) * _1221) + _965) * cbMtdParam._m0[18u].z)) + ((_1486.x * _1469) * _1500);
    float _1510 = (_1379 + ((((cbMtdParam._m0[15u].x * ((((((_1073.y - _1071) * _778) + _1071) * cbMtdParam._m0[9u].y) * _1116) - _966)) * _1221) + _966) * cbMtdParam._m0[18u].z)) + ((_1486.y * _1469) * _1500);
    float _1512 = (_1380 + ((((cbMtdParam._m0[15u].x * ((((((_1073.z - _1072) * _778) + _1072) * cbMtdParam._m0[9u].z) * _1116) - _967)) * _1221) + _967) * cbMtdParam._m0[18u].z)) + ((_1486.z * _1469) * _1500);
    float _1726 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1737 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _1748 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    bool _1521 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1532;
    _1532.x = _1521 ? ((_640 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0)));
    _1532.y = _1521 ? ((_643 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0)));
    _1532.z = _1521 ? ((_646 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0)));
    payload._m0 = _1532;
}


