#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _49
{
    vec3 _m0;
};

struct _53
{
    vec2 _m0;
};

struct _56
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _49 payload;
hitAttributeEXT _53 hit;
layout(location = 1) rayPayloadEXT _56 _58;
layout(location = 2) rayPayloadEXT _56 _59;

vec3 _931;

void main()
{
    float _67 = float(gl_LaunchSizeEXT.y);
    float _97 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _117 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _118 = _117.y;
    uint _158;
    uint _160;
    uint _161;
    if (_117.x == 0u)
    {
        uint _126 = (_118 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _135 = uvec3(texelFetch(l_geomIndexBuffer, int(_126)).x, texelFetch(l_geomIndexBuffer, int(_126 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_126 + 2u)).x);
        _158 = _135.x;
        _160 = _135.y;
        _161 = _135.z;
    }
    else
    {
        uint _139 = uint(gl_PrimitiveID) * 6u;
        uint _141 = _139 & 4294967292u;
        uint _144 = (_118 + _141) >> 2u;
        uvec2 _151 = uvec2(texelFetch(l_geomIndexBuffer, int(_144)).x, texelFetch(l_geomIndexBuffer, int(_144 + 1u)).x);
        uint _152 = _151.x;
        uint _153 = _151.y;
        uint _155 = _152 >> 16u;
        uint _156 = _153 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_141 == _139)
        {
            frontier_phi_3_2_ladder = _156;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _152 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _153 >> 16u;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _155;
        }
        _158 = frontier_phi_3_2_ladder_2;
        _160 = frontier_phi_3_2_ladder_1;
        _161 = frontier_phi_3_2_ladder;
    }
    uvec4 _165 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _166 = _165.x;
    uint _167 = _165.z;
    bool _168 = _167 != 0u;
    bool _170 = _117.w == 0u;
    bool _171 = _168 || _170;
    uint _173 = (_166 * _158) + 12u;
    uint _197;
    uint _198;
    uint _199;
    uint _200;
    if (_171)
    {
        uvec4 _176 = texelFetch(l_geomAttrib_0, int(_173 >> 2u));
        uint _177 = _176.x;
        _197 = _177 & 255u;
        _198 = (_177 >> 8u) & 255u;
        _199 = (_177 >> 16u) & 255u;
        _200 = 20u;
    }
    else
    {
        uint _185 = _173 >> 2u;
        uvec2 _191 = uvec2(texelFetch(l_geomAttrib_0, int(_185)).x, texelFetch(l_geomAttrib_0, int(_185 + 1u)).x);
        uint _192 = _191.x;
        _197 = _192 & 65535u;
        _198 = _192 >> 16u;
        _199 = _191.y & 65535u;
        _200 = 24u;
    }
    bool _206 = _167 == 0u;
    uint _207;
    if (_206)
    {
        _207 = _200;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_170)
        {
            frontier_phi_9_10_ladder = _200 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _200 + 8u;
        }
        _207 = frontier_phi_9_10_ladder;
    }
    uvec4 _218 = texelFetch(l_geomAttrib_0, int((((_166 * _158) + 4u) + (_168 ? (_207 + 4u) : _207)) >> 2u));
    uint _219 = _218.x;
    float _223 = float(int(uint(int(_219 << 16u) >> int(16u))));
    float _224 = float(int(uint(int(_219) >> int(16u))));
    uint _226 = (_166 * _160) + 12u;
    uint _247;
    uint _248;
    uint _249;
    uint _250;
    if (_171)
    {
        uvec4 _228 = texelFetch(l_geomAttrib_0, int(_226 >> 2u));
        uint _229 = _228.x;
        _247 = _229 & 255u;
        _248 = (_229 >> 8u) & 255u;
        _249 = (_229 >> 16u) & 255u;
        _250 = 20u;
    }
    else
    {
        uint _235 = _226 >> 2u;
        uvec2 _241 = uvec2(texelFetch(l_geomAttrib_0, int(_235)).x, texelFetch(l_geomAttrib_0, int(_235 + 1u)).x);
        uint _242 = _241.x;
        _247 = _242 & 65535u;
        _248 = _242 >> 16u;
        _249 = _241.y & 65535u;
        _250 = 24u;
    }
    uint _254;
    if (_206)
    {
        _254 = _250;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_170)
        {
            frontier_phi_16_17_ladder = _250 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _250 + 8u;
        }
        _254 = frontier_phi_16_17_ladder;
    }
    uvec4 _263 = texelFetch(l_geomAttrib_0, int((((_166 * _160) + 4u) + (_168 ? (_254 + 4u) : _254)) >> 2u));
    uint _264 = _263.x;
    float _268 = float(int(uint(int(_264 << 16u) >> int(16u))));
    float _269 = float(int(uint(int(_264) >> int(16u))));
    uint _271 = (_166 * _161) + 12u;
    uint _292;
    uint _293;
    uint _294;
    uint _295;
    if (_171)
    {
        uvec4 _273 = texelFetch(l_geomAttrib_0, int(_271 >> 2u));
        uint _274 = _273.x;
        _292 = _274 & 255u;
        _293 = (_274 >> 8u) & 255u;
        _294 = (_274 >> 16u) & 255u;
        _295 = 20u;
    }
    else
    {
        uint _280 = _271 >> 2u;
        uvec2 _286 = uvec2(texelFetch(l_geomAttrib_0, int(_280)).x, texelFetch(l_geomAttrib_0, int(_280 + 1u)).x);
        uint _287 = _286.x;
        _292 = _287 & 65535u;
        _293 = _287 >> 16u;
        _294 = _286.y & 65535u;
        _295 = 24u;
    }
    uint _299;
    if (_206)
    {
        _299 = _295;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_170)
        {
            frontier_phi_23_24_ladder = _295 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _295 + 8u;
        }
        _299 = frontier_phi_23_24_ladder;
    }
    uvec4 _308 = texelFetch(l_geomAttrib_0, int((((_166 * _161) + 4u) + (_168 ? (_299 + 4u) : _299)) >> 2u));
    uint _309 = _308.x;
    float _313 = float(int(uint(int(_309 << 16u) >> int(16u))));
    float _314 = float(int(uint(int(_309) >> int(16u))));
    bool _316 = _117.z == 0u;
    float _352;
    float _353;
    float _354;
    if (_316)
    {
        uint _319 = _158 * 3u;
        uvec3 _328 = uvec3(texelFetch(l_geomPositionBuffer, int(_319)).x, texelFetch(l_geomPositionBuffer, int(_319 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_319 + 2u)).x);
        _352 = uintBitsToFloat(_328.x);
        _353 = uintBitsToFloat(_328.y);
        _354 = uintBitsToFloat(_328.z);
    }
    else
    {
        uint _336 = _158 * 2u;
        uvec2 _342 = uvec2(texelFetch(l_geomPositionBuffer, int(_336)).x, texelFetch(l_geomPositionBuffer, int(_336 + 1u)).x);
        uint _343 = _342.x;
        _352 = unpackHalf2x16(_343).x;
        _353 = unpackHalf2x16(_343 >> 16u).x;
        _354 = unpackHalf2x16(_342.y).x;
    }
    float _390;
    float _391;
    float _392;
    if (_316)
    {
        uint _357 = _160 * 3u;
        uvec3 _366 = uvec3(texelFetch(l_geomPositionBuffer, int(_357)).x, texelFetch(l_geomPositionBuffer, int(_357 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_357 + 2u)).x);
        _390 = uintBitsToFloat(_366.x);
        _391 = uintBitsToFloat(_366.y);
        _392 = uintBitsToFloat(_366.z);
    }
    else
    {
        uint _374 = _160 * 2u;
        uvec2 _380 = uvec2(texelFetch(l_geomPositionBuffer, int(_374)).x, texelFetch(l_geomPositionBuffer, int(_374 + 1u)).x);
        uint _381 = _380.x;
        _390 = unpackHalf2x16(_381).x;
        _391 = unpackHalf2x16(_381 >> 16u).x;
        _392 = unpackHalf2x16(_380.y).x;
    }
    float _428;
    float _429;
    float _430;
    if (_316)
    {
        uint _395 = _161 * 3u;
        uvec3 _404 = uvec3(texelFetch(l_geomPositionBuffer, int(_395)).x, texelFetch(l_geomPositionBuffer, int(_395 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_395 + 2u)).x);
        _428 = uintBitsToFloat(_404.x);
        _429 = uintBitsToFloat(_404.y);
        _430 = uintBitsToFloat(_404.z);
    }
    else
    {
        uint _412 = _161 * 2u;
        uvec2 _418 = uvec2(texelFetch(l_geomPositionBuffer, int(_412)).x, texelFetch(l_geomPositionBuffer, int(_412 + 1u)).x);
        uint _419 = _418.x;
        _428 = unpackHalf2x16(_419).x;
        _429 = unpackHalf2x16(_419 >> 16u).x;
        _430 = unpackHalf2x16(_418.y).x;
    }
    float _433 = (1.0 - hit._m0.x) - hit._m0.y;
    float _474 = _390 - _352;
    float _475 = _391 - _353;
    float _476 = _392 - _354;
    float _479 = fma(_476, gl_ObjectToWorldEXT[2u].x, fma(_475, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _474));
    float _482 = fma(_476, gl_ObjectToWorldEXT[2u].y, fma(_475, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _474));
    float _485 = fma(_476, gl_ObjectToWorldEXT[2u].z, fma(_475, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _474));
    float _486 = _428 - _352;
    float _487 = _429 - _353;
    float _488 = _430 - _354;
    float _491 = fma(_488, gl_ObjectToWorldEXT[2u].x, fma(_487, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _486));
    float _494 = fma(_488, gl_ObjectToWorldEXT[2u].y, fma(_487, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _486));
    float _497 = fma(_488, gl_ObjectToWorldEXT[2u].z, fma(_487, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _486));
    float _504 = (((float(_197) * _433) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y);
    float _507 = (((float(_198) * _433) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _510 = (((float(_199) * _433) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _511 = _504 * 0.0078740157186985015869140625;
    float _513 = _507 * 0.0078740157186985015869140625;
    float _514 = _510 * 0.0078740157186985015869140625;
    uvec2 _532 = uvec2(textureSize(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, int(0u)));
    float _541 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _542 = _541 * gl_WorldRayDirectionEXT.x;
    float _543 = _541 * gl_WorldRayDirectionEXT.y;
    float _544 = _541 * gl_WorldRayDirectionEXT.z;
    float _596;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _558 = (_497 * _482) - (_494 * _485);
        float _561 = (_491 * _485) - (_497 * _479);
        float _564 = (_494 * _479) - (_491 * _482);
        float _593 = ((log2((((float(_532.y) * 0.5) * float(_532.x)) * abs((((_314 - _224) * (_268 - _223)) - ((_313 - _223) * (_269 - _224))) * 2.384185791015625e-07)) / (sqrt(((_561 * _561) + (_564 * _564)) + (_558 * _558)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(sqrt(((_98 * _98) + (_97 * _97)) + (_99 * _99)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _67)))))) / abs(dot(vec3(_542, _543, _544), vec3(_511, _513, _514))));
        _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    }
    else
    {
        _596 = 0.0;
    }
    vec4 _600 = textureLod(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((((_268 * hit._m0.x) + (_223 * _433)) + (_313 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_269 * hit._m0.x) + (_224 * _433)) + (_314 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _596);
    float _605 = _600.x * cbMtdParam._m0[9u].x;
    float _606 = _600.y * cbMtdParam._m0[9u].y;
    float _607 = _600.z * cbMtdParam._m0[9u].z;
    float _611 = inversesqrt(dot(vec3(_511, _513, _514), vec3(_511, _513, _514)));
    float _612 = _611 * _511;
    float _613 = _611 * _513;
    float _614 = _611 * _514;
    float _626 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _627 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _628 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _629 = (-0.0) - _542;
    float _631 = (-0.0) - _543;
    float _632 = (-0.0) - _544;
    float _638 = float(gl_LaunchIDEXT.x);
    float _639 = float(gl_LaunchIDEXT.y);
    float _642 = float(gl_LaunchSizeEXT.x);
    float _656 = fract(fract(sin(dot(vec2(_638 / _642, _639 / _67), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _669 = fract(fract(sin(dot(vec2((_638 + 128.0) / _642, (_639 + 128.0) / _67), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _59._m0 = 1u;
    uvec4 _679 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _680 = _679.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _680, _679.w, _680, vec3(_626, _627, _628), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    if (_59._m0 == 0u)
    {
        float _701 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_612, _613, _614));
        float _1010 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _704 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        float _715 = g_sceneCB._m0[4u].x - _542;
        float _716 = g_sceneCB._m0[4u].y - _543;
        float _717 = g_sceneCB._m0[4u].z - _544;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _725 = dot(vec3(_612, _613, _614), vec3(g_sceneCB._m0[4u].xyz));
        float _1021 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _728 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        float _729 = dot(vec3(_612, _613, _614), vec3(_629, _631, _632));
        float _1032 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_715 * _721, _716 * _721, _717 * _721));
        float _1043 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _744 = (exp2(log2(1.0 - (isnan(1.0) ? _1043 : (isnan(_1043) ? 1.0 : min(_1043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _750 = (0.5 / ((_728 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0))))) * _728;
        float _1054 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _752 = (isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0))) * 0.31831014156341552734375;
        _760 = ((_605 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _704;
        _761 = ((_606 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _704;
        _762 = ((_607 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _704;
        _763 = (_744 * g_sceneCB._m0[5u].x) * _752;
        _764 = (_744 * g_sceneCB._m0[5u].y) * _752;
        _765 = (_744 * g_sceneCB._m0[5u].z) * _752;
    }
    else
    {
        _760 = 0.0;
        _761 = 0.0;
        _762 = 0.0;
        _763 = 0.0;
        _764 = 0.0;
        _765 = 0.0;
    }
    bool _767 = abs(_613) < 0.89999997615814208984375;
    float _769 = float(_767);
    float _770 = _767 ? 0.0 : 1.0;
    float _773 = (_769 * _614) - (_770 * _613);
    float _774 = _770 * _612;
    float _776 = (-0.0) - (_612 * _769);
    float _780 = inversesqrt(dot(vec3(_773, _774, _776), vec3(_773, _774, _776)));
    float _781 = _773 * _780;
    float _782 = _774 * _780;
    float _783 = _780 * _776;
    float _786 = (_782 * _614) - (_783 * _613);
    float _789 = (_783 * _612) - (_781 * _614);
    float _792 = (_781 * _613) - (_782 * _612);
    float _794;
    float _802;
    float _793 = 0.0;
    uint _795 = 0u;
    float _799;
    bool _801;
    for (;;)
    {
        _799 = (float(_795) + _656) * 0.03125;
        _801 = _795 == 0u;
        float frontier_phi_41_pred;
        if (_801)
        {
            frontier_phi_41_pred = 0.0;
        }
        else
        {
            float _936;
            float _937;
            uint _939;
            _936 = 0.0;
            _937 = 0.5;
            _939 = _795;
            float _803;
            for (;;)
            {
                _803 = ((_939 & 1u) != 0u) ? (_937 + _936) : _936;
                uint _940 = _939 >> 1u;
                if (_940 == 0u)
                {
                    break;
                }
                else
                {
                    _936 = _803;
                    _937 *= 0.5;
                    _939 = _940;
                }
            }
            frontier_phi_41_pred = _803;
        }
        _802 = frontier_phi_41_pred;
        float _804 = _802 + _669;
        float _809 = sqrt(_799);
        float _810 = ((_804 > 1.0) ? (_804 + (-1.0)) : _804) * 6.283185482025146484375;
        float _813 = cos(_810) * _809;
        float _815 = sin(_810) * _809;
        float _817 = sqrt(1.0 - _799);
        float _830 = ((_817 * _612) + (_813 * _786)) + (_815 * _781);
        float _831 = ((_817 * _613) + (_813 * _789)) + (_815 * _782);
        float _832 = ((_817 * _614) + (_813 * _792)) + (_815 * _783);
        _58._m0 = 1u;
        uvec4 _836 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _837 = _836.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _837, _836.w, _837, vec3(_626, _627, _628), 9.9999997473787516355514526367188e-05, vec3(_830, _831, _832), 10000.0, 1);
        float _843 = dot(vec3(_612, _613, _614), vec3(_830, _831, _832));
        float _1065 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _846 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _794 = ((float(_58._m0 == 0u) * _846) / (_846 * 0.3183098733425140380859375)) + _793;
        uint _796 = _795 + 1u;
        if (_796 == 32u)
        {
            break;
        }
        else
        {
            _793 = _794;
            _795 = _796;
            continue;
        }
    }
    float _854 = _794 * 0.009947183541953563690185546875;
    float _859 = dot(vec3(_542, _543, _544), vec3(_612, _613, _614)) * 2.0;
    vec4 _871 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_542 - (_859 * _612), _543 - (_859 * _613), _544 - (_859 * _614)), 4.0);
    float _876 = dot(vec3(_629, _631, _632), vec3(_612, _613, _614));
    float _1076 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _885 = (exp2(log2(1.0 - (isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _891 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_612, _613, _614), 0.0);
    float _902 = (_763 + _760) + (((_891.x * _605) + (_885 * _871.x)) * _854);
    float _906 = (_764 + _761) + (((_891.y * _606) + (_885 * _871.y)) * _854);
    float _910 = (_765 + _762) + (((_891.z * _607) + (_885 * _871.z)) * _854);
    float _1087 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _1098 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _1109 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    bool _919 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _930;
    _930.x = _919 ? ((_504 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0)));
    _930.y = _919 ? ((_507 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0)));
    _930.z = _919 ? ((_510 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0)));
    payload._m0 = _930;
}


