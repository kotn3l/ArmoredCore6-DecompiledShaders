#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

uint _182;
uint _274;
uint _355;
vec3 _1685;

void main()
{
    float _79 = float(gl_LaunchSizeEXT.y);
    float _107 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _116 = sqrt(((_108 * _108) + (_107 * _107)) + (_109 * _109)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _79)))));
    uvec4 _127 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _128 = _127.y;
    uint _168;
    uint _170;
    uint _171;
    if (_127.x == 0u)
    {
        uint _136 = (_128 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _145 = uvec3(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_136 + 2u)).x);
        _168 = _145.x;
        _170 = _145.y;
        _171 = _145.z;
    }
    else
    {
        uint _149 = uint(gl_PrimitiveID) * 6u;
        uint _151 = _149 & 4294967292u;
        uint _154 = (_128 + _151) >> 2u;
        uvec2 _161 = uvec2(texelFetch(l_geomIndexBuffer, int(_154)).x, texelFetch(l_geomIndexBuffer, int(_154 + 1u)).x);
        uint _162 = _161.x;
        uint _163 = _161.y;
        uint _165 = _162 >> 16u;
        uint _166 = _163 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_151 == _149)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _162 & 65535u;
            frontier_phi_3_2_ladder_2 = _166;
        }
        else
        {
            frontier_phi_3_2_ladder = _166;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _163 >> 16u;
        }
        _168 = frontier_phi_3_2_ladder_1;
        _170 = frontier_phi_3_2_ladder;
        _171 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _175 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _176 = _175.x;
    uint _177 = _176 * _168;
    uint _179 = _177 >> 2u;
    uvec3 _186 = uvec3(texelFetch(l_geomAttrib_0, int(_179)).x, _182, texelFetch(l_geomAttrib_0, int(_179 + 2u)).x);
    uint _191 = _175.z;
    bool _192 = _191 != 0u;
    bool _194 = _127.w == 0u;
    bool _195 = _192 || _194;
    uint _196 = _177 + 12u;
    uint _219;
    uint _220;
    uint _221;
    uint _222;
    if (_195)
    {
        uvec4 _198 = texelFetch(l_geomAttrib_0, int(_196 >> 2u));
        uint _199 = _198.x;
        _219 = _199 & 255u;
        _220 = (_199 >> 8u) & 255u;
        _221 = (_199 >> 16u) & 255u;
        _222 = 16u;
    }
    else
    {
        uint _207 = _196 >> 2u;
        uvec2 _213 = uvec2(texelFetch(l_geomAttrib_0, int(_207)).x, texelFetch(l_geomAttrib_0, int(_207 + 1u)).x);
        uint _214 = _213.x;
        _219 = _214 & 65535u;
        _220 = _214 >> 16u;
        _221 = _213.y & 65535u;
        _222 = 20u;
    }
    uvec4 _229 = texelFetch(l_geomAttrib_0, int((_222 + _177) >> 2u));
    uint _230 = _229.x;
    bool _244 = _191 == 0u;
    uint _245;
    if (_244)
    {
        _245 = _222 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_194)
        {
            frontier_phi_9_10_ladder = _222 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _222 + 12u;
        }
        _245 = frontier_phi_9_10_ladder;
    }
    uint _249 = _192 ? (_245 + 4u) : _245;
    uvec4 _253 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + _249) >> 2u));
    uint _254 = _253.x;
    float _258 = float(int(uint(int(_254 << 16u) >> int(16u))));
    float _259 = float(int(uint(int(_254) >> int(16u))));
    uvec4 _263 = texelFetch(l_geomAttrib_0, int(((_177 + 8u) + _249) >> 2u));
    uint _264 = _263.x;
    uint _270 = _176 * _170;
    uint _271 = _270 >> 2u;
    uvec3 _278 = uvec3(texelFetch(l_geomAttrib_0, int(_271)).x, _274, texelFetch(l_geomAttrib_0, int(_271 + 2u)).x);
    uint _283 = _270 + 12u;
    uint _304;
    uint _305;
    uint _306;
    uint _307;
    if (_195)
    {
        uvec4 _285 = texelFetch(l_geomAttrib_0, int(_283 >> 2u));
        uint _286 = _285.x;
        _304 = _286 & 255u;
        _305 = (_286 >> 8u) & 255u;
        _306 = (_286 >> 16u) & 255u;
        _307 = 16u;
    }
    else
    {
        uint _292 = _283 >> 2u;
        uvec2 _298 = uvec2(texelFetch(l_geomAttrib_0, int(_292)).x, texelFetch(l_geomAttrib_0, int(_292 + 1u)).x);
        uint _299 = _298.x;
        _304 = _299 & 65535u;
        _305 = _299 >> 16u;
        _306 = _298.y & 65535u;
        _307 = 20u;
    }
    uvec4 _313 = texelFetch(l_geomAttrib_0, int((_307 + _270) >> 2u));
    uint _314 = _313.x;
    uint _326;
    if (_244)
    {
        _326 = _307 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_194)
        {
            frontier_phi_16_17_ladder = _307 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _307 + 12u;
        }
        _326 = frontier_phi_16_17_ladder;
    }
    uint _330 = _192 ? (_326 + 4u) : _326;
    uvec4 _334 = texelFetch(l_geomAttrib_0, int(((_270 + 4u) + _330) >> 2u));
    uint _335 = _334.x;
    float _339 = float(int(uint(int(_335 << 16u) >> int(16u))));
    float _340 = float(int(uint(int(_335) >> int(16u))));
    uvec4 _344 = texelFetch(l_geomAttrib_0, int(((_270 + 8u) + _330) >> 2u));
    uint _345 = _344.x;
    uint _351 = _176 * _171;
    uint _352 = _351 >> 2u;
    uvec3 _359 = uvec3(texelFetch(l_geomAttrib_0, int(_352)).x, _355, texelFetch(l_geomAttrib_0, int(_352 + 2u)).x);
    uint _364 = _351 + 12u;
    uint _385;
    uint _386;
    uint _387;
    uint _388;
    if (_195)
    {
        uvec4 _366 = texelFetch(l_geomAttrib_0, int(_364 >> 2u));
        uint _367 = _366.x;
        _385 = _367 & 255u;
        _386 = (_367 >> 8u) & 255u;
        _387 = (_367 >> 16u) & 255u;
        _388 = 16u;
    }
    else
    {
        uint _373 = _364 >> 2u;
        uvec2 _379 = uvec2(texelFetch(l_geomAttrib_0, int(_373)).x, texelFetch(l_geomAttrib_0, int(_373 + 1u)).x);
        uint _380 = _379.x;
        _385 = _380 & 65535u;
        _386 = _380 >> 16u;
        _387 = _379.y & 65535u;
        _388 = 20u;
    }
    uvec4 _394 = texelFetch(l_geomAttrib_0, int((_388 + _351) >> 2u));
    uint _395 = _394.x;
    uint _407;
    if (_244)
    {
        _407 = _388 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_194)
        {
            frontier_phi_23_24_ladder = _388 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _388 + 12u;
        }
        _407 = frontier_phi_23_24_ladder;
    }
    uint _411 = _192 ? (_407 + 4u) : _407;
    uvec4 _415 = texelFetch(l_geomAttrib_0, int(((_351 + 4u) + _411) >> 2u));
    uint _416 = _415.x;
    float _420 = float(int(uint(int(_416 << 16u) >> int(16u))));
    float _421 = float(int(uint(int(_416) >> int(16u))));
    uvec4 _425 = texelFetch(l_geomAttrib_0, int(((_351 + 8u) + _411) >> 2u));
    uint _426 = _425.x;
    bool _433 = _127.z == 0u;
    float _469;
    float _470;
    float _471;
    if (_433)
    {
        uint _436 = _168 * 3u;
        uvec3 _445 = uvec3(texelFetch(l_geomPositionBuffer, int(_436)).x, texelFetch(l_geomPositionBuffer, int(_436 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_436 + 2u)).x);
        _469 = uintBitsToFloat(_445.x);
        _470 = uintBitsToFloat(_445.y);
        _471 = uintBitsToFloat(_445.z);
    }
    else
    {
        uint _453 = _168 * 2u;
        uvec2 _459 = uvec2(texelFetch(l_geomPositionBuffer, int(_453)).x, texelFetch(l_geomPositionBuffer, int(_453 + 1u)).x);
        uint _460 = _459.x;
        _469 = unpackHalf2x16(_460).x;
        _470 = unpackHalf2x16(_460 >> 16u).x;
        _471 = unpackHalf2x16(_459.y).x;
    }
    float _507;
    float _508;
    float _509;
    if (_433)
    {
        uint _474 = _170 * 3u;
        uvec3 _483 = uvec3(texelFetch(l_geomPositionBuffer, int(_474)).x, texelFetch(l_geomPositionBuffer, int(_474 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_474 + 2u)).x);
        _507 = uintBitsToFloat(_483.x);
        _508 = uintBitsToFloat(_483.y);
        _509 = uintBitsToFloat(_483.z);
    }
    else
    {
        uint _491 = _170 * 2u;
        uvec2 _497 = uvec2(texelFetch(l_geomPositionBuffer, int(_491)).x, texelFetch(l_geomPositionBuffer, int(_491 + 1u)).x);
        uint _498 = _497.x;
        _507 = unpackHalf2x16(_498).x;
        _508 = unpackHalf2x16(_498 >> 16u).x;
        _509 = unpackHalf2x16(_497.y).x;
    }
    float _545;
    float _546;
    float _547;
    if (_433)
    {
        uint _512 = _171 * 3u;
        uvec3 _521 = uvec3(texelFetch(l_geomPositionBuffer, int(_512)).x, texelFetch(l_geomPositionBuffer, int(_512 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_512 + 2u)).x);
        _545 = uintBitsToFloat(_521.x);
        _546 = uintBitsToFloat(_521.y);
        _547 = uintBitsToFloat(_521.z);
    }
    else
    {
        uint _529 = _171 * 2u;
        uvec2 _535 = uvec2(texelFetch(l_geomPositionBuffer, int(_529)).x, texelFetch(l_geomPositionBuffer, int(_529 + 1u)).x);
        uint _536 = _535.x;
        _545 = unpackHalf2x16(_536).x;
        _546 = unpackHalf2x16(_536 >> 16u).x;
        _547 = unpackHalf2x16(_535.y).x;
    }
    float _550 = (1.0 - hit._m0.x) - hit._m0.y;
    float _604 = (((float((_345 >> 8u) & 255u) * hit._m0.x) + (float((_264 >> 8u) & 255u) * _550)) + (float((_426 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _607 = (_339 - _258) * 0.00048828125;
    float _609 = (_340 - _259) * 0.00048828125;
    float _612 = (_420 - _258) * 0.00048828125;
    float _613 = (_421 - _259) * 0.00048828125;
    float _635 = _507 - _469;
    float _636 = _508 - _470;
    float _637 = _509 - _471;
    float _640 = fma(_637, gl_ObjectToWorldEXT[2u].x, fma(_636, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _635));
    float _643 = fma(_637, gl_ObjectToWorldEXT[2u].y, fma(_636, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _635));
    float _646 = fma(_637, gl_ObjectToWorldEXT[2u].z, fma(_636, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _635));
    float _647 = _545 - _469;
    float _648 = _546 - _470;
    float _649 = _547 - _471;
    float _652 = fma(_649, gl_ObjectToWorldEXT[2u].x, fma(_648, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _647));
    float _655 = fma(_649, gl_ObjectToWorldEXT[2u].y, fma(_648, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _647));
    float _658 = fma(_649, gl_ObjectToWorldEXT[2u].z, fma(_648, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _647));
    float _659 = (((_339 * hit._m0.x) + (_258 * _550)) + (_420 * hit._m0.y)) * 0.00048828125;
    float _660 = (((_340 * hit._m0.x) + (_259 * _550)) + (_421 * hit._m0.y)) * 0.00048828125;
    float _664 = (((float(_219) * _550) + (-127.0)) + (float(_304) * hit._m0.x)) + (float(_385) * hit._m0.y);
    float _667 = (((float(_220) * _550) + (-127.0)) + (float(_305) * hit._m0.x)) + (float(_386) * hit._m0.y);
    float _670 = (((float(_221) * _550) + (-127.0)) + (float(_306) * hit._m0.x)) + (float(_387) * hit._m0.y);
    float _671 = _664 * 0.0078740157186985015869140625;
    float _673 = _667 * 0.0078740157186985015869140625;
    float _674 = _670 * 0.0078740157186985015869140625;
    float _687 = ((((float(_230 & 255u) * _550) + (-127.0)) + (float(_314 & 255u) * hit._m0.x)) + (float(_395 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _688 = ((((float((_230 >> 8u) & 255u) * _550) + (-127.0)) + (float((_314 >> 8u) & 255u) * hit._m0.x)) + (float((_395 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _689 = ((((float((_230 >> 16u) & 255u) * _550) + (-127.0)) + (float((_314 >> 16u) & 255u) * hit._m0.x)) + (float((_395 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _690 = ((((float(_230 >> 24u) * _550) + (-127.0)) + (float(_314 >> 24u) * hit._m0.x)) + (float(_395 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _700 = ((_688 * _674) - (_689 * _673)) * _690;
    float _701 = ((_689 * _671) - (_687 * _674)) * _690;
    float _702 = ((_687 * _673) - (_688 * _671)) * _690;
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _717 = cbMtdParam._m0[13u].w - cbMtdParam._m0[13u].z;
    float _720 = ((-0.0) - cbMtdParam._m0[13u].z) / (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    float _725 = _720 / cbMtdParam._m0[15u].y;
    float _726 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = isnan(8.0) ? _726 : (isnan(_726) ? 8.0 : min(_726, 8.0));
    float _735 = cbMtdParam._m0[10u].x * _727;
    float _736 = cbMtdParam._m0[10u].y * _727;
    float _737 = cbMtdParam._m0[10u].z * _727;
    float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _759 = (cbMtdParam._m0[14u].x + _720) * cbMtdParam._m0[16u].x;
    float _1814 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _769 = (cbMtdParam._m0[17u].z + ((((float(_345 & 255u) * hit._m0.x) + (float(_264 & 255u) * _550)) + (float(_426 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)) - (cbMtdParam._m0[13u].y * 0.25);
    float _779 = cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x;
    uvec2 _795 = uvec2(textureSize(M_Water_ocean_LOD1_snp_0_Texture2D_2, int(0u)));
    bool _800 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _852;
    if (_800)
    {
        float _811 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _817 = (_658 * _643) - (_655 * _646);
        float _820 = (_652 * _646) - (_658 * _640);
        float _823 = (_655 * _640) - (_652 * _643);
        float _850 = ((log2((((float(_795.y) * 0.5) * float(_795.x)) * abs((_613 * _607) - (_612 * _609))) / (sqrt(((_820 * _820) + (_823 * _823)) + (_817 * _817)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_811 * gl_WorldRayDirectionEXT.x, _811 * gl_WorldRayDirectionEXT.y, _811 * gl_WorldRayDirectionEXT.z), vec3(_671, _673, _674))));
        _852 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    }
    else
    {
        _852 = 0.0;
    }
    vec4 _856 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_2, SS_BumpMap), vec2((((_779 * cbMtdParam._m0[19u].x) + _659) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_779 * cbMtdParam._m0[19u].y) + _660) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _852);
    float _858 = _856.x;
    float _859 = _856.y;
    float _1830 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _862 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    float _863 = _856.z - _862;
    float _1841 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    float _876 = (_864 * 0.00999999977648258209228515625) + _659;
    float _878 = (_864 * (-0.00999999977648258209228515625)) + _660;
    uvec2 _891 = uvec2(textureSize(M_Water_ocean_LOD1_snp_0_Texture2D_0, int(0u)));
    float _942;
    if (_800)
    {
        float _902 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _908 = (_658 * _643) - (_655 * _646);
        float _911 = (_652 * _646) - (_658 * _640);
        float _914 = (_655 * _640) - (_652 * _643);
        float _940 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_613 * _607) - (_612 * _609))) / (sqrt(((_911 * _911) + (_914 * _914)) + (_908 * _908)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_902 * gl_WorldRayDirectionEXT.x, _902 * gl_WorldRayDirectionEXT.y, _902 * gl_WorldRayDirectionEXT.z), vec3(_671, _673, _674))));
        _942 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    }
    else
    {
        _942 = 0.0;
    }
    vec4 _944 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_876 + (cbMtdParam._m0[18u].z * _779)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_878 + (cbMtdParam._m0[18u].w * _779)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _942);
    float _948 = _944.z;
    float _1009;
    if (_800)
    {
        float _969 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _975 = (_658 * _643) - (_655 * _646);
        float _978 = (_652 * _646) - (_658 * _640);
        float _981 = (_655 * _640) - (_652 * _643);
        float _1007 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_613 * _607) - (_612 * _609))) / (sqrt(((_978 * _978) + (_981 * _981)) + (_975 * _975)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_969 * gl_WorldRayDirectionEXT.x, _969 * gl_WorldRayDirectionEXT.y, _969 * gl_WorldRayDirectionEXT.z), vec3(_671, _673, _674))));
        _1009 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    }
    else
    {
        _1009 = 0.0;
    }
    vec4 _1011 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_876 + (cbMtdParam._m0[18u].x * _779)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_878 + (cbMtdParam._m0[18u].y * _779)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1009);
    float _1015 = _1011.z;
    float _1018 = (0.25 - _856.w) + (isnan(_1015) ? _948 : (isnan(_948) ? _1015 : max(_948, _1015)));
    float _1867 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1020 = (_769 * (isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0)))) * (isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0)));
    float _1033 = (_1020 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[11u].x * _864);
    float _1034 = (_1020 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[11u].y * _864);
    float _1035 = (_1020 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[11u].z * _864);
    float _1077;
    if (_800)
    {
        float _1061 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1069 = log2(0.0);
        float _1075 = ((_1069 * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1061 * gl_WorldRayDirectionEXT.x, _1061 * gl_WorldRayDirectionEXT.y, _1061 * gl_WorldRayDirectionEXT.z), vec3(_671, _673, _674))));
        _1077 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    }
    else
    {
        _1077 = 0.0;
    }
    vec4 _1080 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (((((uintBitsToFloat(_278.x) * hit._m0.x) + (uintBitsToFloat(_186.x) * _550)) + (uintBitsToFloat(_359.x) * hit._m0.y)) / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].z * _779))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (((((uintBitsToFloat(_278.z) * hit._m0.x) + (uintBitsToFloat(_186.z) * _550)) + (uintBitsToFloat(_359.z) * hit._m0.y)) / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].w * _779))) + cbTextureTilingScale._m0[1u].w), _1077);
    float _1085 = _1080.z * 0.099999986588954925537109375;
    float _1883 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _1087 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    float _1089 = cbMtdParam._m0[15u].w * _720;
    float _1894 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1090 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    float _1104 = (_1033 + (isnan(0.07999999821186065673828125) ? _738 : (isnan(_738) ? 0.07999999821186065673828125 : min(_738, 0.07999999821186065673828125)))) + (_1090 * (((1.0 - _1033) - _1087) + _1085));
    float _1106 = (_1034 + (isnan(0.07999999821186065673828125) ? _739 : (isnan(_739) ? 0.07999999821186065673828125 : min(_739, 0.07999999821186065673828125)))) + (_1090 * (((1.0 - _1034) - _1087) + _1085));
    float _1108 = (_1035 + (isnan(0.07999999821186065673828125) ? _740 : (isnan(_740) ? 0.07999999821186065673828125 : min(_740, 0.07999999821186065673828125)))) + (_1090 * (((1.0 - _1035) + _1085) - _1087));
    float _1905 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1109 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    float _1916 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1110 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    float _1927 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    float _1116 = ((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _862) + cbMtdParam._m0[12u].x;
    float _1938 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1117 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    float _1125 = _720 / cbMtdParam._m0[15u].z;
    float _1949 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1126 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    float _1127 = _864 * 0.23999999463558197021484375;
    float _1129 = _864 * (-0.20000000298023223876953125);
    float _1139 = cbMtdParam._m0[20u].z * _659;
    float _1140 = cbMtdParam._m0[20u].w * _660;
    float _1199;
    if (_800)
    {
        float _1159 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1165 = (_658 * _643) - (_655 * _646);
        float _1168 = (_652 * _646) - (_658 * _640);
        float _1171 = (_655 * _640) - (_652 * _643);
        float _1197 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_613 * _607) - (_612 * _609))) / (sqrt(((_1168 * _1168) + (_1171 * _1171)) + (_1165 * _1165)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1159 * gl_WorldRayDirectionEXT.x, _1159 * gl_WorldRayDirectionEXT.y, _1159 * gl_WorldRayDirectionEXT.z), vec3(_671, _673, _674))));
        _1199 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    }
    else
    {
        _1199 = 0.0;
    }
    vec4 _1201 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].x * _779) + _1127) + _1139) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[20u].y * _779) + _1129) + _1140) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1199);
    float _1223 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1224 = _1223 * gl_WorldRayDirectionEXT.x;
    float _1225 = _1223 * gl_WorldRayDirectionEXT.y;
    float _1226 = _1223 * gl_WorldRayDirectionEXT.z;
    float _1270;
    if (_800)
    {
        float _1236 = (_658 * _643) - (_655 * _646);
        float _1239 = (_652 * _646) - (_658 * _640);
        float _1242 = (_655 * _640) - (_652 * _643);
        float _1268 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_613 * _607) - (_612 * _609))) / (sqrt(((_1239 * _1239) + (_1242 * _1242)) + (_1236 * _1236)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1224, _1225, _1226), vec3(_671, _673, _674))));
        _1270 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    }
    else
    {
        _1270 = 0.0;
    }
    vec4 _1272 = textureLod(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1139 + _1127) + (cbMtdParam._m0[21u].x * _779)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1140 + _1129) + (cbMtdParam._m0[21u].y * _779)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1270);
    float _1291 = (((_1011.x + (-0.5)) * 0.5) + _944.x) + (((_1201.x + (-1.0)) + _1272.x) * cbMtdParam._m0[17u].y);
    float _1292 = (((_1011.y + (-0.5)) * 0.5) + _944.y) + (((_1201.y + (-1.0)) + _1272.y) * cbMtdParam._m0[17u].y);
    float _1297 = ((_1080.x - _1291) * _1126) + _1291;
    float _1298 = ((_1080.y - _1292) * _1126) + _1292;
    float _1300 = _720 / cbMtdParam._m0[15u].x;
    float _1970 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1301 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    float _1317 = ((((_1117 * (0.5 - _858)) + _858) + (((_1297 + (-0.5)) + ((0.5 - _1297) * _1301)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1318 = ((((_1117 * (0.5 - _859)) + _859) + (((_1298 + (-0.5)) + ((0.5 - _1298) * _1301)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1319 = dot(vec2(_1317, _1318), vec2(_1317, _1318));
    float _1981 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1324 = sqrt(1.0 - (isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0))));
    float _1327 = fma(_1324, _671, fma(_1318, _687, (_706 * _700) * _1317));
    float _1330 = fma(_1324, _673, fma(_1318, _688, (_706 * _701) * _1317));
    float _1333 = fma(_1324, _674, fma(_1318, _689, (_706 * _702) * _1317));
    float _1337 = inversesqrt(dot(vec3(_1327, _1330, _1333), vec3(_1327, _1330, _1333)));
    float _1338 = _1337 * _1327;
    float _1339 = _1337 * _1330;
    float _1340 = _1337 * _1333;
    float _1352 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1353 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1354 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1355 = (-0.0) - _1224;
    float _1356 = (-0.0) - _1225;
    float _1357 = (-0.0) - _1226;
    float _1363 = float(gl_LaunchIDEXT.x);
    float _1364 = float(gl_LaunchIDEXT.y);
    float _1367 = float(gl_LaunchSizeEXT.x);
    float _1381 = fract(fract(sin(dot(vec2(_1363 / _1367, _1364 / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1394 = fract(fract(sin(dot(vec2((_1363 + 128.0) / _1367, (_1364 + 128.0) / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _65._m0 = 1u;
    uvec4 _1404 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1405 = _1404.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1405, _1404.w, _1405, vec3(_1352, _1353, _1354), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (_65._m0 == 0u)
    {
        float _1426 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1338, _1339, _1340));
        float _1992 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1429 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        float _1448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1116) * 0.949999988079071044921875);
        float _1449 = _1448 * _1448;
        float _1450 = g_sceneCB._m0[4u].x - _1224;
        float _1451 = g_sceneCB._m0[4u].y - _1225;
        float _1452 = g_sceneCB._m0[4u].z - _1226;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1457 = _1456 * _1450;
        float _1458 = _1456 * _1451;
        float _1459 = _1456 * _1452;
        float _1460 = dot(vec3(_1338, _1339, _1340), vec3(g_sceneCB._m0[4u].xyz));
        float _2003 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1463 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        float _1464 = dot(vec3(_1338, _1339, _1340), vec3(_1355, _1356, _1357));
        float _2014 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1467 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        float _1468 = dot(vec3(_1338, _1339, _1340), vec3(_1457, _1458, _1459));
        float _2025 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1471 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        float _1472 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1457, _1458, _1459));
        float _2036 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1449 * _1449;
        float _1480 = ((_1471 * _1471) * (_1476 + (-1.0))) + 1.0;
        float _1492 = (exp2(log2(1.0 - (isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1494 = 1.0 - _1449;
        float _1505 = (0.5 / (((_1467 * ((_1463 * _1494) + _1449)) + 9.9999999392252902907785028219223e-09) + (((_1467 * _1494) + _1449) * _1463))) * _1463;
        float _2047 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1507 = (isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0))) * (_1476 / ((_1480 * _1480) * 3.141590118408203125));
        _1514 = ((_1109 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1429;
        _1515 = ((_1110 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1429;
        _1516 = ((_1111 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1429;
        _1517 = (_1492 * g_sceneCB._m0[5u].x) * _1507;
        _1518 = (_1492 * g_sceneCB._m0[5u].y) * _1507;
        _1519 = (_1492 * g_sceneCB._m0[5u].z) * _1507;
    }
    else
    {
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    bool _1521 = abs(_1339) < 0.89999997615814208984375;
    float _1523 = float(_1521);
    float _1524 = _1521 ? 0.0 : 1.0;
    float _1527 = (_1523 * _1340) - (_1524 * _1339);
    float _1528 = _1524 * _1338;
    float _1530 = (-0.0) - (_1338 * _1523);
    float _1534 = inversesqrt(dot(vec3(_1527, _1528, _1530), vec3(_1527, _1528, _1530)));
    float _1535 = _1527 * _1534;
    float _1536 = _1528 * _1534;
    float _1537 = _1534 * _1530;
    float _1540 = (_1536 * _1340) - (_1537 * _1339);
    float _1543 = (_1537 * _1338) - (_1535 * _1340);
    float _1546 = (_1535 * _1339) - (_1536 * _1338);
    float _1548;
    float _1556;
    float _1547 = 0.0;
    uint _1549 = 0u;
    float _1553;
    bool _1555;
    for (;;)
    {
        _1553 = (float(_1549) + _1381) * 0.03125;
        _1555 = _1549 == 0u;
        float frontier_phi_51_pred;
        if (_1555)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1690;
            float _1691;
            uint _1693;
            _1690 = 0.0;
            _1691 = 0.5;
            _1693 = _1549;
            float _1557;
            for (;;)
            {
                _1557 = ((_1693 & 1u) != 0u) ? (_1691 + _1690) : _1690;
                uint _1694 = _1693 >> 1u;
                if (_1694 == 0u)
                {
                    break;
                }
                else
                {
                    _1690 = _1557;
                    _1691 *= 0.5;
                    _1693 = _1694;
                }
            }
            frontier_phi_51_pred = _1557;
        }
        _1556 = frontier_phi_51_pred;
        float _1558 = _1556 + _1394;
        float _1562 = sqrt(_1553);
        float _1563 = ((_1558 > 1.0) ? (_1558 + (-1.0)) : _1558) * 6.283185482025146484375;
        float _1566 = cos(_1563) * _1562;
        float _1568 = sin(_1563) * _1562;
        float _1570 = sqrt(1.0 - _1553);
        float _1583 = ((_1570 * _1338) + (_1566 * _1540)) + (_1568 * _1535);
        float _1584 = ((_1570 * _1339) + (_1566 * _1543)) + (_1568 * _1536);
        float _1585 = ((_1570 * _1340) + (_1566 * _1546)) + (_1568 * _1537);
        _64._m0 = 1u;
        uvec4 _1589 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1590 = _1589.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1590, _1589.w, _1590, vec3(_1352, _1353, _1354), 9.9999997473787516355514526367188e-05, vec3(_1583, _1584, _1585), 10000.0, 1);
        float _1596 = dot(vec3(_1338, _1339, _1340), vec3(_1583, _1584, _1585));
        float _2058 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1599 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _1548 = ((float(_64._m0 == 0u) * _1599) / (_1599 * 0.3183098733425140380859375)) + _1547;
        uint _1550 = _1549 + 1u;
        if (_1550 == 32u)
        {
            break;
        }
        else
        {
            _1547 = _1548;
            _1549 = _1550;
            continue;
        }
    }
    float _1607 = _1548 * 0.009947183541953563690185546875;
    float _1612 = dot(vec3(_1224, _1225, _1226), vec3(_1338, _1339, _1340)) * 2.0;
    vec4 _1626 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1224 - (_1612 * _1338), _1225 - (_1612 * _1339), _1226 - (_1612 * _1340)), 4.0 - (_1116 * 4.0));
    float _1631 = dot(vec3(_1355, _1356, _1357), vec3(_1338, _1339, _1340));
    float _2069 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1640 = (exp2(log2(1.0 - (isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1646 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1338, _1339, _1340), 0.0);
    float _1657 = (_1517 + _1514) + (((_1646.x * _1109) + (_1640 * _1626.x)) * _1607);
    float _1661 = (_1518 + _1515) + (((_1646.y * _1110) + (_1640 * _1626.y)) * _1607);
    float _1665 = (_1519 + _1516) + (((_1646.z * _1111) + (_1640 * _1626.z)) * _1607);
    float _2080 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _2091 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _2102 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    bool _1673 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1684;
    _1684.x = _1673 ? ((_664 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0)));
    _1684.y = _1673 ? ((_667 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0)));
    _1684.z = _1673 ? ((_670 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0)));
    payload._m0 = _1684;
}


