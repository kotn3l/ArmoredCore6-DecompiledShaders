#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_Laser_site_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D S_Laser_site_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1116;

void main()
{
    float _77 = float(gl_LaunchSizeEXT.y);
    float _105 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _114 = sqrt(((_106 * _106) + (_105 * _105)) + (_107 * _107)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _77)))));
    uvec4 _125 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _126 = _125.y;
    uint _166;
    uint _168;
    uint _169;
    if (_125.x == 0u)
    {
        uint _134 = (_126 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_126 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _161 >> 16u;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _125.w == 0u;
    bool _179 = _176 || _178;
    uint _181 = (_174 * _166) + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 20u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 24u;
    }
    bool _214 = _175 == 0u;
    uint _215;
    if (_214)
    {
        _215 = _208;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _208 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _208 + 8u;
        }
        _215 = frontier_phi_9_10_ladder;
    }
    uint _220 = _176 ? (_215 + 4u) : _215;
    uint _221 = _174 * _166;
    uvec4 _232 = texelFetch(l_geomAttrib_0, int(((_221 + 4u) + _220) >> 2u));
    uint _233 = _232.x;
    float _237 = float(int(uint(int(_233 << 16u) >> int(16u))));
    float _238 = float(int(uint(int(_233) >> int(16u))));
    uint _247 = (_174 * _168) + 12u;
    uint _268;
    uint _269;
    uint _270;
    uint _271;
    if (_179)
    {
        uvec4 _249 = texelFetch(l_geomAttrib_0, int(_247 >> 2u));
        uint _250 = _249.x;
        _268 = _250 & 255u;
        _269 = (_250 >> 8u) & 255u;
        _270 = (_250 >> 16u) & 255u;
        _271 = 20u;
    }
    else
    {
        uint _256 = _247 >> 2u;
        uvec2 _262 = uvec2(texelFetch(l_geomAttrib_0, int(_256)).x, texelFetch(l_geomAttrib_0, int(_256 + 1u)).x);
        uint _263 = _262.x;
        _268 = _263 & 65535u;
        _269 = _263 >> 16u;
        _270 = _262.y & 65535u;
        _271 = 24u;
    }
    uint _275;
    if (_214)
    {
        _275 = _271;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _271 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _271 + 8u;
        }
        _275 = frontier_phi_16_17_ladder;
    }
    uint _279 = _176 ? (_275 + 4u) : _275;
    uint _280 = _174 * _168;
    uvec4 _290 = texelFetch(l_geomAttrib_0, int(((_280 + 4u) + _279) >> 2u));
    uint _291 = _290.x;
    float _295 = float(int(uint(int(_291 << 16u) >> int(16u))));
    float _296 = float(int(uint(int(_291) >> int(16u))));
    uint _305 = (_174 * _169) + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_179)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 20u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 24u;
    }
    uint _333;
    if (_214)
    {
        _333 = _329;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _329 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 8u;
        }
        _333 = frontier_phi_23_24_ladder;
    }
    uint _337 = _176 ? (_333 + 4u) : _333;
    uint _338 = _174 * _169;
    uvec4 _348 = texelFetch(l_geomAttrib_0, int(((_338 + 4u) + _337) >> 2u));
    uint _349 = _348.x;
    float _353 = float(int(uint(int(_349 << 16u) >> int(16u))));
    float _354 = float(int(uint(int(_349) >> int(16u))));
    bool _363 = _125.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _166 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _166 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _168 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _168 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _169 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _169 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _495 = (((float(texelFetch(l_geomAttrib_0, int((_279 + _280) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_220 + _221) >> 2u)).x >> 24u) * _480)) + (float(texelFetch(l_geomAttrib_0, int((_337 + _338) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _515 = (_295 - _237) * 0.00048828125;
    float _517 = (_296 - _238) * 0.00048828125;
    float _520 = (_353 - _237) * 0.00048828125;
    float _521 = (_354 - _238) * 0.00048828125;
    float _543 = _437 - _399;
    float _544 = _438 - _400;
    float _545 = _439 - _401;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _475 - _399;
    float _556 = _476 - _400;
    float _557 = _477 - _401;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_295 * hit._m0.x) + (_237 * _480)) + (_353 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_296 * hit._m0.x) + (_238 * _480)) + (_354 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_205) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_206) * _480) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_207) * _480) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _607 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    uvec2 _623 = uvec2(textureSize(S_Laser_site_Emissive_Glow_snp_0_Texture2D_3, int(0u)));
    bool _628 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _681;
    if (_628)
    {
        float _639 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _645 = (_566 * _551) - (_563 * _554);
        float _648 = (_560 * _554) - (_566 * _548);
        float _651 = (_563 * _548) - (_560 * _551);
        float _678 = ((log2((((float(_623.y) * 0.5) * float(_623.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_648 * _648) + (_651 * _651)) + (_645 * _645)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_639 * gl_WorldRayDirectionEXT.x, _639 * gl_WorldRayDirectionEXT.y, _639 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    }
    else
    {
        _681 = 0.0;
    }
    vec4 _685 = textureLod(sampler2D(S_Laser_site_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_607 * cbMtdParam._m0[15u].x) + _567) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_607 * cbMtdParam._m0[15u].y) + _568) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _681);
    float _690 = _685.x * cbMtdParam._m0[9u].x;
    float _691 = _685.y * cbMtdParam._m0[9u].y;
    float _692 = _685.z * cbMtdParam._m0[9u].z;
    uvec2 _716 = uvec2(textureSize(S_Laser_site_Emissive_Glow_snp_0_Texture2D_2, int(0u)));
    float _720 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _721 = _720 * gl_WorldRayDirectionEXT.x;
    float _722 = _720 * gl_WorldRayDirectionEXT.y;
    float _723 = _720 * gl_WorldRayDirectionEXT.z;
    float _767;
    if (_628)
    {
        float _733 = (_566 * _551) - (_563 * _554);
        float _736 = (_560 * _554) - (_566 * _548);
        float _739 = (_563 * _548) - (_560 * _551);
        float _765 = ((log2((((float(_716.y) * 0.5) * float(_716.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_736 * _736) + (_739 * _739)) + (_733 * _733)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_721, _722, _723), vec3(_579, _581, _582))));
        _767 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    }
    else
    {
        _767 = 0.0;
    }
    vec4 _769 = textureLod(sampler2D(S_Laser_site_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_607 * cbMtdParam._m0[14u].z) + _567) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_607 * cbMtdParam._m0[14u].w) + _568) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _767);
    float _778 = cbMtdParam._m0[13u].x * ((((float(texelFetch(l_geomAttrib_0, int(((_280 + 8u) + _279) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_221 + 8u) + _220) >> 2u)).x & 255u) * _480)) + (float(texelFetch(l_geomAttrib_0, int(((_338 + 8u) + _337) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _802 = inversesqrt(dot(vec3(_579, _581, _582), vec3(_579, _581, _582)));
    float _803 = _802 * _579;
    float _804 = _802 * _581;
    float _805 = _802 * _582;
    float _810 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_803, _804, _805, 0.0)) - cbMtdParam._m0[13u].y;
    float _1202 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _817 = exp2(log2(1.0 - (isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].z : (isnan(cbMtdParam._m0[13u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].z, 0.001000000047497451305389404296875))));
    float _835 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _836 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _837 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _838 = (-0.0) - _721;
    float _840 = (-0.0) - _722;
    float _841 = (-0.0) - _723;
    float _847 = float(gl_LaunchIDEXT.x);
    float _848 = float(gl_LaunchIDEXT.y);
    float _851 = float(gl_LaunchSizeEXT.x);
    float _865 = fract(fract(sin(dot(vec2(_847 / _851, _848 / _77), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _878 = fract(fract(sin(dot(vec2((_847 + 128.0) / _851, (_848 + 128.0) / _77), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _888 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _889 = _888.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _889, _888.w, _889, vec3(_835, _836, _837), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _955;
    float _956;
    float _957;
    if (_63._m0 == 0u)
    {
        float _910 = g_sceneCB._m0[4u].x - _721;
        float _911 = g_sceneCB._m0[4u].y - _722;
        float _912 = g_sceneCB._m0[4u].z - _723;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _920 = dot(vec3(_803, _804, _805), vec3(g_sceneCB._m0[4u].xyz));
        float _1218 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _923 = isnan(1.0) ? _1218 : (isnan(_1218) ? 1.0 : min(_1218, 1.0));
        float _924 = dot(vec3(_803, _804, _805), vec3(_838, _840, _841));
        float _1229 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_910 * _916, _911 * _916, _912 * _916));
        float _1240 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _939 = (exp2(log2(1.0 - (isnan(1.0) ? _1240 : (isnan(_1240) ? 1.0 : min(_1240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _945 = (0.5 / ((_923 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0))))) * _923;
        float _1251 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _947 = (isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0))) * 0.31831014156341552734375;
        _955 = (_939 * g_sceneCB._m0[5u].x) * _947;
        _956 = (_939 * g_sceneCB._m0[5u].y) * _947;
        _957 = (_939 * g_sceneCB._m0[5u].z) * _947;
    }
    else
    {
        _955 = 0.0;
        _956 = 0.0;
        _957 = 0.0;
    }
    bool _959 = abs(_804) < 0.89999997615814208984375;
    float _961 = float(_959);
    float _962 = _959 ? 0.0 : 1.0;
    float _965 = (_961 * _805) - (_962 * _804);
    float _966 = _962 * _803;
    float _968 = (-0.0) - (_803 * _961);
    float _972 = inversesqrt(dot(vec3(_965, _966, _968), vec3(_965, _966, _968)));
    float _973 = _965 * _972;
    float _974 = _966 * _972;
    float _975 = _972 * _968;
    float _978 = (_974 * _805) - (_975 * _804);
    float _981 = (_975 * _803) - (_973 * _805);
    float _984 = (_973 * _804) - (_974 * _803);
    float _986;
    float _994;
    float _985 = 0.0;
    uint _987 = 0u;
    float _991;
    bool _993;
    for (;;)
    {
        _991 = (float(_987) + _865) * 0.03125;
        _993 = _987 == 0u;
        float frontier_phi_43_pred;
        if (_993)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1121;
            float _1122;
            uint _1124;
            _1121 = 0.0;
            _1122 = 0.5;
            _1124 = _987;
            float _995;
            for (;;)
            {
                _995 = ((_1124 & 1u) != 0u) ? (_1122 + _1121) : _1121;
                uint _1125 = _1124 >> 1u;
                if (_1125 == 0u)
                {
                    break;
                }
                else
                {
                    _1121 = _995;
                    _1122 *= 0.5;
                    _1124 = _1125;
                }
            }
            frontier_phi_43_pred = _995;
        }
        _994 = frontier_phi_43_pred;
        float _996 = _994 + _878;
        float _1001 = sqrt(_991);
        float _1002 = ((_996 > 1.0) ? (_996 + (-1.0)) : _996) * 6.283185482025146484375;
        float _1005 = cos(_1002) * _1001;
        float _1007 = sin(_1002) * _1001;
        float _1009 = sqrt(1.0 - _991);
        float _1022 = ((_1009 * _803) + (_1005 * _978)) + (_1007 * _973);
        float _1023 = ((_1009 * _804) + (_1005 * _981)) + (_1007 * _974);
        float _1024 = ((_1009 * _805) + (_1005 * _984)) + (_1007 * _975);
        _62._m0 = 1u;
        uvec4 _1028 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1029 = _1028.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1029, _1028.w, _1029, vec3(_835, _836, _837), 9.9999997473787516355514526367188e-05, vec3(_1022, _1023, _1024), 10000.0, 1);
        float _1035 = dot(vec3(_803, _804, _805), vec3(_1022, _1023, _1024));
        float _1262 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1038 = isnan(1.0) ? _1262 : (isnan(_1262) ? 1.0 : min(_1262, 1.0));
        _986 = ((float(_62._m0 == 0u) * _1038) / (_1038 * 0.3183098733425140380859375)) + _985;
        uint _988 = _987 + 1u;
        if (_988 == 32u)
        {
            break;
        }
        else
        {
            _985 = _986;
            _987 = _988;
            continue;
        }
    }
    float _1047 = _986 * 0.009947183541953563690185546875;
    float _1052 = dot(vec3(_721, _722, _723), vec3(_803, _804, _805)) * 2.0;
    vec4 _1064 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_721 - (_1052 * _803), _722 - (_1052 * _804), _723 - (_1052 * _805)), 4.0);
    float _1069 = dot(vec3(_838, _840, _841), vec3(_803, _804, _805));
    float _1273 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1078 = (exp2(log2(1.0 - (isnan(1.0) ? _1273 : (isnan(_1273) ? 1.0 : min(_1273, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1088 = (((_1064.x * _1047) * _1078) + _955) + ((((cbMtdParam._m0[11u].x * _495) * _817) + (((_778 * ((_769.x * cbMtdParam._m0[10u].x) - _690)) + _690) * cbMtdParam._m0[12u].x)) * cbMtdParam._m0[13u].w);
    float _1092 = (((_1064.y * _1047) * _1078) + _956) + ((((cbMtdParam._m0[11u].y * _495) * _817) + (((_778 * ((_769.y * cbMtdParam._m0[10u].y) - _691)) + _691) * cbMtdParam._m0[12u].y)) * cbMtdParam._m0[13u].w);
    float _1096 = (((_1064.z * _1047) * _1078) + _957) + ((((cbMtdParam._m0[11u].z * _495) * _817) + (((_778 * ((_769.z * cbMtdParam._m0[10u].z) - _692)) + _692) * cbMtdParam._m0[12u].z)) * cbMtdParam._m0[13u].w);
    float _1284 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1295 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1306 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    bool _1104 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1115;
    _1115.x = _1104 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1284 : (isnan(_1284) ? 1.0 : min(_1284, 1.0)));
    _1115.y = _1104 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1295 : (isnan(_1295) ? 1.0 : min(_1295, 1.0)));
    _1115.z = _1104 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1306 : (isnan(_1306) ? 1.0 : min(_1306, 1.0)));
    payload._m0 = _1115;
}


