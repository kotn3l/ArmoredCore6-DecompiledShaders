#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1410;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _157 & 65535u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        else
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _158 >> 16u;
        }
        _163 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
        _166 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    bool _228 = _172 == 0u;
    uint _229;
    if (_228)
    {
        _229 = _205 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 12u;
        }
        _229 = frontier_phi_9_10_ladder;
    }
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + (_173 ? (_229 + 4u) : _229)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _171 * _165;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_176)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _288;
    if (_228)
    {
        _288 = _269 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _269 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 12u;
        }
        _288 = frontier_phi_16_17_ladder;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int(((_244 + 4u) + (_173 ? (_288 + 4u) : _288)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _171 * _166;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_176)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _347;
    if (_228)
    {
        _347 = _328 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _328 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _328 + 12u;
        }
        _347 = frontier_phi_23_24_ladder;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_303 + 4u) + (_173 ? (_347 + 4u) : _347)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _122.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _163 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _163 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _165 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _165 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _166 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _166 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_202) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_203) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_204) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_214 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_214 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_214 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_214 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    uvec2 _628 = uvec2(textureSize(C_DetailBlend_SSS_snp_0_Texture2D_0, int(0u)));
    bool _633 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _686;
    if (_633)
    {
        float _644 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _650 = (_565 * _550) - (_562 * _553);
        float _653 = (_559 * _553) - (_565 * _547);
        float _656 = (_562 * _547) - (_559 * _550);
        float _683 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_653 * _653) + (_656 * _656)) + (_650 * _650)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_644 * gl_WorldRayDirectionEXT.x, _644 * gl_WorldRayDirectionEXT.y, _644 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    }
    else
    {
        _686 = 0.0;
    }
    vec4 _690 = textureLod(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _566) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _567) + cbTextureTilingScale._m0[2u].w), _686);
    uvec2 _706 = uvec2(textureSize(C_DetailBlend_SSS_snp_0_Texture2D_1, int(0u)));
    float _757;
    if (_633)
    {
        float _717 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _723 = (_565 * _550) - (_562 * _553);
        float _726 = (_559 * _553) - (_565 * _547);
        float _729 = (_562 * _547) - (_559 * _550);
        float _755 = ((log2((((float(_706.y) * 0.5) * float(_706.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_726 * _726) + (_729 * _729)) + (_723 * _723)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_717 * gl_WorldRayDirectionEXT.x, _717 * gl_WorldRayDirectionEXT.y, _717 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _757 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    }
    else
    {
        _757 = 0.0;
    }
    vec4 _760 = textureLod(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _566) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _567) + cbTextureTilingScale._m0[0u].w), _757);
    uvec2 _782 = uvec2(textureSize(C_DetailBlend_SSS_snp_0_Texture2D_7, int(0u)));
    float _833;
    if (_633)
    {
        float _793 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _799 = (_565 * _550) - (_562 * _553);
        float _802 = (_559 * _553) - (_565 * _547);
        float _805 = (_562 * _547) - (_559 * _550);
        float _831 = ((log2((((float(_782.y) * 0.5) * float(_782.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_802 * _802) + (_805 * _805)) + (_799 * _799)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_793 * gl_WorldRayDirectionEXT.x, _793 * gl_WorldRayDirectionEXT.y, _793 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _833 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    }
    else
    {
        _833 = 0.0;
    }
    vec4 _835 = textureLod(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _833);
    float _843 = ((_760.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _835.x;
    float _846 = ((_760.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _835.y;
    float _849 = ((_760.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _835.z;
    uvec2 _861 = uvec2(textureSize(C_DetailBlend_SSS_snp_0_Texture2D_3, int(0u)));
    float _912;
    if (_633)
    {
        float _872 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _878 = (_565 * _550) - (_562 * _553);
        float _881 = (_559 * _553) - (_565 * _547);
        float _884 = (_562 * _547) - (_559 * _550);
        float _910 = ((log2((((float(_861.y) * 0.5) * float(_861.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_881 * _881) + (_884 * _884)) + (_878 * _878)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_872 * gl_WorldRayDirectionEXT.x, _872 * gl_WorldRayDirectionEXT.y, _872 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _912 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    }
    else
    {
        _912 = 0.0;
    }
    float _922 = cbMtdParam._m0[14u].z + textureLod(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _566) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _567) + cbTextureTilingScale._m0[6u].w), _912).x;
    uvec2 _934 = uvec2(textureSize(C_DetailBlend_SSS_snp_0_Texture2D_6, int(0u)));
    float _938 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _939 = _938 * gl_WorldRayDirectionEXT.x;
    float _940 = _938 * gl_WorldRayDirectionEXT.y;
    float _941 = _938 * gl_WorldRayDirectionEXT.z;
    float _985;
    if (_633)
    {
        float _951 = (_565 * _550) - (_562 * _553);
        float _954 = (_559 * _553) - (_565 * _547);
        float _957 = (_562 * _547) - (_559 * _550);
        float _983 = ((log2((((float(_934.y) * 0.5) * float(_934.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_954 * _954) + (_957 * _957)) + (_951 * _951)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_939, _940, _941), vec3(_578, _580, _581))));
        _985 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    }
    else
    {
        _985 = 0.0;
    }
    vec4 _987 = textureLod(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _566) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _567) + cbTextureTilingScale._m0[9u].w), _985);
    float _997 = (cbMtdParam._m0[13u].x + _987.z) * _690.z;
    float _1001 = (_690.x * 2.0) + (-1.0);
    float _1003 = (_690.y * 2.0) + (-1.0);
    float _1004 = dot(vec2(_1001, _1003), vec2(_1001, _1003));
    float _1517 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1009 = sqrt(1.0 - (isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0))));
    float _1016 = (((_987.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _1001;
    float _1017 = (((_987.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _1003;
    float _1020 = fma(_1009, _578, fma(_1017, _594, (_613 * _607) * _1016));
    float _1023 = fma(_1009, _580, fma(_1017, _595, (_613 * _608) * _1016));
    float _1026 = fma(_1009, _581, fma(_1017, _596, (_613 * _609) * _1016));
    float _1030 = inversesqrt(dot(vec3(_1020, _1023, _1026), vec3(_1020, _1023, _1026)));
    float _1031 = _1030 * _1020;
    float _1032 = _1030 * _1023;
    float _1033 = _1030 * _1026;
    float _1045 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1046 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1047 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1048 = (-0.0) - _939;
    float _1050 = (-0.0) - _940;
    float _1051 = (-0.0) - _941;
    float _1057 = float(gl_LaunchIDEXT.x);
    float _1058 = float(gl_LaunchIDEXT.y);
    float _1061 = float(gl_LaunchSizeEXT.x);
    float _1075 = fract(fract(sin(dot(vec2(_1057 / _1061, _1058 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1088 = fract(fract(sin(dot(vec2((_1057 + 128.0) / _1061, (_1058 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1089 = 1.0 - _922;
    float _1090 = _1089 * _843;
    float _1091 = _1089 * _846;
    float _1092 = _1089 * _849;
    float _1097 = _922 * (_843 + (-0.039999999105930328369140625));
    float _1098 = _922 * (_846 + (-0.039999999105930328369140625));
    float _1099 = _922 * (_849 + (-0.039999999105930328369140625));
    float _1100 = _1097 + 0.039999999105930328369140625;
    float _1102 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _1113 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1114 = _1113.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1114, _1113.w, _1114, vec3(_1045, _1046, _1047), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (_64._m0 == 0u)
    {
        float _1136 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1031, _1032, _1033));
        float _1528 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1139 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
        float _1158 = 1.0 - (sqrt((_997 * 2.0) * (1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w))) * 0.949999988079071044921875);
        float _1159 = _1158 * _1158;
        float _1160 = g_sceneCB._m0[4u].x - _939;
        float _1161 = g_sceneCB._m0[4u].y - _940;
        float _1162 = g_sceneCB._m0[4u].z - _941;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1167 = _1166 * _1160;
        float _1168 = _1166 * _1161;
        float _1169 = _1166 * _1162;
        float _1170 = dot(vec3(_1031, _1032, _1033), vec3(g_sceneCB._m0[4u].xyz));
        float _1539 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1173 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        float _1174 = dot(vec3(_1031, _1032, _1033), vec3(_1048, _1050, _1051));
        float _1550 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1177 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        float _1178 = dot(vec3(_1031, _1032, _1033), vec3(_1167, _1168, _1169));
        float _1561 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1181 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        float _1182 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1167, _1168, _1169));
        float _1572 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1159 * _1159;
        float _1190 = ((_1181 * _1181) * (_1186 + (-1.0))) + 1.0;
        float _1199 = exp2(log2(1.0 - (isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0)))) * 5.0);
        float _1210 = 1.0 - _1159;
        float _1221 = (0.5 / (((_1177 * ((_1173 * _1210) + _1159)) + 9.9999999392252902907785028219223e-09) + (((_1177 * _1210) + _1159) * _1173))) * _1173;
        float _1583 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1223 = (isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0))) * (_1186 / ((_1190 * _1190) * 3.141590118408203125));
        _1230 = ((_1090 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1139;
        _1231 = ((_1091 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1139;
        _1232 = ((_1092 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1139;
        _1233 = (((_1199 * (0.959999978542327880859375 - _1097)) + _1100) * g_sceneCB._m0[5u].x) * _1223;
        _1234 = (((_1199 * (0.959999978542327880859375 - _1098)) + _1102) * g_sceneCB._m0[5u].y) * _1223;
        _1235 = (((_1199 * (0.959999978542327880859375 - _1099)) + _1103) * g_sceneCB._m0[5u].z) * _1223;
    }
    else
    {
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    bool _1237 = abs(_1032) < 0.89999997615814208984375;
    float _1239 = float(_1237);
    float _1240 = _1237 ? 0.0 : 1.0;
    float _1243 = (_1239 * _1033) - (_1240 * _1032);
    float _1244 = _1240 * _1031;
    float _1246 = (-0.0) - (_1031 * _1239);
    float _1250 = inversesqrt(dot(vec3(_1243, _1244, _1246), vec3(_1243, _1244, _1246)));
    float _1251 = _1243 * _1250;
    float _1252 = _1244 * _1250;
    float _1253 = _1250 * _1246;
    float _1256 = (_1252 * _1033) - (_1253 * _1032);
    float _1259 = (_1253 * _1031) - (_1251 * _1033);
    float _1262 = (_1251 * _1032) - (_1252 * _1031);
    float _1264;
    float _1272;
    float _1263 = 0.0;
    uint _1265 = 0u;
    float _1269;
    bool _1271;
    for (;;)
    {
        _1269 = (float(_1265) + _1075) * 0.03125;
        _1271 = _1265 == 0u;
        float frontier_phi_49_pred;
        if (_1271)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1415;
            float _1416;
            uint _1418;
            _1415 = 0.0;
            _1416 = 0.5;
            _1418 = _1265;
            float _1273;
            for (;;)
            {
                _1273 = ((_1418 & 1u) != 0u) ? (_1416 + _1415) : _1415;
                uint _1419 = _1418 >> 1u;
                if (_1419 == 0u)
                {
                    break;
                }
                else
                {
                    _1415 = _1273;
                    _1416 *= 0.5;
                    _1418 = _1419;
                }
            }
            frontier_phi_49_pred = _1273;
        }
        _1272 = frontier_phi_49_pred;
        float _1274 = _1272 + _1088;
        float _1278 = sqrt(_1269);
        float _1279 = ((_1274 > 1.0) ? (_1274 + (-1.0)) : _1274) * 6.283185482025146484375;
        float _1282 = cos(_1279) * _1278;
        float _1284 = sin(_1279) * _1278;
        float _1286 = sqrt(1.0 - _1269);
        float _1299 = ((_1286 * _1031) + (_1282 * _1256)) + (_1284 * _1251);
        float _1300 = ((_1286 * _1032) + (_1282 * _1259)) + (_1284 * _1252);
        float _1301 = ((_1286 * _1033) + (_1282 * _1262)) + (_1284 * _1253);
        _63._m0 = 1u;
        uvec4 _1305 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1306 = _1305.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1306, _1305.w, _1306, vec3(_1045, _1046, _1047), 9.9999997473787516355514526367188e-05, vec3(_1299, _1300, _1301), 10000.0, 1);
        float _1312 = dot(vec3(_1031, _1032, _1033), vec3(_1299, _1300, _1301));
        float _1594 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1315 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1264 = ((float(_63._m0 == 0u) * _1315) / (_1315 * 0.3183098733425140380859375)) + _1263;
        uint _1266 = _1265 + 1u;
        if (_1266 == 32u)
        {
            break;
        }
        else
        {
            _1263 = _1264;
            _1265 = _1266;
            continue;
        }
    }
    float _1323 = _1264 * 0.009947183541953563690185546875;
    float _1328 = dot(vec3(_939, _940, _941), vec3(_1031, _1032, _1033)) * 2.0;
    vec4 _1343 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_939 - (_1328 * _1031), _940 - (_1328 * _1032), _941 - (_1328 * _1033)), 4.0 - (_997 * 8.0));
    float _1348 = dot(vec3(_1048, _1050, _1051), vec3(_1031, _1032, _1033));
    float _1605 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _1358 = exp2(log2(1.0 - (isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0)))) * 5.0);
    vec4 _1370 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1031, _1032, _1033), 0.0);
    float _1381 = (_1233 + _1230) + (((_1370.x * _1090) + (((_1358 * (0.959999978542327880859375 - _1097)) + _1100) * _1343.x)) * _1323);
    float _1385 = (_1234 + _1231) + (((_1370.y * _1091) + (((_1358 * (0.959999978542327880859375 - _1098)) + _1102) * _1343.y)) * _1323);
    float _1389 = (_1235 + _1232) + (((_1370.z * _1092) + (((_1358 * (0.959999978542327880859375 - _1099)) + _1103) * _1343.z)) * _1323);
    float _1616 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
    float _1627 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1638 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    bool _1398 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1409;
    _1409.x = _1398 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0)));
    _1409.y = _1398 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0)));
    _1409.z = _1398 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0)));
    payload._m0 = _1409;
}


