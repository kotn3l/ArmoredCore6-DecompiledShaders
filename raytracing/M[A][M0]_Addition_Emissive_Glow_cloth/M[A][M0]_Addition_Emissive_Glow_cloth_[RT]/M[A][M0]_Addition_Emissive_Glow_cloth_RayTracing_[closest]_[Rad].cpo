#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1019;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _159;
    uint _161;
    uint _162;
    if (_119.x == 0u)
    {
        uint _127 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _136 = uvec3(texelFetch(l_geomIndexBuffer, int(_127)).x, texelFetch(l_geomIndexBuffer, int(_127 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_127 + 2u)).x);
        _159 = _136.x;
        _161 = _136.y;
        _162 = _136.z;
    }
    else
    {
        uint _140 = uint(gl_PrimitiveID) * 6u;
        uint _142 = _140 & 4294967292u;
        uint _145 = (_120 + _142) >> 2u;
        uvec2 _152 = uvec2(texelFetch(l_geomIndexBuffer, int(_145)).x, texelFetch(l_geomIndexBuffer, int(_145 + 1u)).x);
        uint _153 = _152.x;
        uint _154 = _152.y;
        uint _156 = _153 >> 16u;
        uint _157 = _154 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_142 == _140)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _153 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _154 >> 16u;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _156;
        }
        _159 = frontier_phi_3_2_ladder_2;
        _161 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
    }
    uvec4 _166 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _167 = _166.x;
    uint _168 = _166.z;
    bool _169 = _168 != 0u;
    uint _170 = _119.w;
    bool _172 = _169 || (_170 == 0u);
    uint _174 = (_167 * _159) + 12u;
    uint _198;
    uint _199;
    uint _200;
    if (_172)
    {
        uvec4 _177 = texelFetch(l_geomAttrib_0, int(_174 >> 2u));
        uint _178 = _177.x;
        _198 = _178 & 255u;
        _199 = (_178 >> 8u) & 255u;
        _200 = (_178 >> 16u) & 255u;
    }
    else
    {
        uint _186 = _174 >> 2u;
        uvec2 _192 = uvec2(texelFetch(l_geomAttrib_0, int(_186)).x, texelFetch(l_geomAttrib_0, int(_186 + 1u)).x);
        uint _193 = _192.x;
        _198 = _193 & 65535u;
        _199 = _193 >> 16u;
        _200 = _192.y & 65535u;
    }
    uint _204 = _166.y;
    bool _205 = _168 == 0u;
    uint _208 = _205 ? 4u : ((_170 != 0u) ? 12u : 8u);
    uvec4 _217 = texelFetch(l_geomAttrib_1, int((((_204 * _159) + 4u) + (_169 ? (_208 + 4u) : _208)) >> 2u));
    uint _218 = _217.x;
    float _222 = float(int(uint(int(_218 << 16u) >> int(16u))));
    float _223 = float(int(uint(int(_218) >> int(16u))));
    uint _225 = (_167 * _161) + 12u;
    uint _247;
    uint _248;
    uint _249;
    if (_172)
    {
        uvec4 _228 = texelFetch(l_geomAttrib_0, int(_225 >> 2u));
        uint _229 = _228.x;
        _247 = _229 & 255u;
        _248 = (_229 >> 8u) & 255u;
        _249 = (_229 >> 16u) & 255u;
    }
    else
    {
        uint _235 = _225 >> 2u;
        uvec2 _241 = uvec2(texelFetch(l_geomAttrib_0, int(_235)).x, texelFetch(l_geomAttrib_0, int(_235 + 1u)).x);
        uint _242 = _241.x;
        _247 = _242 & 65535u;
        _248 = _242 >> 16u;
        _249 = _241.y & 65535u;
    }
    uint _255 = _205 ? 4u : ((_170 != 0u) ? 12u : 8u);
    uvec4 _262 = texelFetch(l_geomAttrib_1, int((((_204 * _161) + 4u) + (_169 ? (_255 + 4u) : _255)) >> 2u));
    uint _263 = _262.x;
    float _267 = float(int(uint(int(_263 << 16u) >> int(16u))));
    float _268 = float(int(uint(int(_263) >> int(16u))));
    uint _270 = (_167 * _162) + 12u;
    uint _292;
    uint _293;
    uint _294;
    if (_172)
    {
        uvec4 _273 = texelFetch(l_geomAttrib_0, int(_270 >> 2u));
        uint _274 = _273.x;
        _292 = _274 & 255u;
        _293 = (_274 >> 8u) & 255u;
        _294 = (_274 >> 16u) & 255u;
    }
    else
    {
        uint _280 = _270 >> 2u;
        uvec2 _286 = uvec2(texelFetch(l_geomAttrib_0, int(_280)).x, texelFetch(l_geomAttrib_0, int(_280 + 1u)).x);
        uint _287 = _286.x;
        _292 = _287 & 65535u;
        _293 = _287 >> 16u;
        _294 = _286.y & 65535u;
    }
    uint _300 = _205 ? 4u : ((_170 != 0u) ? 12u : 8u);
    uvec4 _307 = texelFetch(l_geomAttrib_1, int((((_204 * _162) + 4u) + (_169 ? (_300 + 4u) : _300)) >> 2u));
    uint _308 = _307.x;
    float _312 = float(int(uint(int(_308 << 16u) >> int(16u))));
    float _313 = float(int(uint(int(_308) >> int(16u))));
    bool _315 = _119.z == 0u;
    float _351;
    float _352;
    float _353;
    if (_315)
    {
        uint _318 = _159 * 3u;
        uvec3 _327 = uvec3(texelFetch(l_geomPositionBuffer, int(_318)).x, texelFetch(l_geomPositionBuffer, int(_318 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_318 + 2u)).x);
        _351 = uintBitsToFloat(_327.x);
        _352 = uintBitsToFloat(_327.y);
        _353 = uintBitsToFloat(_327.z);
    }
    else
    {
        uint _335 = _159 * 2u;
        uvec2 _341 = uvec2(texelFetch(l_geomPositionBuffer, int(_335)).x, texelFetch(l_geomPositionBuffer, int(_335 + 1u)).x);
        uint _342 = _341.x;
        _351 = unpackHalf2x16(_342).x;
        _352 = unpackHalf2x16(_342 >> 16u).x;
        _353 = unpackHalf2x16(_341.y).x;
    }
    float _389;
    float _390;
    float _391;
    if (_315)
    {
        uint _356 = _161 * 3u;
        uvec3 _365 = uvec3(texelFetch(l_geomPositionBuffer, int(_356)).x, texelFetch(l_geomPositionBuffer, int(_356 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_356 + 2u)).x);
        _389 = uintBitsToFloat(_365.x);
        _390 = uintBitsToFloat(_365.y);
        _391 = uintBitsToFloat(_365.z);
    }
    else
    {
        uint _373 = _161 * 2u;
        uvec2 _379 = uvec2(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x);
        uint _380 = _379.x;
        _389 = unpackHalf2x16(_380).x;
        _390 = unpackHalf2x16(_380 >> 16u).x;
        _391 = unpackHalf2x16(_379.y).x;
    }
    float _427;
    float _428;
    float _429;
    if (_315)
    {
        uint _394 = _162 * 3u;
        uvec3 _403 = uvec3(texelFetch(l_geomPositionBuffer, int(_394)).x, texelFetch(l_geomPositionBuffer, int(_394 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_394 + 2u)).x);
        _427 = uintBitsToFloat(_403.x);
        _428 = uintBitsToFloat(_403.y);
        _429 = uintBitsToFloat(_403.z);
    }
    else
    {
        uint _411 = _162 * 2u;
        uvec2 _417 = uvec2(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x);
        uint _418 = _417.x;
        _427 = unpackHalf2x16(_418).x;
        _428 = unpackHalf2x16(_418 >> 16u).x;
        _429 = unpackHalf2x16(_417.y).x;
    }
    float _432 = (1.0 - hit._m0.x) - hit._m0.y;
    float _454 = (_267 - _222) * 0.00048828125;
    float _456 = (_268 - _223) * 0.00048828125;
    float _459 = (_312 - _222) * 0.00048828125;
    float _460 = (_313 - _223) * 0.00048828125;
    float _482 = _389 - _351;
    float _483 = _390 - _352;
    float _484 = _391 - _353;
    float _487 = fma(_484, gl_ObjectToWorldEXT[2u].x, fma(_483, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _482));
    float _490 = fma(_484, gl_ObjectToWorldEXT[2u].y, fma(_483, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _482));
    float _493 = fma(_484, gl_ObjectToWorldEXT[2u].z, fma(_483, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _482));
    float _494 = _427 - _351;
    float _495 = _428 - _352;
    float _496 = _429 - _353;
    float _499 = fma(_496, gl_ObjectToWorldEXT[2u].x, fma(_495, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _494));
    float _502 = fma(_496, gl_ObjectToWorldEXT[2u].y, fma(_495, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _494));
    float _505 = fma(_496, gl_ObjectToWorldEXT[2u].z, fma(_495, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _494));
    float _506 = (((_267 * hit._m0.x) + (_222 * _432)) + (_312 * hit._m0.y)) * 0.00048828125;
    float _507 = (((_268 * hit._m0.x) + (_223 * _432)) + (_313 * hit._m0.y)) * 0.00048828125;
    float _511 = (((float(_198) * _432) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y);
    float _514 = (((float(_199) * _432) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _517 = (((float(_200) * _432) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _518 = _511 * 0.0078740157186985015869140625;
    float _520 = _514 * 0.0078740157186985015869140625;
    float _521 = _517 * 0.0078740157186985015869140625;
    uvec2 _539 = uvec2(textureSize(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _544 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _597;
    if (_544)
    {
        float _555 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _561 = (_505 * _490) - (_502 * _493);
        float _564 = (_499 * _493) - (_505 * _487);
        float _567 = (_502 * _487) - (_499 * _490);
        float _594 = ((log2((((float(_539.y) * 0.5) * float(_539.x)) * abs((_460 * _454) - (_459 * _456))) / (sqrt(((_564 * _564) + (_567 * _567)) + (_561 * _561)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_555 * gl_WorldRayDirectionEXT.x, _555 * gl_WorldRayDirectionEXT.y, _555 * gl_WorldRayDirectionEXT.z), vec3(_518, _520, _521))));
        _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    }
    else
    {
        _597 = 0.0;
    }
    vec4 _601 = textureLod(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _506) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _507) + cbTextureTilingScale._m0[0u].w), _597);
    float _606 = _601.x * cbMtdParam._m0[9u].x;
    float _607 = _601.y * cbMtdParam._m0[9u].y;
    float _608 = _601.z * cbMtdParam._m0[9u].z;
    uvec2 _630 = uvec2(textureSize(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _634 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _635 = _634 * gl_WorldRayDirectionEXT.x;
    float _636 = _634 * gl_WorldRayDirectionEXT.y;
    float _637 = _634 * gl_WorldRayDirectionEXT.z;
    float _681;
    if (_544)
    {
        float _647 = (_505 * _490) - (_502 * _493);
        float _650 = (_499 * _493) - (_505 * _487);
        float _653 = (_502 * _487) - (_499 * _490);
        float _679 = ((log2((((float(_630.y) * 0.5) * float(_630.x)) * abs((_460 * _454) - (_459 * _456))) / (sqrt(((_650 * _650) + (_653 * _653)) + (_647 * _647)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_635, _636, _637), vec3(_518, _520, _521))));
        _681 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    }
    else
    {
        _681 = 0.0;
    }
    vec4 _683 = textureLod(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _506) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _507) + cbTextureTilingScale._m0[1u].w), _681);
    float _697 = inversesqrt(dot(vec3(_518, _520, _521), vec3(_518, _520, _521)));
    float _698 = _697 * _518;
    float _699 = _697 * _520;
    float _700 = _697 * _521;
    float _712 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _713 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _714 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _715 = (-0.0) - _635;
    float _717 = (-0.0) - _636;
    float _718 = (-0.0) - _637;
    float _724 = float(gl_LaunchIDEXT.x);
    float _725 = float(gl_LaunchIDEXT.y);
    float _728 = float(gl_LaunchSizeEXT.x);
    float _742 = fract(fract(sin(dot(vec2(_724 / _728, _725 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _755 = fract(fract(sin(dot(vec2((_724 + 128.0) / _728, (_725 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _765 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _766 = _765.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _766, _765.w, _766, vec3(_712, _713, _714), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    if (_61._m0 == 0u)
    {
        float _787 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_698, _699, _700));
        float _1087 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _790 = isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0));
        float _801 = g_sceneCB._m0[4u].x - _635;
        float _802 = g_sceneCB._m0[4u].y - _636;
        float _803 = g_sceneCB._m0[4u].z - _637;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _811 = dot(vec3(_698, _699, _700), vec3(g_sceneCB._m0[4u].xyz));
        float _1098 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _814 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
        float _815 = dot(vec3(_698, _699, _700), vec3(_715, _717, _718));
        float _1109 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_801 * _807, _802 * _807, _803 * _807));
        float _1120 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _830 = (exp2(log2(1.0 - (isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _836 = (0.5 / ((_814 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0))))) * _814;
        float _1131 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _838 = (isnan(1.0) ? _1131 : (isnan(_1131) ? 1.0 : min(_1131, 1.0))) * 0.31831014156341552734375;
        _846 = ((_606 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _790;
        _847 = ((_607 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _790;
        _848 = ((_608 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _790;
        _849 = (_830 * g_sceneCB._m0[5u].x) * _838;
        _850 = (_830 * g_sceneCB._m0[5u].y) * _838;
        _851 = (_830 * g_sceneCB._m0[5u].z) * _838;
    }
    else
    {
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
    }
    bool _853 = abs(_699) < 0.89999997615814208984375;
    float _855 = float(_853);
    float _856 = _853 ? 0.0 : 1.0;
    float _859 = (_855 * _700) - (_856 * _699);
    float _860 = _856 * _698;
    float _862 = (-0.0) - (_698 * _855);
    float _866 = inversesqrt(dot(vec3(_859, _860, _862), vec3(_859, _860, _862)));
    float _867 = _859 * _866;
    float _868 = _860 * _866;
    float _869 = _866 * _862;
    float _872 = (_868 * _700) - (_869 * _699);
    float _875 = (_869 * _698) - (_867 * _700);
    float _878 = (_867 * _699) - (_868 * _698);
    float _880;
    float _888;
    float _879 = 0.0;
    uint _881 = 0u;
    float _885;
    bool _887;
    for (;;)
    {
        _885 = (float(_881) + _742) * 0.03125;
        _887 = _881 == 0u;
        float frontier_phi_31_pred;
        if (_887)
        {
            frontier_phi_31_pred = 0.0;
        }
        else
        {
            float _1024;
            float _1025;
            uint _1027;
            _1024 = 0.0;
            _1025 = 0.5;
            _1027 = _881;
            float _889;
            for (;;)
            {
                _889 = ((_1027 & 1u) != 0u) ? (_1025 + _1024) : _1024;
                uint _1028 = _1027 >> 1u;
                if (_1028 == 0u)
                {
                    break;
                }
                else
                {
                    _1024 = _889;
                    _1025 *= 0.5;
                    _1027 = _1028;
                }
            }
            frontier_phi_31_pred = _889;
        }
        _888 = frontier_phi_31_pred;
        float _890 = _888 + _755;
        float _895 = sqrt(_885);
        float _896 = ((_890 > 1.0) ? (_890 + (-1.0)) : _890) * 6.283185482025146484375;
        float _899 = cos(_896) * _895;
        float _901 = sin(_896) * _895;
        float _903 = sqrt(1.0 - _885);
        float _916 = ((_903 * _698) + (_899 * _872)) + (_901 * _867);
        float _917 = ((_903 * _699) + (_899 * _875)) + (_901 * _868);
        float _918 = ((_903 * _700) + (_899 * _878)) + (_901 * _869);
        _60._m0 = 1u;
        uvec4 _922 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _923 = _922.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _923, _922.w, _923, vec3(_712, _713, _714), 9.9999997473787516355514526367188e-05, vec3(_916, _917, _918), 10000.0, 1);
        float _929 = dot(vec3(_698, _699, _700), vec3(_916, _917, _918));
        float _1142 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _932 = isnan(1.0) ? _1142 : (isnan(_1142) ? 1.0 : min(_1142, 1.0));
        _880 = ((float(_60._m0 == 0u) * _932) / (_932 * 0.3183098733425140380859375)) + _879;
        uint _882 = _881 + 1u;
        if (_882 == 32u)
        {
            break;
        }
        else
        {
            _879 = _880;
            _881 = _882;
            continue;
        }
    }
    float _940 = _880 * 0.009947183541953563690185546875;
    float _945 = dot(vec3(_635, _636, _637), vec3(_698, _699, _700)) * 2.0;
    vec4 _957 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_635 - (_945 * _698), _636 - (_945 * _699), _637 - (_945 * _700)), 4.0);
    float _962 = dot(vec3(_715, _717, _718), vec3(_698, _699, _700));
    float _1153 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _971 = (exp2(log2(1.0 - (isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _977 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_698, _699, _700), 0.0);
    float _989 = ((_846 + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _683.x)) + _849) + (((_977.x * _606) + (_971 * _957.x)) * _940);
    float _994 = ((_847 + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _683.y)) + _850) + (((_977.y * _607) + (_971 * _957.y)) * _940);
    float _999 = ((_848 + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _683.z)) + _851) + (((_977.z * _608) + (_971 * _957.z)) * _940);
    float _1164 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1175 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _1186 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    bool _1007 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1018;
    _1018.x = _1007 ? ((_511 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1164 : (isnan(_1164) ? 1.0 : min(_1164, 1.0)));
    _1018.y = _1007 ? ((_514 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1175 : (isnan(_1175) ? 1.0 : min(_1175, 1.0)));
    _1018.z = _1007 ? ((_517 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1186 : (isnan(_1186) ? 1.0 : min(_1186, 1.0)));
    payload._m0 = _1018;
}


