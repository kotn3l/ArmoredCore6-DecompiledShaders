#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _42
{
    vec3 _m0;
};

struct _46
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _42 payload;
hitAttributeEXT _46 hit;

void main()
{
    vec3 _52 = payload._m0;
    float _89 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _90 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _91 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _109 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _110 = _109.y;
    uint _150;
    uint _152;
    uint _153;
    if (_109.x == 0u)
    {
        uint _118 = (_110 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _127 = uvec3(texelFetch(l_geomIndexBuffer, int(_118)).x, texelFetch(l_geomIndexBuffer, int(_118 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_118 + 2u)).x);
        _150 = _127.x;
        _152 = _127.y;
        _153 = _127.z;
    }
    else
    {
        uint _131 = uint(gl_PrimitiveID) * 6u;
        uint _133 = _131 & 4294967292u;
        uint _136 = (_110 + _133) >> 2u;
        uvec2 _143 = uvec2(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x);
        uint _144 = _143.x;
        uint _145 = _143.y;
        uint _147 = _144 >> 16u;
        uint _148 = _145 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_133 == _131)
        {
            frontier_phi_3_2_ladder = _144 & 65535u;
            frontier_phi_3_2_ladder_1 = _147;
            frontier_phi_3_2_ladder_2 = _148;
        }
        else
        {
            frontier_phi_3_2_ladder = _147;
            frontier_phi_3_2_ladder_1 = _148;
            frontier_phi_3_2_ladder_2 = _145 >> 16u;
        }
        _150 = frontier_phi_3_2_ladder;
        _152 = frontier_phi_3_2_ladder_1;
        _153 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _157 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _158 = _157.x;
    uint _159 = _157.z;
    bool _160 = _159 != 0u;
    bool _162 = _109.w == 0u;
    bool _163 = _160 || _162;
    uint _164 = _158 * _150;
    uint _165 = _164 + 12u;
    uint _189;
    uint _190;
    uint _191;
    uint _192;
    if (_163)
    {
        uvec4 _168 = texelFetch(l_geomAttrib_0, int(_165 >> 2u));
        uint _169 = _168.x;
        _189 = _169 & 255u;
        _190 = (_169 >> 8u) & 255u;
        _191 = (_169 >> 16u) & 255u;
        _192 = 16u;
    }
    else
    {
        uint _177 = _165 >> 2u;
        uvec2 _183 = uvec2(texelFetch(l_geomAttrib_0, int(_177)).x, texelFetch(l_geomAttrib_0, int(_177 + 1u)).x);
        uint _184 = _183.x;
        _189 = _184 & 65535u;
        _190 = _184 >> 16u;
        _191 = _183.y & 65535u;
        _192 = 20u;
    }
    uvec4 _200 = texelFetch(l_geomAttrib_0, int((_192 + _164) >> 2u));
    uint _201 = _200.x;
    bool _215 = _159 == 0u;
    uint _216;
    if (_215)
    {
        _216 = _192 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_162)
        {
            frontier_phi_9_10_ladder = _192 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _192 + 12u;
        }
        _216 = frontier_phi_9_10_ladder;
    }
    uvec4 _224 = texelFetch(l_geomAttrib_0, int(((_164 + 4u) + (_160 ? (_216 + 4u) : _216)) >> 2u));
    uint _225 = _224.x;
    float _229 = float(int(uint(int(_225 << 16u) >> int(16u))));
    float _230 = float(int(uint(int(_225) >> int(16u))));
    uint _231 = _158 * _152;
    uint _232 = _231 + 12u;
    uint _253;
    uint _254;
    uint _255;
    uint _256;
    if (_163)
    {
        uvec4 _234 = texelFetch(l_geomAttrib_0, int(_232 >> 2u));
        uint _235 = _234.x;
        _253 = _235 & 255u;
        _254 = (_235 >> 8u) & 255u;
        _255 = (_235 >> 16u) & 255u;
        _256 = 16u;
    }
    else
    {
        uint _241 = _232 >> 2u;
        uvec2 _247 = uvec2(texelFetch(l_geomAttrib_0, int(_241)).x, texelFetch(l_geomAttrib_0, int(_241 + 1u)).x);
        uint _248 = _247.x;
        _253 = _248 & 65535u;
        _254 = _248 >> 16u;
        _255 = _247.y & 65535u;
        _256 = 20u;
    }
    uvec4 _262 = texelFetch(l_geomAttrib_0, int((_256 + _231) >> 2u));
    uint _263 = _262.x;
    uint _275;
    if (_215)
    {
        _275 = _256 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_162)
        {
            frontier_phi_16_17_ladder = _256 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _256 + 12u;
        }
        _275 = frontier_phi_16_17_ladder;
    }
    uvec4 _283 = texelFetch(l_geomAttrib_0, int(((_231 + 4u) + (_160 ? (_275 + 4u) : _275)) >> 2u));
    uint _284 = _283.x;
    float _288 = float(int(uint(int(_284 << 16u) >> int(16u))));
    float _289 = float(int(uint(int(_284) >> int(16u))));
    uint _290 = _158 * _153;
    uint _291 = _290 + 12u;
    uint _312;
    uint _313;
    uint _314;
    uint _315;
    if (_163)
    {
        uvec4 _293 = texelFetch(l_geomAttrib_0, int(_291 >> 2u));
        uint _294 = _293.x;
        _312 = _294 & 255u;
        _313 = (_294 >> 8u) & 255u;
        _314 = (_294 >> 16u) & 255u;
        _315 = 16u;
    }
    else
    {
        uint _300 = _291 >> 2u;
        uvec2 _306 = uvec2(texelFetch(l_geomAttrib_0, int(_300)).x, texelFetch(l_geomAttrib_0, int(_300 + 1u)).x);
        uint _307 = _306.x;
        _312 = _307 & 65535u;
        _313 = _307 >> 16u;
        _314 = _306.y & 65535u;
        _315 = 20u;
    }
    uvec4 _321 = texelFetch(l_geomAttrib_0, int((_315 + _290) >> 2u));
    uint _322 = _321.x;
    uint _334;
    if (_215)
    {
        _334 = _315 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_162)
        {
            frontier_phi_23_24_ladder = _315 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _315 + 12u;
        }
        _334 = frontier_phi_23_24_ladder;
    }
    uvec4 _342 = texelFetch(l_geomAttrib_0, int(((_290 + 4u) + (_160 ? (_334 + 4u) : _334)) >> 2u));
    uint _343 = _342.x;
    float _347 = float(int(uint(int(_343 << 16u) >> int(16u))));
    float _348 = float(int(uint(int(_343) >> int(16u))));
    bool _350 = _109.z == 0u;
    float _386;
    float _387;
    float _388;
    if (_350)
    {
        uint _353 = _150 * 3u;
        uvec3 _362 = uvec3(texelFetch(l_geomPositionBuffer, int(_353)).x, texelFetch(l_geomPositionBuffer, int(_353 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_353 + 2u)).x);
        _386 = uintBitsToFloat(_362.x);
        _387 = uintBitsToFloat(_362.y);
        _388 = uintBitsToFloat(_362.z);
    }
    else
    {
        uint _370 = _150 * 2u;
        uvec2 _376 = uvec2(texelFetch(l_geomPositionBuffer, int(_370)).x, texelFetch(l_geomPositionBuffer, int(_370 + 1u)).x);
        uint _377 = _376.x;
        _386 = unpackHalf2x16(_377).x;
        _387 = unpackHalf2x16(_377 >> 16u).x;
        _388 = unpackHalf2x16(_376.y).x;
    }
    float _424;
    float _425;
    float _426;
    if (_350)
    {
        uint _391 = _152 * 3u;
        uvec3 _400 = uvec3(texelFetch(l_geomPositionBuffer, int(_391)).x, texelFetch(l_geomPositionBuffer, int(_391 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_391 + 2u)).x);
        _424 = uintBitsToFloat(_400.x);
        _425 = uintBitsToFloat(_400.y);
        _426 = uintBitsToFloat(_400.z);
    }
    else
    {
        uint _408 = _152 * 2u;
        uvec2 _414 = uvec2(texelFetch(l_geomPositionBuffer, int(_408)).x, texelFetch(l_geomPositionBuffer, int(_408 + 1u)).x);
        uint _415 = _414.x;
        _424 = unpackHalf2x16(_415).x;
        _425 = unpackHalf2x16(_415 >> 16u).x;
        _426 = unpackHalf2x16(_414.y).x;
    }
    float _462;
    float _463;
    float _464;
    if (_350)
    {
        uint _429 = _153 * 3u;
        uvec3 _438 = uvec3(texelFetch(l_geomPositionBuffer, int(_429)).x, texelFetch(l_geomPositionBuffer, int(_429 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_429 + 2u)).x);
        _462 = uintBitsToFloat(_438.x);
        _463 = uintBitsToFloat(_438.y);
        _464 = uintBitsToFloat(_438.z);
    }
    else
    {
        uint _446 = _153 * 2u;
        uvec2 _452 = uvec2(texelFetch(l_geomPositionBuffer, int(_446)).x, texelFetch(l_geomPositionBuffer, int(_446 + 1u)).x);
        uint _453 = _452.x;
        _462 = unpackHalf2x16(_453).x;
        _463 = unpackHalf2x16(_453 >> 16u).x;
        _464 = unpackHalf2x16(_452.y).x;
    }
    float _467 = (1.0 - hit._m0.x) - hit._m0.y;
    float _520 = _424 - _386;
    float _521 = _425 - _387;
    float _522 = _426 - _388;
    float _525 = fma(_522, gl_ObjectToWorldEXT[2u].x, fma(_521, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _520));
    float _528 = fma(_522, gl_ObjectToWorldEXT[2u].y, fma(_521, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _520));
    float _531 = fma(_522, gl_ObjectToWorldEXT[2u].z, fma(_521, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _520));
    float _532 = _462 - _386;
    float _533 = _463 - _387;
    float _534 = _464 - _388;
    float _537 = fma(_534, gl_ObjectToWorldEXT[2u].x, fma(_533, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _532));
    float _540 = fma(_534, gl_ObjectToWorldEXT[2u].y, fma(_533, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _532));
    float _543 = fma(_534, gl_ObjectToWorldEXT[2u].z, fma(_533, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _532));
    float _544 = (((_288 * hit._m0.x) + (_229 * _467)) + (_347 * hit._m0.y)) * 0.00048828125;
    float _546 = (((_289 * hit._m0.x) + (_230 * _467)) + (_348 * hit._m0.y)) * 0.00048828125;
    float _557 = ((((float(_189) * _467) + (-127.0)) + (float(_253) * hit._m0.x)) + (float(_312) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _559 = ((((float(_190) * _467) + (-127.0)) + (float(_254) * hit._m0.x)) + (float(_313) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _560 = ((((float(_191) * _467) + (-127.0)) + (float(_255) * hit._m0.x)) + (float(_314) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _573 = ((((float(_201 & 255u) * _467) + (-127.0)) + (float(_263 & 255u) * hit._m0.x)) + (float(_322 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _574 = ((((float((_201 >> 8u) & 255u) * _467) + (-127.0)) + (float((_263 >> 8u) & 255u) * hit._m0.x)) + (float((_322 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _575 = ((((float((_201 >> 16u) & 255u) * _467) + (-127.0)) + (float((_263 >> 16u) & 255u) * hit._m0.x)) + (float((_322 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _576 = ((((float(_201 >> 24u) * _467) + (-127.0)) + (float(_263 >> 24u) * hit._m0.x)) + (float(_322 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _586 = ((_574 * _560) - (_575 * _559)) * _576;
    float _587 = ((_575 * _557) - (_573 * _560)) * _576;
    float _588 = ((_573 * _559) - (_574 * _557)) * _576;
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _600 = dot(vec3(0.0), vec3(_592 * _586, _592 * _587, _592 * _588));
    float _604 = dot(vec3(0.0), vec3(_573, _574, _575));
    float _607 = dot(vec3(0.0), vec3(_557, _559, _560));
    float _613 = inversesqrt(dot(vec3(_600, _604, _607), vec3(_600, _604, _607)));
    float _637 = dot(vec4(textureLod(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _544) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _546) + cbTextureTilingScale._m0[0u].w), 0.0)), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    uvec2 _658 = uvec2(textureSize(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, int(0u)));
    float _721;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _678 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _684 = (_543 * _528) - (_540 * _531);
        float _687 = (_537 * _531) - (_543 * _525);
        float _690 = (_540 * _525) - (_537 * _528);
        float _719 = ((log2((((float(_658.y) * 0.5) * float(_658.x)) * abs((((_348 - _230) * (_288 - _229)) - ((_347 - _229) * (_289 - _230))) * 2.384185791015625e-07)) / (sqrt(((_687 * _687) + (_690 * _690)) + (_684 * _684)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(sqrt(((_90 * _90) + (_89 * _89)) + (_91 * _91)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_678 * gl_WorldRayDirectionEXT.x, _678 * gl_WorldRayDirectionEXT.y, _678 * gl_WorldRayDirectionEXT.z), vec3(_557, _559, _560))));
        _721 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    }
    else
    {
        _721 = 0.0;
    }
    if (textureLod(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((((cbMtdParam._m0[10u].y * _600) * _613) * _637) + _544) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_604 * cbMtdParam._m0[10u].y) * _613) * _637) + _546) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _721).w < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _52;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _52;
        return;
    }
}


