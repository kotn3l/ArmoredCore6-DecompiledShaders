#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1201;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _156 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _157 >> 16u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _162 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _612 * _606;
    float _614 = _612 * _607;
    float _615 = _612 * _608;
    float _626 = dot(vec3(0.0), vec3(_613, _614, _615));
    float _630 = dot(vec3(0.0), vec3(_593, _594, _595));
    float _633 = dot(vec3(0.0), vec3(_577, _579, _580));
    float _639 = inversesqrt(dot(vec3(_626, _630, _633), vec3(_626, _630, _633)));
    float _663 = dot(vec4(textureLod(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _565) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _566) + cbTextureTilingScale._m0[0u].w), 0.0)), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _671 = (((cbMtdParam._m0[10u].y * _626) * _639) * _663) + _565;
    float _672 = (((_630 * cbMtdParam._m0[10u].y) * _639) * _663) + _566;
    uvec2 _684 = uvec2(textureSize(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, int(0u)));
    bool _689 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _741;
    if (_689)
    {
        float _700 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _706 = (_564 * _549) - (_561 * _552);
        float _709 = (_558 * _552) - (_564 * _546);
        float _712 = (_561 * _546) - (_558 * _549);
        float _739 = ((log2((((float(_684.y) * 0.5) * float(_684.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_709 * _709) + (_712 * _712)) + (_706 * _706)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_700 * gl_WorldRayDirectionEXT.x, _700 * gl_WorldRayDirectionEXT.y, _700 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _741 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    }
    else
    {
        _741 = 0.0;
    }
    vec4 _744 = textureLod(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_671 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_672 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _741);
    float _749 = _744.x * cbMtdParam._m0[9u].x;
    float _750 = _744.y * cbMtdParam._m0[9u].y;
    float _751 = _744.z * cbMtdParam._m0[9u].z;
    uvec2 _763 = uvec2(textureSize(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, int(0u)));
    float _767 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _768 = _767 * gl_WorldRayDirectionEXT.x;
    float _769 = _767 * gl_WorldRayDirectionEXT.y;
    float _770 = _767 * gl_WorldRayDirectionEXT.z;
    float _814;
    if (_689)
    {
        float _780 = (_564 * _549) - (_561 * _552);
        float _783 = (_558 * _552) - (_564 * _546);
        float _786 = (_561 * _546) - (_558 * _549);
        float _812 = ((log2((((float(_763.y) * 0.5) * float(_763.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_783 * _783) + (_786 * _786)) + (_780 * _780)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_768, _769, _770), vec3(_577, _579, _580))));
        _814 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    }
    else
    {
        _814 = 0.0;
    }
    vec4 _817 = textureLod(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _671) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _672) + cbTextureTilingScale._m0[3u].w), _814);
    float _821 = _817.z;
    float _824 = (_817.x * 2.0) + (-1.0);
    float _826 = (_817.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_824, _826), vec2(_824, _826));
    float _1287 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _832 = sqrt(1.0 - (isnan(1.0) ? _1287 : (isnan(_1287) ? 1.0 : min(_1287, 1.0))));
    float _835 = fma(_832, _577, fma(_826, _593, _824 * _613));
    float _838 = fma(_832, _579, fma(_826, _594, _824 * _614));
    float _841 = fma(_832, _580, fma(_826, _595, _824 * _615));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
    float _853 = _852 * _846;
    float _854 = _852 * _847;
    float _855 = _852 * _848;
    float _867 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _868 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _869 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _870 = (-0.0) - _768;
    float _872 = (-0.0) - _769;
    float _873 = (-0.0) - _770;
    float _879 = float(gl_LaunchIDEXT.x);
    float _880 = float(gl_LaunchIDEXT.y);
    float _883 = float(gl_LaunchSizeEXT.x);
    float _897 = fract(fract(sin(dot(vec2(_879 / _883, _880 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _910 = fract(fract(sin(dot(vec2((_879 + 128.0) / _883, (_880 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _920 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _921 = _920.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _921, _920.w, _921, vec3(_867, _868, _869), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (_63._m0 == 0u)
    {
        float _942 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_853, _854, _855));
        float _1298 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _945 = isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0));
        float _964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _821) * 0.949999988079071044921875);
        float _965 = _964 * _964;
        float _966 = g_sceneCB._m0[4u].x - _768;
        float _967 = g_sceneCB._m0[4u].y - _769;
        float _968 = g_sceneCB._m0[4u].z - _770;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _973 = _972 * _966;
        float _974 = _972 * _967;
        float _975 = _972 * _968;
        float _976 = dot(vec3(_853, _854, _855), vec3(g_sceneCB._m0[4u].xyz));
        float _1309 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _979 = isnan(1.0) ? _1309 : (isnan(_1309) ? 1.0 : min(_1309, 1.0));
        float _980 = dot(vec3(_853, _854, _855), vec3(_870, _872, _873));
        float _1320 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _983 = isnan(1.0) ? _1320 : (isnan(_1320) ? 1.0 : min(_1320, 1.0));
        float _984 = dot(vec3(_853, _854, _855), vec3(_973, _974, _975));
        float _1331 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _987 = isnan(1.0) ? _1331 : (isnan(_1331) ? 1.0 : min(_1331, 1.0));
        float _988 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_973, _974, _975));
        float _1342 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _965 * _965;
        float _996 = ((_987 * _987) * (_992 + (-1.0))) + 1.0;
        float _1008 = (exp2(log2(1.0 - (isnan(1.0) ? _1342 : (isnan(_1342) ? 1.0 : min(_1342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1010 = 1.0 - _965;
        float _1021 = (0.5 / (((_983 * ((_979 * _1010) + _965)) + 9.9999999392252902907785028219223e-09) + (((_983 * _1010) + _965) * _979))) * _979;
        float _1353 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1023 = (isnan(1.0) ? _1353 : (isnan(_1353) ? 1.0 : min(_1353, 1.0))) * (_992 / ((_996 * _996) * 3.141590118408203125));
        _1030 = ((_749 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _945;
        _1031 = ((_750 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _945;
        _1032 = ((_751 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _945;
        _1033 = (_1008 * g_sceneCB._m0[5u].x) * _1023;
        _1034 = (_1008 * g_sceneCB._m0[5u].y) * _1023;
        _1035 = (_1008 * g_sceneCB._m0[5u].z) * _1023;
    }
    else
    {
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    bool _1037 = abs(_854) < 0.89999997615814208984375;
    float _1039 = float(_1037);
    float _1040 = _1037 ? 0.0 : 1.0;
    float _1043 = (_1039 * _855) - (_1040 * _854);
    float _1044 = _1040 * _853;
    float _1046 = (-0.0) - (_853 * _1039);
    float _1050 = inversesqrt(dot(vec3(_1043, _1044, _1046), vec3(_1043, _1044, _1046)));
    float _1051 = _1043 * _1050;
    float _1052 = _1044 * _1050;
    float _1053 = _1050 * _1046;
    float _1056 = (_1052 * _855) - (_1053 * _854);
    float _1059 = (_1053 * _853) - (_1051 * _855);
    float _1062 = (_1051 * _854) - (_1052 * _853);
    float _1064;
    float _1072;
    float _1063 = 0.0;
    uint _1065 = 0u;
    float _1069;
    bool _1071;
    for (;;)
    {
        _1069 = (float(_1065) + _897) * 0.03125;
        _1071 = _1065 == 0u;
        float frontier_phi_43_pred;
        if (_1071)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1206;
            float _1207;
            uint _1209;
            _1206 = 0.0;
            _1207 = 0.5;
            _1209 = _1065;
            float _1073;
            for (;;)
            {
                _1073 = ((_1209 & 1u) != 0u) ? (_1207 + _1206) : _1206;
                uint _1210 = _1209 >> 1u;
                if (_1210 == 0u)
                {
                    break;
                }
                else
                {
                    _1206 = _1073;
                    _1207 *= 0.5;
                    _1209 = _1210;
                }
            }
            frontier_phi_43_pred = _1073;
        }
        _1072 = frontier_phi_43_pred;
        float _1074 = _1072 + _910;
        float _1078 = sqrt(_1069);
        float _1079 = ((_1074 > 1.0) ? (_1074 + (-1.0)) : _1074) * 6.283185482025146484375;
        float _1082 = cos(_1079) * _1078;
        float _1084 = sin(_1079) * _1078;
        float _1086 = sqrt(1.0 - _1069);
        float _1099 = ((_1086 * _853) + (_1082 * _1056)) + (_1084 * _1051);
        float _1100 = ((_1086 * _854) + (_1082 * _1059)) + (_1084 * _1052);
        float _1101 = ((_1086 * _855) + (_1082 * _1062)) + (_1084 * _1053);
        _62._m0 = 1u;
        uvec4 _1105 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1106 = _1105.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1106, _1105.w, _1106, vec3(_867, _868, _869), 9.9999997473787516355514526367188e-05, vec3(_1099, _1100, _1101), 10000.0, 1);
        float _1112 = dot(vec3(_853, _854, _855), vec3(_1099, _1100, _1101));
        float _1364 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1115 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
        _1064 = ((float(_62._m0 == 0u) * _1115) / (_1115 * 0.3183098733425140380859375)) + _1063;
        uint _1066 = _1065 + 1u;
        if (_1066 == 32u)
        {
            break;
        }
        else
        {
            _1063 = _1064;
            _1065 = _1066;
            continue;
        }
    }
    float _1123 = _1064 * 0.009947183541953563690185546875;
    float _1128 = dot(vec3(_768, _769, _770), vec3(_853, _854, _855)) * 2.0;
    vec4 _1142 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_768 - (_1128 * _853), _769 - (_1128 * _854), _770 - (_1128 * _855)), 4.0 - (_821 * 4.0));
    float _1147 = dot(vec3(_870, _872, _873), vec3(_853, _854, _855));
    float _1375 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1156 = (exp2(log2(1.0 - (isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1162 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_853, _854, _855), 0.0);
    float _1173 = (_1033 + _1030) + (((_1162.x * _749) + (_1156 * _1142.x)) * _1123);
    float _1177 = (_1034 + _1031) + (((_1162.y * _750) + (_1156 * _1142.y)) * _1123);
    float _1181 = (_1035 + _1032) + (((_1162.z * _751) + (_1156 * _1142.z)) * _1123);
    float _1386 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1397 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1408 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    bool _1189 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1200;
    _1200.x = _1189 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0)));
    _1200.y = _1189 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0)));
    _1200.z = _1189 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0)));
    payload._m0 = _1200;
}


