#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1268;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _161;
    uint _163;
    uint _164;
    if (_121.x == 0u)
    {
        uint _129 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_122 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _155 & 65535u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _156 >> 16u;
        }
        _161 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _121.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uvec4 _235 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + (_171 ? (_227 + 4u) : _227)) >> 2u));
    uint _236 = _235.x;
    float _240 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _241 = float(int(uint(int(_236) >> int(16u))));
    uint _242 = _169 * _163;
    uint _243 = _242 + 12u;
    uint _264;
    uint _265;
    uint _266;
    uint _267;
    if (_174)
    {
        uvec4 _245 = texelFetch(l_geomAttrib_0, int(_243 >> 2u));
        uint _246 = _245.x;
        _264 = _246 & 255u;
        _265 = (_246 >> 8u) & 255u;
        _266 = (_246 >> 16u) & 255u;
        _267 = 16u;
    }
    else
    {
        uint _252 = _243 >> 2u;
        uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
        uint _259 = _258.x;
        _264 = _259 & 65535u;
        _265 = _259 >> 16u;
        _266 = _258.y & 65535u;
        _267 = 20u;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((_267 + _242) >> 2u));
    uint _274 = _273.x;
    uint _286;
    if (_226)
    {
        _286 = _267 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _267 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _267 + 12u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_242 + 4u) + (_171 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _169 * _164;
    uint _302 = _301 + 12u;
    uint _323;
    uint _324;
    uint _325;
    uint _326;
    if (_174)
    {
        uvec4 _304 = texelFetch(l_geomAttrib_0, int(_302 >> 2u));
        uint _305 = _304.x;
        _323 = _305 & 255u;
        _324 = (_305 >> 8u) & 255u;
        _325 = (_305 >> 16u) & 255u;
        _326 = 16u;
    }
    else
    {
        uint _311 = _302 >> 2u;
        uvec2 _317 = uvec2(texelFetch(l_geomAttrib_0, int(_311)).x, texelFetch(l_geomAttrib_0, int(_311 + 1u)).x);
        uint _318 = _317.x;
        _323 = _318 & 65535u;
        _324 = _318 >> 16u;
        _325 = _317.y & 65535u;
        _326 = 20u;
    }
    uvec4 _332 = texelFetch(l_geomAttrib_0, int((_326 + _301) >> 2u));
    uint _333 = _332.x;
    uint _345;
    if (_226)
    {
        _345 = _326 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _326 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _326 + 12u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uvec4 _353 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_171 ? (_345 + 4u) : _345)) >> 2u));
    uint _354 = _353.x;
    float _358 = float(int(uint(int(_354 << 16u) >> int(16u))));
    float _359 = float(int(uint(int(_354) >> int(16u))));
    bool _361 = _121.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _161 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _161 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _163 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _163 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _164 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _164 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _240) * 0.00048828125;
    float _514 = (_300 - _241) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _569 = (((float(_200) * _478) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _572 = (((float(_201) * _478) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = (((float(_202) * _478) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _592 = ((((float(_212 & 255u) * _478) + (-127.0)) + (float(_274 & 255u) * hit._m0.x)) + (float(_333 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_212 >> 8u) & 255u) * _478) + (-127.0)) + (float((_274 >> 8u) & 255u) * hit._m0.x)) + (float((_333 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_212 >> 16u) & 255u) * _478) + (-127.0)) + (float((_274 >> 16u) & 255u) * hit._m0.x)) + (float((_333 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float(_212 >> 24u) * _478) + (-127.0)) + (float(_274 >> 24u) * hit._m0.x)) + (float(_333 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((_593 * _579) - (_594 * _578)) * _595;
    float _606 = ((_594 * _576) - (_592 * _579)) * _595;
    float _607 = ((_592 * _578) - (_593 * _576)) * _595;
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    uint _632 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _633 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _635 = float(int(_632 - _633 * (_632 / _633)));
    float _644 = (fract((((_299 * hit._m0.x) + (_240 * _478)) + (_358 * hit._m0.y)) * 0.00048828125) + (_635 - cbMtdParam._m0[10u].w * trunc(_635 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _646 = (fract((((_300 * hit._m0.x) + (_241 * _478)) + (_359 * hit._m0.y)) * 0.00048828125) + floor(_635 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    uvec2 _658 = uvec2(textureSize(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, int(0u)));
    bool _663 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _716;
    if (_663)
    {
        float _674 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _680 = (_563 * _548) - (_560 * _551);
        float _683 = (_557 * _551) - (_563 * _545);
        float _686 = (_560 * _545) - (_557 * _548);
        float _713 = ((log2((((float(_658.y) * 0.5) * float(_658.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_683 * _683) + (_686 * _686)) + (_680 * _680)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_674 * gl_WorldRayDirectionEXT.x, _674 * gl_WorldRayDirectionEXT.y, _674 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    }
    else
    {
        _716 = 0.0;
    }
    vec4 _720 = textureLod(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _644) + cbTextureTilingScale._m0[0u].z, (_646 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _716);
    float _725 = _720.x * cbMtdParam._m0[9u].x;
    float _726 = _720.y * cbMtdParam._m0[9u].y;
    float _727 = _720.z * cbMtdParam._m0[9u].z;
    uvec2 _740 = uvec2(textureSize(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, int(0u)));
    float _791;
    if (_663)
    {
        float _751 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _757 = (_563 * _548) - (_560 * _551);
        float _760 = (_557 * _551) - (_563 * _545);
        float _763 = (_560 * _545) - (_557 * _548);
        float _789 = ((log2((((float(_740.y) * 0.5) * float(_740.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_760 * _760) + (_763 * _763)) + (_757 * _757)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_751 * gl_WorldRayDirectionEXT.x, _751 * gl_WorldRayDirectionEXT.y, _751 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _791 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    }
    else
    {
        _791 = 0.0;
    }
    float _797 = textureLod(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _644) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _646) + cbTextureTilingScale._m0[2u].w), _791).x + cbMtdParam._m0[10u].x;
    uvec2 _809 = uvec2(textureSize(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, int(0u)));
    float _813 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _814 = _813 * gl_WorldRayDirectionEXT.x;
    float _815 = _813 * gl_WorldRayDirectionEXT.y;
    float _816 = _813 * gl_WorldRayDirectionEXT.z;
    float _860;
    if (_663)
    {
        float _826 = (_563 * _548) - (_560 * _551);
        float _829 = (_557 * _551) - (_563 * _545);
        float _832 = (_560 * _545) - (_557 * _548);
        float _858 = ((log2((((float(_809.y) * 0.5) * float(_809.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_829 * _829) + (_832 * _832)) + (_826 * _826)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_814, _815, _816), vec3(_576, _578, _579))));
        _860 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    }
    else
    {
        _860 = 0.0;
    }
    vec4 _863 = textureLod(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _644) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _646) + cbTextureTilingScale._m0[1u].w), _860);
    float _867 = _863.z;
    float _870 = (_863.x * 2.0) + (-1.0);
    float _872 = (_863.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_870, _872), vec2(_870, _872));
    float _1361 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _878 = sqrt(1.0 - (isnan(1.0) ? _1361 : (isnan(_1361) ? 1.0 : min(_1361, 1.0))));
    float _881 = fma(_878, _576, fma(_872, _592, (_611 * _605) * _870));
    float _884 = fma(_878, _578, fma(_872, _593, (_611 * _606) * _870));
    float _887 = fma(_878, _579, fma(_872, _594, (_611 * _607) * _870));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _906 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _907 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _908 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _909 = (-0.0) - _814;
    float _911 = (-0.0) - _815;
    float _912 = (-0.0) - _816;
    float _918 = float(gl_LaunchIDEXT.x);
    float _919 = float(gl_LaunchIDEXT.y);
    float _922 = float(gl_LaunchSizeEXT.x);
    float _936 = fract(fract(sin(dot(vec2(_918 / _922, _919 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _949 = fract(fract(sin(dot(vec2((_918 + 128.0) / _922, (_919 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _950 = 1.0 - _797;
    float _951 = _950 * _725;
    float _952 = _950 * _726;
    float _953 = _950 * _727;
    float _958 = _797 * (_725 + (-0.039999999105930328369140625));
    float _959 = _797 * (_726 + (-0.039999999105930328369140625));
    float _960 = _797 * (_727 + (-0.039999999105930328369140625));
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    _63._m0 = 1u;
    uvec4 _974 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _975 = _974.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _975, _974.w, _975, vec3(_906, _907, _908), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (_63._m0 == 0u)
    {
        float _996 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_892, _893, _894));
        float _1372 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _999 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
        float _1018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _867) * 0.949999988079071044921875);
        float _1019 = _1018 * _1018;
        float _1020 = g_sceneCB._m0[4u].x - _814;
        float _1021 = g_sceneCB._m0[4u].y - _815;
        float _1022 = g_sceneCB._m0[4u].z - _816;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1027 = _1026 * _1020;
        float _1028 = _1026 * _1021;
        float _1029 = _1026 * _1022;
        float _1030 = dot(vec3(_892, _893, _894), vec3(g_sceneCB._m0[4u].xyz));
        float _1383 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1033 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
        float _1034 = dot(vec3(_892, _893, _894), vec3(_909, _911, _912));
        float _1394 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1037 = isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0));
        float _1038 = dot(vec3(_892, _893, _894), vec3(_1027, _1028, _1029));
        float _1405 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1041 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        float _1042 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1027, _1028, _1029));
        float _1416 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1019 * _1019;
        float _1050 = ((_1041 * _1041) * (_1046 + (-1.0))) + 1.0;
        float _1059 = exp2(log2(1.0 - (isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0)))) * 5.0);
        float _1070 = 1.0 - _1019;
        float _1081 = (0.5 / (((_1037 * ((_1033 * _1070) + _1019)) + 9.9999999392252902907785028219223e-09) + (((_1037 * _1070) + _1019) * _1033))) * _1033;
        float _1427 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1083 = (isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0))) * (_1046 / ((_1050 * _1050) * 3.141590118408203125));
        _1090 = ((_951 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _999;
        _1091 = ((_952 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _999;
        _1092 = ((_953 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _999;
        _1093 = (((_1059 * (0.959999978542327880859375 - _958)) + _961) * g_sceneCB._m0[5u].x) * _1083;
        _1094 = (((_1059 * (0.959999978542327880859375 - _959)) + _963) * g_sceneCB._m0[5u].y) * _1083;
        _1095 = (((_1059 * (0.959999978542327880859375 - _960)) + _964) * g_sceneCB._m0[5u].z) * _1083;
    }
    else
    {
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    bool _1097 = abs(_893) < 0.89999997615814208984375;
    float _1099 = float(_1097);
    float _1100 = _1097 ? 0.0 : 1.0;
    float _1103 = (_1099 * _894) - (_1100 * _893);
    float _1104 = _1100 * _892;
    float _1106 = (-0.0) - (_892 * _1099);
    float _1110 = inversesqrt(dot(vec3(_1103, _1104, _1106), vec3(_1103, _1104, _1106)));
    float _1111 = _1103 * _1110;
    float _1112 = _1104 * _1110;
    float _1113 = _1110 * _1106;
    float _1116 = (_1112 * _894) - (_1113 * _893);
    float _1119 = (_1113 * _892) - (_1111 * _894);
    float _1122 = (_1111 * _893) - (_1112 * _892);
    float _1124;
    float _1132;
    float _1123 = 0.0;
    uint _1125 = 0u;
    float _1129;
    bool _1131;
    for (;;)
    {
        _1129 = (float(_1125) + _936) * 0.03125;
        _1131 = _1125 == 0u;
        float frontier_phi_45_pred;
        if (_1131)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1273;
            float _1274;
            uint _1276;
            _1273 = 0.0;
            _1274 = 0.5;
            _1276 = _1125;
            float _1133;
            for (;;)
            {
                _1133 = ((_1276 & 1u) != 0u) ? (_1274 + _1273) : _1273;
                uint _1277 = _1276 >> 1u;
                if (_1277 == 0u)
                {
                    break;
                }
                else
                {
                    _1273 = _1133;
                    _1274 *= 0.5;
                    _1276 = _1277;
                }
            }
            frontier_phi_45_pred = _1133;
        }
        _1132 = frontier_phi_45_pred;
        float _1134 = _1132 + _949;
        float _1138 = sqrt(_1129);
        float _1139 = ((_1134 > 1.0) ? (_1134 + (-1.0)) : _1134) * 6.283185482025146484375;
        float _1142 = cos(_1139) * _1138;
        float _1144 = sin(_1139) * _1138;
        float _1146 = sqrt(1.0 - _1129);
        float _1159 = ((_1146 * _892) + (_1142 * _1116)) + (_1144 * _1111);
        float _1160 = ((_1146 * _893) + (_1142 * _1119)) + (_1144 * _1112);
        float _1161 = ((_1146 * _894) + (_1142 * _1122)) + (_1144 * _1113);
        _62._m0 = 1u;
        uvec4 _1165 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1166 = _1165.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1166, _1165.w, _1166, vec3(_906, _907, _908), 9.9999997473787516355514526367188e-05, vec3(_1159, _1160, _1161), 10000.0, 1);
        float _1172 = dot(vec3(_892, _893, _894), vec3(_1159, _1160, _1161));
        float _1438 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1175 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1124 = ((float(_62._m0 == 0u) * _1175) / (_1175 * 0.3183098733425140380859375)) + _1123;
        uint _1126 = _1125 + 1u;
        if (_1126 == 32u)
        {
            break;
        }
        else
        {
            _1123 = _1124;
            _1125 = _1126;
            continue;
        }
    }
    float _1183 = _1124 * 0.009947183541953563690185546875;
    float _1188 = dot(vec3(_814, _815, _816), vec3(_892, _893, _894)) * 2.0;
    vec4 _1202 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_814 - (_1188 * _892), _815 - (_1188 * _893), _816 - (_1188 * _894)), 4.0 - (_867 * 4.0));
    float _1207 = dot(vec3(_909, _911, _912), vec3(_892, _893, _894));
    float _1449 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1217 = exp2(log2(1.0 - (isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0)))) * 5.0);
    vec4 _1229 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_892, _893, _894), 0.0);
    float _1240 = (_1093 + _1090) + (((_1229.x * _951) + (((_1217 * (0.959999978542327880859375 - _958)) + _961) * _1202.x)) * _1183);
    float _1244 = (_1094 + _1091) + (((_1229.y * _952) + (((_1217 * (0.959999978542327880859375 - _959)) + _963) * _1202.y)) * _1183);
    float _1248 = (_1095 + _1092) + (((_1229.z * _953) + (((_1217 * (0.959999978542327880859375 - _960)) + _964) * _1202.z)) * _1183);
    float _1460 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1471 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1482 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    bool _1256 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1267;
    _1267.x = _1256 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0)));
    _1267.y = _1256 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0)));
    _1267.z = _1256 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0)));
    payload._m0 = _1267;
}


