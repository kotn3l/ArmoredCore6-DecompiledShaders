#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _39
{
    uint _m0;
};

struct _43
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _39 payload;
hitAttributeEXT _43 hit;

void main()
{
    uint _49 = payload._m0;
    float _87 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _107 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _108 = _107.y;
    uint _147;
    uint _149;
    uint _150;
    if (_107.x == 0u)
    {
        uint _115 = (_108 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _124 = uvec3(texelFetch(l_geomIndexBuffer, int(_115)).x, texelFetch(l_geomIndexBuffer, int(_115 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_115 + 2u)).x);
        _147 = _124.x;
        _149 = _124.y;
        _150 = _124.z;
    }
    else
    {
        uint _128 = uint(gl_PrimitiveID) * 6u;
        uint _130 = _128 & 4294967292u;
        uint _133 = (_108 + _130) >> 2u;
        uvec2 _140 = uvec2(texelFetch(l_geomIndexBuffer, int(_133)).x, texelFetch(l_geomIndexBuffer, int(_133 + 1u)).x);
        uint _141 = _140.x;
        uint _142 = _140.y;
        uint _144 = _141 >> 16u;
        uint _145 = _142 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_130 == _128)
        {
            frontier_phi_3_2_ladder = _141 & 65535u;
            frontier_phi_3_2_ladder_1 = _144;
            frontier_phi_3_2_ladder_2 = _145;
        }
        else
        {
            frontier_phi_3_2_ladder = _144;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _142 >> 16u;
        }
        _147 = frontier_phi_3_2_ladder;
        _149 = frontier_phi_3_2_ladder_1;
        _150 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _154 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _155 = _154.x;
    uint _156 = _154.z;
    bool _157 = _156 != 0u;
    bool _159 = _107.w == 0u;
    bool _160 = _157 || _159;
    uint _162 = (_155 * _147) + 12u;
    uint _186;
    uint _187;
    uint _188;
    uint _189;
    if (_160)
    {
        uvec4 _165 = texelFetch(l_geomAttrib_0, int(_162 >> 2u));
        uint _166 = _165.x;
        _186 = _166 & 255u;
        _187 = (_166 >> 8u) & 255u;
        _188 = (_166 >> 16u) & 255u;
        _189 = 20u;
    }
    else
    {
        uint _174 = _162 >> 2u;
        uvec2 _180 = uvec2(texelFetch(l_geomAttrib_0, int(_174)).x, texelFetch(l_geomAttrib_0, int(_174 + 1u)).x);
        uint _181 = _180.x;
        _186 = _181 & 65535u;
        _187 = _181 >> 16u;
        _188 = _180.y & 65535u;
        _189 = 24u;
    }
    bool _195 = _156 == 0u;
    uint _196;
    if (_195)
    {
        _196 = _189;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_159)
        {
            frontier_phi_9_10_ladder = _189 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _189 + 8u;
        }
        _196 = frontier_phi_9_10_ladder;
    }
    uint _201 = _157 ? (_196 + 4u) : _196;
    uint _202 = _155 * _147;
    uvec4 _213 = texelFetch(l_geomAttrib_0, int(((_202 + 4u) + _201) >> 2u));
    uint _214 = _213.x;
    float _218 = float(int(uint(int(_214 << 16u) >> int(16u))));
    float _219 = float(int(uint(int(_214) >> int(16u))));
    uint _221 = (_155 * _149) + 12u;
    uint _242;
    uint _243;
    uint _244;
    uint _245;
    if (_160)
    {
        uvec4 _223 = texelFetch(l_geomAttrib_0, int(_221 >> 2u));
        uint _224 = _223.x;
        _242 = _224 & 255u;
        _243 = (_224 >> 8u) & 255u;
        _244 = (_224 >> 16u) & 255u;
        _245 = 20u;
    }
    else
    {
        uint _230 = _221 >> 2u;
        uvec2 _236 = uvec2(texelFetch(l_geomAttrib_0, int(_230)).x, texelFetch(l_geomAttrib_0, int(_230 + 1u)).x);
        uint _237 = _236.x;
        _242 = _237 & 65535u;
        _243 = _237 >> 16u;
        _244 = _236.y & 65535u;
        _245 = 24u;
    }
    uint _249;
    if (_195)
    {
        _249 = _245;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_159)
        {
            frontier_phi_16_17_ladder = _245 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _245 + 8u;
        }
        _249 = frontier_phi_16_17_ladder;
    }
    uint _253 = _157 ? (_249 + 4u) : _249;
    uint _254 = _155 * _149;
    uvec4 _264 = texelFetch(l_geomAttrib_0, int(((_254 + 4u) + _253) >> 2u));
    uint _265 = _264.x;
    float _269 = float(int(uint(int(_265 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_265) >> int(16u))));
    uint _272 = (_155 * _150) + 12u;
    uint _293;
    uint _294;
    uint _295;
    uint _296;
    if (_160)
    {
        uvec4 _274 = texelFetch(l_geomAttrib_0, int(_272 >> 2u));
        uint _275 = _274.x;
        _293 = _275 & 255u;
        _294 = (_275 >> 8u) & 255u;
        _295 = (_275 >> 16u) & 255u;
        _296 = 20u;
    }
    else
    {
        uint _281 = _272 >> 2u;
        uvec2 _287 = uvec2(texelFetch(l_geomAttrib_0, int(_281)).x, texelFetch(l_geomAttrib_0, int(_281 + 1u)).x);
        uint _288 = _287.x;
        _293 = _288 & 65535u;
        _294 = _288 >> 16u;
        _295 = _287.y & 65535u;
        _296 = 24u;
    }
    uint _300;
    if (_195)
    {
        _300 = _296;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_159)
        {
            frontier_phi_23_24_ladder = _296 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _296 + 8u;
        }
        _300 = frontier_phi_23_24_ladder;
    }
    uint _304 = _157 ? (_300 + 4u) : _300;
    uint _305 = _155 * _150;
    uvec4 _315 = texelFetch(l_geomAttrib_0, int(((_305 + 4u) + _304) >> 2u));
    uint _316 = _315.x;
    float _320 = float(int(uint(int(_316 << 16u) >> int(16u))));
    float _321 = float(int(uint(int(_316) >> int(16u))));
    bool _323 = _107.z == 0u;
    float _359;
    float _360;
    float _361;
    if (_323)
    {
        uint _326 = _147 * 3u;
        uvec3 _335 = uvec3(texelFetch(l_geomPositionBuffer, int(_326)).x, texelFetch(l_geomPositionBuffer, int(_326 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_326 + 2u)).x);
        _359 = uintBitsToFloat(_335.x);
        _360 = uintBitsToFloat(_335.y);
        _361 = uintBitsToFloat(_335.z);
    }
    else
    {
        uint _343 = _147 * 2u;
        uvec2 _349 = uvec2(texelFetch(l_geomPositionBuffer, int(_343)).x, texelFetch(l_geomPositionBuffer, int(_343 + 1u)).x);
        uint _350 = _349.x;
        _359 = unpackHalf2x16(_350).x;
        _360 = unpackHalf2x16(_350 >> 16u).x;
        _361 = unpackHalf2x16(_349.y).x;
    }
    float _397;
    float _398;
    float _399;
    if (_323)
    {
        uint _364 = _149 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _149 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_323)
    {
        uint _402 = _150 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _150 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _440 = (1.0 - hit._m0.x) - hit._m0.y;
    float _477 = _397 - _359;
    float _478 = _398 - _360;
    float _479 = _399 - _361;
    float _482 = fma(_479, gl_ObjectToWorldEXT[2u].x, fma(_478, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _477));
    float _485 = fma(_479, gl_ObjectToWorldEXT[2u].y, fma(_478, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _477));
    float _488 = fma(_479, gl_ObjectToWorldEXT[2u].z, fma(_478, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _477));
    float _489 = _435 - _359;
    float _490 = _436 - _360;
    float _491 = _437 - _361;
    float _494 = fma(_491, gl_ObjectToWorldEXT[2u].x, fma(_490, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _489));
    float _497 = fma(_491, gl_ObjectToWorldEXT[2u].y, fma(_490, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _489));
    float _500 = fma(_491, gl_ObjectToWorldEXT[2u].z, fma(_490, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _489));
    uint _519 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _520 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _522 = float(int(_519 - _520 * (_519 / _520)));
    uvec2 _545 = uvec2(textureSize(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, int(0u)));
    float _632;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _588 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _594 = (_500 * _485) - (_497 * _488);
        float _597 = (_494 * _488) - (_500 * _482);
        float _600 = (_497 * _482) - (_494 * _485);
        float _627 = log2(abs(sqrt(((_88 * _88) + (_87 * _87)) + (_89 * _89)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_588 * gl_WorldRayDirectionEXT.x, _588 * gl_WorldRayDirectionEXT.y, _588 * gl_WorldRayDirectionEXT.z), vec3(((((float(_186) * _440) + (-127.0)) + (float(_242) * hit._m0.x)) + (float(_293) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_187) * _440) + (-127.0)) + (float(_243) * hit._m0.x)) + (float(_294) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _440) + (-127.0)) + (float(_244) * hit._m0.x)) + (float(_295) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _629 = ((log2((((float(_545.y) * 0.5) * float(_545.x)) * abs((((_321 - _219) * (_269 - _218)) - ((_320 - _218) * (_270 - _219))) * 2.384185791015625e-07)) / (sqrt(((_597 * _597) + (_600 * _600)) + (_594 * _594)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _627;
        _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    }
    else
    {
        _632 = 0.0;
    }
    bool _643 = ((((((float(texelFetch(l_geomAttrib_0, int((_253 + _254) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_201 + _202) >> 2u)).x >> 24u) * _440)) + (float(texelFetch(l_geomAttrib_0, int((_304 + _305) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125) * cbMtdParam._m0[9u].w) * textureLod(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((fract((((_269 * hit._m0.x) + (_218 * _440)) + (_320 * hit._m0.y)) * 0.00048828125) + (_522 - cbMtdParam._m0[10u].w * trunc(_522 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract((((_270 * hit._m0.x) + (_219 * _440)) + (_321 * hit._m0.y)) * 0.00048828125) + floor(_522 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _632).w) >= 1.0;
    if (float(_643) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _49;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _49;
        return;
    }
}


