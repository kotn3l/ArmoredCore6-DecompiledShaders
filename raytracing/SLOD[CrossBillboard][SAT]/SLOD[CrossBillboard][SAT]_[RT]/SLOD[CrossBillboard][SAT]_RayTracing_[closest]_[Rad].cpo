#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _48
{
    vec3 _m0;
};

struct _52
{
    vec2 _m0;
};

struct _55
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _48 payload;
hitAttributeEXT _52 hit;
layout(location = 1) rayPayloadEXT _55 _57;
layout(location = 2) rayPayloadEXT _55 _58;

vec3 _1235;

void main()
{
    float _66 = float(gl_LaunchSizeEXT.y);
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _105 = sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _66)))));
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _157;
    uint _159;
    uint _160;
    if (_116.x == 0u)
    {
        uint _125 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_117 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _154;
            frontier_phi_3_2_ladder_1 = _151 & 65535u;
            frontier_phi_3_2_ladder_2 = _155;
        }
        else
        {
            frontier_phi_3_2_ladder = _155;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _152 >> 16u;
        }
        _157 = frontier_phi_3_2_ladder_1;
        _159 = frontier_phi_3_2_ladder;
        _160 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    bool _169 = _116.w == 0u;
    bool _170 = _167 || _169;
    uint _171 = _165 * _157;
    uint _172 = _171 + 12u;
    uint _196;
    uint _197;
    uint _198;
    uint _199;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
        _199 = 16u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
        _199 = 20u;
    }
    uvec4 _207 = texelFetch(l_geomAttrib_0, int((_199 + _171) >> 2u));
    uint _208 = _207.x;
    bool _222 = _166 == 0u;
    uint _223;
    if (_222)
    {
        _223 = _199 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_169)
        {
            frontier_phi_9_10_ladder = _199 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _199 + 12u;
        }
        _223 = frontier_phi_9_10_ladder;
    }
    uvec4 _231 = texelFetch(l_geomAttrib_0, int(((_171 + 4u) + (_167 ? (_223 + 4u) : _223)) >> 2u));
    uint _232 = _231.x;
    float _236 = float(int(uint(int(_232 << 16u) >> int(16u))));
    float _237 = float(int(uint(int(_232) >> int(16u))));
    uint _238 = _165 * _159;
    uint _239 = _238 + 12u;
    uint _260;
    uint _261;
    uint _262;
    uint _263;
    if (_170)
    {
        uvec4 _241 = texelFetch(l_geomAttrib_0, int(_239 >> 2u));
        uint _242 = _241.x;
        _260 = _242 & 255u;
        _261 = (_242 >> 8u) & 255u;
        _262 = (_242 >> 16u) & 255u;
        _263 = 16u;
    }
    else
    {
        uint _248 = _239 >> 2u;
        uvec2 _254 = uvec2(texelFetch(l_geomAttrib_0, int(_248)).x, texelFetch(l_geomAttrib_0, int(_248 + 1u)).x);
        uint _255 = _254.x;
        _260 = _255 & 65535u;
        _261 = _255 >> 16u;
        _262 = _254.y & 65535u;
        _263 = 20u;
    }
    uvec4 _269 = texelFetch(l_geomAttrib_0, int((_263 + _238) >> 2u));
    uint _270 = _269.x;
    uint _282;
    if (_222)
    {
        _282 = _263 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_169)
        {
            frontier_phi_16_17_ladder = _263 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _263 + 12u;
        }
        _282 = frontier_phi_16_17_ladder;
    }
    uvec4 _290 = texelFetch(l_geomAttrib_0, int(((_238 + 4u) + (_167 ? (_282 + 4u) : _282)) >> 2u));
    uint _291 = _290.x;
    float _295 = float(int(uint(int(_291 << 16u) >> int(16u))));
    float _296 = float(int(uint(int(_291) >> int(16u))));
    uint _297 = _165 * _160;
    uint _298 = _297 + 12u;
    uint _319;
    uint _320;
    uint _321;
    uint _322;
    if (_170)
    {
        uvec4 _300 = texelFetch(l_geomAttrib_0, int(_298 >> 2u));
        uint _301 = _300.x;
        _319 = _301 & 255u;
        _320 = (_301 >> 8u) & 255u;
        _321 = (_301 >> 16u) & 255u;
        _322 = 16u;
    }
    else
    {
        uint _307 = _298 >> 2u;
        uvec2 _313 = uvec2(texelFetch(l_geomAttrib_0, int(_307)).x, texelFetch(l_geomAttrib_0, int(_307 + 1u)).x);
        uint _314 = _313.x;
        _319 = _314 & 65535u;
        _320 = _314 >> 16u;
        _321 = _313.y & 65535u;
        _322 = 20u;
    }
    uvec4 _328 = texelFetch(l_geomAttrib_0, int((_322 + _297) >> 2u));
    uint _329 = _328.x;
    uint _341;
    if (_222)
    {
        _341 = _322 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_169)
        {
            frontier_phi_23_24_ladder = _322 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _322 + 12u;
        }
        _341 = frontier_phi_23_24_ladder;
    }
    uvec4 _349 = texelFetch(l_geomAttrib_0, int(((_297 + 4u) + (_167 ? (_341 + 4u) : _341)) >> 2u));
    uint _350 = _349.x;
    float _354 = float(int(uint(int(_350 << 16u) >> int(16u))));
    float _355 = float(int(uint(int(_350) >> int(16u))));
    bool _357 = _116.z == 0u;
    float _393;
    float _394;
    float _395;
    if (_357)
    {
        uint _360 = _157 * 3u;
        uvec3 _369 = uvec3(texelFetch(l_geomPositionBuffer, int(_360)).x, texelFetch(l_geomPositionBuffer, int(_360 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_360 + 2u)).x);
        _393 = uintBitsToFloat(_369.x);
        _394 = uintBitsToFloat(_369.y);
        _395 = uintBitsToFloat(_369.z);
    }
    else
    {
        uint _377 = _157 * 2u;
        uvec2 _383 = uvec2(texelFetch(l_geomPositionBuffer, int(_377)).x, texelFetch(l_geomPositionBuffer, int(_377 + 1u)).x);
        uint _384 = _383.x;
        _393 = unpackHalf2x16(_384).x;
        _394 = unpackHalf2x16(_384 >> 16u).x;
        _395 = unpackHalf2x16(_383.y).x;
    }
    float _431;
    float _432;
    float _433;
    if (_357)
    {
        uint _398 = _159 * 3u;
        uvec3 _407 = uvec3(texelFetch(l_geomPositionBuffer, int(_398)).x, texelFetch(l_geomPositionBuffer, int(_398 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_398 + 2u)).x);
        _431 = uintBitsToFloat(_407.x);
        _432 = uintBitsToFloat(_407.y);
        _433 = uintBitsToFloat(_407.z);
    }
    else
    {
        uint _415 = _159 * 2u;
        uvec2 _421 = uvec2(texelFetch(l_geomPositionBuffer, int(_415)).x, texelFetch(l_geomPositionBuffer, int(_415 + 1u)).x);
        uint _422 = _421.x;
        _431 = unpackHalf2x16(_422).x;
        _432 = unpackHalf2x16(_422 >> 16u).x;
        _433 = unpackHalf2x16(_421.y).x;
    }
    float _469;
    float _470;
    float _471;
    if (_357)
    {
        uint _436 = _160 * 3u;
        uvec3 _445 = uvec3(texelFetch(l_geomPositionBuffer, int(_436)).x, texelFetch(l_geomPositionBuffer, int(_436 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_436 + 2u)).x);
        _469 = uintBitsToFloat(_445.x);
        _470 = uintBitsToFloat(_445.y);
        _471 = uintBitsToFloat(_445.z);
    }
    else
    {
        uint _453 = _160 * 2u;
        uvec2 _459 = uvec2(texelFetch(l_geomPositionBuffer, int(_453)).x, texelFetch(l_geomPositionBuffer, int(_453 + 1u)).x);
        uint _460 = _459.x;
        _469 = unpackHalf2x16(_460).x;
        _470 = unpackHalf2x16(_460 >> 16u).x;
        _471 = unpackHalf2x16(_459.y).x;
    }
    float _474 = (1.0 - hit._m0.x) - hit._m0.y;
    float _508 = (_295 - _236) * 0.00048828125;
    float _510 = (_296 - _237) * 0.00048828125;
    float _513 = (_354 - _236) * 0.00048828125;
    float _514 = (_355 - _237) * 0.00048828125;
    float _536 = _431 - _393;
    float _537 = _432 - _394;
    float _538 = _433 - _395;
    float _541 = fma(_538, gl_ObjectToWorldEXT[2u].x, fma(_537, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _536));
    float _544 = fma(_538, gl_ObjectToWorldEXT[2u].y, fma(_537, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _536));
    float _547 = fma(_538, gl_ObjectToWorldEXT[2u].z, fma(_537, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _536));
    float _548 = _469 - _393;
    float _549 = _470 - _394;
    float _550 = _471 - _395;
    float _553 = fma(_550, gl_ObjectToWorldEXT[2u].x, fma(_549, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _548));
    float _556 = fma(_550, gl_ObjectToWorldEXT[2u].y, fma(_549, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _548));
    float _559 = fma(_550, gl_ObjectToWorldEXT[2u].z, fma(_549, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _548));
    float _560 = (((_295 * hit._m0.x) + (_236 * _474)) + (_354 * hit._m0.y)) * 0.00048828125;
    float _561 = (((_296 * hit._m0.x) + (_237 * _474)) + (_355 * hit._m0.y)) * 0.00048828125;
    float _565 = (((float(_196) * _474) + (-127.0)) + (float(_260) * hit._m0.x)) + (float(_319) * hit._m0.y);
    float _568 = (((float(_197) * _474) + (-127.0)) + (float(_261) * hit._m0.x)) + (float(_320) * hit._m0.y);
    float _571 = (((float(_198) * _474) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_321) * hit._m0.y);
    float _572 = _565 * 0.0078740157186985015869140625;
    float _574 = _568 * 0.0078740157186985015869140625;
    float _575 = _571 * 0.0078740157186985015869140625;
    float _588 = ((((float(_208 & 255u) * _474) + (-127.0)) + (float(_270 & 255u) * hit._m0.x)) + (float(_329 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _589 = ((((float((_208 >> 8u) & 255u) * _474) + (-127.0)) + (float((_270 >> 8u) & 255u) * hit._m0.x)) + (float((_329 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _590 = ((((float((_208 >> 16u) & 255u) * _474) + (-127.0)) + (float((_270 >> 16u) & 255u) * hit._m0.x)) + (float((_329 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _591 = ((((float(_208 >> 24u) * _474) + (-127.0)) + (float(_270 >> 24u) * hit._m0.x)) + (float(_329 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _601 = ((_589 * _575) - (_590 * _574)) * _591;
    float _602 = ((_590 * _572) - (_588 * _575)) * _591;
    float _603 = ((_588 * _574) - (_589 * _572)) * _591;
    float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
    uvec2 _622 = uvec2(textureSize(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, int(0u)));
    bool _627 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _680;
    if (_627)
    {
        float _638 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _644 = (_559 * _544) - (_556 * _547);
        float _647 = (_553 * _547) - (_559 * _541);
        float _650 = (_556 * _541) - (_553 * _544);
        float _677 = ((log2((((float(_622.y) * 0.5) * float(_622.x)) * abs((_514 * _508) - (_513 * _510))) / (sqrt(((_647 * _647) + (_650 * _650)) + (_644 * _644)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_638 * gl_WorldRayDirectionEXT.x, _638 * gl_WorldRayDirectionEXT.y, _638 * gl_WorldRayDirectionEXT.z), vec3(_572, _574, _575))));
        _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    }
    else
    {
        _680 = 0.0;
    }
    vec4 _684 = textureLod(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _560) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _561) + cbTextureTilingScale._m0[0u].w), _680);
    float _690 = 1.0 / _684.w;
    float _691 = _684.x * _690;
    float _692 = _690 * _684.y;
    float _693 = _690 * _684.z;
    uvec2 _705 = uvec2(textureSize(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, int(0u)));
    float _756;
    if (_627)
    {
        float _716 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _722 = (_559 * _544) - (_556 * _547);
        float _725 = (_553 * _547) - (_559 * _541);
        float _728 = (_556 * _541) - (_553 * _544);
        float _754 = ((log2((((float(_705.y) * 0.5) * float(_705.x)) * abs((_514 * _508) - (_513 * _510))) / (sqrt(((_725 * _725) + (_728 * _728)) + (_722 * _722)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_716 * gl_WorldRayDirectionEXT.x, _716 * gl_WorldRayDirectionEXT.y, _716 * gl_WorldRayDirectionEXT.z), vec3(_572, _574, _575))));
        _756 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    }
    else
    {
        _756 = 0.0;
    }
    float _762 = textureLod(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _560) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _561) + cbTextureTilingScale._m0[1u].w), _756).x * _690;
    uvec2 _774 = uvec2(textureSize(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, int(0u)));
    float _778 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _779 = _778 * gl_WorldRayDirectionEXT.x;
    float _780 = _778 * gl_WorldRayDirectionEXT.y;
    float _781 = _778 * gl_WorldRayDirectionEXT.z;
    float _825;
    if (_627)
    {
        float _791 = (_559 * _544) - (_556 * _547);
        float _794 = (_553 * _547) - (_559 * _541);
        float _797 = (_556 * _541) - (_553 * _544);
        float _823 = ((log2((((float(_774.y) * 0.5) * float(_774.x)) * abs((_514 * _508) - (_513 * _510))) / (sqrt(((_794 * _794) + (_797 * _797)) + (_791 * _791)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_779, _780, _781), vec3(_572, _574, _575))));
        _825 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    }
    else
    {
        _825 = 0.0;
    }
    vec4 _828 = textureLod(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _560) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _561) + cbTextureTilingScale._m0[2u].w), _825);
    float _835 = (_828.x * 2.0) + (-1.0);
    float _837 = (_828.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_835, _837), vec2(_835, _837));
    float _1328 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _843 = sqrt(1.0 - (isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0))));
    float _844 = _828.z * _690;
    float _847 = fma(_843, _572, fma(_837, _588, (_607 * _601) * _835));
    float _850 = fma(_843, _574, fma(_837, _589, (_607 * _602) * _835));
    float _853 = fma(_843, _575, fma(_837, _590, (_607 * _603) * _835));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    float _858 = _857 * _847;
    float _859 = _857 * _850;
    float _860 = _857 * _853;
    float _872 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _873 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _874 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _875 = (-0.0) - _779;
    float _877 = (-0.0) - _780;
    float _878 = (-0.0) - _781;
    float _884 = float(gl_LaunchIDEXT.x);
    float _885 = float(gl_LaunchIDEXT.y);
    float _888 = float(gl_LaunchSizeEXT.x);
    float _902 = fract(fract(sin(dot(vec2(_884 / _888, _885 / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _915 = fract(fract(sin(dot(vec2((_884 + 128.0) / _888, (_885 + 128.0) / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _916 = 1.0 - _762;
    float _917 = _916 * _691;
    float _918 = _916 * _692;
    float _919 = _916 * _693;
    float _924 = _762 * (_691 + (-0.039999999105930328369140625));
    float _925 = _762 * (_692 + (-0.039999999105930328369140625));
    float _926 = _762 * (_693 + (-0.039999999105930328369140625));
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    _58._m0 = 1u;
    uvec4 _940 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _941 = _940.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _941, _940.w, _941, vec3(_872, _873, _874), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (_58._m0 == 0u)
    {
        float _962 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_858, _859, _860));
        float _1339 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _965 = isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0));
        float _984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _844) * 0.949999988079071044921875);
        float _985 = _984 * _984;
        float _986 = g_sceneCB._m0[4u].x - _779;
        float _987 = g_sceneCB._m0[4u].y - _780;
        float _988 = g_sceneCB._m0[4u].z - _781;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _993 = _992 * _986;
        float _994 = _992 * _987;
        float _995 = _992 * _988;
        float _996 = dot(vec3(_858, _859, _860), vec3(g_sceneCB._m0[4u].xyz));
        float _1350 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _999 = isnan(1.0) ? _1350 : (isnan(_1350) ? 1.0 : min(_1350, 1.0));
        float _1000 = dot(vec3(_858, _859, _860), vec3(_875, _877, _878));
        float _1361 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1003 = isnan(1.0) ? _1361 : (isnan(_1361) ? 1.0 : min(_1361, 1.0));
        float _1004 = dot(vec3(_858, _859, _860), vec3(_993, _994, _995));
        float _1372 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1007 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
        float _1008 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_993, _994, _995));
        float _1383 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _985 * _985;
        float _1016 = ((_1007 * _1007) * (_1012 + (-1.0))) + 1.0;
        float _1025 = exp2(log2(1.0 - (isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0)))) * 5.0);
        float _1036 = 1.0 - _985;
        float _1047 = (0.5 / (((_1003 * ((_999 * _1036) + _985)) + 9.9999999392252902907785028219223e-09) + (((_1003 * _1036) + _985) * _999))) * _999;
        float _1394 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1049 = (isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0))) * (_1012 / ((_1016 * _1016) * 3.141590118408203125));
        _1056 = ((_917 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _965;
        _1057 = ((_918 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _965;
        _1058 = ((_919 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _965;
        _1059 = (((_1025 * (0.959999978542327880859375 - _924)) + _927) * g_sceneCB._m0[5u].x) * _1049;
        _1060 = (((_1025 * (0.959999978542327880859375 - _925)) + _929) * g_sceneCB._m0[5u].y) * _1049;
        _1061 = (((_1025 * (0.959999978542327880859375 - _926)) + _930) * g_sceneCB._m0[5u].z) * _1049;
    }
    else
    {
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    bool _1063 = abs(_859) < 0.89999997615814208984375;
    float _1065 = float(_1063);
    float _1066 = _1063 ? 0.0 : 1.0;
    float _1069 = (_1065 * _860) - (_1066 * _859);
    float _1070 = _1066 * _858;
    float _1072 = (-0.0) - (_858 * _1065);
    float _1076 = inversesqrt(dot(vec3(_1069, _1070, _1072), vec3(_1069, _1070, _1072)));
    float _1077 = _1069 * _1076;
    float _1078 = _1070 * _1076;
    float _1079 = _1076 * _1072;
    float _1082 = (_1078 * _860) - (_1079 * _859);
    float _1085 = (_1079 * _858) - (_1077 * _860);
    float _1088 = (_1077 * _859) - (_1078 * _858);
    float _1090;
    float _1098;
    float _1089 = 0.0;
    uint _1091 = 0u;
    float _1095;
    bool _1097;
    for (;;)
    {
        _1095 = (float(_1091) + _902) * 0.03125;
        _1097 = _1091 == 0u;
        float frontier_phi_45_pred;
        if (_1097)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1240;
            float _1241;
            uint _1243;
            _1240 = 0.0;
            _1241 = 0.5;
            _1243 = _1091;
            float _1099;
            for (;;)
            {
                _1099 = ((_1243 & 1u) != 0u) ? (_1241 + _1240) : _1240;
                uint _1244 = _1243 >> 1u;
                if (_1244 == 0u)
                {
                    break;
                }
                else
                {
                    _1240 = _1099;
                    _1241 *= 0.5;
                    _1243 = _1244;
                }
            }
            frontier_phi_45_pred = _1099;
        }
        _1098 = frontier_phi_45_pred;
        float _1100 = _1098 + _915;
        float _1104 = sqrt(_1095);
        float _1105 = ((_1100 > 1.0) ? (_1100 + (-1.0)) : _1100) * 6.283185482025146484375;
        float _1108 = cos(_1105) * _1104;
        float _1110 = sin(_1105) * _1104;
        float _1112 = sqrt(1.0 - _1095);
        float _1125 = ((_1112 * _858) + (_1108 * _1082)) + (_1110 * _1077);
        float _1126 = ((_1112 * _859) + (_1108 * _1085)) + (_1110 * _1078);
        float _1127 = ((_1112 * _860) + (_1108 * _1088)) + (_1110 * _1079);
        _57._m0 = 1u;
        uvec4 _1131 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1132 = _1131.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1132, _1131.w, _1132, vec3(_872, _873, _874), 9.9999997473787516355514526367188e-05, vec3(_1125, _1126, _1127), 10000.0, 1);
        float _1138 = dot(vec3(_858, _859, _860), vec3(_1125, _1126, _1127));
        float _1405 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1141 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        _1090 = ((float(_57._m0 == 0u) * _1141) / (_1141 * 0.3183098733425140380859375)) + _1089;
        uint _1092 = _1091 + 1u;
        if (_1092 == 32u)
        {
            break;
        }
        else
        {
            _1089 = _1090;
            _1091 = _1092;
            continue;
        }
    }
    float _1149 = _1090 * 0.009947183541953563690185546875;
    float _1154 = dot(vec3(_779, _780, _781), vec3(_858, _859, _860)) * 2.0;
    vec4 _1168 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_779 - (_1154 * _858), _780 - (_1154 * _859), _781 - (_1154 * _860)), 4.0 - (_844 * 4.0));
    float _1173 = dot(vec3(_875, _877, _878), vec3(_858, _859, _860));
    float _1416 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1183 = exp2(log2(1.0 - (isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0)))) * 5.0);
    vec4 _1195 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_858, _859, _860), 0.0);
    float _1206 = (_1059 + _1056) + (((_1195.x * _917) + (((_1183 * (0.959999978542327880859375 - _924)) + _927) * _1168.x)) * _1149);
    float _1210 = (_1060 + _1057) + (((_1195.y * _918) + (((_1183 * (0.959999978542327880859375 - _925)) + _929) * _1168.y)) * _1149);
    float _1214 = (_1061 + _1058) + (((_1195.z * _919) + (((_1183 * (0.959999978542327880859375 - _926)) + _930) * _1168.z)) * _1149);
    float _1427 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1438 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1449 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    bool _1223 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1234;
    _1234.x = _1223 ? ((_565 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0)));
    _1234.y = _1223 ? ((_568 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0)));
    _1234.z = _1223 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0)));
    payload._m0 = _1234;
}


