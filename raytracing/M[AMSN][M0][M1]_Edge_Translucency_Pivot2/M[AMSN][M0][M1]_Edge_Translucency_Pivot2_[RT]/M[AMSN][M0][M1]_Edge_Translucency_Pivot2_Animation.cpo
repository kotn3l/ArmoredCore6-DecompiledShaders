#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CB_CS_ANIMATIONUBO
{
    vec4 _m0[9];
} CB_CS_ANIMATION;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 30) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer outPositionBuffer;

uint _102;
uint _416;

void main()
{
    uvec4 _54 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
    uint _59 = (((_54.z * gl_WorkGroupID.y) + gl_WorkGroupID.x) << 6u) + gl_LocalInvocationIndex;
    if (_59 < _54.x)
    {
        uint _71 = floatBitsToUint(CB_CS_ANIMATION._m0[1u]).x * _59;
        uint _72 = _71 >> 2u;
        uvec3 _82 = uvec3(texelFetch(l_geomAttrib_0, int(_72)).x, texelFetch(l_geomAttrib_0, int(_72 + 1u)).x, texelFetch(l_geomAttrib_0, int(_72 + 2u)).x);
        float _86 = uintBitsToFloat(_82.x);
        float _87 = uintBitsToFloat(_82.y);
        float _88 = uintBitsToFloat(_82.z);
        uvec4 _91 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
        uint _94 = _71 + 12u;
        uint _111;
        if (_91.y == 0u)
        {
            _111 = texelFetch(l_geomAttrib_0, int(_94 >> 2u)).x >> 24u;
        }
        else
        {
            _111 = uvec2(_102, texelFetch(l_geomAttrib_0, int((_94 >> 2u) + 1u)).x).y >> 16u;
        }
        uvec4 _131 = floatBitsToUint(CB_CS_ANIMATION._m0[8u]);
        uint _133 = _131.y;
        uint _135 = min(_131.z, 8u);
        uint _138 = uint(float(_111)) * 3u;
        uint _145 = _138 + 1u;
        uint _152 = _138 + 2u;
        float _162 = fma(_88, cbObjMatrix._m0[_138].z, fma(_87, cbObjMatrix._m0[_138].y, cbObjMatrix._m0[_138].x * _86)) + cbObjMatrix._m0[_138].w;
        float _166 = fma(_88, cbObjMatrix._m0[_145].z, fma(_87, cbObjMatrix._m0[_145].y, cbObjMatrix._m0[_145].x * _86)) + cbObjMatrix._m0[_145].w;
        float _170 = fma(_88, cbObjMatrix._m0[_152].z, fma(_87, cbObjMatrix._m0[_152].y, cbObjMatrix._m0[_152].x * _86)) + cbObjMatrix._m0[_152].w;
        float _179 = (cbMtdParam._m0[10u].z * sqrt(((_166 * _166) + (_162 * _162)) + (_170 * _170))) + cbPerFrame._m0[22u].x;
        float _180;
        float _183;
        float _185;
        if (_135 == 0u)
        {
            _180 = 0.0;
            _183 = 0.0;
            _185 = 0.0;
        }
        else
        {
            uint _314 = _131.x;
            float _182;
            float _184;
            float _186;
            float _488;
            float _490;
            float _492;
            float _349 = 0.0;
            float _350 = 0.0;
            float _351 = 0.0;
            uint _352 = _314;
            uint _354 = 0u;
            float _389;
            float _408;
            vec4 _421;
            float _422;
            float _423;
            float _436;
            float _437;
            float _438;
            float _455;
            float _456;
            float _457;
            float _458;
            bool _459;
            bool _460;
            bool _461;
            float _462;
            float _463;
            float _464;
            float _465;
            float _466;
            float _467;
            float _468;
            bool _471;
            for (;;)
            {
                uint _356 = _352 & 255u;
                uint _358 = _356 * 24u;
                uvec3 _367 = uvec3(texelFetch(g_forceParam, int(_358)).x, texelFetch(g_forceParam, int(_358 + 1u)).x, texelFetch(g_forceParam, int(_358 + 2u)).x);
                uint _372 = (_356 * 24u) + 4u;
                vec4 _385 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_372)).x, texelFetch(g_forceParam, int(_372 + 1u)).x, texelFetch(g_forceParam, int(_372 + 2u)).x, texelFetch(g_forceParam, int(_372 + 3u)).x));
                _389 = _385.w;
                uint _391 = (_356 * 24u) + 8u;
                vec4 _404 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_391)).x, texelFetch(g_forceParam, int(_391 + 1u)).x, texelFetch(g_forceParam, int(_391 + 2u)).x, texelFetch(g_forceParam, int(_391 + 3u)).x));
                _408 = _404.w;
                uint _410 = (_356 * 24u) + 12u;
                _421 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_410)).x, texelFetch(g_forceParam, int(_410 + 1u)).x, _416, texelFetch(g_forceParam, int(_410 + 3u)).x));
                _422 = _421.x;
                _423 = _421.w;
                uint _425 = (_356 * 24u) + 16u;
                vec3 _435 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_425)).x, texelFetch(g_forceParam, int(_425 + 1u)).x, texelFetch(g_forceParam, int(_425 + 2u)).x));
                _436 = _435.x;
                _437 = _435.y;
                _438 = _435.z;
                uint _441 = (_356 * 24u) + 20u;
                vec4 _454 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_441)).x, texelFetch(g_forceParam, int(_441 + 1u)).x, texelFetch(g_forceParam, int(_441 + 2u)).x, texelFetch(g_forceParam, int(_441 + 3u)).x));
                _455 = _454.x;
                _456 = _454.y;
                _457 = _454.z;
                _458 = _454.w;
                _459 = _367.x == 1u;
                _460 = _367.y == 1u;
                _461 = _367.z == 1u;
                _462 = CB_CS_ANIMATION._m0[2u].w - _385.x;
                _463 = CB_CS_ANIMATION._m0[3u].w - _385.y;
                _464 = CB_CS_ANIMATION._m0[4u].w - _385.z;
                _465 = _459 ? _404.x : _462;
                _466 = _459 ? _404.y : _463;
                _467 = _459 ? _404.z : _464;
                _468 = dot(vec3(_465, _466, _467), vec3(_465, _466, _467));
                _471 = _468 > 0.0;
                float frontier_phi_12_pred;
                float frontier_phi_12_pred_1;
                float frontier_phi_12_pred_2;
                if (_471)
                {
                    float _478 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
                    float _479 = inversesqrt(_468);
                    float _480 = _479 * _465;
                    float _481 = _479 * _466;
                    float _482 = _479 * _467;
                    float _486 = 1.0 - (_478 / (isnan(0.001000000047497451305389404296875) ? _421.y : (isnan(_421.y) ? 0.001000000047497451305389404296875 : max(_421.y, 0.001000000047497451305389404296875))));
                    float _647 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
                    float _487 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
                    float _513;
                    if (_461)
                    {
                        float _500 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
                        float _509 = (dot(vec3(_480, _481, _482), vec3(_500 * _462, _500 * _463, _500 * _464)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _658 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
                        _513 = (isnan(1.0) ? _658 : (isnan(_658) ? 1.0 : min(_658, 1.0))) * _487;
                    }
                    else
                    {
                        _513 = _487;
                    }
                    float frontier_phi_12_pred_14_ladder;
                    float frontier_phi_12_pred_14_ladder_1;
                    float frontier_phi_12_pred_14_ladder_2;
                    if (_513 > 0.0)
                    {
                        bool _516 = _459 && (!_461);
                        float _522 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _422 : (isnan(_422) ? 0.001000000047497451305389404296875 : max(_422, 0.001000000047497451305389404296875)));
                        float _524 = dot(vec2(_480, _482), vec2(_462, _464));
                        float _532 = sin(((_522 * _179) + (_516 ? 0.0 : (_478 * (-4.0)))) - ((_522 * float(_516)) * _524));
                        float _536 = _459 ? ((_423 * _408) * _532) : 0.0;
                        float _578;
                        if (_460)
                        {
                            float _539 = _436 * 2.0;
                            float _541 = _456 + _457;
                            float _542 = _541 + _458;
                            float _550 = dot(vec2(_482, (-0.0) - _480), vec2(_462, _464)) / _539;
                            float _554 = fract(abs(_550));
                            float _565 = _455 * _179;
                            float _569 = _542 * _455;
                            float _571 = (((_565 - (_436 * 0.25)) - _524) - (sin(((_436 * 12.56636810302734375) * ((_550 >= ((-0.0) - _550)) ? _554 : ((-0.0) - _554))) / _539) * (isnan(5.0) ? _436 : (isnan(_436) ? 5.0 : min(_436, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _569 : (isnan(_569) ? 0.001000000047497451305389404296875 : max(_569, 0.001000000047497451305389404296875)));
                            float _572 = fract(_571);
                            float _575 = (_571 < 0.0) ? (1.0 - _572) : _572;
                            float _576 = _456 / _542;
                            float _595;
                            if (_575 < _576)
                            {
                                _595 = _575 / _576;
                            }
                            else
                            {
                                float frontier_phi_21_20_ladder;
                                if (_575 < (_541 / _542))
                                {
                                    frontier_phi_21_20_ladder = 1.0 - (((_575 - _576) * _542) / _457);
                                }
                                else
                                {
                                    frontier_phi_21_20_ladder = 0.0;
                                }
                                _595 = frontier_phi_21_20_ladder;
                            }
                            _578 = (_595 * _438) * abs(sin((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _436 : (isnan(_436) ? 0.001000000047497451305389404296875 : max(_436, 0.001000000047497451305389404296875)))) * (_565 - _524)) + _437);
                        }
                        else
                        {
                            _578 = 0.0;
                        }
                        float _581 = ((_532 * _408) + _389) + _578;
                        float _588 = _513 * 0.0500000007450580596923828125;
                        frontier_phi_12_pred_14_ladder = _588 * ((_581 * _480) - (_536 * _482));
                        frontier_phi_12_pred_14_ladder_1 = ((_481 * 0.0500000007450580596923828125) * _513) * _581;
                        frontier_phi_12_pred_14_ladder_2 = _588 * ((_581 * _482) + (_536 * _480));
                    }
                    else
                    {
                        frontier_phi_12_pred_14_ladder = 0.0;
                        frontier_phi_12_pred_14_ladder_1 = 0.0;
                        frontier_phi_12_pred_14_ladder_2 = 0.0;
                    }
                    frontier_phi_12_pred = frontier_phi_12_pred_14_ladder;
                    frontier_phi_12_pred_1 = frontier_phi_12_pred_14_ladder_1;
                    frontier_phi_12_pred_2 = frontier_phi_12_pred_14_ladder_2;
                }
                else
                {
                    frontier_phi_12_pred = 0.0;
                    frontier_phi_12_pred_1 = 0.0;
                    frontier_phi_12_pred_2 = 0.0;
                }
                _488 = frontier_phi_12_pred;
                _490 = frontier_phi_12_pred_1;
                _492 = frontier_phi_12_pred_2;
                _182 = _488 + _349;
                _184 = _490 + _350;
                _186 = _492 + _351;
                uint _355 = _354 + 1u;
                if (_355 == _135)
                {
                    break;
                }
                else
                {
                    _349 = _182;
                    _350 = _184;
                    _351 = _186;
                    _352 = (_354 != 3u) ? (_352 >> 8u) : _133;
                    _354 = _355;
                    continue;
                }
            }
            _180 = _182;
            _183 = _184;
            _185 = _186;
        }
        float _192 = sqrt(((_183 * _183) + (_180 * _180)) + (_185 * _185));
        bool _193 = _192 < 0.00011000000085914507508277893066406;
        float _202 = inversesqrt(dot(vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y), vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y)));
        float _203 = _202 * CB_CS_ANIMATION._m0[2u].y;
        float _204 = _202 * CB_CS_ANIMATION._m0[3u].y;
        float _205 = _202 * CB_CS_ANIMATION._m0[4u].y;
        float _209 = inversesqrt(dot(vec3(_180, _183, _185), vec3(_180, _183, _185)));
        float _210 = _209 * _180;
        float _211 = _209 * _183;
        float _212 = _209 * _185;
        float _215 = (_212 * _204) - (_211 * _205);
        float _218 = (_210 * _205) - (_212 * _203);
        float _221 = (_211 * _203) - (_210 * _204);
        float _225 = inversesqrt(dot(vec3(_215, _218, _221), vec3(_215, _218, _221)));
        float _226 = _215 * _225;
        float _227 = _218 * _225;
        float _228 = _221 * _225;
        float _232 = log2(_192 + 1.0) * cbMtdParam._m0[10u].y;
        float _236 = dot(vec3(_226, _227, _228), vec3(_162 - CB_CS_ANIMATION._m0[2u].w, _166 - CB_CS_ANIMATION._m0[3u].w, _170 - CB_CS_ANIMATION._m0[4u].w));
        float _242 = (_236 * _226) + CB_CS_ANIMATION._m0[2u].w;
        float _243 = (_236 * _227) + CB_CS_ANIMATION._m0[3u].w;
        float _244 = (_236 * _228) + CB_CS_ANIMATION._m0[4u].w;
        float _245 = _162 - _242;
        float _246 = _166 - _243;
        float _247 = _170 - _244;
        float _257 = sin(_232);
        float _258 = cos(_232);
        float _277 = (_193 ? 0.0 : (((_242 - _162) + (_258 * _245)) + (((_247 * _227) - (_246 * _228)) * _257))) + _162;
        float _278 = (_193 ? 0.0 : (((_243 - _166) + (((_245 * _228) - (_247 * _226)) * _257)) + (_258 * _246))) + _166;
        float _279 = (_193 ? 0.0 : (((_244 - _170) + (((_246 * _226) - (_245 * _227)) * _257)) + (_258 * _247))) + _170;
        float _303 = fma(_279, CB_CS_ANIMATION._m0[5u].z, fma(_278, CB_CS_ANIMATION._m0[5u].y, CB_CS_ANIMATION._m0[5u].x * _277)) + CB_CS_ANIMATION._m0[5u].w;
        float _307 = fma(_279, CB_CS_ANIMATION._m0[6u].z, fma(_278, CB_CS_ANIMATION._m0[6u].y, CB_CS_ANIMATION._m0[6u].x * _277)) + CB_CS_ANIMATION._m0[6u].w;
        float _311 = fma(_279, CB_CS_ANIMATION._m0[7u].z, fma(_278, CB_CS_ANIMATION._m0[7u].y, CB_CS_ANIMATION._m0[7u].x * _277)) + CB_CS_ANIMATION._m0[7u].w;
        if (_91.w == 0u)
        {
            uint _325 = _59 * 3u;
            imageStore(outPositionBuffer, int(_325), uvec4(uint(float(floatBitsToUint(_303)))));
            imageStore(outPositionBuffer, int(_325 + 1u), uvec4(uint(float(floatBitsToUint(_307)))));
            imageStore(outPositionBuffer, int(_325 + 2u), uvec4(uint(float(floatBitsToUint(_311)))));
        }
        else
        {
            uint _345 = _59 * 2u;
            imageStore(outPositionBuffer, int(_345), uvec4((packHalf2x16(vec2(_307, 0.0)) << 16u) | packHalf2x16(vec2(_303, 0.0))));
            imageStore(outPositionBuffer, int(_345 + 1u), uvec4((packHalf2x16(vec2(0.0)) << 16u) | packHalf2x16(vec2(_311, 0.0))));
        }
    }
}


