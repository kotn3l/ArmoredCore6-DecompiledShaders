#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CB_CS_ANIMATIONUBO
{
    vec4 _m0[9];
} CB_CS_ANIMATION;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 30) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer outPositionBuffer;

uint _606;

void main()
{
    uvec4 _54 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
    uint _59 = (((_54.z * gl_WorkGroupID.y) + gl_WorkGroupID.x) << 6u) + gl_LocalInvocationIndex;
    if (_59 < _54.x)
    {
        uint _71 = floatBitsToUint(CB_CS_ANIMATION._m0[1u]).x * _59;
        uint _72 = _71 >> 2u;
        uvec3 _82 = uvec3(texelFetch(l_geomAttrib_0, int(_72)).x, texelFetch(l_geomAttrib_0, int(_72 + 1u)).x, texelFetch(l_geomAttrib_0, int(_72 + 2u)).x);
        float _86 = uintBitsToFloat(_82.x);
        float _87 = uintBitsToFloat(_82.y);
        float _88 = uintBitsToFloat(_82.z);
        uvec4 _91 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
        uint _94 = _71 + 20u;
        uint _124;
        uint _125;
        uint _126;
        uint _127;
        uint _128;
        if (_91.y == 0u)
        {
            uvec4 _97 = texelFetch(l_geomAttrib_0, int(_94 >> 2u));
            uint _98 = _97.x;
            _124 = _98 & 255u;
            _125 = (_98 >> 8u) & 255u;
            _126 = (_98 >> 16u) & 255u;
            _127 = _98 >> 24u;
            _128 = 24u;
        }
        else
        {
            uint _109 = _94 >> 2u;
            uvec2 _116 = uvec2(texelFetch(l_geomAttrib_0, int(_109)).x, texelFetch(l_geomAttrib_0, int(_109 + 1u)).x);
            uint _117 = _116.x;
            uint _118 = _116.y;
            _124 = _117 & 65535u;
            _125 = _117 >> 16u;
            _126 = _118 & 65535u;
            _127 = _118 >> 16u;
            _128 = 28u;
        }
        uvec4 _132 = texelFetch(l_geomAttrib_0, int((_128 + _71) >> 2u));
        uint _133 = _132.x;
        float _144 = float(_133 & 255u) * 0.0039215688593685626983642578125;
        float _146 = float((_133 >> 8u) & 255u) * 0.0039215688593685626983642578125;
        float _147 = float((_133 >> 16u) & 255u) * 0.0039215688593685626983642578125;
        float _148 = float(_133 >> 24u) * 0.0039215688593685626983642578125;
        uvec4 _166 = floatBitsToUint(CB_CS_ANIMATION._m0[8u]);
        uint _168 = _166.y;
        uint _170 = min(_166.z, 8u);
        float _172 = dot(vec4(1.0), vec4(_144, _146, _147, _148));
        float _176 = isnan(_172) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _172 : max(0.001000000047497451305389404296875, _172));
        float _178 = _144 / _176;
        float _179 = _146 / _176;
        float _180 = _147 / _176;
        float _181 = _148 / _176;
        uint _182 = _124 * 3u;
        uint _189 = _182 + 1u;
        uint _196 = _182 + 2u;
        uint _215 = _125 * 3u;
        uint _222 = _215 + 1u;
        uint _229 = _215 + 2u;
        uint _260 = _126 * 3u;
        uint _267 = _260 + 1u;
        uint _274 = _260 + 2u;
        uint _305 = _127 * 3u;
        uint _312 = _305 + 1u;
        uint _319 = _305 + 2u;
        float _353 = ((((cbObjMatrix._m0[_215].w * _179) + (cbObjMatrix._m0[_182].w * _178)) + (cbObjMatrix._m0[_260].w * _180)) + (cbObjMatrix._m0[_305].w * _181)) + fma(_88, (((cbObjMatrix._m0[_215].z * _179) + (cbObjMatrix._m0[_182].z * _178)) + (cbObjMatrix._m0[_260].z * _180)) + (cbObjMatrix._m0[_305].z * _181), fma(_87, (((cbObjMatrix._m0[_215].y * _179) + (cbObjMatrix._m0[_182].y * _178)) + (cbObjMatrix._m0[_260].y * _180)) + (cbObjMatrix._m0[_305].y * _181), ((((cbObjMatrix._m0[_215].x * _179) + (cbObjMatrix._m0[_182].x * _178)) + (cbObjMatrix._m0[_260].x * _180)) + (cbObjMatrix._m0[_305].x * _181)) * _86));
        float _357 = ((((cbObjMatrix._m0[_222].w * _179) + (cbObjMatrix._m0[_189].w * _178)) + (cbObjMatrix._m0[_267].w * _180)) + (cbObjMatrix._m0[_312].w * _181)) + fma(_88, (((cbObjMatrix._m0[_222].z * _179) + (cbObjMatrix._m0[_189].z * _178)) + (cbObjMatrix._m0[_267].z * _180)) + (cbObjMatrix._m0[_312].z * _181), fma(_87, (((cbObjMatrix._m0[_222].y * _179) + (cbObjMatrix._m0[_189].y * _178)) + (cbObjMatrix._m0[_267].y * _180)) + (cbObjMatrix._m0[_312].y * _181), ((((cbObjMatrix._m0[_222].x * _179) + (cbObjMatrix._m0[_189].x * _178)) + (cbObjMatrix._m0[_267].x * _180)) + (cbObjMatrix._m0[_312].x * _181)) * _86));
        float _361 = ((((cbObjMatrix._m0[_229].w * _179) + (cbObjMatrix._m0[_196].w * _178)) + (cbObjMatrix._m0[_274].w * _180)) + (cbObjMatrix._m0[_319].w * _181)) + fma(_88, (((cbObjMatrix._m0[_229].z * _179) + (cbObjMatrix._m0[_196].z * _178)) + (cbObjMatrix._m0[_274].z * _180)) + (cbObjMatrix._m0[_319].z * _181), fma(_87, (((cbObjMatrix._m0[_229].y * _179) + (cbObjMatrix._m0[_196].y * _178)) + (cbObjMatrix._m0[_274].y * _180)) + (cbObjMatrix._m0[_319].y * _181), ((((cbObjMatrix._m0[_229].x * _179) + (cbObjMatrix._m0[_196].x * _178)) + (cbObjMatrix._m0[_274].x * _180)) + (cbObjMatrix._m0[_319].x * _181)) * _86));
        float _370 = (cbMtdParam._m0[10u].z * sqrt(((_357 * _357) + (_353 * _353)) + (_361 * _361))) + cbPerFrame._m0[22u].x;
        float _371;
        float _374;
        float _376;
        if (_170 == 0u)
        {
            _371 = 0.0;
            _374 = 0.0;
            _376 = 0.0;
        }
        else
        {
            uint _504 = _166.x;
            float _373;
            float _375;
            float _377;
            float _676;
            float _678;
            float _680;
            float _540 = 0.0;
            float _541 = 0.0;
            float _542 = 0.0;
            uint _543 = _504;
            uint _545 = 0u;
            float _579;
            float _598;
            vec4 _611;
            float _612;
            float _613;
            float _626;
            float _627;
            float _628;
            float _644;
            float _645;
            float _646;
            float _647;
            bool _648;
            bool _649;
            bool _650;
            float _651;
            float _652;
            float _653;
            float _654;
            float _655;
            float _656;
            float _657;
            bool _660;
            for (;;)
            {
                uint _547 = _543 & 255u;
                uint _548 = _547 * 24u;
                uvec3 _557 = uvec3(texelFetch(g_forceParam, int(_548)).x, texelFetch(g_forceParam, int(_548 + 1u)).x, texelFetch(g_forceParam, int(_548 + 2u)).x);
                uint _562 = (_547 * 24u) + 4u;
                vec4 _575 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_562)).x, texelFetch(g_forceParam, int(_562 + 1u)).x, texelFetch(g_forceParam, int(_562 + 2u)).x, texelFetch(g_forceParam, int(_562 + 3u)).x));
                _579 = _575.w;
                uint _581 = (_547 * 24u) + 8u;
                vec4 _594 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_581)).x, texelFetch(g_forceParam, int(_581 + 1u)).x, texelFetch(g_forceParam, int(_581 + 2u)).x, texelFetch(g_forceParam, int(_581 + 3u)).x));
                _598 = _594.w;
                uint _600 = (_547 * 24u) + 12u;
                _611 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_600)).x, texelFetch(g_forceParam, int(_600 + 1u)).x, _606, texelFetch(g_forceParam, int(_600 + 3u)).x));
                _612 = _611.x;
                _613 = _611.w;
                uint _615 = (_547 * 24u) + 16u;
                vec3 _625 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_615)).x, texelFetch(g_forceParam, int(_615 + 1u)).x, texelFetch(g_forceParam, int(_615 + 2u)).x));
                _626 = _625.x;
                _627 = _625.y;
                _628 = _625.z;
                uint _630 = (_547 * 24u) + 20u;
                vec4 _643 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_630)).x, texelFetch(g_forceParam, int(_630 + 1u)).x, texelFetch(g_forceParam, int(_630 + 2u)).x, texelFetch(g_forceParam, int(_630 + 3u)).x));
                _644 = _643.x;
                _645 = _643.y;
                _646 = _643.z;
                _647 = _643.w;
                _648 = _557.x == 1u;
                _649 = _557.y == 1u;
                _650 = _557.z == 1u;
                _651 = CB_CS_ANIMATION._m0[2u].w - _575.x;
                _652 = CB_CS_ANIMATION._m0[3u].w - _575.y;
                _653 = CB_CS_ANIMATION._m0[4u].w - _575.z;
                _654 = _648 ? _594.x : _651;
                _655 = _648 ? _594.y : _652;
                _656 = _648 ? _594.z : _653;
                _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
                _660 = _657 > 0.0;
                float frontier_phi_12_pred;
                float frontier_phi_12_pred_1;
                float frontier_phi_12_pred_2;
                if (_660)
                {
                    float _667 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
                    float _668 = inversesqrt(_657);
                    float _669 = _668 * _654;
                    float _670 = _668 * _655;
                    float _671 = _668 * _656;
                    float _674 = 1.0 - (_667 / (isnan(0.001000000047497451305389404296875) ? _611.y : (isnan(_611.y) ? 0.001000000047497451305389404296875 : max(_611.y, 0.001000000047497451305389404296875))));
                    float _840 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
                    float _675 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
                    float _701;
                    if (_650)
                    {
                        float _688 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
                        float _697 = (dot(vec3(_669, _670, _671), vec3(_688 * _651, _688 * _652, _688 * _653)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _851 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
                        _701 = (isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0))) * _675;
                    }
                    else
                    {
                        _701 = _675;
                    }
                    float frontier_phi_12_pred_14_ladder;
                    float frontier_phi_12_pred_14_ladder_1;
                    float frontier_phi_12_pred_14_ladder_2;
                    if (_701 > 0.0)
                    {
                        bool _704 = _648 && (!_650);
                        float _710 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _612 : (isnan(_612) ? 0.001000000047497451305389404296875 : max(_612, 0.001000000047497451305389404296875)));
                        float _712 = dot(vec2(_669, _671), vec2(_651, _653));
                        float _720 = sin(((_710 * _370) + (_704 ? 0.0 : (_667 * (-4.0)))) - ((_710 * float(_704)) * _712));
                        float _724 = _648 ? ((_613 * _598) * _720) : 0.0;
                        float _766;
                        if (_649)
                        {
                            float _727 = _626 * 2.0;
                            float _729 = _645 + _646;
                            float _730 = _729 + _647;
                            float _738 = dot(vec2(_671, (-0.0) - _669), vec2(_651, _653)) / _727;
                            float _742 = fract(abs(_738));
                            float _753 = _644 * _370;
                            float _757 = _730 * _644;
                            float _759 = (((_753 - (_626 * 0.25)) - _712) - (sin(((_626 * 12.56636810302734375) * ((_738 >= ((-0.0) - _738)) ? _742 : ((-0.0) - _742))) / _727) * (isnan(5.0) ? _626 : (isnan(_626) ? 5.0 : min(_626, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _757 : (isnan(_757) ? 0.001000000047497451305389404296875 : max(_757, 0.001000000047497451305389404296875)));
                            float _760 = fract(_759);
                            float _763 = (_759 < 0.0) ? (1.0 - _760) : _760;
                            float _764 = _645 / _730;
                            float _783;
                            if (_763 < _764)
                            {
                                _783 = _763 / _764;
                            }
                            else
                            {
                                float frontier_phi_21_20_ladder;
                                if (_763 < (_729 / _730))
                                {
                                    frontier_phi_21_20_ladder = 1.0 - (((_763 - _764) * _730) / _646);
                                }
                                else
                                {
                                    frontier_phi_21_20_ladder = 0.0;
                                }
                                _783 = frontier_phi_21_20_ladder;
                            }
                            _766 = (_783 * _628) * abs(sin((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _626 : (isnan(_626) ? 0.001000000047497451305389404296875 : max(_626, 0.001000000047497451305389404296875)))) * (_753 - _712)) + _627);
                        }
                        else
                        {
                            _766 = 0.0;
                        }
                        float _769 = ((_720 * _598) + _579) + _766;
                        float _776 = _701 * 0.0500000007450580596923828125;
                        frontier_phi_12_pred_14_ladder = _776 * ((_769 * _669) - (_724 * _671));
                        frontier_phi_12_pred_14_ladder_1 = ((_670 * 0.0500000007450580596923828125) * _701) * _769;
                        frontier_phi_12_pred_14_ladder_2 = _776 * ((_769 * _671) + (_724 * _669));
                    }
                    else
                    {
                        frontier_phi_12_pred_14_ladder = 0.0;
                        frontier_phi_12_pred_14_ladder_1 = 0.0;
                        frontier_phi_12_pred_14_ladder_2 = 0.0;
                    }
                    frontier_phi_12_pred = frontier_phi_12_pred_14_ladder;
                    frontier_phi_12_pred_1 = frontier_phi_12_pred_14_ladder_1;
                    frontier_phi_12_pred_2 = frontier_phi_12_pred_14_ladder_2;
                }
                else
                {
                    frontier_phi_12_pred = 0.0;
                    frontier_phi_12_pred_1 = 0.0;
                    frontier_phi_12_pred_2 = 0.0;
                }
                _676 = frontier_phi_12_pred;
                _678 = frontier_phi_12_pred_1;
                _680 = frontier_phi_12_pred_2;
                _373 = _676 + _540;
                _375 = _678 + _541;
                _377 = _680 + _542;
                uint _546 = _545 + 1u;
                if (_546 == _170)
                {
                    break;
                }
                else
                {
                    _540 = _373;
                    _541 = _375;
                    _542 = _377;
                    _543 = (_545 != 3u) ? (_543 >> 8u) : _168;
                    _545 = _546;
                    continue;
                }
            }
            _371 = _373;
            _374 = _375;
            _376 = _377;
        }
        float _383 = sqrt(((_374 * _374) + (_371 * _371)) + (_376 * _376));
        bool _384 = _383 < 0.00011000000085914507508277893066406;
        float _393 = inversesqrt(dot(vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y), vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y)));
        float _394 = _393 * CB_CS_ANIMATION._m0[2u].y;
        float _395 = _393 * CB_CS_ANIMATION._m0[3u].y;
        float _396 = _393 * CB_CS_ANIMATION._m0[4u].y;
        float _400 = inversesqrt(dot(vec3(_371, _374, _376), vec3(_371, _374, _376)));
        float _401 = _400 * _371;
        float _402 = _400 * _374;
        float _403 = _400 * _376;
        float _406 = (_403 * _395) - (_402 * _396);
        float _409 = (_401 * _396) - (_403 * _394);
        float _412 = (_402 * _394) - (_401 * _395);
        float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
        float _417 = _406 * _416;
        float _418 = _409 * _416;
        float _419 = _412 * _416;
        float _422 = log2(_383 + 1.0) * cbMtdParam._m0[10u].y;
        float _426 = dot(vec3(_417, _418, _419), vec3(_353 - CB_CS_ANIMATION._m0[2u].w, _357 - CB_CS_ANIMATION._m0[3u].w, _361 - CB_CS_ANIMATION._m0[4u].w));
        float _432 = (_426 * _417) + CB_CS_ANIMATION._m0[2u].w;
        float _433 = (_426 * _418) + CB_CS_ANIMATION._m0[3u].w;
        float _434 = (_426 * _419) + CB_CS_ANIMATION._m0[4u].w;
        float _435 = _353 - _432;
        float _436 = _357 - _433;
        float _437 = _361 - _434;
        float _447 = sin(_422);
        float _448 = cos(_422);
        float _467 = (_384 ? 0.0 : (((_432 - _353) + (_448 * _435)) + (((_437 * _418) - (_436 * _419)) * _447))) + _353;
        float _468 = (_384 ? 0.0 : (((_433 - _357) + (((_435 * _419) - (_437 * _417)) * _447)) + (_448 * _436))) + _357;
        float _469 = (_384 ? 0.0 : (((_434 - _361) + (((_436 * _417) - (_435 * _418)) * _447)) + (_448 * _437))) + _361;
        float _493 = fma(_469, CB_CS_ANIMATION._m0[5u].z, fma(_468, CB_CS_ANIMATION._m0[5u].y, CB_CS_ANIMATION._m0[5u].x * _467)) + CB_CS_ANIMATION._m0[5u].w;
        float _497 = fma(_469, CB_CS_ANIMATION._m0[6u].z, fma(_468, CB_CS_ANIMATION._m0[6u].y, CB_CS_ANIMATION._m0[6u].x * _467)) + CB_CS_ANIMATION._m0[6u].w;
        float _501 = fma(_469, CB_CS_ANIMATION._m0[7u].z, fma(_468, CB_CS_ANIMATION._m0[7u].y, CB_CS_ANIMATION._m0[7u].x * _467)) + CB_CS_ANIMATION._m0[7u].w;
        if (_91.w == 0u)
        {
            uint _516 = _59 * 3u;
            imageStore(outPositionBuffer, int(_516), uvec4(uint(float(floatBitsToUint(_493)))));
            imageStore(outPositionBuffer, int(_516 + 1u), uvec4(uint(float(floatBitsToUint(_497)))));
            imageStore(outPositionBuffer, int(_516 + 2u), uvec4(uint(float(floatBitsToUint(_501)))));
        }
        else
        {
            uint _536 = _59 * 2u;
            imageStore(outPositionBuffer, int(_536), uvec4((packHalf2x16(vec2(_497, 0.0)) << 16u) | packHalf2x16(vec2(_493, 0.0))));
            imageStore(outPositionBuffer, int(_536 + 1u), uvec4((packHalf2x16(vec2(0.0)) << 16u) | packHalf2x16(vec2(_501, 0.0))));
        }
    }
}


