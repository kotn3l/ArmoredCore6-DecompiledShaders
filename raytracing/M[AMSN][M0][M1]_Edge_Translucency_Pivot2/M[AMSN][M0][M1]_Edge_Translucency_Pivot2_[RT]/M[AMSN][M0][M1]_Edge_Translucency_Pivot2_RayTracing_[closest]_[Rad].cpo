#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1144;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _155 >> 16u;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _157;
        }
        _160 = frontier_phi_3_2_ladder_2;
        _162 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _119.w == 0u;
    bool _173 = _170 || _172;
    uint _174 = _168 * _160;
    uint _175 = _174 + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 16u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 20u;
    }
    uvec4 _210 = texelFetch(l_geomAttrib_0, int((_202 + _174) >> 2u));
    uint _211 = _210.x;
    bool _225 = _169 == 0u;
    uint _226;
    if (_225)
    {
        _226 = _202 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 12u;
        }
        _226 = frontier_phi_9_10_ladder;
    }
    uvec4 _234 = texelFetch(l_geomAttrib_0, int(((_174 + 4u) + (_170 ? (_226 + 4u) : _226)) >> 2u));
    uint _235 = _234.x;
    float _239 = float(int(uint(int(_235 << 16u) >> int(16u))));
    float _240 = float(int(uint(int(_235) >> int(16u))));
    uint _241 = _168 * _162;
    uint _242 = _241 + 12u;
    uint _263;
    uint _264;
    uint _265;
    uint _266;
    if (_173)
    {
        uvec4 _244 = texelFetch(l_geomAttrib_0, int(_242 >> 2u));
        uint _245 = _244.x;
        _263 = _245 & 255u;
        _264 = (_245 >> 8u) & 255u;
        _265 = (_245 >> 16u) & 255u;
        _266 = 16u;
    }
    else
    {
        uint _251 = _242 >> 2u;
        uvec2 _257 = uvec2(texelFetch(l_geomAttrib_0, int(_251)).x, texelFetch(l_geomAttrib_0, int(_251 + 1u)).x);
        uint _258 = _257.x;
        _263 = _258 & 65535u;
        _264 = _258 >> 16u;
        _265 = _257.y & 65535u;
        _266 = 20u;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((_266 + _241) >> 2u));
    uint _273 = _272.x;
    uint _285;
    if (_225)
    {
        _285 = _266 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _266 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _266 + 12u;
        }
        _285 = frontier_phi_16_17_ladder;
    }
    uvec4 _293 = texelFetch(l_geomAttrib_0, int(((_241 + 4u) + (_170 ? (_285 + 4u) : _285)) >> 2u));
    uint _294 = _293.x;
    float _298 = float(int(uint(int(_294 << 16u) >> int(16u))));
    float _299 = float(int(uint(int(_294) >> int(16u))));
    uint _300 = _168 * _163;
    uint _301 = _300 + 12u;
    uint _322;
    uint _323;
    uint _324;
    uint _325;
    if (_173)
    {
        uvec4 _303 = texelFetch(l_geomAttrib_0, int(_301 >> 2u));
        uint _304 = _303.x;
        _322 = _304 & 255u;
        _323 = (_304 >> 8u) & 255u;
        _324 = (_304 >> 16u) & 255u;
        _325 = 16u;
    }
    else
    {
        uint _310 = _301 >> 2u;
        uvec2 _316 = uvec2(texelFetch(l_geomAttrib_0, int(_310)).x, texelFetch(l_geomAttrib_0, int(_310 + 1u)).x);
        uint _317 = _316.x;
        _322 = _317 & 65535u;
        _323 = _317 >> 16u;
        _324 = _316.y & 65535u;
        _325 = 20u;
    }
    uvec4 _331 = texelFetch(l_geomAttrib_0, int((_325 + _300) >> 2u));
    uint _332 = _331.x;
    uint _344;
    if (_225)
    {
        _344 = _325 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _325 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _325 + 12u;
        }
        _344 = frontier_phi_23_24_ladder;
    }
    uvec4 _352 = texelFetch(l_geomAttrib_0, int(((_300 + 4u) + (_170 ? (_344 + 4u) : _344)) >> 2u));
    uint _353 = _352.x;
    float _357 = float(int(uint(int(_353 << 16u) >> int(16u))));
    float _358 = float(int(uint(int(_353) >> int(16u))));
    bool _360 = _119.z == 0u;
    float _396;
    float _397;
    float _398;
    if (_360)
    {
        uint _363 = _160 * 3u;
        uvec3 _372 = uvec3(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_363 + 2u)).x);
        _396 = uintBitsToFloat(_372.x);
        _397 = uintBitsToFloat(_372.y);
        _398 = uintBitsToFloat(_372.z);
    }
    else
    {
        uint _380 = _160 * 2u;
        uvec2 _386 = uvec2(texelFetch(l_geomPositionBuffer, int(_380)).x, texelFetch(l_geomPositionBuffer, int(_380 + 1u)).x);
        uint _387 = _386.x;
        _396 = unpackHalf2x16(_387).x;
        _397 = unpackHalf2x16(_387 >> 16u).x;
        _398 = unpackHalf2x16(_386.y).x;
    }
    float _434;
    float _435;
    float _436;
    if (_360)
    {
        uint _401 = _162 * 3u;
        uvec3 _410 = uvec3(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_401 + 2u)).x);
        _434 = uintBitsToFloat(_410.x);
        _435 = uintBitsToFloat(_410.y);
        _436 = uintBitsToFloat(_410.z);
    }
    else
    {
        uint _418 = _162 * 2u;
        uvec2 _424 = uvec2(texelFetch(l_geomPositionBuffer, int(_418)).x, texelFetch(l_geomPositionBuffer, int(_418 + 1u)).x);
        uint _425 = _424.x;
        _434 = unpackHalf2x16(_425).x;
        _435 = unpackHalf2x16(_425 >> 16u).x;
        _436 = unpackHalf2x16(_424.y).x;
    }
    float _472;
    float _473;
    float _474;
    if (_360)
    {
        uint _439 = _163 * 3u;
        uvec3 _448 = uvec3(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_439 + 2u)).x);
        _472 = uintBitsToFloat(_448.x);
        _473 = uintBitsToFloat(_448.y);
        _474 = uintBitsToFloat(_448.z);
    }
    else
    {
        uint _456 = _163 * 2u;
        uvec2 _462 = uvec2(texelFetch(l_geomPositionBuffer, int(_456)).x, texelFetch(l_geomPositionBuffer, int(_456 + 1u)).x);
        uint _463 = _462.x;
        _472 = unpackHalf2x16(_463).x;
        _473 = unpackHalf2x16(_463 >> 16u).x;
        _474 = unpackHalf2x16(_462.y).x;
    }
    float _477 = (1.0 - hit._m0.x) - hit._m0.y;
    float _511 = (_298 - _239) * 0.00048828125;
    float _513 = (_299 - _240) * 0.00048828125;
    float _516 = (_357 - _239) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _544 = fma(_541, gl_ObjectToWorldEXT[2u].x, fma(_540, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _539));
    float _547 = fma(_541, gl_ObjectToWorldEXT[2u].y, fma(_540, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _539));
    float _550 = fma(_541, gl_ObjectToWorldEXT[2u].z, fma(_540, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _539));
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _556 = fma(_553, gl_ObjectToWorldEXT[2u].x, fma(_552, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _551));
    float _559 = fma(_553, gl_ObjectToWorldEXT[2u].y, fma(_552, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _551));
    float _562 = fma(_553, gl_ObjectToWorldEXT[2u].z, fma(_552, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _551));
    float _563 = (((_298 * hit._m0.x) + (_239 * _477)) + (_357 * hit._m0.y)) * 0.00048828125;
    float _564 = (((_299 * hit._m0.x) + (_240 * _477)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _568 = (((float(_199) * _477) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y);
    float _571 = (((float(_200) * _477) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _574 = (((float(_201) * _477) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = _568 * 0.0078740157186985015869140625;
    float _577 = _571 * 0.0078740157186985015869140625;
    float _578 = _574 * 0.0078740157186985015869140625;
    float _591 = ((((float(_211 & 255u) * _477) + (-127.0)) + (float(_273 & 255u) * hit._m0.x)) + (float(_332 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _592 = ((((float((_211 >> 8u) & 255u) * _477) + (-127.0)) + (float((_273 >> 8u) & 255u) * hit._m0.x)) + (float((_332 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_211 >> 16u) & 255u) * _477) + (-127.0)) + (float((_273 >> 16u) & 255u) * hit._m0.x)) + (float((_332 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float(_211 >> 24u) * _477) + (-127.0)) + (float(_273 >> 24u) * hit._m0.x)) + (float(_332 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((_592 * _578) - (_593 * _577)) * _594;
    float _605 = ((_593 * _575) - (_591 * _578)) * _594;
    float _606 = ((_591 * _577) - (_592 * _575)) * _594;
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    uvec2 _631 = uvec2(textureSize(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0, int(0u)));
    bool _636 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _689;
    if (_636)
    {
        float _647 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _653 = (_562 * _547) - (_559 * _550);
        float _656 = (_556 * _550) - (_562 * _544);
        float _659 = (_559 * _544) - (_556 * _547);
        float _686 = ((log2((((float(_631.y) * 0.5) * float(_631.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_656 * _656) + (_659 * _659)) + (_653 * _653)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_647 * gl_WorldRayDirectionEXT.x, _647 * gl_WorldRayDirectionEXT.y, _647 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    }
    else
    {
        _689 = 0.0;
    }
    vec4 _693 = textureLod(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _563) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _564) + cbTextureTilingScale._m0[0u].w), _689);
    float _698 = _693.x * cbMtdParam._m0[9u].x;
    float _699 = _693.y * cbMtdParam._m0[9u].y;
    float _700 = _693.z * cbMtdParam._m0[9u].z;
    uvec2 _712 = uvec2(textureSize(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1, int(0u)));
    float _716 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _717 = _716 * gl_WorldRayDirectionEXT.x;
    float _718 = _716 * gl_WorldRayDirectionEXT.y;
    float _719 = _716 * gl_WorldRayDirectionEXT.z;
    float _763;
    if (_636)
    {
        float _729 = (_562 * _547) - (_559 * _550);
        float _732 = (_556 * _550) - (_562 * _544);
        float _735 = (_559 * _544) - (_556 * _547);
        float _761 = ((log2((((float(_712.y) * 0.5) * float(_712.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_732 * _732) + (_735 * _735)) + (_729 * _729)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_717, _718, _719), vec3(_575, _577, _578))));
        _763 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    }
    else
    {
        _763 = 0.0;
    }
    vec4 _766 = textureLod(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _563) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _564) + cbTextureTilingScale._m0[1u].w), _763);
    float _770 = _766.z;
    float _773 = (_766.x * 2.0) + (-1.0);
    float _775 = (_766.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_773, _775), vec2(_773, _775));
    float _1230 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _1230 : (isnan(_1230) ? 1.0 : min(_1230, 1.0))));
    float _784 = fma(_781, _575, fma(_775, _591, (_610 * _604) * _773));
    float _787 = fma(_781, _577, fma(_775, _592, (_610 * _605) * _773));
    float _790 = fma(_781, _578, fma(_775, _593, (_610 * _606) * _773));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _809 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _810 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _811 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _812 = (-0.0) - _717;
    float _814 = (-0.0) - _718;
    float _815 = (-0.0) - _719;
    float _821 = float(gl_LaunchIDEXT.x);
    float _822 = float(gl_LaunchIDEXT.y);
    float _825 = float(gl_LaunchSizeEXT.x);
    float _839 = fract(fract(sin(dot(vec2(_821 / _825, _822 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _852 = fract(fract(sin(dot(vec2((_821 + 128.0) / _825, (_822 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _862 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _863 = _862.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _863, _862.w, _863, vec3(_809, _810, _811), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    if (_61._m0 == 0u)
    {
        float _884 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_795, _796, _797));
        float _1241 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _887 = isnan(1.0) ? _1241 : (isnan(_1241) ? 1.0 : min(_1241, 1.0));
        float _906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _770) * 0.949999988079071044921875);
        float _907 = _906 * _906;
        float _908 = g_sceneCB._m0[4u].x - _717;
        float _909 = g_sceneCB._m0[4u].y - _718;
        float _910 = g_sceneCB._m0[4u].z - _719;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _915 = _914 * _908;
        float _916 = _914 * _909;
        float _917 = _914 * _910;
        float _918 = dot(vec3(_795, _796, _797), vec3(g_sceneCB._m0[4u].xyz));
        float _1252 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _921 = isnan(1.0) ? _1252 : (isnan(_1252) ? 1.0 : min(_1252, 1.0));
        float _922 = dot(vec3(_795, _796, _797), vec3(_812, _814, _815));
        float _1263 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _925 = isnan(1.0) ? _1263 : (isnan(_1263) ? 1.0 : min(_1263, 1.0));
        float _926 = dot(vec3(_795, _796, _797), vec3(_915, _916, _917));
        float _1274 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _929 = isnan(1.0) ? _1274 : (isnan(_1274) ? 1.0 : min(_1274, 1.0));
        float _930 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_915, _916, _917));
        float _1285 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = _907 * _907;
        float _938 = ((_929 * _929) * (_934 + (-1.0))) + 1.0;
        float _950 = (exp2(log2(1.0 - (isnan(1.0) ? _1285 : (isnan(_1285) ? 1.0 : min(_1285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _952 = 1.0 - _907;
        float _963 = (0.5 / (((_925 * ((_921 * _952) + _907)) + 9.9999999392252902907785028219223e-09) + (((_925 * _952) + _907) * _921))) * _921;
        float _1296 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _965 = (isnan(1.0) ? _1296 : (isnan(_1296) ? 1.0 : min(_1296, 1.0))) * (_934 / ((_938 * _938) * 3.141590118408203125));
        _972 = ((_698 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _887;
        _973 = ((_699 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _887;
        _974 = ((_700 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _887;
        _975 = (_950 * g_sceneCB._m0[5u].x) * _965;
        _976 = (_950 * g_sceneCB._m0[5u].y) * _965;
        _977 = (_950 * g_sceneCB._m0[5u].z) * _965;
    }
    else
    {
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
        _977 = 0.0;
    }
    bool _979 = abs(_796) < 0.89999997615814208984375;
    float _981 = float(_979);
    float _982 = _979 ? 0.0 : 1.0;
    float _985 = (_981 * _797) - (_982 * _796);
    float _986 = _982 * _795;
    float _988 = (-0.0) - (_795 * _981);
    float _992 = inversesqrt(dot(vec3(_985, _986, _988), vec3(_985, _986, _988)));
    float _993 = _985 * _992;
    float _994 = _986 * _992;
    float _995 = _992 * _988;
    float _998 = (_994 * _797) - (_995 * _796);
    float _1001 = (_995 * _795) - (_993 * _797);
    float _1004 = (_993 * _796) - (_994 * _795);
    float _1006;
    float _1014;
    float _1005 = 0.0;
    uint _1007 = 0u;
    float _1011;
    bool _1013;
    for (;;)
    {
        _1011 = (float(_1007) + _839) * 0.03125;
        _1013 = _1007 == 0u;
        float frontier_phi_43_pred;
        if (_1013)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1149;
            float _1150;
            uint _1152;
            _1149 = 0.0;
            _1150 = 0.5;
            _1152 = _1007;
            float _1015;
            for (;;)
            {
                _1015 = ((_1152 & 1u) != 0u) ? (_1150 + _1149) : _1149;
                uint _1153 = _1152 >> 1u;
                if (_1153 == 0u)
                {
                    break;
                }
                else
                {
                    _1149 = _1015;
                    _1150 *= 0.5;
                    _1152 = _1153;
                }
            }
            frontier_phi_43_pred = _1015;
        }
        _1014 = frontier_phi_43_pred;
        float _1016 = _1014 + _852;
        float _1020 = sqrt(_1011);
        float _1021 = ((_1016 > 1.0) ? (_1016 + (-1.0)) : _1016) * 6.283185482025146484375;
        float _1024 = cos(_1021) * _1020;
        float _1026 = sin(_1021) * _1020;
        float _1028 = sqrt(1.0 - _1011);
        float _1041 = ((_1028 * _795) + (_1024 * _998)) + (_1026 * _993);
        float _1042 = ((_1028 * _796) + (_1024 * _1001)) + (_1026 * _994);
        float _1043 = ((_1028 * _797) + (_1024 * _1004)) + (_1026 * _995);
        _60._m0 = 1u;
        uvec4 _1047 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1048 = _1047.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1048, _1047.w, _1048, vec3(_809, _810, _811), 9.9999997473787516355514526367188e-05, vec3(_1041, _1042, _1043), 10000.0, 1);
        float _1054 = dot(vec3(_795, _796, _797), vec3(_1041, _1042, _1043));
        float _1307 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1057 = isnan(1.0) ? _1307 : (isnan(_1307) ? 1.0 : min(_1307, 1.0));
        _1006 = ((float(_60._m0 == 0u) * _1057) / (_1057 * 0.3183098733425140380859375)) + _1005;
        uint _1008 = _1007 + 1u;
        if (_1008 == 32u)
        {
            break;
        }
        else
        {
            _1005 = _1006;
            _1007 = _1008;
            continue;
        }
    }
    float _1065 = _1006 * 0.009947183541953563690185546875;
    float _1070 = dot(vec3(_717, _718, _719), vec3(_795, _796, _797)) * 2.0;
    vec4 _1084 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_717 - (_1070 * _795), _718 - (_1070 * _796), _719 - (_1070 * _797)), 4.0 - (_770 * 4.0));
    float _1089 = dot(vec3(_812, _814, _815), vec3(_795, _796, _797));
    float _1318 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1098 = (exp2(log2(1.0 - (isnan(1.0) ? _1318 : (isnan(_1318) ? 1.0 : min(_1318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1104 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_795, _796, _797), 0.0);
    float _1115 = (_975 + _972) + (((_1104.x * _698) + (_1098 * _1084.x)) * _1065);
    float _1119 = (_976 + _973) + (((_1104.y * _699) + (_1098 * _1084.y)) * _1065);
    float _1123 = (_977 + _974) + (((_1104.z * _700) + (_1098 * _1084.z)) * _1065);
    float _1329 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1340 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1351 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    bool _1132 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1143;
    _1143.x = _1132 ? ((_568 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1329 : (isnan(_1329) ? 1.0 : min(_1329, 1.0)));
    _1143.y = _1132 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1340 : (isnan(_1340) ? 1.0 : min(_1340, 1.0)));
    _1143.z = _1132 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1351 : (isnan(_1351) ? 1.0 : min(_1351, 1.0)));
    payload._m0 = _1143;
}


