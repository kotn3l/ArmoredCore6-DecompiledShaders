#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1352;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _162;
    uint _164;
    uint _165;
    if (_122.x == 0u)
    {
        uint _130 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_123 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _156 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _157 >> 16u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _162 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    uint _173 = _122.w;
    bool _175 = _172 || (_173 == 0u);
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    uint _225 = _169.y;
    bool _226 = _171 == 0u;
    uint _229 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _238 = texelFetch(l_geomAttrib_1, int((((_225 * _162) + 4u) + (_172 ? (_229 + 4u) : _229)) >> 2u));
    uint _239 = _238.x;
    float _243 = float(int(uint(int(_239 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_239) >> int(16u))));
    uint _245 = _170 * _164;
    uint _246 = _245 + 12u;
    uint _267;
    uint _268;
    uint _269;
    uint _270;
    if (_175)
    {
        uvec4 _248 = texelFetch(l_geomAttrib_0, int(_246 >> 2u));
        uint _249 = _248.x;
        _267 = _249 & 255u;
        _268 = (_249 >> 8u) & 255u;
        _269 = (_249 >> 16u) & 255u;
        _270 = 16u;
    }
    else
    {
        uint _255 = _246 >> 2u;
        uvec2 _261 = uvec2(texelFetch(l_geomAttrib_0, int(_255)).x, texelFetch(l_geomAttrib_0, int(_255 + 1u)).x);
        uint _262 = _261.x;
        _267 = _262 & 65535u;
        _268 = _262 >> 16u;
        _269 = _261.y & 65535u;
        _270 = 20u;
    }
    uvec4 _276 = texelFetch(l_geomAttrib_0, int((_270 + _245) >> 2u));
    uint _277 = _276.x;
    uint _290 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _297 = texelFetch(l_geomAttrib_1, int((((_225 * _164) + 4u) + (_172 ? (_290 + 4u) : _290)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    uint _304 = _170 * _165;
    uint _305 = _304 + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_175)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 16u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 20u;
    }
    uvec4 _335 = texelFetch(l_geomAttrib_0, int((_329 + _304) >> 2u));
    uint _336 = _335.x;
    uint _349 = _226 ? 4u : ((_173 != 0u) ? 12u : 8u);
    uvec4 _356 = texelFetch(l_geomAttrib_1, int((((_225 * _165) + 4u) + (_172 ? (_349 + 4u) : _349)) >> 2u));
    uint _357 = _356.x;
    float _361 = float(int(uint(int(_357 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_357) >> int(16u))));
    bool _364 = _122.z == 0u;
    float _400;
    float _401;
    float _402;
    if (_364)
    {
        uint _367 = _162 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _162 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_364)
    {
        uint _405 = _164 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _164 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _476;
    float _477;
    float _478;
    if (_364)
    {
        uint _443 = _165 * 3u;
        uvec3 _452 = uvec3(texelFetch(l_geomPositionBuffer, int(_443)).x, texelFetch(l_geomPositionBuffer, int(_443 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_443 + 2u)).x);
        _476 = uintBitsToFloat(_452.x);
        _477 = uintBitsToFloat(_452.y);
        _478 = uintBitsToFloat(_452.z);
    }
    else
    {
        uint _460 = _165 * 2u;
        uvec2 _466 = uvec2(texelFetch(l_geomPositionBuffer, int(_460)).x, texelFetch(l_geomPositionBuffer, int(_460 + 1u)).x);
        uint _467 = _466.x;
        _476 = unpackHalf2x16(_467).x;
        _477 = unpackHalf2x16(_467 >> 16u).x;
        _478 = unpackHalf2x16(_466.y).x;
    }
    float _481 = (1.0 - hit._m0.x) - hit._m0.y;
    float _515 = (_302 - _243) * 0.00048828125;
    float _517 = (_303 - _244) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_302 * hit._m0.x) + (_243 * _481)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_303 * hit._m0.x) + (_244 * _481)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_201) * _481) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_202) * _481) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_203) * _481) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _595 = ((((float(_213 & 255u) * _481) + (-127.0)) + (float(_277 & 255u) * hit._m0.x)) + (float(_336 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_213 >> 8u) & 255u) * _481) + (-127.0)) + (float((_277 >> 8u) & 255u) * hit._m0.x)) + (float((_336 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_213 >> 16u) & 255u) * _481) + (-127.0)) + (float((_277 >> 16u) & 255u) * hit._m0.x)) + (float((_336 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float(_213 >> 24u) * _481) + (-127.0)) + (float(_277 >> 24u) * hit._m0.x)) + (float(_336 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _608 = ((_596 * _582) - (_597 * _581)) * _598;
    float _609 = ((_597 * _579) - (_595 * _582)) * _598;
    float _610 = ((_595 * _581) - (_596 * _579)) * _598;
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _614 * _608;
    float _616 = _614 * _609;
    float _617 = _614 * _610;
    uvec2 _635 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, int(0u)));
    bool _640 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _693;
    if (_640)
    {
        float _651 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _657 = (_566 * _551) - (_563 * _554);
        float _660 = (_560 * _554) - (_566 * _548);
        float _663 = (_563 * _548) - (_560 * _551);
        float _690 = ((log2((((float(_635.y) * 0.5) * float(_635.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_660 * _660) + (_663 * _663)) + (_657 * _657)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_651 * gl_WorldRayDirectionEXT.x, _651 * gl_WorldRayDirectionEXT.y, _651 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    }
    else
    {
        _693 = 0.0;
    }
    vec4 _697 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _567) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _568) + cbTextureTilingScale._m0[0u].w), _693);
    float _702 = _697.x * cbMtdParam._m0[9u].x;
    float _703 = _697.y * cbMtdParam._m0[9u].y;
    float _704 = _697.z * cbMtdParam._m0[9u].z;
    uvec2 _725 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, int(0u)));
    float _776;
    if (_640)
    {
        float _736 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _742 = (_566 * _551) - (_563 * _554);
        float _745 = (_560 * _554) - (_566 * _548);
        float _748 = (_563 * _548) - (_560 * _551);
        float _774 = ((log2((((float(_725.y) * 0.5) * float(_725.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_745 * _745) + (_748 * _748)) + (_742 * _742)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_736 * gl_WorldRayDirectionEXT.x, _736 * gl_WorldRayDirectionEXT.y, _736 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _776 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    }
    else
    {
        _776 = 0.0;
    }
    vec4 _779 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _567) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _568) + cbTextureTilingScale._m0[1u].w), _776);
    float _783 = _779.z;
    float _786 = (_779.x * 2.0) + (-1.0);
    float _788 = (_779.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_786, _788), vec2(_786, _788));
    float _1424 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _794 = sqrt(1.0 - (isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0))));
    float _797 = fma(_794, _579, fma(_788, _595, _786 * _615));
    float _800 = fma(_794, _581, fma(_788, _596, _786 * _616));
    float _803 = fma(_794, _582, fma(_788, _597, _786 * _617));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _815 = cbMtdParam._m0[10u].x + dot(vec4(_807 * _797, _807 * _800, _807 * _803, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _1435 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
    uvec2 _828 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, int(0u)));
    float _879;
    if (_640)
    {
        float _839 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _845 = (_566 * _551) - (_563 * _554);
        float _848 = (_560 * _554) - (_566 * _548);
        float _851 = (_563 * _548) - (_560 * _551);
        float _877 = ((log2((((float(_828.y) * 0.5) * float(_828.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_848 * _848) + (_851 * _851)) + (_845 * _845)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_839 * gl_WorldRayDirectionEXT.x, _839 * gl_WorldRayDirectionEXT.y, _839 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _879 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    }
    else
    {
        _879 = 0.0;
    }
    vec4 _881 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _567) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _568) + cbTextureTilingScale._m0[3u].w), _879);
    float _892 = ((_881.x - _702) * _816) + _702;
    float _893 = ((_881.y - _703) * _816) + _703;
    float _894 = ((_881.z - _704) * _816) + _704;
    uvec2 _906 = uvec2(textureSize(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, int(0u)));
    float _910 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _911 = _910 * gl_WorldRayDirectionEXT.x;
    float _912 = _910 * gl_WorldRayDirectionEXT.y;
    float _913 = _910 * gl_WorldRayDirectionEXT.z;
    float _957;
    if (_640)
    {
        float _923 = (_566 * _551) - (_563 * _554);
        float _926 = (_560 * _554) - (_566 * _548);
        float _929 = (_563 * _548) - (_560 * _551);
        float _955 = ((log2((((float(_906.y) * 0.5) * float(_906.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_926 * _926) + (_929 * _929)) + (_923 * _923)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_911, _912, _913), vec3(_579, _581, _582))));
        _957 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    }
    else
    {
        _957 = 0.0;
    }
    vec4 _959 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _567) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _568) + cbTextureTilingScale._m0[4u].w), _957);
    float _966 = (_959.x * 2.0) + (-1.0);
    float _967 = (_959.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _1456 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _976 = ((_959.z - _783) * _816) + _783;
    float _985 = ((sqrt(1.0 - (isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0)))) - _794) * _816) + _794;
    float _989 = (((_966 - _786) * _816) + _786) + (cbMtdParam._m0[10u].y * _786);
    float _990 = (((_967 - _788) * _816) + _788) + (cbMtdParam._m0[10u].y * _788);
    float _993 = fma(_985, _579, fma(_990, _595, _989 * _615));
    float _996 = fma(_985, _581, fma(_990, _596, _989 * _616));
    float _999 = fma(_985, _582, fma(_990, _597, _989 * _617));
    float _1003 = inversesqrt(dot(vec3(_993, _996, _999), vec3(_993, _996, _999)));
    float _1004 = _1003 * _993;
    float _1005 = _1003 * _996;
    float _1006 = _1003 * _999;
    float _1018 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1019 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1020 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1021 = (-0.0) - _911;
    float _1023 = (-0.0) - _912;
    float _1024 = (-0.0) - _913;
    float _1030 = float(gl_LaunchIDEXT.x);
    float _1031 = float(gl_LaunchIDEXT.y);
    float _1034 = float(gl_LaunchSizeEXT.x);
    float _1048 = fract(fract(sin(dot(vec2(_1030 / _1034, _1031 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1061 = fract(fract(sin(dot(vec2((_1030 + 128.0) / _1034, (_1031 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _1071 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1072 = _1071.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1072, _1071.w, _1072, vec3(_1018, _1019, _1020), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (_64._m0 == 0u)
    {
        float _1093 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1004, _1005, _1006));
        float _1467 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1096 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        float _1115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _976) * 0.949999988079071044921875);
        float _1116 = _1115 * _1115;
        float _1117 = g_sceneCB._m0[4u].x - _911;
        float _1118 = g_sceneCB._m0[4u].y - _912;
        float _1119 = g_sceneCB._m0[4u].z - _913;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1124 = _1123 * _1117;
        float _1125 = _1123 * _1118;
        float _1126 = _1123 * _1119;
        float _1127 = dot(vec3(_1004, _1005, _1006), vec3(g_sceneCB._m0[4u].xyz));
        float _1478 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1130 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        float _1131 = dot(vec3(_1004, _1005, _1006), vec3(_1021, _1023, _1024));
        float _1489 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1134 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        float _1135 = dot(vec3(_1004, _1005, _1006), vec3(_1124, _1125, _1126));
        float _1500 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1138 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        float _1139 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1124, _1125, _1126));
        float _1511 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1116 * _1116;
        float _1147 = ((_1138 * _1138) * (_1143 + (-1.0))) + 1.0;
        float _1159 = (exp2(log2(1.0 - (isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1161 = 1.0 - _1116;
        float _1172 = (0.5 / (((_1134 * ((_1130 * _1161) + _1116)) + 9.9999999392252902907785028219223e-09) + (((_1134 * _1161) + _1116) * _1130))) * _1130;
        float _1522 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1174 = (isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0))) * (_1143 / ((_1147 * _1147) * 3.141590118408203125));
        _1181 = ((_892 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1096;
        _1182 = ((_893 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1096;
        _1183 = ((_894 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1096;
        _1184 = (_1159 * g_sceneCB._m0[5u].x) * _1174;
        _1185 = (_1159 * g_sceneCB._m0[5u].y) * _1174;
        _1186 = (_1159 * g_sceneCB._m0[5u].z) * _1174;
    }
    else
    {
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    bool _1188 = abs(_1005) < 0.89999997615814208984375;
    float _1190 = float(_1188);
    float _1191 = _1188 ? 0.0 : 1.0;
    float _1194 = (_1190 * _1006) - (_1191 * _1005);
    float _1195 = _1191 * _1004;
    float _1197 = (-0.0) - (_1004 * _1190);
    float _1201 = inversesqrt(dot(vec3(_1194, _1195, _1197), vec3(_1194, _1195, _1197)));
    float _1202 = _1194 * _1201;
    float _1203 = _1195 * _1201;
    float _1204 = _1201 * _1197;
    float _1207 = (_1203 * _1006) - (_1204 * _1005);
    float _1210 = (_1204 * _1004) - (_1202 * _1006);
    float _1213 = (_1202 * _1005) - (_1203 * _1004);
    float _1215;
    float _1223;
    float _1214 = 0.0;
    uint _1216 = 0u;
    float _1220;
    bool _1222;
    for (;;)
    {
        _1220 = (float(_1216) + _1048) * 0.03125;
        _1222 = _1216 == 0u;
        float frontier_phi_35_pred;
        if (_1222)
        {
            frontier_phi_35_pred = 0.0;
        }
        else
        {
            float _1357;
            float _1358;
            uint _1360;
            _1357 = 0.0;
            _1358 = 0.5;
            _1360 = _1216;
            float _1224;
            for (;;)
            {
                _1224 = ((_1360 & 1u) != 0u) ? (_1358 + _1357) : _1357;
                uint _1361 = _1360 >> 1u;
                if (_1361 == 0u)
                {
                    break;
                }
                else
                {
                    _1357 = _1224;
                    _1358 *= 0.5;
                    _1360 = _1361;
                }
            }
            frontier_phi_35_pred = _1224;
        }
        _1223 = frontier_phi_35_pred;
        float _1225 = _1223 + _1061;
        float _1229 = sqrt(_1220);
        float _1230 = ((_1225 > 1.0) ? (_1225 + (-1.0)) : _1225) * 6.283185482025146484375;
        float _1233 = cos(_1230) * _1229;
        float _1235 = sin(_1230) * _1229;
        float _1237 = sqrt(1.0 - _1220);
        float _1250 = ((_1237 * _1004) + (_1233 * _1207)) + (_1235 * _1202);
        float _1251 = ((_1237 * _1005) + (_1233 * _1210)) + (_1235 * _1203);
        float _1252 = ((_1237 * _1006) + (_1233 * _1213)) + (_1235 * _1204);
        _63._m0 = 1u;
        uvec4 _1256 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1257 = _1256.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1257, _1256.w, _1257, vec3(_1018, _1019, _1020), 9.9999997473787516355514526367188e-05, vec3(_1250, _1251, _1252), 10000.0, 1);
        float _1263 = dot(vec3(_1004, _1005, _1006), vec3(_1250, _1251, _1252));
        float _1533 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1266 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1215 = ((float(_63._m0 == 0u) * _1266) / (_1266 * 0.3183098733425140380859375)) + _1214;
        uint _1217 = _1216 + 1u;
        if (_1217 == 32u)
        {
            break;
        }
        else
        {
            _1214 = _1215;
            _1216 = _1217;
            continue;
        }
    }
    float _1274 = _1215 * 0.009947183541953563690185546875;
    float _1279 = dot(vec3(_911, _912, _913), vec3(_1004, _1005, _1006)) * 2.0;
    vec4 _1293 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_911 - (_1279 * _1004), _912 - (_1279 * _1005), _913 - (_1279 * _1006)), 4.0 - (_976 * 4.0));
    float _1298 = dot(vec3(_1021, _1023, _1024), vec3(_1004, _1005, _1006));
    float _1544 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1307 = (exp2(log2(1.0 - (isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1313 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1004, _1005, _1006), 0.0);
    float _1324 = (_1184 + _1181) + (((_1313.x * _892) + (_1307 * _1293.x)) * _1274);
    float _1328 = (_1185 + _1182) + (((_1313.y * _893) + (_1307 * _1293.y)) * _1274);
    float _1332 = (_1186 + _1183) + (((_1313.z * _894) + (_1307 * _1293.z)) * _1274);
    float _1555 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _1566 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _1577 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    bool _1340 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1351;
    _1351.x = _1340 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0)));
    _1351.y = _1340 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0)));
    _1351.z = _1340 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0)));
    payload._m0 = _1351;
}


