#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_ScanDome_snp_0_Texture2D_18;
layout(set = 0, binding = 1) uniform texture2D S_ScanDome_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1047;

void main()
{
    float _77 = float(gl_LaunchSizeEXT.y);
    float _105 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _114 = sqrt(((_106 * _106) + (_105 * _105)) + (_107 * _107)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _77)))));
    uvec4 _125 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _126 = _125.y;
    uint _166;
    uint _168;
    uint _169;
    if (_125.x == 0u)
    {
        uint _134 = (_126 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_126 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _161 >> 16u;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _125.w == 0u;
    bool _179 = _176 || _178;
    uint _181 = (_174 * _166) + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 20u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 24u;
    }
    bool _214 = _175 == 0u;
    uint _215;
    if (_214)
    {
        _215 = _208;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _208 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _208 + 8u;
        }
        _215 = frontier_phi_9_10_ladder;
    }
    uvec4 _226 = texelFetch(l_geomAttrib_0, int((((_174 * _166) + 4u) + (_176 ? (_215 + 4u) : _215)) >> 2u));
    uint _227 = _226.x;
    float _231 = float(int(uint(int(_227 << 16u) >> int(16u))));
    float _232 = float(int(uint(int(_227) >> int(16u))));
    uint _234 = (_174 * _168) + 12u;
    uint _255;
    uint _256;
    uint _257;
    uint _258;
    if (_179)
    {
        uvec4 _236 = texelFetch(l_geomAttrib_0, int(_234 >> 2u));
        uint _237 = _236.x;
        _255 = _237 & 255u;
        _256 = (_237 >> 8u) & 255u;
        _257 = (_237 >> 16u) & 255u;
        _258 = 20u;
    }
    else
    {
        uint _243 = _234 >> 2u;
        uvec2 _249 = uvec2(texelFetch(l_geomAttrib_0, int(_243)).x, texelFetch(l_geomAttrib_0, int(_243 + 1u)).x);
        uint _250 = _249.x;
        _255 = _250 & 65535u;
        _256 = _250 >> 16u;
        _257 = _249.y & 65535u;
        _258 = 24u;
    }
    uint _262;
    if (_214)
    {
        _262 = _258;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _258 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _258 + 8u;
        }
        _262 = frontier_phi_16_17_ladder;
    }
    uvec4 _271 = texelFetch(l_geomAttrib_0, int((((_174 * _168) + 4u) + (_176 ? (_262 + 4u) : _262)) >> 2u));
    uint _272 = _271.x;
    float _276 = float(int(uint(int(_272 << 16u) >> int(16u))));
    float _277 = float(int(uint(int(_272) >> int(16u))));
    uint _279 = (_174 * _169) + 12u;
    uint _300;
    uint _301;
    uint _302;
    uint _303;
    if (_179)
    {
        uvec4 _281 = texelFetch(l_geomAttrib_0, int(_279 >> 2u));
        uint _282 = _281.x;
        _300 = _282 & 255u;
        _301 = (_282 >> 8u) & 255u;
        _302 = (_282 >> 16u) & 255u;
        _303 = 20u;
    }
    else
    {
        uint _288 = _279 >> 2u;
        uvec2 _294 = uvec2(texelFetch(l_geomAttrib_0, int(_288)).x, texelFetch(l_geomAttrib_0, int(_288 + 1u)).x);
        uint _295 = _294.x;
        _300 = _295 & 65535u;
        _301 = _295 >> 16u;
        _302 = _294.y & 65535u;
        _303 = 24u;
    }
    uint _307;
    if (_214)
    {
        _307 = _303;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _303 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _303 + 8u;
        }
        _307 = frontier_phi_23_24_ladder;
    }
    uvec4 _316 = texelFetch(l_geomAttrib_0, int((((_174 * _169) + 4u) + (_176 ? (_307 + 4u) : _307)) >> 2u));
    uint _317 = _316.x;
    float _321 = float(int(uint(int(_317 << 16u) >> int(16u))));
    float _322 = float(int(uint(int(_317) >> int(16u))));
    bool _324 = _125.z == 0u;
    float _360;
    float _361;
    float _362;
    if (_324)
    {
        uint _327 = _166 * 3u;
        uvec3 _336 = uvec3(texelFetch(l_geomPositionBuffer, int(_327)).x, texelFetch(l_geomPositionBuffer, int(_327 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_327 + 2u)).x);
        _360 = uintBitsToFloat(_336.x);
        _361 = uintBitsToFloat(_336.y);
        _362 = uintBitsToFloat(_336.z);
    }
    else
    {
        uint _344 = _166 * 2u;
        uvec2 _350 = uvec2(texelFetch(l_geomPositionBuffer, int(_344)).x, texelFetch(l_geomPositionBuffer, int(_344 + 1u)).x);
        uint _351 = _350.x;
        _360 = unpackHalf2x16(_351).x;
        _361 = unpackHalf2x16(_351 >> 16u).x;
        _362 = unpackHalf2x16(_350.y).x;
    }
    float _398;
    float _399;
    float _400;
    if (_324)
    {
        uint _365 = _168 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _168 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_324)
    {
        uint _403 = _169 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _169 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _441 = (1.0 - hit._m0.x) - hit._m0.y;
    float _463 = (_276 - _231) * 0.00048828125;
    float _465 = (_277 - _232) * 0.00048828125;
    float _468 = (_321 - _231) * 0.00048828125;
    float _469 = (_322 - _232) * 0.00048828125;
    float _491 = _398 - _360;
    float _492 = _399 - _361;
    float _493 = _400 - _362;
    float _496 = fma(_493, gl_ObjectToWorldEXT[2u].x, fma(_492, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _491));
    float _499 = fma(_493, gl_ObjectToWorldEXT[2u].y, fma(_492, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _491));
    float _502 = fma(_493, gl_ObjectToWorldEXT[2u].z, fma(_492, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _491));
    float _503 = _436 - _360;
    float _504 = _437 - _361;
    float _505 = _438 - _362;
    float _508 = fma(_505, gl_ObjectToWorldEXT[2u].x, fma(_504, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _503));
    float _511 = fma(_505, gl_ObjectToWorldEXT[2u].y, fma(_504, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _503));
    float _514 = fma(_505, gl_ObjectToWorldEXT[2u].z, fma(_504, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _503));
    float _515 = (((_276 * hit._m0.x) + (_231 * _441)) + (_321 * hit._m0.y)) * 0.00048828125;
    float _516 = (((_277 * hit._m0.x) + (_232 * _441)) + (_322 * hit._m0.y)) * 0.00048828125;
    float _520 = (((float(_205) * _441) + (-127.0)) + (float(_255) * hit._m0.x)) + (float(_300) * hit._m0.y);
    float _523 = (((float(_206) * _441) + (-127.0)) + (float(_256) * hit._m0.x)) + (float(_301) * hit._m0.y);
    float _526 = (((float(_207) * _441) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_302) * hit._m0.y);
    float _527 = _520 * 0.0078740157186985015869140625;
    float _529 = _523 * 0.0078740157186985015869140625;
    float _530 = _526 * 0.0078740157186985015869140625;
    float _551 = inversesqrt(dot(vec3(_527, _529, _530), vec3(_527, _529, _530)));
    float _552 = _551 * _527;
    float _553 = _551 * _529;
    float _554 = _551 * _530;
    float _560 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_552, _553, _554, 0.0)) - cbMtdParam._m0[12u].y;
    float _1123 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _567 = exp2(log2(1.0 - (isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _583 = cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x;
    uvec2 _599 = uvec2(textureSize(S_ScanDome_snp_0_Texture2D_3, int(0u)));
    bool _604 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _656;
    if (_604)
    {
        float _615 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _621 = (_514 * _499) - (_511 * _502);
        float _624 = (_508 * _502) - (_514 * _496);
        float _627 = (_511 * _496) - (_508 * _499);
        float _654 = ((log2((((float(_599.y) * 0.5) * float(_599.x)) * abs((_469 * _463) - (_468 * _465))) / (sqrt(((_624 * _624) + (_627 * _627)) + (_621 * _621)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_615 * gl_WorldRayDirectionEXT.x, _615 * gl_WorldRayDirectionEXT.y, _615 * gl_WorldRayDirectionEXT.z), vec3(_527, _529, _530))));
        _656 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    }
    else
    {
        _656 = 0.0;
    }
    vec4 _660 = textureLod(sampler2D(S_ScanDome_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_583 * cbMtdParam._m0[15u].y) + _515) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_583 * cbMtdParam._m0[15u].z) + _516) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _656);
    uvec2 _694 = uvec2(textureSize(S_ScanDome_snp_0_Texture2D_18, int(0u)));
    float _698 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _699 = _698 * gl_WorldRayDirectionEXT.x;
    float _700 = _698 * gl_WorldRayDirectionEXT.y;
    float _701 = _698 * gl_WorldRayDirectionEXT.z;
    float _745;
    if (_604)
    {
        float _711 = (_514 * _499) - (_511 * _502);
        float _714 = (_508 * _502) - (_514 * _496);
        float _717 = (_511 * _496) - (_508 * _499);
        float _743 = ((log2((((float(_694.y) * 0.5) * float(_694.x)) * abs((_469 * _463) - (_468 * _465))) / (sqrt(((_714 * _714) + (_717 * _717)) + (_711 * _711)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_699, _700, _701), vec3(_527, _529, _530))));
        _745 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    }
    else
    {
        _745 = 0.0;
    }
    vec4 _747 = textureLod(sampler2D(S_ScanDome_snp_0_Texture2D_18, SS_DiffuseMap), vec2((((cbMtdParam._m0[14u].w * _583) + _515) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[15u].x * _583) + _516) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _745);
    float _772 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _773 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _774 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _775 = (-0.0) - _699;
    float _777 = (-0.0) - _700;
    float _778 = (-0.0) - _701;
    float _784 = float(gl_LaunchIDEXT.x);
    float _785 = float(gl_LaunchIDEXT.y);
    float _788 = float(gl_LaunchSizeEXT.x);
    float _802 = fract(fract(sin(dot(vec2(_784 / _788, _785 / _77), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _815 = fract(fract(sin(dot(vec2((_784 + 128.0) / _788, (_785 + 128.0) / _77), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _825 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _826 = _825.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _826, _825.w, _826, vec3(_772, _773, _774), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _892;
    float _893;
    float _894;
    if (_63._m0 == 0u)
    {
        float _847 = g_sceneCB._m0[4u].x - _699;
        float _848 = g_sceneCB._m0[4u].y - _700;
        float _849 = g_sceneCB._m0[4u].z - _701;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _857 = dot(vec3(_552, _553, _554), vec3(g_sceneCB._m0[4u].xyz));
        float _1149 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _860 = isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0));
        float _861 = dot(vec3(_552, _553, _554), vec3(_775, _777, _778));
        float _1160 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_847 * _853, _848 * _853, _849 * _853));
        float _1171 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _876 = (exp2(log2(1.0 - (isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _882 = (0.5 / ((_860 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0))))) * _860;
        float _1182 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _884 = (isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0))) * 0.31831014156341552734375;
        _892 = (_876 * g_sceneCB._m0[5u].x) * _884;
        _893 = (_876 * g_sceneCB._m0[5u].y) * _884;
        _894 = (_876 * g_sceneCB._m0[5u].z) * _884;
    }
    else
    {
        _892 = 0.0;
        _893 = 0.0;
        _894 = 0.0;
    }
    bool _896 = abs(_553) < 0.89999997615814208984375;
    float _898 = float(_896);
    float _899 = _896 ? 0.0 : 1.0;
    float _902 = (_898 * _554) - (_899 * _553);
    float _903 = _899 * _552;
    float _905 = (-0.0) - (_552 * _898);
    float _909 = inversesqrt(dot(vec3(_902, _903, _905), vec3(_902, _903, _905)));
    float _910 = _902 * _909;
    float _911 = _903 * _909;
    float _912 = _909 * _905;
    float _915 = (_911 * _554) - (_912 * _553);
    float _918 = (_912 * _552) - (_910 * _554);
    float _921 = (_910 * _553) - (_911 * _552);
    float _923;
    float _931;
    float _922 = 0.0;
    uint _924 = 0u;
    float _928;
    bool _930;
    for (;;)
    {
        _928 = (float(_924) + _802) * 0.03125;
        _930 = _924 == 0u;
        float frontier_phi_43_pred;
        if (_930)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1052;
            float _1053;
            uint _1055;
            _1052 = 0.0;
            _1053 = 0.5;
            _1055 = _924;
            float _932;
            for (;;)
            {
                _932 = ((_1055 & 1u) != 0u) ? (_1053 + _1052) : _1052;
                uint _1056 = _1055 >> 1u;
                if (_1056 == 0u)
                {
                    break;
                }
                else
                {
                    _1052 = _932;
                    _1053 *= 0.5;
                    _1055 = _1056;
                }
            }
            frontier_phi_43_pred = _932;
        }
        _931 = frontier_phi_43_pred;
        float _933 = _931 + _815;
        float _938 = sqrt(_928);
        float _939 = ((_933 > 1.0) ? (_933 + (-1.0)) : _933) * 6.283185482025146484375;
        float _942 = cos(_939) * _938;
        float _944 = sin(_939) * _938;
        float _946 = sqrt(1.0 - _928);
        float _959 = ((_946 * _552) + (_942 * _915)) + (_944 * _910);
        float _960 = ((_946 * _553) + (_942 * _918)) + (_944 * _911);
        float _961 = ((_946 * _554) + (_942 * _921)) + (_944 * _912);
        _62._m0 = 1u;
        uvec4 _965 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _966 = _965.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _966, _965.w, _966, vec3(_772, _773, _774), 9.9999997473787516355514526367188e-05, vec3(_959, _960, _961), 10000.0, 1);
        float _972 = dot(vec3(_552, _553, _554), vec3(_959, _960, _961));
        float _1193 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _975 = isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0));
        _923 = ((float(_62._m0 == 0u) * _975) / (_975 * 0.3183098733425140380859375)) + _922;
        uint _925 = _924 + 1u;
        if (_925 == 32u)
        {
            break;
        }
        else
        {
            _922 = _923;
            _924 = _925;
            continue;
        }
    }
    float _984 = _923 * 0.009947183541953563690185546875;
    float _989 = dot(vec3(_699, _700, _701), vec3(_552, _553, _554)) * 2.0;
    vec4 _1001 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_699 - (_989 * _552), _700 - (_989 * _553), _701 - (_989 * _554)), 4.0);
    float _1006 = dot(vec3(_775, _777, _778), vec3(_552, _553, _554));
    float _1204 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1015 = (exp2(log2(1.0 - (isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1023 = (_892 + ((((_660.x * cbMtdParam._m0[11u].x) + (_567 * cbMtdParam._m0[10u].x)) + (_747.x * cbMtdParam._m0[9u].x)) * cbMtdParam._m0[14u].x)) + ((_1001.x * _984) * _1015);
    float _1025 = (_893 + ((((_660.y * cbMtdParam._m0[11u].y) + (_567 * cbMtdParam._m0[10u].y)) + (_747.y * cbMtdParam._m0[9u].y)) * cbMtdParam._m0[14u].x)) + ((_1001.y * _984) * _1015);
    float _1027 = (_894 + ((((_660.z * cbMtdParam._m0[11u].z) + (_567 * cbMtdParam._m0[10u].z)) + (_747.z * cbMtdParam._m0[9u].z)) * cbMtdParam._m0[14u].x)) + ((_1001.z * _984) * _1015);
    float _1215 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1226 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1237 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    bool _1035 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1046;
    _1046.x = _1035 ? ((_520 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0)));
    _1046.y = _1035 ? ((_523 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1226 : (isnan(_1226) ? 1.0 : min(_1226, 1.0)));
    _1046.z = _1035 ? ((_526 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1237 : (isnan(_1237) ? 1.0 : min(_1237, 1.0)));
    payload._m0 = _1046;
}


