#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _46
{
    uint _m0;
};

struct _50
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _46 payload;
hitAttributeEXT _50 hit;

void main()
{
    uint _56 = payload._m0;
    float _98 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _107 = sqrt(((_99 * _99) + (_98 * _98)) + (_100 * _100)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _118 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _119 = _118.y;
    uint _159;
    uint _161;
    uint _162;
    if (_118.x == 0u)
    {
        uint _127 = (_119 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _136 = uvec3(texelFetch(l_geomIndexBuffer, int(_127)).x, texelFetch(l_geomIndexBuffer, int(_127 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_127 + 2u)).x);
        _159 = _136.x;
        _161 = _136.y;
        _162 = _136.z;
    }
    else
    {
        uint _140 = uint(gl_PrimitiveID) * 6u;
        uint _142 = _140 & 4294967292u;
        uint _145 = (_119 + _142) >> 2u;
        uvec2 _152 = uvec2(texelFetch(l_geomIndexBuffer, int(_145)).x, texelFetch(l_geomIndexBuffer, int(_145 + 1u)).x);
        uint _153 = _152.x;
        uint _154 = _152.y;
        uint _156 = _153 >> 16u;
        uint _157 = _154 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_142 == _140)
        {
            frontier_phi_3_2_ladder = _153 & 65535u;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _157;
        }
        else
        {
            frontier_phi_3_2_ladder = _156;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 >> 16u;
        }
        _159 = frontier_phi_3_2_ladder;
        _161 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _166 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _167 = _166.x;
    uint _168 = _166.z;
    bool _169 = _168 != 0u;
    bool _171 = _118.w == 0u;
    bool _172 = _169 || _171;
    uint _174 = (_167 * _159) + 12u;
    uint _198;
    uint _199;
    uint _200;
    uint _201;
    if (_172)
    {
        uvec4 _177 = texelFetch(l_geomAttrib_0, int(_174 >> 2u));
        uint _178 = _177.x;
        _198 = _178 & 255u;
        _199 = (_178 >> 8u) & 255u;
        _200 = (_178 >> 16u) & 255u;
        _201 = 20u;
    }
    else
    {
        uint _186 = _174 >> 2u;
        uvec2 _192 = uvec2(texelFetch(l_geomAttrib_0, int(_186)).x, texelFetch(l_geomAttrib_0, int(_186 + 1u)).x);
        uint _193 = _192.x;
        _198 = _193 & 65535u;
        _199 = _193 >> 16u;
        _200 = _192.y & 65535u;
        _201 = 24u;
    }
    bool _206 = _168 == 0u;
    uint _207;
    if (_206)
    {
        _207 = _201;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_171)
        {
            frontier_phi_9_10_ladder = _201 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _201 + 8u;
        }
        _207 = frontier_phi_9_10_ladder;
    }
    uint _212 = _169 ? (_207 + 4u) : _207;
    uint _213 = _167 * _159;
    uvec4 _224 = texelFetch(l_geomAttrib_0, int(((_213 + 4u) + _212) >> 2u));
    uint _225 = _224.x;
    float _229 = float(int(uint(int(_225 << 16u) >> int(16u))));
    float _230 = float(int(uint(int(_225) >> int(16u))));
    uint _240 = (_167 * _161) + 12u;
    uint _261;
    uint _262;
    uint _263;
    uint _264;
    if (_172)
    {
        uvec4 _242 = texelFetch(l_geomAttrib_0, int(_240 >> 2u));
        uint _243 = _242.x;
        _261 = _243 & 255u;
        _262 = (_243 >> 8u) & 255u;
        _263 = (_243 >> 16u) & 255u;
        _264 = 20u;
    }
    else
    {
        uint _249 = _240 >> 2u;
        uvec2 _255 = uvec2(texelFetch(l_geomAttrib_0, int(_249)).x, texelFetch(l_geomAttrib_0, int(_249 + 1u)).x);
        uint _256 = _255.x;
        _261 = _256 & 65535u;
        _262 = _256 >> 16u;
        _263 = _255.y & 65535u;
        _264 = 24u;
    }
    uint _268;
    if (_206)
    {
        _268 = _264;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_171)
        {
            frontier_phi_16_17_ladder = _264 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _264 + 8u;
        }
        _268 = frontier_phi_16_17_ladder;
    }
    uint _272 = _169 ? (_268 + 4u) : _268;
    uint _273 = _167 * _161;
    uvec4 _283 = texelFetch(l_geomAttrib_0, int(((_273 + 4u) + _272) >> 2u));
    uint _284 = _283.x;
    float _288 = float(int(uint(int(_284 << 16u) >> int(16u))));
    float _289 = float(int(uint(int(_284) >> int(16u))));
    uint _299 = (_167 * _162) + 12u;
    uint _320;
    uint _321;
    uint _322;
    uint _323;
    if (_172)
    {
        uvec4 _301 = texelFetch(l_geomAttrib_0, int(_299 >> 2u));
        uint _302 = _301.x;
        _320 = _302 & 255u;
        _321 = (_302 >> 8u) & 255u;
        _322 = (_302 >> 16u) & 255u;
        _323 = 20u;
    }
    else
    {
        uint _308 = _299 >> 2u;
        uvec2 _314 = uvec2(texelFetch(l_geomAttrib_0, int(_308)).x, texelFetch(l_geomAttrib_0, int(_308 + 1u)).x);
        uint _315 = _314.x;
        _320 = _315 & 65535u;
        _321 = _315 >> 16u;
        _322 = _314.y & 65535u;
        _323 = 24u;
    }
    uint _327;
    if (_206)
    {
        _327 = _323;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_171)
        {
            frontier_phi_23_24_ladder = _323 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _323 + 8u;
        }
        _327 = frontier_phi_23_24_ladder;
    }
    uint _331 = _169 ? (_327 + 4u) : _327;
    uint _332 = _167 * _162;
    uvec4 _342 = texelFetch(l_geomAttrib_0, int(((_332 + 4u) + _331) >> 2u));
    uint _343 = _342.x;
    float _347 = float(int(uint(int(_343 << 16u) >> int(16u))));
    float _348 = float(int(uint(int(_343) >> int(16u))));
    bool _358 = _118.z == 0u;
    float _394;
    float _395;
    float _396;
    if (_358)
    {
        uint _361 = _159 * 3u;
        uvec3 _370 = uvec3(texelFetch(l_geomPositionBuffer, int(_361)).x, texelFetch(l_geomPositionBuffer, int(_361 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_361 + 2u)).x);
        _394 = uintBitsToFloat(_370.x);
        _395 = uintBitsToFloat(_370.y);
        _396 = uintBitsToFloat(_370.z);
    }
    else
    {
        uint _378 = _159 * 2u;
        uvec2 _384 = uvec2(texelFetch(l_geomPositionBuffer, int(_378)).x, texelFetch(l_geomPositionBuffer, int(_378 + 1u)).x);
        uint _385 = _384.x;
        _394 = unpackHalf2x16(_385).x;
        _395 = unpackHalf2x16(_385 >> 16u).x;
        _396 = unpackHalf2x16(_384.y).x;
    }
    float _432;
    float _433;
    float _434;
    if (_358)
    {
        uint _399 = _161 * 3u;
        uvec3 _408 = uvec3(texelFetch(l_geomPositionBuffer, int(_399)).x, texelFetch(l_geomPositionBuffer, int(_399 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_399 + 2u)).x);
        _432 = uintBitsToFloat(_408.x);
        _433 = uintBitsToFloat(_408.y);
        _434 = uintBitsToFloat(_408.z);
    }
    else
    {
        uint _416 = _161 * 2u;
        uvec2 _422 = uvec2(texelFetch(l_geomPositionBuffer, int(_416)).x, texelFetch(l_geomPositionBuffer, int(_416 + 1u)).x);
        uint _423 = _422.x;
        _432 = unpackHalf2x16(_423).x;
        _433 = unpackHalf2x16(_423 >> 16u).x;
        _434 = unpackHalf2x16(_422.y).x;
    }
    float _470;
    float _471;
    float _472;
    if (_358)
    {
        uint _437 = _162 * 3u;
        uvec3 _446 = uvec3(texelFetch(l_geomPositionBuffer, int(_437)).x, texelFetch(l_geomPositionBuffer, int(_437 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_437 + 2u)).x);
        _470 = uintBitsToFloat(_446.x);
        _471 = uintBitsToFloat(_446.y);
        _472 = uintBitsToFloat(_446.z);
    }
    else
    {
        uint _454 = _162 * 2u;
        uvec2 _460 = uvec2(texelFetch(l_geomPositionBuffer, int(_454)).x, texelFetch(l_geomPositionBuffer, int(_454 + 1u)).x);
        uint _461 = _460.x;
        _470 = unpackHalf2x16(_461).x;
        _471 = unpackHalf2x16(_461 >> 16u).x;
        _472 = unpackHalf2x16(_460.y).x;
    }
    float _475 = (1.0 - hit._m0.x) - hit._m0.y;
    float _509 = (_288 - _229) * 0.00048828125;
    float _511 = (_289 - _230) * 0.00048828125;
    float _514 = (_347 - _229) * 0.00048828125;
    float _515 = (_348 - _230) * 0.00048828125;
    float _537 = _432 - _394;
    float _538 = _433 - _395;
    float _539 = _434 - _396;
    float _542 = fma(_539, gl_ObjectToWorldEXT[2u].x, fma(_538, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _537));
    float _545 = fma(_539, gl_ObjectToWorldEXT[2u].y, fma(_538, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _537));
    float _548 = fma(_539, gl_ObjectToWorldEXT[2u].z, fma(_538, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _537));
    float _549 = _470 - _394;
    float _550 = _471 - _395;
    float _551 = _472 - _396;
    float _554 = fma(_551, gl_ObjectToWorldEXT[2u].x, fma(_550, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _549));
    float _557 = fma(_551, gl_ObjectToWorldEXT[2u].y, fma(_550, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _549));
    float _560 = fma(_551, gl_ObjectToWorldEXT[2u].z, fma(_550, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _549));
    float _561 = (((_288 * hit._m0.x) + (_229 * _475)) + (_347 * hit._m0.y)) * 0.00048828125;
    float _562 = (((_289 * hit._m0.x) + (_230 * _475)) + (_348 * hit._m0.y)) * 0.00048828125;
    float _573 = ((((float(_198) * _475) + (-127.0)) + (float(_261) * hit._m0.x)) + (float(_320) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _575 = ((((float(_199) * _475) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_321) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _576 = ((((float(_200) * _475) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _581 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    uvec2 _598 = uvec2(textureSize(M_Waterfall2_snp_0_Texture2D_1, int(0u)));
    bool _603 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _656;
    if (_603)
    {
        float _614 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _620 = (_560 * _545) - (_557 * _548);
        float _623 = (_554 * _548) - (_560 * _542);
        float _626 = (_557 * _542) - (_554 * _545);
        float _653 = ((log2((((float(_598.y) * 0.5) * float(_598.x)) * abs((_515 * _509) - (_514 * _511))) / (sqrt(((_623 * _623) + (_626 * _626)) + (_620 * _620)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_614 * gl_WorldRayDirectionEXT.x, _614 * gl_WorldRayDirectionEXT.y, _614 * gl_WorldRayDirectionEXT.z), vec3(_573, _575, _576))));
        _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    }
    else
    {
        _656 = 0.0;
    }
    vec4 _660 = textureLod(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * _561) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _562) + cbTextureTilingScale._m0[0u].w), _656);
    uvec2 _686 = uvec2(textureSize(M_Waterfall2_snp_0_Texture2D_2, int(0u)));
    float _737;
    if (_603)
    {
        float _697 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _703 = (_560 * _545) - (_557 * _548);
        float _706 = (_554 * _548) - (_560 * _542);
        float _709 = (_557 * _542) - (_554 * _545);
        float _735 = ((log2((((float(_686.y) * 0.5) * float(_686.x)) * abs((_515 * _509) - (_514 * _511))) / (sqrt(((_706 * _706) + (_709 * _709)) + (_703 * _703)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_697 * gl_WorldRayDirectionEXT.x, _697 * gl_WorldRayDirectionEXT.y, _697 * gl_WorldRayDirectionEXT.z), vec3(_573, _575, _576))));
        _737 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    }
    else
    {
        _737 = 0.0;
    }
    float _751 = cbMtdParam._m0[15u].z * ((((1.0 - ((_475 * 0.0039215688593685626983642578125) * float((texelFetch(l_geomAttrib_0, int(((_213 + 8u) + _212) >> 2u)).x >> 16u) & 255u))) - ((hit._m0.x * 0.0039215688593685626983642578125) * float((texelFetch(l_geomAttrib_0, int(((_273 + 8u) + _272) >> 2u)).x >> 16u) & 255u))) - ((hit._m0.y * 0.0039215688593685626983642578125) * float((texelFetch(l_geomAttrib_0, int(((_332 + 8u) + _331) >> 2u)).x >> 16u) & 255u))) - (_660.z * cbMtdParam._m0[19u].w));
    float _756 = cbMtdParam._m0[14u].y - cbMtdParam._m0[15u].w;
    float _759 = ((-0.0) - cbMtdParam._m0[15u].w) / (isnan(0.001000000047497451305389404296875) ? _756 : (isnan(_756) ? 0.001000000047497451305389404296875 : max(_756, 0.001000000047497451305389404296875)));
    float _855 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _763 = (isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0))) * (_751 + (-0.001000000047497451305389404296875));
    float _779 = ((((((float(texelFetch(l_geomAttrib_0, int((_272 + _273) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_212 + _213) >> 2u)).x >> 24u) * _475)) + (float(texelFetch(l_geomAttrib_0, int((_331 + _332) >> 2u)).x >> 24u) * hit._m0.y)) * 0.007843137718737125396728515625) - (cbMtdParam._m0[13u].z * textureLod(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_581 * cbMtdParam._m0[17u].z) + _561) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_581 * cbMtdParam._m0[17u].w) + _562) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _737).w)) * _751) * ((_763 + 0.001000000047497451305389404296875) + ((0.999000012874603271484375 - _763) * (1.0 - (_660.x * cbMtdParam._m0[19u].y))));
    if (float(_779 >= 1.0) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _56;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _56;
        return;
    }
}


