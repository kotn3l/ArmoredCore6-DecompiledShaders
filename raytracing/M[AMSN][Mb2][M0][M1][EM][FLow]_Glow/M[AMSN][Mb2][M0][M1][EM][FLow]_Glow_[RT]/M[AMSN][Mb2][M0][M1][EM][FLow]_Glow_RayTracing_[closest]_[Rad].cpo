#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1143;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _155 >> 16u;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _157;
        }
        _160 = frontier_phi_3_2_ladder_2;
        _162 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _119.w == 0u;
    bool _173 = _170 || _172;
    uint _174 = _168 * _160;
    uint _175 = _174 + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 16u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 20u;
    }
    uvec4 _209 = texelFetch(l_geomAttrib_0, int((_202 + _174) >> 2u));
    uint _210 = _209.x;
    bool _224 = _169 == 0u;
    uint _225;
    if (_224)
    {
        _225 = _202 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 12u;
        }
        _225 = frontier_phi_9_10_ladder;
    }
    uvec4 _233 = texelFetch(l_geomAttrib_0, int(((_174 + 4u) + (_170 ? (_225 + 4u) : _225)) >> 2u));
    uint _234 = _233.x;
    float _238 = float(int(uint(int(_234 << 16u) >> int(16u))));
    float _239 = float(int(uint(int(_234) >> int(16u))));
    uint _240 = _168 * _162;
    uint _241 = _240 + 12u;
    uint _262;
    uint _263;
    uint _264;
    uint _265;
    if (_173)
    {
        uvec4 _243 = texelFetch(l_geomAttrib_0, int(_241 >> 2u));
        uint _244 = _243.x;
        _262 = _244 & 255u;
        _263 = (_244 >> 8u) & 255u;
        _264 = (_244 >> 16u) & 255u;
        _265 = 16u;
    }
    else
    {
        uint _250 = _241 >> 2u;
        uvec2 _256 = uvec2(texelFetch(l_geomAttrib_0, int(_250)).x, texelFetch(l_geomAttrib_0, int(_250 + 1u)).x);
        uint _257 = _256.x;
        _262 = _257 & 65535u;
        _263 = _257 >> 16u;
        _264 = _256.y & 65535u;
        _265 = 20u;
    }
    uvec4 _271 = texelFetch(l_geomAttrib_0, int((_265 + _240) >> 2u));
    uint _272 = _271.x;
    uint _284;
    if (_224)
    {
        _284 = _265 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _265 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _265 + 12u;
        }
        _284 = frontier_phi_16_17_ladder;
    }
    uvec4 _292 = texelFetch(l_geomAttrib_0, int(((_240 + 4u) + (_170 ? (_284 + 4u) : _284)) >> 2u));
    uint _293 = _292.x;
    float _297 = float(int(uint(int(_293 << 16u) >> int(16u))));
    float _298 = float(int(uint(int(_293) >> int(16u))));
    uint _299 = _168 * _163;
    uint _300 = _299 + 12u;
    uint _321;
    uint _322;
    uint _323;
    uint _324;
    if (_173)
    {
        uvec4 _302 = texelFetch(l_geomAttrib_0, int(_300 >> 2u));
        uint _303 = _302.x;
        _321 = _303 & 255u;
        _322 = (_303 >> 8u) & 255u;
        _323 = (_303 >> 16u) & 255u;
        _324 = 16u;
    }
    else
    {
        uint _309 = _300 >> 2u;
        uvec2 _315 = uvec2(texelFetch(l_geomAttrib_0, int(_309)).x, texelFetch(l_geomAttrib_0, int(_309 + 1u)).x);
        uint _316 = _315.x;
        _321 = _316 & 65535u;
        _322 = _316 >> 16u;
        _323 = _315.y & 65535u;
        _324 = 20u;
    }
    uvec4 _330 = texelFetch(l_geomAttrib_0, int((_324 + _299) >> 2u));
    uint _331 = _330.x;
    uint _343;
    if (_224)
    {
        _343 = _324 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _324 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _324 + 12u;
        }
        _343 = frontier_phi_23_24_ladder;
    }
    uvec4 _351 = texelFetch(l_geomAttrib_0, int(((_299 + 4u) + (_170 ? (_343 + 4u) : _343)) >> 2u));
    uint _352 = _351.x;
    float _356 = float(int(uint(int(_352 << 16u) >> int(16u))));
    float _357 = float(int(uint(int(_352) >> int(16u))));
    bool _359 = _119.z == 0u;
    float _395;
    float _396;
    float _397;
    if (_359)
    {
        uint _362 = _160 * 3u;
        uvec3 _371 = uvec3(texelFetch(l_geomPositionBuffer, int(_362)).x, texelFetch(l_geomPositionBuffer, int(_362 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_362 + 2u)).x);
        _395 = uintBitsToFloat(_371.x);
        _396 = uintBitsToFloat(_371.y);
        _397 = uintBitsToFloat(_371.z);
    }
    else
    {
        uint _379 = _160 * 2u;
        uvec2 _385 = uvec2(texelFetch(l_geomPositionBuffer, int(_379)).x, texelFetch(l_geomPositionBuffer, int(_379 + 1u)).x);
        uint _386 = _385.x;
        _395 = unpackHalf2x16(_386).x;
        _396 = unpackHalf2x16(_386 >> 16u).x;
        _397 = unpackHalf2x16(_385.y).x;
    }
    float _433;
    float _434;
    float _435;
    if (_359)
    {
        uint _400 = _162 * 3u;
        uvec3 _409 = uvec3(texelFetch(l_geomPositionBuffer, int(_400)).x, texelFetch(l_geomPositionBuffer, int(_400 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_400 + 2u)).x);
        _433 = uintBitsToFloat(_409.x);
        _434 = uintBitsToFloat(_409.y);
        _435 = uintBitsToFloat(_409.z);
    }
    else
    {
        uint _417 = _162 * 2u;
        uvec2 _423 = uvec2(texelFetch(l_geomPositionBuffer, int(_417)).x, texelFetch(l_geomPositionBuffer, int(_417 + 1u)).x);
        uint _424 = _423.x;
        _433 = unpackHalf2x16(_424).x;
        _434 = unpackHalf2x16(_424 >> 16u).x;
        _435 = unpackHalf2x16(_423.y).x;
    }
    float _471;
    float _472;
    float _473;
    if (_359)
    {
        uint _438 = _163 * 3u;
        uvec3 _447 = uvec3(texelFetch(l_geomPositionBuffer, int(_438)).x, texelFetch(l_geomPositionBuffer, int(_438 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_438 + 2u)).x);
        _471 = uintBitsToFloat(_447.x);
        _472 = uintBitsToFloat(_447.y);
        _473 = uintBitsToFloat(_447.z);
    }
    else
    {
        uint _455 = _163 * 2u;
        uvec2 _461 = uvec2(texelFetch(l_geomPositionBuffer, int(_455)).x, texelFetch(l_geomPositionBuffer, int(_455 + 1u)).x);
        uint _462 = _461.x;
        _471 = unpackHalf2x16(_462).x;
        _472 = unpackHalf2x16(_462 >> 16u).x;
        _473 = unpackHalf2x16(_461.y).x;
    }
    float _476 = (1.0 - hit._m0.x) - hit._m0.y;
    float _510 = (_297 - _238) * 0.00048828125;
    float _512 = (_298 - _239) * 0.00048828125;
    float _515 = (_356 - _238) * 0.00048828125;
    float _516 = (_357 - _239) * 0.00048828125;
    float _538 = _433 - _395;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _543 = fma(_540, gl_ObjectToWorldEXT[2u].x, fma(_539, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _538));
    float _546 = fma(_540, gl_ObjectToWorldEXT[2u].y, fma(_539, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _538));
    float _549 = fma(_540, gl_ObjectToWorldEXT[2u].z, fma(_539, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _538));
    float _550 = _471 - _395;
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _555 = fma(_552, gl_ObjectToWorldEXT[2u].x, fma(_551, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _550));
    float _558 = fma(_552, gl_ObjectToWorldEXT[2u].y, fma(_551, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _550));
    float _561 = fma(_552, gl_ObjectToWorldEXT[2u].z, fma(_551, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _550));
    float _562 = (((_297 * hit._m0.x) + (_238 * _476)) + (_356 * hit._m0.y)) * 0.00048828125;
    float _563 = (((_298 * hit._m0.x) + (_239 * _476)) + (_357 * hit._m0.y)) * 0.00048828125;
    float _567 = (((float(_199) * _476) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_321) * hit._m0.y);
    float _570 = (((float(_200) * _476) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y);
    float _573 = (((float(_201) * _476) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _574 = _567 * 0.0078740157186985015869140625;
    float _576 = _570 * 0.0078740157186985015869140625;
    float _577 = _573 * 0.0078740157186985015869140625;
    float _590 = ((((float(_210 & 255u) * _476) + (-127.0)) + (float(_272 & 255u) * hit._m0.x)) + (float(_331 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _591 = ((((float((_210 >> 8u) & 255u) * _476) + (-127.0)) + (float((_272 >> 8u) & 255u) * hit._m0.x)) + (float((_331 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _592 = ((((float((_210 >> 16u) & 255u) * _476) + (-127.0)) + (float((_272 >> 16u) & 255u) * hit._m0.x)) + (float((_331 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float(_210 >> 24u) * _476) + (-127.0)) + (float(_272 >> 24u) * hit._m0.x)) + (float(_331 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _603 = ((_591 * _577) - (_592 * _576)) * _593;
    float _604 = ((_592 * _574) - (_590 * _577)) * _593;
    float _605 = ((_590 * _576) - (_591 * _574)) * _593;
    float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
    uvec2 _630 = uvec2(textureSize(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, int(0u)));
    bool _635 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _688;
    if (_635)
    {
        float _646 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _652 = (_561 * _546) - (_558 * _549);
        float _655 = (_555 * _549) - (_561 * _543);
        float _658 = (_558 * _543) - (_555 * _546);
        float _685 = ((log2((((float(_630.y) * 0.5) * float(_630.x)) * abs((_516 * _510) - (_515 * _512))) / (sqrt(((_655 * _655) + (_658 * _658)) + (_652 * _652)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_646 * gl_WorldRayDirectionEXT.x, _646 * gl_WorldRayDirectionEXT.y, _646 * gl_WorldRayDirectionEXT.z), vec3(_574, _576, _577))));
        _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    }
    else
    {
        _688 = 0.0;
    }
    vec4 _692 = textureLod(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _562) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _563) + cbTextureTilingScale._m0[1u].w), _688);
    float _697 = _692.x * cbMtdParam._m0[9u].x;
    float _698 = _692.y * cbMtdParam._m0[9u].y;
    float _699 = _692.z * cbMtdParam._m0[9u].z;
    uvec2 _711 = uvec2(textureSize(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, int(0u)));
    float _715 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _716 = _715 * gl_WorldRayDirectionEXT.x;
    float _717 = _715 * gl_WorldRayDirectionEXT.y;
    float _718 = _715 * gl_WorldRayDirectionEXT.z;
    float _762;
    if (_635)
    {
        float _728 = (_561 * _546) - (_558 * _549);
        float _731 = (_555 * _549) - (_561 * _543);
        float _734 = (_558 * _543) - (_555 * _546);
        float _760 = ((log2((((float(_711.y) * 0.5) * float(_711.x)) * abs((_516 * _510) - (_515 * _512))) / (sqrt(((_731 * _731) + (_734 * _734)) + (_728 * _728)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_716, _717, _718), vec3(_574, _576, _577))));
        _762 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    }
    else
    {
        _762 = 0.0;
    }
    vec4 _765 = textureLod(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _562) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _563) + cbTextureTilingScale._m0[3u].w), _762);
    float _769 = _765.z;
    float _772 = (_765.x * 2.0) + (-1.0);
    float _774 = (_765.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_772, _774), vec2(_772, _774));
    float _1229 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0))));
    float _783 = fma(_780, _574, fma(_774, _590, (_609 * _603) * _772));
    float _786 = fma(_780, _576, fma(_774, _591, (_609 * _604) * _772));
    float _789 = fma(_780, _577, fma(_774, _592, (_609 * _605) * _772));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _808 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _809 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _810 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _811 = (-0.0) - _716;
    float _813 = (-0.0) - _717;
    float _814 = (-0.0) - _718;
    float _820 = float(gl_LaunchIDEXT.x);
    float _821 = float(gl_LaunchIDEXT.y);
    float _824 = float(gl_LaunchSizeEXT.x);
    float _838 = fract(fract(sin(dot(vec2(_820 / _824, _821 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _851 = fract(fract(sin(dot(vec2((_820 + 128.0) / _824, (_821 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _861 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _862 = _861.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _862, _861.w, _862, vec3(_808, _809, _810), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (_61._m0 == 0u)
    {
        float _883 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_794, _795, _796));
        float _1240 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _886 = isnan(1.0) ? _1240 : (isnan(_1240) ? 1.0 : min(_1240, 1.0));
        float _905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _769) * 0.949999988079071044921875);
        float _906 = _905 * _905;
        float _907 = g_sceneCB._m0[4u].x - _716;
        float _908 = g_sceneCB._m0[4u].y - _717;
        float _909 = g_sceneCB._m0[4u].z - _718;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _914 = _913 * _907;
        float _915 = _913 * _908;
        float _916 = _913 * _909;
        float _917 = dot(vec3(_794, _795, _796), vec3(g_sceneCB._m0[4u].xyz));
        float _1251 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _920 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
        float _921 = dot(vec3(_794, _795, _796), vec3(_811, _813, _814));
        float _1262 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _924 = isnan(1.0) ? _1262 : (isnan(_1262) ? 1.0 : min(_1262, 1.0));
        float _925 = dot(vec3(_794, _795, _796), vec3(_914, _915, _916));
        float _1273 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _928 = isnan(1.0) ? _1273 : (isnan(_1273) ? 1.0 : min(_1273, 1.0));
        float _929 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_914, _915, _916));
        float _1284 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _906 * _906;
        float _937 = ((_928 * _928) * (_933 + (-1.0))) + 1.0;
        float _949 = (exp2(log2(1.0 - (isnan(1.0) ? _1284 : (isnan(_1284) ? 1.0 : min(_1284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _951 = 1.0 - _906;
        float _962 = (0.5 / (((_924 * ((_920 * _951) + _906)) + 9.9999999392252902907785028219223e-09) + (((_924 * _951) + _906) * _920))) * _920;
        float _1295 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _964 = (isnan(1.0) ? _1295 : (isnan(_1295) ? 1.0 : min(_1295, 1.0))) * (_933 / ((_937 * _937) * 3.141590118408203125));
        _971 = ((_697 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _886;
        _972 = ((_698 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _886;
        _973 = ((_699 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _886;
        _974 = (_949 * g_sceneCB._m0[5u].x) * _964;
        _975 = (_949 * g_sceneCB._m0[5u].y) * _964;
        _976 = (_949 * g_sceneCB._m0[5u].z) * _964;
    }
    else
    {
        _971 = 0.0;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    bool _978 = abs(_795) < 0.89999997615814208984375;
    float _980 = float(_978);
    float _981 = _978 ? 0.0 : 1.0;
    float _984 = (_980 * _796) - (_981 * _795);
    float _985 = _981 * _794;
    float _987 = (-0.0) - (_794 * _980);
    float _991 = inversesqrt(dot(vec3(_984, _985, _987), vec3(_984, _985, _987)));
    float _992 = _984 * _991;
    float _993 = _985 * _991;
    float _994 = _991 * _987;
    float _997 = (_993 * _796) - (_994 * _795);
    float _1000 = (_994 * _794) - (_992 * _796);
    float _1003 = (_992 * _795) - (_993 * _794);
    float _1005;
    float _1013;
    float _1004 = 0.0;
    uint _1006 = 0u;
    float _1010;
    bool _1012;
    for (;;)
    {
        _1010 = (float(_1006) + _838) * 0.03125;
        _1012 = _1006 == 0u;
        float frontier_phi_43_pred;
        if (_1012)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1148;
            float _1149;
            uint _1151;
            _1148 = 0.0;
            _1149 = 0.5;
            _1151 = _1006;
            float _1014;
            for (;;)
            {
                _1014 = ((_1151 & 1u) != 0u) ? (_1149 + _1148) : _1148;
                uint _1152 = _1151 >> 1u;
                if (_1152 == 0u)
                {
                    break;
                }
                else
                {
                    _1148 = _1014;
                    _1149 *= 0.5;
                    _1151 = _1152;
                }
            }
            frontier_phi_43_pred = _1014;
        }
        _1013 = frontier_phi_43_pred;
        float _1015 = _1013 + _851;
        float _1019 = sqrt(_1010);
        float _1020 = ((_1015 > 1.0) ? (_1015 + (-1.0)) : _1015) * 6.283185482025146484375;
        float _1023 = cos(_1020) * _1019;
        float _1025 = sin(_1020) * _1019;
        float _1027 = sqrt(1.0 - _1010);
        float _1040 = ((_1027 * _794) + (_1023 * _997)) + (_1025 * _992);
        float _1041 = ((_1027 * _795) + (_1023 * _1000)) + (_1025 * _993);
        float _1042 = ((_1027 * _796) + (_1023 * _1003)) + (_1025 * _994);
        _60._m0 = 1u;
        uvec4 _1046 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1047 = _1046.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1047, _1046.w, _1047, vec3(_808, _809, _810), 9.9999997473787516355514526367188e-05, vec3(_1040, _1041, _1042), 10000.0, 1);
        float _1053 = dot(vec3(_794, _795, _796), vec3(_1040, _1041, _1042));
        float _1306 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1056 = isnan(1.0) ? _1306 : (isnan(_1306) ? 1.0 : min(_1306, 1.0));
        _1005 = ((float(_60._m0 == 0u) * _1056) / (_1056 * 0.3183098733425140380859375)) + _1004;
        uint _1007 = _1006 + 1u;
        if (_1007 == 32u)
        {
            break;
        }
        else
        {
            _1004 = _1005;
            _1006 = _1007;
            continue;
        }
    }
    float _1064 = _1005 * 0.009947183541953563690185546875;
    float _1069 = dot(vec3(_716, _717, _718), vec3(_794, _795, _796)) * 2.0;
    vec4 _1083 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_716 - (_1069 * _794), _717 - (_1069 * _795), _718 - (_1069 * _796)), 4.0 - (_769 * 4.0));
    float _1088 = dot(vec3(_811, _813, _814), vec3(_794, _795, _796));
    float _1317 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1097 = (exp2(log2(1.0 - (isnan(1.0) ? _1317 : (isnan(_1317) ? 1.0 : min(_1317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1103 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_794, _795, _796), 0.0);
    float _1114 = (_974 + _971) + (((_1103.x * _697) + (_1097 * _1083.x)) * _1064);
    float _1118 = (_975 + _972) + (((_1103.y * _698) + (_1097 * _1083.y)) * _1064);
    float _1122 = (_976 + _973) + (((_1103.z * _699) + (_1097 * _1083.z)) * _1064);
    float _1328 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1339 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1350 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    bool _1131 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1142;
    _1142.x = _1131 ? ((_567 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0)));
    _1142.y = _1131 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0)));
    _1142.z = _1131 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1350 : (isnan(_1350) ? 1.0 : min(_1350, 1.0)));
    payload._m0 = _1142;
}


