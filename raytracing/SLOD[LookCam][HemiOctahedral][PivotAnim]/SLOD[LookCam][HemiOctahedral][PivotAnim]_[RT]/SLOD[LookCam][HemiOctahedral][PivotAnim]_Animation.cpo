#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CB_CS_ANIMATIONUBO
{
    vec4 _m0[9];
} CB_CS_ANIMATION;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 30) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer outPositionBuffer;

uint _102;
uint _465;

void main()
{
    uvec4 _54 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
    uint _59 = (((_54.z * gl_WorkGroupID.y) + gl_WorkGroupID.x) << 6u) + gl_LocalInvocationIndex;
    if (_59 < _54.x)
    {
        uint _71 = floatBitsToUint(CB_CS_ANIMATION._m0[1u]).x * _59;
        uint _72 = _71 >> 2u;
        uvec3 _82 = uvec3(texelFetch(l_geomAttrib_0, int(_72)).x, texelFetch(l_geomAttrib_0, int(_72 + 1u)).x, texelFetch(l_geomAttrib_0, int(_72 + 2u)).x);
        float _86 = uintBitsToFloat(_82.x);
        float _87 = uintBitsToFloat(_82.y);
        float _88 = uintBitsToFloat(_82.z);
        uvec4 _91 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
        uint _94 = _71 + 12u;
        uint _111;
        uint _112;
        if (_91.y == 0u)
        {
            _111 = texelFetch(l_geomAttrib_0, int(_94 >> 2u)).x >> 24u;
            _112 = 28u;
        }
        else
        {
            _111 = uvec2(_102, texelFetch(l_geomAttrib_0, int((_94 >> 2u) + 1u)).x).y >> 16u;
            _112 = 32u;
        }
        uint _117 = (_112 + _71) >> 2u;
        uvec2 _123 = uvec2(texelFetch(l_geomAttrib_0, int(_117)).x, texelFetch(l_geomAttrib_0, int(_117 + 1u)).x);
        uint _124 = _123.x;
        vec2 _130 = unpackHalf2x16(_124 & 65535u);
        float _131 = _130.x;
        vec2 _133 = unpackHalf2x16(_124 >> 16u);
        float _134 = _133.x;
        vec2 _136 = unpackHalf2x16(_123.y & 65535u);
        float _137 = _136.x;
        uvec4 _141 = floatBitsToUint(CB_CS_ANIMATION._m0[8u]);
        uint _143 = min(_141.z, 8u);
        uint _146 = uint(float(_111)) * 3u;
        uint _154 = _146 + 1u;
        uint _161 = _146 + 2u;
        float _171 = fma(_88, cbObjMatrix._m0[_146].z, fma(_87, cbObjMatrix._m0[_146].y, cbObjMatrix._m0[_146].x * _86)) + cbObjMatrix._m0[_146].w;
        float _175 = fma(_88, cbObjMatrix._m0[_154].z, fma(_87, cbObjMatrix._m0[_154].y, cbObjMatrix._m0[_154].x * _86)) + cbObjMatrix._m0[_154].w;
        float _179 = fma(_88, cbObjMatrix._m0[_161].z, fma(_87, cbObjMatrix._m0[_161].y, cbObjMatrix._m0[_161].x * _86)) + cbObjMatrix._m0[_161].w;
        float _207 = fma(_137, CB_CS_ANIMATION._m0[2u].z, fma(_134, CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[2u].x * _131));
        float _210 = fma(_137, CB_CS_ANIMATION._m0[3u].z, fma(_134, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[3u].x * _131));
        float _213 = fma(_137, CB_CS_ANIMATION._m0[4u].z, fma(_134, CB_CS_ANIMATION._m0[4u].y, CB_CS_ANIMATION._m0[4u].x * _131));
        float _215 = (_171 - CB_CS_ANIMATION._m0[2u].w) - _207;
        float _217 = (_175 - CB_CS_ANIMATION._m0[3u].w) - _210;
        float _219 = (_179 - CB_CS_ANIMATION._m0[4u].w) - _213;
        float _227 = _207 + CB_CS_ANIMATION._m0[2u].w;
        float _228 = _210 + CB_CS_ANIMATION._m0[3u].w;
        float _229 = _213 + CB_CS_ANIMATION._m0[4u].w;
        float _231 = ((cbMtdParam._m0[9u].x * _131) + cbPerFrame._m0[22u].x) + (sqrt(((_217 * _217) + (_215 * _215)) + (_219 * _219)) * cbMtdParam._m0[9u].z);
        uint _232 = _141.y;
        float _233;
        float _236;
        float _238;
        if (_143 == 0u)
        {
            _233 = 0.0;
            _236 = 0.0;
            _238 = 0.0;
        }
        else
        {
            uint _364 = _141.x;
            float _235;
            float _237;
            float _239;
            float _537;
            float _539;
            float _541;
            float _398 = 0.0;
            float _399 = 0.0;
            float _400 = 0.0;
            uint _401 = _364;
            uint _403 = 0u;
            float _438;
            float _457;
            vec4 _470;
            float _471;
            float _472;
            float _485;
            float _486;
            float _487;
            float _504;
            float _505;
            float _506;
            float _507;
            bool _508;
            bool _509;
            bool _510;
            float _511;
            float _512;
            float _513;
            float _514;
            float _515;
            float _516;
            float _517;
            bool _520;
            for (;;)
            {
                uint _405 = _401 & 255u;
                uint _407 = _405 * 24u;
                uvec3 _416 = uvec3(texelFetch(g_forceParam, int(_407)).x, texelFetch(g_forceParam, int(_407 + 1u)).x, texelFetch(g_forceParam, int(_407 + 2u)).x);
                uint _421 = (_405 * 24u) + 4u;
                vec4 _434 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_421)).x, texelFetch(g_forceParam, int(_421 + 1u)).x, texelFetch(g_forceParam, int(_421 + 2u)).x, texelFetch(g_forceParam, int(_421 + 3u)).x));
                _438 = _434.w;
                uint _440 = (_405 * 24u) + 8u;
                vec4 _453 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_440)).x, texelFetch(g_forceParam, int(_440 + 1u)).x, texelFetch(g_forceParam, int(_440 + 2u)).x, texelFetch(g_forceParam, int(_440 + 3u)).x));
                _457 = _453.w;
                uint _459 = (_405 * 24u) + 12u;
                _470 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_459)).x, texelFetch(g_forceParam, int(_459 + 1u)).x, _465, texelFetch(g_forceParam, int(_459 + 3u)).x));
                _471 = _470.x;
                _472 = _470.w;
                uint _474 = (_405 * 24u) + 16u;
                vec3 _484 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_474)).x, texelFetch(g_forceParam, int(_474 + 1u)).x, texelFetch(g_forceParam, int(_474 + 2u)).x));
                _485 = _484.x;
                _486 = _484.y;
                _487 = _484.z;
                uint _490 = (_405 * 24u) + 20u;
                vec4 _503 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_490)).x, texelFetch(g_forceParam, int(_490 + 1u)).x, texelFetch(g_forceParam, int(_490 + 2u)).x, texelFetch(g_forceParam, int(_490 + 3u)).x));
                _504 = _503.x;
                _505 = _503.y;
                _506 = _503.z;
                _507 = _503.w;
                _508 = _416.x == 1u;
                _509 = _416.y == 1u;
                _510 = _416.z == 1u;
                _511 = _227 - _434.x;
                _512 = _228 - _434.y;
                _513 = _229 - _434.z;
                _514 = _508 ? _453.x : _511;
                _515 = _508 ? _453.y : _512;
                _516 = _508 ? _453.z : _513;
                _517 = dot(vec3(_514, _515, _516), vec3(_514, _515, _516));
                _520 = _517 > 0.0;
                float frontier_phi_12_pred;
                float frontier_phi_12_pred_1;
                float frontier_phi_12_pred_2;
                if (_520)
                {
                    float _527 = sqrt(((_511 * _511) + (_512 * _512)) + (_513 * _513));
                    float _528 = inversesqrt(_517);
                    float _529 = _528 * _514;
                    float _530 = _528 * _515;
                    float _531 = _528 * _516;
                    float _535 = 1.0 - (_527 / (isnan(0.001000000047497451305389404296875) ? _470.y : (isnan(_470.y) ? 0.001000000047497451305389404296875 : max(_470.y, 0.001000000047497451305389404296875))));
                    float _696 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
                    float _536 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
                    float _562;
                    if (_510)
                    {
                        float _549 = inversesqrt(dot(vec3(_511, _512, _513), vec3(_511, _512, _513)));
                        float _558 = (dot(vec3(_529, _530, _531), vec3(_549 * _511, _549 * _512, _549 * _513)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _707 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
                        _562 = (isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0))) * _536;
                    }
                    else
                    {
                        _562 = _536;
                    }
                    float frontier_phi_12_pred_14_ladder;
                    float frontier_phi_12_pred_14_ladder_1;
                    float frontier_phi_12_pred_14_ladder_2;
                    if (_562 > 0.0)
                    {
                        bool _565 = _508 && (!_510);
                        float _571 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _471 : (isnan(_471) ? 0.001000000047497451305389404296875 : max(_471, 0.001000000047497451305389404296875)));
                        float _573 = dot(vec2(_529, _531), vec2(_511, _513));
                        float _581 = sin(((_571 * _231) + (_565 ? 0.0 : (_527 * (-4.0)))) - ((_571 * float(_565)) * _573));
                        float _585 = _508 ? ((_472 * _457) * _581) : 0.0;
                        float _627;
                        if (_509)
                        {
                            float _588 = _485 * 2.0;
                            float _590 = _505 + _506;
                            float _591 = _590 + _507;
                            float _599 = dot(vec2(_531, (-0.0) - _529), vec2(_511, _513)) / _588;
                            float _603 = fract(abs(_599));
                            float _614 = _504 * _231;
                            float _618 = _591 * _504;
                            float _620 = (((_614 - (_485 * 0.25)) - _573) - (sin(((_485 * 12.56636810302734375) * ((_599 >= ((-0.0) - _599)) ? _603 : ((-0.0) - _603))) / _588) * (isnan(5.0) ? _485 : (isnan(_485) ? 5.0 : min(_485, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _618 : (isnan(_618) ? 0.001000000047497451305389404296875 : max(_618, 0.001000000047497451305389404296875)));
                            float _621 = fract(_620);
                            float _624 = (_620 < 0.0) ? (1.0 - _621) : _621;
                            float _625 = _505 / _591;
                            float _644;
                            if (_624 < _625)
                            {
                                _644 = _624 / _625;
                            }
                            else
                            {
                                float frontier_phi_21_20_ladder;
                                if (_624 < (_590 / _591))
                                {
                                    frontier_phi_21_20_ladder = 1.0 - (((_624 - _625) * _591) / _506);
                                }
                                else
                                {
                                    frontier_phi_21_20_ladder = 0.0;
                                }
                                _644 = frontier_phi_21_20_ladder;
                            }
                            _627 = (_644 * _487) * abs(sin((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _485 : (isnan(_485) ? 0.001000000047497451305389404296875 : max(_485, 0.001000000047497451305389404296875)))) * (_614 - _573)) + _486);
                        }
                        else
                        {
                            _627 = 0.0;
                        }
                        float _630 = ((_581 * _457) + _438) + _627;
                        float _637 = _562 * 0.0500000007450580596923828125;
                        frontier_phi_12_pred_14_ladder = _637 * ((_630 * _529) - (_585 * _531));
                        frontier_phi_12_pred_14_ladder_1 = ((_530 * 0.0500000007450580596923828125) * _562) * _630;
                        frontier_phi_12_pred_14_ladder_2 = _637 * ((_630 * _531) + (_585 * _529));
                    }
                    else
                    {
                        frontier_phi_12_pred_14_ladder = 0.0;
                        frontier_phi_12_pred_14_ladder_1 = 0.0;
                        frontier_phi_12_pred_14_ladder_2 = 0.0;
                    }
                    frontier_phi_12_pred = frontier_phi_12_pred_14_ladder;
                    frontier_phi_12_pred_1 = frontier_phi_12_pred_14_ladder_1;
                    frontier_phi_12_pred_2 = frontier_phi_12_pred_14_ladder_2;
                }
                else
                {
                    frontier_phi_12_pred = 0.0;
                    frontier_phi_12_pred_1 = 0.0;
                    frontier_phi_12_pred_2 = 0.0;
                }
                _537 = frontier_phi_12_pred;
                _539 = frontier_phi_12_pred_1;
                _541 = frontier_phi_12_pred_2;
                _235 = _537 + _398;
                _237 = _539 + _399;
                _239 = _541 + _400;
                uint _404 = _403 + 1u;
                if (_404 == _143)
                {
                    break;
                }
                else
                {
                    _398 = _235;
                    _399 = _237;
                    _400 = _239;
                    _401 = (_403 != 3u) ? (_401 >> 8u) : _232;
                    _403 = _404;
                    continue;
                }
            }
            _233 = _235;
            _236 = _237;
            _238 = _239;
        }
        float _245 = sqrt(((_236 * _236) + (_233 * _233)) + (_238 * _238));
        bool _246 = _245 < 0.00011000000085914507508277893066406;
        float _252 = inversesqrt(dot(vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y), vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y)));
        float _253 = _252 * CB_CS_ANIMATION._m0[2u].y;
        float _254 = _252 * CB_CS_ANIMATION._m0[3u].y;
        float _255 = _252 * CB_CS_ANIMATION._m0[4u].y;
        float _259 = inversesqrt(dot(vec3(_233, _236, _238), vec3(_233, _236, _238)));
        float _260 = _259 * _233;
        float _261 = _259 * _236;
        float _262 = _259 * _238;
        float _265 = (_262 * _254) - (_261 * _255);
        float _268 = (_260 * _255) - (_262 * _253);
        float _271 = (_261 * _253) - (_260 * _254);
        float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
        float _276 = _265 * _275;
        float _277 = _268 * _275;
        float _278 = _271 * _275;
        float _282 = log2(_245 + 1.0) * cbMtdParam._m0[9u].w;
        float _286 = dot(vec3(_276, _277, _278), vec3(_171 - _227, _175 - _228, _179 - _229));
        float _292 = (_286 * _276) + _227;
        float _293 = (_286 * _277) + _228;
        float _294 = (_286 * _278) + _229;
        float _295 = _171 - _292;
        float _296 = _175 - _293;
        float _297 = _179 - _294;
        float _307 = sin(_282);
        float _308 = cos(_282);
        float _327 = (_246 ? 0.0 : (((_292 - _171) + (_308 * _295)) + (((_297 * _277) - (_296 * _278)) * _307))) + _171;
        float _328 = (_246 ? 0.0 : (((_293 - _175) + (((_295 * _278) - (_297 * _276)) * _307)) + (_308 * _296))) + _175;
        float _329 = (_246 ? 0.0 : (((_294 - _179) + (((_296 * _276) - (_295 * _277)) * _307)) + (_308 * _297))) + _179;
        float _353 = fma(_329, CB_CS_ANIMATION._m0[5u].z, fma(_328, CB_CS_ANIMATION._m0[5u].y, _327 * CB_CS_ANIMATION._m0[5u].x)) + CB_CS_ANIMATION._m0[5u].w;
        float _357 = fma(_329, CB_CS_ANIMATION._m0[6u].z, fma(_328, CB_CS_ANIMATION._m0[6u].y, _327 * CB_CS_ANIMATION._m0[6u].x)) + CB_CS_ANIMATION._m0[6u].w;
        float _361 = fma(_329, CB_CS_ANIMATION._m0[7u].z, fma(_328, CB_CS_ANIMATION._m0[7u].y, _327 * CB_CS_ANIMATION._m0[7u].x)) + CB_CS_ANIMATION._m0[7u].w;
        if (_91.w == 0u)
        {
            uint _375 = _59 * 3u;
            imageStore(outPositionBuffer, int(_375), uvec4(uint(float(floatBitsToUint(_353)))));
            imageStore(outPositionBuffer, int(_375 + 1u), uvec4(uint(float(floatBitsToUint(_357)))));
            imageStore(outPositionBuffer, int(_375 + 2u), uvec4(uint(float(floatBitsToUint(_361)))));
        }
        else
        {
            uint _394 = _59 * 2u;
            imageStore(outPositionBuffer, int(_394), uvec4((packHalf2x16(vec2(_357, 0.0)) << 16u) | packHalf2x16(vec2(_353, 0.0))));
            imageStore(outPositionBuffer, int(_394 + 1u), uvec4((packHalf2x16(vec2(0.0)) << 16u) | packHalf2x16(vec2(_361, 0.0))));
        }
    }
}


