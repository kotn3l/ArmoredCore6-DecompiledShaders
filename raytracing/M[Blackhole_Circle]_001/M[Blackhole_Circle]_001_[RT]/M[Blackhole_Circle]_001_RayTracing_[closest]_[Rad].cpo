#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Blackhole_Circle_001_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Blackhole_Circle_001_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1026;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _167;
    uint _169;
    uint _170;
    if (_126.x == 0u)
    {
        uint _135 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_127 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _161 & 65535u;
            frontier_phi_3_2_ladder_2 = _164;
        }
        else
        {
            frontier_phi_3_2_ladder = _162 >> 16u;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _165;
        }
        _167 = frontier_phi_3_2_ladder_1;
        _169 = frontier_phi_3_2_ladder_2;
        _170 = frontier_phi_3_2_ladder;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _174.z;
    bool _177 = _176 != 0u;
    bool _179 = _126.w == 0u;
    bool _180 = _177 || _179;
    uint _182 = (_175 * _167) + 12u;
    uint _206;
    uint _207;
    uint _208;
    uint _209;
    if (_180)
    {
        uvec4 _185 = texelFetch(l_geomAttrib_0, int(_182 >> 2u));
        uint _186 = _185.x;
        _206 = _186 & 255u;
        _207 = (_186 >> 8u) & 255u;
        _208 = (_186 >> 16u) & 255u;
        _209 = 20u;
    }
    else
    {
        uint _194 = _182 >> 2u;
        uvec2 _200 = uvec2(texelFetch(l_geomAttrib_0, int(_194)).x, texelFetch(l_geomAttrib_0, int(_194 + 1u)).x);
        uint _201 = _200.x;
        _206 = _201 & 65535u;
        _207 = _201 >> 16u;
        _208 = _200.y & 65535u;
        _209 = 24u;
    }
    bool _215 = _176 == 0u;
    uint _216;
    if (_215)
    {
        _216 = _209;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_179)
        {
            frontier_phi_9_10_ladder = _209 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _209 + 8u;
        }
        _216 = frontier_phi_9_10_ladder;
    }
    uvec4 _227 = texelFetch(l_geomAttrib_0, int((((_175 * _167) + 4u) + (_177 ? (_216 + 4u) : _216)) >> 2u));
    uint _228 = _227.x;
    float _232 = float(int(uint(int(_228 << 16u) >> int(16u))));
    float _233 = float(int(uint(int(_228) >> int(16u))));
    uint _235 = (_175 * _169) + 12u;
    uint _256;
    uint _257;
    uint _258;
    uint _259;
    if (_180)
    {
        uvec4 _237 = texelFetch(l_geomAttrib_0, int(_235 >> 2u));
        uint _238 = _237.x;
        _256 = _238 & 255u;
        _257 = (_238 >> 8u) & 255u;
        _258 = (_238 >> 16u) & 255u;
        _259 = 20u;
    }
    else
    {
        uint _244 = _235 >> 2u;
        uvec2 _250 = uvec2(texelFetch(l_geomAttrib_0, int(_244)).x, texelFetch(l_geomAttrib_0, int(_244 + 1u)).x);
        uint _251 = _250.x;
        _256 = _251 & 65535u;
        _257 = _251 >> 16u;
        _258 = _250.y & 65535u;
        _259 = 24u;
    }
    uint _263;
    if (_215)
    {
        _263 = _259;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_179)
        {
            frontier_phi_16_17_ladder = _259 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _259 + 8u;
        }
        _263 = frontier_phi_16_17_ladder;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((((_175 * _169) + 4u) + (_177 ? (_263 + 4u) : _263)) >> 2u));
    uint _273 = _272.x;
    float _277 = float(int(uint(int(_273 << 16u) >> int(16u))));
    float _278 = float(int(uint(int(_273) >> int(16u))));
    uint _280 = (_175 * _170) + 12u;
    uint _301;
    uint _302;
    uint _303;
    uint _304;
    if (_180)
    {
        uvec4 _282 = texelFetch(l_geomAttrib_0, int(_280 >> 2u));
        uint _283 = _282.x;
        _301 = _283 & 255u;
        _302 = (_283 >> 8u) & 255u;
        _303 = (_283 >> 16u) & 255u;
        _304 = 20u;
    }
    else
    {
        uint _289 = _280 >> 2u;
        uvec2 _295 = uvec2(texelFetch(l_geomAttrib_0, int(_289)).x, texelFetch(l_geomAttrib_0, int(_289 + 1u)).x);
        uint _296 = _295.x;
        _301 = _296 & 65535u;
        _302 = _296 >> 16u;
        _303 = _295.y & 65535u;
        _304 = 24u;
    }
    uint _308;
    if (_215)
    {
        _308 = _304;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_179)
        {
            frontier_phi_23_24_ladder = _304 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _304 + 8u;
        }
        _308 = frontier_phi_23_24_ladder;
    }
    uvec4 _317 = texelFetch(l_geomAttrib_0, int((((_175 * _170) + 4u) + (_177 ? (_308 + 4u) : _308)) >> 2u));
    uint _318 = _317.x;
    float _322 = float(int(uint(int(_318 << 16u) >> int(16u))));
    float _323 = float(int(uint(int(_318) >> int(16u))));
    bool _325 = _126.z == 0u;
    float _361;
    float _362;
    float _363;
    if (_325)
    {
        uint _328 = _167 * 3u;
        uvec3 _337 = uvec3(texelFetch(l_geomPositionBuffer, int(_328)).x, texelFetch(l_geomPositionBuffer, int(_328 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_328 + 2u)).x);
        _361 = uintBitsToFloat(_337.x);
        _362 = uintBitsToFloat(_337.y);
        _363 = uintBitsToFloat(_337.z);
    }
    else
    {
        uint _345 = _167 * 2u;
        uvec2 _351 = uvec2(texelFetch(l_geomPositionBuffer, int(_345)).x, texelFetch(l_geomPositionBuffer, int(_345 + 1u)).x);
        uint _352 = _351.x;
        _361 = unpackHalf2x16(_352).x;
        _362 = unpackHalf2x16(_352 >> 16u).x;
        _363 = unpackHalf2x16(_351.y).x;
    }
    float _399;
    float _400;
    float _401;
    if (_325)
    {
        uint _366 = _169 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _169 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_325)
    {
        uint _404 = _170 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _170 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _442 = (1.0 - hit._m0.x) - hit._m0.y;
    float _464 = (_277 - _232) * 0.00048828125;
    float _466 = (_278 - _233) * 0.00048828125;
    float _469 = (_322 - _232) * 0.00048828125;
    float _470 = (_323 - _233) * 0.00048828125;
    float _492 = _399 - _361;
    float _493 = _400 - _362;
    float _494 = _401 - _363;
    float _497 = fma(_494, gl_ObjectToWorldEXT[2u].x, fma(_493, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _492));
    float _500 = fma(_494, gl_ObjectToWorldEXT[2u].y, fma(_493, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _492));
    float _503 = fma(_494, gl_ObjectToWorldEXT[2u].z, fma(_493, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _492));
    float _504 = _437 - _361;
    float _505 = _438 - _362;
    float _506 = _439 - _363;
    float _509 = fma(_506, gl_ObjectToWorldEXT[2u].x, fma(_505, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _504));
    float _512 = fma(_506, gl_ObjectToWorldEXT[2u].y, fma(_505, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _504));
    float _515 = fma(_506, gl_ObjectToWorldEXT[2u].z, fma(_505, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _504));
    float _516 = (((_277 * hit._m0.x) + (_232 * _442)) + (_322 * hit._m0.y)) * 0.00048828125;
    float _517 = (((_278 * hit._m0.x) + (_233 * _442)) + (_323 * hit._m0.y)) * 0.00048828125;
    float _521 = (((float(_206) * _442) + (-127.0)) + (float(_256) * hit._m0.x)) + (float(_301) * hit._m0.y);
    float _524 = (((float(_207) * _442) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_302) * hit._m0.y);
    float _527 = (((float(_208) * _442) + (-127.0)) + (float(_258) * hit._m0.x)) + (float(_303) * hit._m0.y);
    float _528 = _521 * 0.0078740157186985015869140625;
    float _530 = _524 * 0.0078740157186985015869140625;
    float _531 = _527 * 0.0078740157186985015869140625;
    float _543 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    uvec2 _563 = uvec2(textureSize(M_Blackhole_Circle_001_snp_0_Texture2D_1, int(0u)));
    bool _568 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _621;
    if (_568)
    {
        float _579 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _585 = (_515 * _500) - (_512 * _503);
        float _588 = (_509 * _503) - (_515 * _497);
        float _591 = (_512 * _497) - (_509 * _500);
        float _618 = ((log2((((float(_563.y) * 0.5) * float(_563.x)) * abs((_470 * _464) - (_469 * _466))) / (sqrt(((_588 * _588) + (_591 * _591)) + (_585 * _585)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_579 * gl_WorldRayDirectionEXT.x, _579 * gl_WorldRayDirectionEXT.y, _579 * gl_WorldRayDirectionEXT.z), vec3(_528, _530, _531))));
        _621 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    }
    else
    {
        _621 = 0.0;
    }
    vec4 _625 = textureLod(sampler2D(M_Blackhole_Circle_001_snp_0_Texture2D_1, SS_WrapLinear), vec2((((_543 * cbMtdParam._m0[11u].w) + (cbMtdParam._m0[13u].y * _516)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].x * _543) + (cbMtdParam._m0[13u].z * _517)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _621);
    uvec2 _651 = uvec2(textureSize(M_Blackhole_Circle_001_snp_0_Texture2D_2, int(0u)));
    float _655 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _656 = _655 * gl_WorldRayDirectionEXT.x;
    float _657 = _655 * gl_WorldRayDirectionEXT.y;
    float _658 = _655 * gl_WorldRayDirectionEXT.z;
    float _702;
    if (_568)
    {
        float _668 = (_515 * _500) - (_512 * _503);
        float _671 = (_509 * _503) - (_515 * _497);
        float _674 = (_512 * _497) - (_509 * _500);
        float _700 = ((log2((((float(_651.y) * 0.5) * float(_651.x)) * abs((_470 * _464) - (_469 * _466))) / (sqrt(((_671 * _671) + (_674 * _674)) + (_668 * _668)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_656, _657, _658), vec3(_528, _530, _531))));
        _702 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    }
    else
    {
        _702 = 0.0;
    }
    vec4 _704 = textureLod(sampler2D(M_Blackhole_Circle_001_snp_0_Texture2D_2, SS_WrapLinear), vec2((((cbMtdParam._m0[12u].w * _543) + (cbMtdParam._m0[12u].y * _516)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].x * _543) + (cbMtdParam._m0[12u].z * _517)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _702);
    float _727 = (cbMtdParam._m0[10u].x * _704.x) + (cbMtdParam._m0[9u].x * _625.x);
    float _728 = (cbMtdParam._m0[10u].y * _704.y) + (cbMtdParam._m0[9u].y * _625.y);
    float _729 = (cbMtdParam._m0[10u].z * _704.z) + (cbMtdParam._m0[9u].z * _625.z);
    float _737 = inversesqrt(dot(vec3(_528, _530, _531), vec3(_528, _530, _531)));
    float _738 = _737 * _528;
    float _739 = _737 * _530;
    float _740 = _737 * _531;
    float _752 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _753 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _754 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _755 = (-0.0) - _656;
    float _757 = (-0.0) - _657;
    float _758 = (-0.0) - _658;
    float _764 = float(gl_LaunchIDEXT.x);
    float _765 = float(gl_LaunchIDEXT.y);
    float _768 = float(gl_LaunchSizeEXT.x);
    float _782 = fract(fract(sin(dot(vec2(_764 / _768, _765 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _795 = fract(fract(sin(dot(vec2((_764 + 128.0) / _768, (_765 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _805 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _806 = _805.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _806, _805.w, _806, vec3(_752, _753, _754), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _872;
    float _873;
    float _874;
    if (_64._m0 == 0u)
    {
        float _827 = g_sceneCB._m0[4u].x - _656;
        float _828 = g_sceneCB._m0[4u].y - _657;
        float _829 = g_sceneCB._m0[4u].z - _658;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _837 = dot(vec3(_738, _739, _740), vec3(g_sceneCB._m0[4u].xyz));
        float _1127 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _840 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
        float _841 = dot(vec3(_738, _739, _740), vec3(_755, _757, _758));
        float _1138 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_827 * _833, _828 * _833, _829 * _833));
        float _1149 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _856 = (exp2(log2(1.0 - (isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _862 = (0.5 / ((_840 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0))))) * _840;
        float _1160 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _864 = (isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0))) * 0.31831014156341552734375;
        _872 = (_856 * g_sceneCB._m0[5u].x) * _864;
        _873 = (_856 * g_sceneCB._m0[5u].y) * _864;
        _874 = (_856 * g_sceneCB._m0[5u].z) * _864;
    }
    else
    {
        _872 = 0.0;
        _873 = 0.0;
        _874 = 0.0;
    }
    bool _876 = abs(_739) < 0.89999997615814208984375;
    float _878 = float(_876);
    float _879 = _876 ? 0.0 : 1.0;
    float _882 = (_878 * _740) - (_879 * _739);
    float _883 = _879 * _738;
    float _885 = (-0.0) - (_738 * _878);
    float _889 = inversesqrt(dot(vec3(_882, _883, _885), vec3(_882, _883, _885)));
    float _890 = _882 * _889;
    float _891 = _883 * _889;
    float _892 = _889 * _885;
    float _895 = (_891 * _740) - (_892 * _739);
    float _898 = (_892 * _738) - (_890 * _740);
    float _901 = (_890 * _739) - (_891 * _738);
    float _903;
    float _911;
    float _902 = 0.0;
    uint _904 = 0u;
    float _908;
    bool _910;
    for (;;)
    {
        _908 = (float(_904) + _782) * 0.03125;
        _910 = _904 == 0u;
        float frontier_phi_43_pred;
        if (_910)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1031;
            float _1032;
            uint _1034;
            _1031 = 0.0;
            _1032 = 0.5;
            _1034 = _904;
            float _912;
            for (;;)
            {
                _912 = ((_1034 & 1u) != 0u) ? (_1032 + _1031) : _1031;
                uint _1035 = _1034 >> 1u;
                if (_1035 == 0u)
                {
                    break;
                }
                else
                {
                    _1031 = _912;
                    _1032 *= 0.5;
                    _1034 = _1035;
                }
            }
            frontier_phi_43_pred = _912;
        }
        _911 = frontier_phi_43_pred;
        float _913 = _911 + _795;
        float _918 = sqrt(_908);
        float _919 = ((_913 > 1.0) ? (_913 + (-1.0)) : _913) * 6.283185482025146484375;
        float _922 = cos(_919) * _918;
        float _924 = sin(_919) * _918;
        float _926 = sqrt(1.0 - _908);
        float _939 = ((_926 * _738) + (_922 * _895)) + (_924 * _890);
        float _940 = ((_926 * _739) + (_922 * _898)) + (_924 * _891);
        float _941 = ((_926 * _740) + (_922 * _901)) + (_924 * _892);
        _63._m0 = 1u;
        uvec4 _945 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _946 = _945.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _946, _945.w, _946, vec3(_752, _753, _754), 9.9999997473787516355514526367188e-05, vec3(_939, _940, _941), 10000.0, 1);
        float _952 = dot(vec3(_738, _739, _740), vec3(_939, _940, _941));
        float _1171 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _955 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _903 = ((float(_63._m0 == 0u) * _955) / (_955 * 0.3183098733425140380859375)) + _902;
        uint _905 = _904 + 1u;
        if (_905 == 32u)
        {
            break;
        }
        else
        {
            _902 = _903;
            _904 = _905;
            continue;
        }
    }
    float _964 = _903 * 0.009947183541953563690185546875;
    float _969 = dot(vec3(_656, _657, _658), vec3(_738, _739, _740)) * 2.0;
    vec4 _980 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_656 - (_969 * _738), _657 - (_969 * _739), _658 - (_969 * _740)), 4.0);
    float _985 = dot(vec3(_755, _757, _758), vec3(_738, _739, _740));
    float _1182 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _994 = (exp2(log2(1.0 - (isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1002 = (_872 + (isnan(4.0) ? _727 : (isnan(_727) ? 4.0 : min(_727, 4.0)))) + ((_980.x * _964) * _994);
    float _1004 = (_873 + (isnan(4.0) ? _728 : (isnan(_728) ? 4.0 : min(_728, 4.0)))) + ((_980.y * _964) * _994);
    float _1006 = (_874 + (isnan(4.0) ? _729 : (isnan(_729) ? 4.0 : min(_729, 4.0)))) + ((_980.z * _964) * _994);
    float _1193 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1204 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1215 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    bool _1014 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1025;
    _1025.x = _1014 ? ((_521 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0)));
    _1025.y = _1014 ? ((_524 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0)));
    _1025.z = _1014 ? ((_527 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0)));
    payload._m0 = _1025;
}


