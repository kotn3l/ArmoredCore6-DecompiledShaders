#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CB_CS_ANIMATIONUBO
{
    vec4 _m0[9];
} CB_CS_ANIMATION;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 30) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer outPositionBuffer;

uint _714;
uint _868;

void main()
{
    uvec4 _54 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
    uint _59 = (((_54.z * gl_WorkGroupID.y) + gl_WorkGroupID.x) << 6u) + gl_LocalInvocationIndex;
    if (_59 < _54.x)
    {
        uint _71 = floatBitsToUint(CB_CS_ANIMATION._m0[1u]).x * _59;
        uint _72 = _71 >> 2u;
        uvec3 _82 = uvec3(texelFetch(l_geomAttrib_0, int(_72)).x, texelFetch(l_geomAttrib_0, int(_72 + 1u)).x, texelFetch(l_geomAttrib_0, int(_72 + 2u)).x);
        float _86 = uintBitsToFloat(_82.x);
        float _87 = uintBitsToFloat(_82.y);
        float _88 = uintBitsToFloat(_82.z);
        uvec4 _91 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
        uint _94 = _71 + 20u;
        uint _124;
        uint _125;
        uint _126;
        uint _127;
        uint _128;
        if (_91.y == 0u)
        {
            uvec4 _97 = texelFetch(l_geomAttrib_0, int(_94 >> 2u));
            uint _98 = _97.x;
            _124 = _98 & 255u;
            _125 = (_98 >> 8u) & 255u;
            _126 = (_98 >> 16u) & 255u;
            _127 = _98 >> 24u;
            _128 = 24u;
        }
        else
        {
            uint _109 = _94 >> 2u;
            uvec2 _116 = uvec2(texelFetch(l_geomAttrib_0, int(_109)).x, texelFetch(l_geomAttrib_0, int(_109 + 1u)).x);
            uint _117 = _116.x;
            uint _118 = _116.y;
            _124 = _117 & 65535u;
            _125 = _117 >> 16u;
            _126 = _118 & 65535u;
            _127 = _118 >> 16u;
            _128 = 28u;
        }
        uvec4 _132 = texelFetch(l_geomAttrib_0, int((_128 + _71) >> 2u));
        uint _133 = _132.x;
        float _144 = float(_133 & 255u) * 0.0039215688593685626983642578125;
        float _146 = float((_133 >> 8u) & 255u) * 0.0039215688593685626983642578125;
        float _147 = float((_133 >> 16u) & 255u) * 0.0039215688593685626983642578125;
        float _148 = float(_133 >> 24u) * 0.0039215688593685626983642578125;
        uint _151 = ((_71 + 12u) + _128) >> 2u;
        uvec2 _157 = uvec2(texelFetch(l_geomAttrib_0, int(_151)).x, texelFetch(l_geomAttrib_0, int(_151 + 1u)).x);
        uint _158 = _157.x;
        vec2 _163 = unpackHalf2x16(_158 & 65535u);
        float _164 = _163.x;
        vec2 _166 = unpackHalf2x16(_158 >> 16u);
        float _167 = _166.x;
        vec2 _169 = unpackHalf2x16(_157.y & 65535u);
        float _170 = _169.x;
        uvec4 _173 = floatBitsToUint(CB_CS_ANIMATION._m0[8u]);
        uint _175 = min(_173.z, 8u);
        bool _176 = _175 == 0u;
        float _177 = dot(vec4(1.0), vec4(_144, _146, _147, _148));
        float _181 = isnan(_177) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _177 : max(0.001000000047497451305389404296875, _177));
        float _183 = _144 / _181;
        float _184 = _146 / _181;
        float _185 = _147 / _181;
        float _186 = _148 / _181;
        uint _187 = _124 * 3u;
        uint _195 = _187 + 1u;
        uint _202 = _187 + 2u;
        uint _221 = _125 * 3u;
        uint _228 = _221 + 1u;
        uint _235 = _221 + 2u;
        uint _266 = _126 * 3u;
        uint _273 = _266 + 1u;
        uint _280 = _266 + 2u;
        uint _311 = _127 * 3u;
        uint _318 = _311 + 1u;
        uint _325 = _311 + 2u;
        float _359 = ((((cbObjMatrix._m0[_221].w * _184) + (cbObjMatrix._m0[_187].w * _183)) + (cbObjMatrix._m0[_266].w * _185)) + (cbObjMatrix._m0[_311].w * _186)) + fma(_88, (((cbObjMatrix._m0[_221].z * _184) + (cbObjMatrix._m0[_187].z * _183)) + (cbObjMatrix._m0[_266].z * _185)) + (cbObjMatrix._m0[_311].z * _186), fma(_87, (((cbObjMatrix._m0[_221].y * _184) + (cbObjMatrix._m0[_187].y * _183)) + (cbObjMatrix._m0[_266].y * _185)) + (cbObjMatrix._m0[_311].y * _186), ((((cbObjMatrix._m0[_221].x * _184) + (cbObjMatrix._m0[_187].x * _183)) + (cbObjMatrix._m0[_266].x * _185)) + (cbObjMatrix._m0[_311].x * _186)) * _86));
        float _363 = ((((cbObjMatrix._m0[_228].w * _184) + (cbObjMatrix._m0[_195].w * _183)) + (cbObjMatrix._m0[_273].w * _185)) + (cbObjMatrix._m0[_318].w * _186)) + fma(_88, (((cbObjMatrix._m0[_228].z * _184) + (cbObjMatrix._m0[_195].z * _183)) + (cbObjMatrix._m0[_273].z * _185)) + (cbObjMatrix._m0[_318].z * _186), fma(_87, (((cbObjMatrix._m0[_228].y * _184) + (cbObjMatrix._m0[_195].y * _183)) + (cbObjMatrix._m0[_273].y * _185)) + (cbObjMatrix._m0[_318].y * _186), ((((cbObjMatrix._m0[_228].x * _184) + (cbObjMatrix._m0[_195].x * _183)) + (cbObjMatrix._m0[_273].x * _185)) + (cbObjMatrix._m0[_318].x * _186)) * _86));
        float _367 = ((((cbObjMatrix._m0[_235].w * _184) + (cbObjMatrix._m0[_202].w * _183)) + (cbObjMatrix._m0[_280].w * _185)) + (cbObjMatrix._m0[_325].w * _186)) + fma(_88, (((cbObjMatrix._m0[_235].z * _184) + (cbObjMatrix._m0[_202].z * _183)) + (cbObjMatrix._m0[_280].z * _185)) + (cbObjMatrix._m0[_325].z * _186), fma(_87, (((cbObjMatrix._m0[_235].y * _184) + (cbObjMatrix._m0[_202].y * _183)) + (cbObjMatrix._m0[_280].y * _185)) + (cbObjMatrix._m0[_325].y * _186), ((((cbObjMatrix._m0[_235].x * _184) + (cbObjMatrix._m0[_202].x * _183)) + (cbObjMatrix._m0[_280].x * _185)) + (cbObjMatrix._m0[_325].x * _186)) * _86));
        float _389 = fma(_170, CB_CS_ANIMATION._m0[2u].z, fma(_167, CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[2u].x * _164));
        float _390 = _389 + CB_CS_ANIMATION._m0[2u].w;
        float _393 = fma(_170, CB_CS_ANIMATION._m0[3u].z, fma(_167, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[3u].x * _164));
        float _394 = _393 + CB_CS_ANIMATION._m0[3u].w;
        float _397 = fma(_170, CB_CS_ANIMATION._m0[4u].z, fma(_167, CB_CS_ANIMATION._m0[4u].y, CB_CS_ANIMATION._m0[4u].x * _164));
        float _398 = _397 + CB_CS_ANIMATION._m0[4u].w;
        float _404 = _359 - CB_CS_ANIMATION._m0[2u].w;
        float _405 = _404 - _389;
        float _406 = _363 - CB_CS_ANIMATION._m0[3u].w;
        float _407 = _406 - _393;
        float _408 = _367 - CB_CS_ANIMATION._m0[4u].w;
        float _409 = _408 - _397;
        float _430 = (cbMtdParam._m0[11u].x * sqrt(((_363 * _363) + (_359 * _359)) + (_367 * _367))) + cbPerFrame._m0[22u].x;
        uint _431 = _173.y;
        float _432;
        float _435;
        float _437;
        if (_176)
        {
            _432 = 0.0;
            _435 = 0.0;
            _437 = 0.0;
        }
        else
        {
            uint _526 = _173.x;
            float _434;
            float _436;
            float _438;
            float _938;
            float _940;
            float _942;
            float _648 = 0.0;
            float _649 = 0.0;
            float _650 = 0.0;
            uint _651 = _526;
            uint _653 = 0u;
            float _687;
            float _706;
            vec4 _719;
            float _720;
            float _721;
            float _734;
            float _735;
            float _736;
            float _752;
            float _753;
            float _754;
            float _755;
            bool _756;
            bool _757;
            bool _758;
            float _759;
            float _760;
            float _761;
            float _762;
            float _763;
            float _764;
            float _765;
            bool _768;
            for (;;)
            {
                uint _655 = _651 & 255u;
                uint _656 = _655 * 24u;
                uvec3 _665 = uvec3(texelFetch(g_forceParam, int(_656)).x, texelFetch(g_forceParam, int(_656 + 1u)).x, texelFetch(g_forceParam, int(_656 + 2u)).x);
                uint _670 = (_655 * 24u) + 4u;
                vec4 _683 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_670)).x, texelFetch(g_forceParam, int(_670 + 1u)).x, texelFetch(g_forceParam, int(_670 + 2u)).x, texelFetch(g_forceParam, int(_670 + 3u)).x));
                _687 = _683.w;
                uint _689 = (_655 * 24u) + 8u;
                vec4 _702 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_689)).x, texelFetch(g_forceParam, int(_689 + 1u)).x, texelFetch(g_forceParam, int(_689 + 2u)).x, texelFetch(g_forceParam, int(_689 + 3u)).x));
                _706 = _702.w;
                uint _708 = (_655 * 24u) + 12u;
                _719 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_708)).x, texelFetch(g_forceParam, int(_708 + 1u)).x, _714, texelFetch(g_forceParam, int(_708 + 3u)).x));
                _720 = _719.x;
                _721 = _719.w;
                uint _723 = (_655 * 24u) + 16u;
                vec3 _733 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_723)).x, texelFetch(g_forceParam, int(_723 + 1u)).x, texelFetch(g_forceParam, int(_723 + 2u)).x));
                _734 = _733.x;
                _735 = _733.y;
                _736 = _733.z;
                uint _738 = (_655 * 24u) + 20u;
                vec4 _751 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_738)).x, texelFetch(g_forceParam, int(_738 + 1u)).x, texelFetch(g_forceParam, int(_738 + 2u)).x, texelFetch(g_forceParam, int(_738 + 3u)).x));
                _752 = _751.x;
                _753 = _751.y;
                _754 = _751.z;
                _755 = _751.w;
                _756 = _665.x == 1u;
                _757 = _665.y == 1u;
                _758 = _665.z == 1u;
                _759 = CB_CS_ANIMATION._m0[2u].w - _683.x;
                _760 = CB_CS_ANIMATION._m0[3u].w - _683.y;
                _761 = CB_CS_ANIMATION._m0[4u].w - _683.z;
                _762 = _756 ? _702.x : _759;
                _763 = _756 ? _702.y : _760;
                _764 = _756 ? _702.z : _761;
                _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
                _768 = _765 > 0.0;
                float frontier_phi_15_pred;
                float frontier_phi_15_pred_1;
                float frontier_phi_15_pred_2;
                if (_768)
                {
                    float _929 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
                    float _930 = inversesqrt(_765);
                    float _931 = _930 * _762;
                    float _932 = _930 * _763;
                    float _933 = _930 * _764;
                    float _936 = 1.0 - (_929 / (isnan(0.001000000047497451305389404296875) ? _719.y : (isnan(_719.y) ? 0.001000000047497451305389404296875 : max(_719.y, 0.001000000047497451305389404296875))));
                    float _1253 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
                    float _937 = isnan(1.0) ? _1253 : (isnan(_1253) ? 1.0 : min(_1253, 1.0));
                    float _987;
                    if (_758)
                    {
                        float _974 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
                        float _983 = (dot(vec3(_931, _932, _933), vec3(_974 * _759, _974 * _760, _974 * _761)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _1264 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
                        _987 = (isnan(1.0) ? _1264 : (isnan(_1264) ? 1.0 : min(_1264, 1.0))) * _937;
                    }
                    else
                    {
                        _987 = _937;
                    }
                    float frontier_phi_15_pred_19_ladder;
                    float frontier_phi_15_pred_19_ladder_1;
                    float frontier_phi_15_pred_19_ladder_2;
                    if (_987 > 0.0)
                    {
                        bool _1006 = _756 && (!_758);
                        float _1012 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _720 : (isnan(_720) ? 0.001000000047497451305389404296875 : max(_720, 0.001000000047497451305389404296875)));
                        float _1014 = dot(vec2(_931, _933), vec2(_759, _761));
                        float _1022 = sin(((_1012 * _430) + (_1006 ? 0.0 : (_929 * (-4.0)))) - ((_1012 * float(_1006)) * _1014));
                        float _1026 = _756 ? ((_721 * _706) * _1022) : 0.0;
                        float _1089;
                        if (_757)
                        {
                            float _1050 = _734 * 2.0;
                            float _1052 = _753 + _754;
                            float _1053 = _1052 + _755;
                            float _1061 = dot(vec2(_933, (-0.0) - _931), vec2(_759, _761)) / _1050;
                            float _1065 = fract(abs(_1061));
                            float _1076 = _752 * _430;
                            float _1080 = _1053 * _752;
                            float _1082 = (((_1076 - (_734 * 0.25)) - _1014) - (sin(((_734 * 12.56636810302734375) * ((_1061 >= ((-0.0) - _1061)) ? _1065 : ((-0.0) - _1065))) / _1050) * (isnan(5.0) ? _734 : (isnan(_734) ? 5.0 : min(_734, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _1080 : (isnan(_1080) ? 0.001000000047497451305389404296875 : max(_1080, 0.001000000047497451305389404296875)));
                            float _1083 = fract(_1082);
                            float _1086 = (_1082 < 0.0) ? (1.0 - _1083) : _1083;
                            float _1087 = _753 / _1053;
                            float _1159;
                            if (_1086 < _1087)
                            {
                                _1159 = _1086 / _1087;
                            }
                            else
                            {
                                float frontier_phi_34_31_ladder;
                                if (_1086 < (_1052 / _1053))
                                {
                                    frontier_phi_34_31_ladder = 1.0 - (((_1086 - _1087) * _1053) / _754);
                                }
                                else
                                {
                                    frontier_phi_34_31_ladder = 0.0;
                                }
                                _1159 = frontier_phi_34_31_ladder;
                            }
                            _1089 = (_1159 * _736) * abs(sin((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _734 : (isnan(_734) ? 0.001000000047497451305389404296875 : max(_734, 0.001000000047497451305389404296875)))) * (_1076 - _1014)) + _735);
                        }
                        else
                        {
                            _1089 = 0.0;
                        }
                        float _1092 = ((_1022 * _706) + _687) + _1089;
                        float _1099 = _987 * 0.0500000007450580596923828125;
                        frontier_phi_15_pred_19_ladder = _1099 * ((_1092 * _933) + (_1026 * _931));
                        frontier_phi_15_pred_19_ladder_1 = ((_932 * 0.0500000007450580596923828125) * _987) * _1092;
                        frontier_phi_15_pred_19_ladder_2 = _1099 * ((_1092 * _931) - (_1026 * _933));
                    }
                    else
                    {
                        frontier_phi_15_pred_19_ladder = 0.0;
                        frontier_phi_15_pred_19_ladder_1 = 0.0;
                        frontier_phi_15_pred_19_ladder_2 = 0.0;
                    }
                    frontier_phi_15_pred = frontier_phi_15_pred_19_ladder;
                    frontier_phi_15_pred_1 = frontier_phi_15_pred_19_ladder_1;
                    frontier_phi_15_pred_2 = frontier_phi_15_pred_19_ladder_2;
                }
                else
                {
                    frontier_phi_15_pred = 0.0;
                    frontier_phi_15_pred_1 = 0.0;
                    frontier_phi_15_pred_2 = 0.0;
                }
                _942 = frontier_phi_15_pred;
                _940 = frontier_phi_15_pred_1;
                _938 = frontier_phi_15_pred_2;
                _434 = _938 + _648;
                _436 = _940 + _649;
                _438 = _942 + _650;
                uint _654 = _653 + 1u;
                if (_654 == _175)
                {
                    break;
                }
                else
                {
                    _648 = _434;
                    _649 = _436;
                    _650 = _438;
                    _651 = (_653 != 3u) ? (_651 >> 8u) : _431;
                    _653 = _654;
                    continue;
                }
            }
            _432 = _434;
            _435 = _436;
            _437 = _438;
        }
        float _444 = sqrt(((_435 * _435) + (_432 * _432)) + (_437 * _437));
        bool _445 = _444 < 0.00011000000085914507508277893066406;
        float _451 = inversesqrt(dot(vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y), vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y)));
        float _452 = _451 * CB_CS_ANIMATION._m0[2u].y;
        float _453 = _451 * CB_CS_ANIMATION._m0[3u].y;
        float _454 = _451 * CB_CS_ANIMATION._m0[4u].y;
        float _458 = inversesqrt(dot(vec3(_432, _435, _437), vec3(_432, _435, _437)));
        float _459 = _458 * _432;
        float _460 = _458 * _435;
        float _461 = _458 * _437;
        float _464 = (_461 * _453) - (_460 * _454);
        float _467 = (_459 * _454) - (_461 * _452);
        float _470 = (_460 * _452) - (_459 * _453);
        float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
        float _475 = _464 * _474;
        float _476 = _467 * _474;
        float _477 = _470 * _474;
        float _480 = log2(_444 + 1.0) * cbMtdParam._m0[10u].w;
        float _481 = dot(vec3(_475, _476, _477), vec3(_404, _406, _408));
        float _487 = (_481 * _475) + CB_CS_ANIMATION._m0[2u].w;
        float _488 = (_481 * _476) + CB_CS_ANIMATION._m0[3u].w;
        float _489 = (_481 * _477) + CB_CS_ANIMATION._m0[4u].w;
        float _490 = _359 - _487;
        float _491 = _363 - _488;
        float _492 = _367 - _489;
        float _502 = sin(_480);
        float _503 = cos(_480);
        float _522 = (_445 ? 0.0 : (((_487 - _359) + (_503 * _490)) + (((_492 * _476) - (_491 * _477)) * _502))) + _359;
        float _523 = (_445 ? 0.0 : (((_488 - _363) + (((_490 * _477) - (_492 * _475)) * _502)) + (_503 * _491))) + _363;
        float _524 = (_445 ? 0.0 : (((_489 - _367) + (((_491 * _475) - (_490 * _476)) * _502)) + (_503 * _492))) + _367;
        float _525 = (sqrt(((_407 * _407) + (_405 * _405)) + (_409 * _409)) * cbMtdParam._m0[10u].z) + cbPerFrame._m0[22u].x;
        float _527;
        float _529;
        float _531;
        if (_176)
        {
            _527 = 0.0;
            _529 = 0.0;
            _531 = 0.0;
        }
        else
        {
            uint _647 = _173.x;
            float _528;
            float _530;
            float _532;
            float _962;
            float _964;
            float _966;
            float _802 = 0.0;
            float _803 = 0.0;
            float _804 = 0.0;
            uint _805 = _647;
            uint _807 = 0u;
            float _841;
            float _860;
            vec4 _873;
            float _874;
            float _875;
            float _888;
            float _889;
            float _890;
            float _906;
            float _907;
            float _908;
            float _909;
            bool _910;
            bool _911;
            bool _912;
            float _913;
            float _914;
            float _915;
            float _916;
            float _917;
            float _918;
            float _919;
            bool _922;
            for (;;)
            {
                uint _809 = _805 & 255u;
                uint _810 = _809 * 24u;
                uvec3 _819 = uvec3(texelFetch(g_forceParam, int(_810)).x, texelFetch(g_forceParam, int(_810 + 1u)).x, texelFetch(g_forceParam, int(_810 + 2u)).x);
                uint _824 = (_809 * 24u) + 4u;
                vec4 _837 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_824)).x, texelFetch(g_forceParam, int(_824 + 1u)).x, texelFetch(g_forceParam, int(_824 + 2u)).x, texelFetch(g_forceParam, int(_824 + 3u)).x));
                _841 = _837.w;
                uint _843 = (_809 * 24u) + 8u;
                vec4 _856 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_843)).x, texelFetch(g_forceParam, int(_843 + 1u)).x, texelFetch(g_forceParam, int(_843 + 2u)).x, texelFetch(g_forceParam, int(_843 + 3u)).x));
                _860 = _856.w;
                uint _862 = (_809 * 24u) + 12u;
                _873 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_862)).x, texelFetch(g_forceParam, int(_862 + 1u)).x, _868, texelFetch(g_forceParam, int(_862 + 3u)).x));
                _874 = _873.x;
                _875 = _873.w;
                uint _877 = (_809 * 24u) + 16u;
                vec3 _887 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_877)).x, texelFetch(g_forceParam, int(_877 + 1u)).x, texelFetch(g_forceParam, int(_877 + 2u)).x));
                _888 = _887.x;
                _889 = _887.y;
                _890 = _887.z;
                uint _892 = (_809 * 24u) + 20u;
                vec4 _905 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_892)).x, texelFetch(g_forceParam, int(_892 + 1u)).x, texelFetch(g_forceParam, int(_892 + 2u)).x, texelFetch(g_forceParam, int(_892 + 3u)).x));
                _906 = _905.x;
                _907 = _905.y;
                _908 = _905.z;
                _909 = _905.w;
                _910 = _819.x == 1u;
                _911 = _819.y == 1u;
                _912 = _819.z == 1u;
                _913 = _390 - _837.x;
                _914 = _394 - _837.y;
                _915 = _398 - _837.z;
                _916 = _910 ? _856.x : _913;
                _917 = _910 ? _856.y : _914;
                _918 = _910 ? _856.z : _915;
                _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
                _922 = _919 > 0.0;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                if (_922)
                {
                    float _953 = sqrt(((_913 * _913) + (_914 * _914)) + (_915 * _915));
                    float _954 = inversesqrt(_919);
                    float _955 = _954 * _916;
                    float _956 = _954 * _917;
                    float _957 = _954 * _918;
                    float _960 = 1.0 - (_953 / (isnan(0.001000000047497451305389404296875) ? _873.y : (isnan(_873.y) ? 0.001000000047497451305389404296875 : max(_873.y, 0.001000000047497451305389404296875))));
                    float _1300 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
                    float _961 = isnan(1.0) ? _1300 : (isnan(_1300) ? 1.0 : min(_1300, 1.0));
                    float _1003;
                    if (_912)
                    {
                        float _992 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
                        float _1000 = (dot(vec3(_955, _956, _957), vec3(_992 * _913, _992 * _914, _992 * _915)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _1311 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
                        _1003 = (isnan(1.0) ? _1311 : (isnan(_1311) ? 1.0 : min(_1311, 1.0))) * _961;
                    }
                    else
                    {
                        _1003 = _961;
                    }
                    float frontier_phi_17_pred_22_ladder;
                    float frontier_phi_17_pred_22_ladder_1;
                    float frontier_phi_17_pred_22_ladder_2;
                    if (_1003 > 0.0)
                    {
                        bool _1028 = _910 && (!_912);
                        float _1034 = (6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _874 : (isnan(_874) ? 0.001000000047497451305389404296875 : max(_874, 0.001000000047497451305389404296875)))) * cbMtdParam._m0[11u].y;
                        float _1035 = dot(vec2(_955, _957), vec2(_913, _915));
                        float _1043 = sin(((_1034 * _525) + (_1028 ? 0.0 : (_953 * (-4.0)))) - ((_1034 * float(_1028)) * _1035));
                        float _1047 = _910 ? ((_875 * _860) * _1043) : 0.0;
                        float _1140;
                        if (_911)
                        {
                            float _1104 = _888 * 2.0;
                            float _1105 = _907 + _908;
                            float _1106 = _1105 + _909;
                            float _1114 = dot(vec2(_957, (-0.0) - _955), vec2(_913, _915)) / _1104;
                            float _1118 = fract(abs(_1114));
                            float _1127 = _906 * _525;
                            float _1131 = _1106 * _906;
                            float _1133 = (((_1127 - (_888 * 0.25)) - _1035) - (sin(((_888 * 12.56636810302734375) * ((_1114 >= ((-0.0) - _1114)) ? _1118 : ((-0.0) - _1118))) / _1104) * (isnan(5.0) ? _888 : (isnan(_888) ? 5.0 : min(_888, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _1131 : (isnan(_1131) ? 0.001000000047497451305389404296875 : max(_1131, 0.001000000047497451305389404296875)));
                            float _1134 = fract(_1133);
                            float _1137 = (_1133 < 0.0) ? (1.0 - _1134) : _1134;
                            float _1138 = _907 / _1106;
                            float _1170;
                            if (_1137 < _1138)
                            {
                                _1170 = _1137 / _1138;
                            }
                            else
                            {
                                float frontier_phi_36_33_ladder;
                                if (_1137 < (_1105 / _1106))
                                {
                                    frontier_phi_36_33_ladder = 1.0 - (((_1137 - _1138) * _1106) / _908);
                                }
                                else
                                {
                                    frontier_phi_36_33_ladder = 0.0;
                                }
                                _1170 = frontier_phi_36_33_ladder;
                            }
                            _1140 = (_1170 * _890) * abs(sin(((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _888 : (isnan(_888) ? 0.001000000047497451305389404296875 : max(_888, 0.001000000047497451305389404296875)))) * cbMtdParam._m0[11u].y) * (_1127 - _1035)) + _889);
                        }
                        else
                        {
                            _1140 = 0.0;
                        }
                        float _1143 = ((_1043 * _860) + _841) + _1140;
                        float _1150 = _1003 * 0.0500000007450580596923828125;
                        frontier_phi_17_pred_22_ladder = _1150 * ((_1143 * _957) + (_1047 * _955));
                        frontier_phi_17_pred_22_ladder_1 = ((_956 * 0.0500000007450580596923828125) * _1003) * _1143;
                        frontier_phi_17_pred_22_ladder_2 = _1150 * ((_1143 * _955) - (_1047 * _957));
                    }
                    else
                    {
                        frontier_phi_17_pred_22_ladder = 0.0;
                        frontier_phi_17_pred_22_ladder_1 = 0.0;
                        frontier_phi_17_pred_22_ladder_2 = 0.0;
                    }
                    frontier_phi_17_pred = frontier_phi_17_pred_22_ladder;
                    frontier_phi_17_pred_1 = frontier_phi_17_pred_22_ladder_1;
                    frontier_phi_17_pred_2 = frontier_phi_17_pred_22_ladder_2;
                }
                else
                {
                    frontier_phi_17_pred = 0.0;
                    frontier_phi_17_pred_1 = 0.0;
                    frontier_phi_17_pred_2 = 0.0;
                }
                _966 = frontier_phi_17_pred;
                _964 = frontier_phi_17_pred_1;
                _962 = frontier_phi_17_pred_2;
                _528 = _962 + _802;
                _530 = _964 + _803;
                _532 = _966 + _804;
                uint _808 = _807 + 1u;
                if (_808 == _175)
                {
                    break;
                }
                else
                {
                    _802 = _528;
                    _803 = _530;
                    _804 = _532;
                    _805 = (_807 != 3u) ? (_805 >> 8u) : _431;
                    _807 = _808;
                    continue;
                }
            }
            _527 = _528;
            _529 = _530;
            _531 = _532;
        }
        float _538 = sqrt(((_529 * _529) + (_527 * _527)) + (_531 * _531));
        bool _539 = _538 < 0.00011000000085914507508277893066406;
        float _543 = inversesqrt(dot(vec3(_527, _529, _531), vec3(_527, _529, _531)));
        float _544 = _543 * _527;
        float _545 = _543 * _529;
        float _546 = _543 * _531;
        float _549 = (_546 * _453) - (_545 * _454);
        float _552 = (_544 * _454) - (_546 * _452);
        float _555 = (_545 * _452) - (_544 * _453);
        float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
        float _560 = _549 * _559;
        float _561 = _552 * _559;
        float _562 = _555 * _559;
        float _565 = log2(_538 + 1.0) * cbMtdParam._m0[10u].y;
        float _569 = dot(vec3(_560, _561, _562), vec3(_522 - _390, _523 - _394, _524 - _398));
        float _575 = (_569 * _560) + _390;
        float _576 = (_569 * _561) + _394;
        float _577 = (_569 * _562) + _398;
        float _578 = _522 - _575;
        float _579 = _523 - _576;
        float _580 = _524 - _577;
        float _590 = sin(_565);
        float _591 = cos(_565);
        float _610 = _522 + (_539 ? 0.0 : (((_575 - _522) + (_591 * _578)) + (((_580 * _561) - (_579 * _562)) * _590)));
        float _611 = _523 + (_539 ? 0.0 : (((_576 - _523) + (((_578 * _562) - (_580 * _560)) * _590)) + (_591 * _579)));
        float _612 = _524 + (_539 ? 0.0 : (((_577 - _524) + (((_579 * _560) - (_578 * _561)) * _590)) + (_591 * _580)));
        float _636 = fma(_612, CB_CS_ANIMATION._m0[5u].z, fma(_611, CB_CS_ANIMATION._m0[5u].y, _610 * CB_CS_ANIMATION._m0[5u].x)) + CB_CS_ANIMATION._m0[5u].w;
        float _640 = fma(_612, CB_CS_ANIMATION._m0[6u].z, fma(_611, CB_CS_ANIMATION._m0[6u].y, _610 * CB_CS_ANIMATION._m0[6u].x)) + CB_CS_ANIMATION._m0[6u].w;
        float _644 = fma(_612, CB_CS_ANIMATION._m0[7u].z, fma(_611, CB_CS_ANIMATION._m0[7u].y, _610 * CB_CS_ANIMATION._m0[7u].x)) + CB_CS_ANIMATION._m0[7u].w;
        if (_91.w == 0u)
        {
            uint _779 = _59 * 3u;
            imageStore(outPositionBuffer, int(_779), uvec4(uint(float(floatBitsToUint(_636)))));
            imageStore(outPositionBuffer, int(_779 + 1u), uvec4(uint(float(floatBitsToUint(_640)))));
            imageStore(outPositionBuffer, int(_779 + 2u), uvec4(uint(float(floatBitsToUint(_644)))));
        }
        else
        {
            uint _798 = _59 * 2u;
            imageStore(outPositionBuffer, int(_798), uvec4((packHalf2x16(vec2(_640, 0.0)) << 16u) | packHalf2x16(vec2(_636, 0.0))));
            imageStore(outPositionBuffer, int(_798 + 1u), uvec4((packHalf2x16(vec2(0.0)) << 16u) | packHalf2x16(vec2(_644, 0.0))));
        }
    }
}


