#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CB_CS_ANIMATIONUBO
{
    vec4 _m0[9];
} CB_CS_ANIMATION;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 30) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer outPositionBuffer;

uint _101;
uint _527;
uint _682;

void main()
{
    uvec4 _54 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
    uint _59 = (((_54.z * gl_WorkGroupID.y) + gl_WorkGroupID.x) << 6u) + gl_LocalInvocationIndex;
    if (_59 < _54.x)
    {
        uint _71 = floatBitsToUint(CB_CS_ANIMATION._m0[1u]).x * _59;
        uint _72 = _71 >> 2u;
        uvec3 _82 = uvec3(texelFetch(l_geomAttrib_0, int(_72)).x, texelFetch(l_geomAttrib_0, int(_72 + 1u)).x, texelFetch(l_geomAttrib_0, int(_72 + 2u)).x);
        float _86 = uintBitsToFloat(_82.x);
        float _87 = uintBitsToFloat(_82.y);
        float _88 = uintBitsToFloat(_82.z);
        uvec4 _91 = floatBitsToUint(CB_CS_ANIMATION._m0[0u]);
        uint _94 = _71 + 12u;
        uint _110;
        uint _111;
        if (_91.y == 0u)
        {
            _110 = texelFetch(l_geomAttrib_0, int(_94 >> 2u)).x >> 24u;
            _111 = 28u;
        }
        else
        {
            _110 = uvec2(_101, texelFetch(l_geomAttrib_0, int((_94 >> 2u) + 1u)).x).y >> 16u;
            _111 = 32u;
        }
        uint _116 = (_111 + _71) >> 2u;
        uvec2 _122 = uvec2(texelFetch(l_geomAttrib_0, int(_116)).x, texelFetch(l_geomAttrib_0, int(_116 + 1u)).x);
        uint _123 = _122.x;
        vec2 _129 = unpackHalf2x16(_123 & 65535u);
        float _130 = _129.x;
        vec2 _132 = unpackHalf2x16(_123 >> 16u);
        float _133 = _132.x;
        vec2 _135 = unpackHalf2x16(_122.y & 65535u);
        float _136 = _135.x;
        uvec4 _140 = floatBitsToUint(CB_CS_ANIMATION._m0[8u]);
        uint _142 = min(_140.z, 8u);
        bool _143 = _142 == 0u;
        uint _145 = uint(float(_110)) * 3u;
        uint _153 = _145 + 1u;
        uint _160 = _145 + 2u;
        float _170 = fma(_88, cbObjMatrix._m0[_145].z, fma(_87, cbObjMatrix._m0[_145].y, cbObjMatrix._m0[_145].x * _86)) + cbObjMatrix._m0[_145].w;
        float _174 = fma(_88, cbObjMatrix._m0[_153].z, fma(_87, cbObjMatrix._m0[_153].y, cbObjMatrix._m0[_153].x * _86)) + cbObjMatrix._m0[_153].w;
        float _178 = fma(_88, cbObjMatrix._m0[_160].z, fma(_87, cbObjMatrix._m0[_160].y, cbObjMatrix._m0[_160].x * _86)) + cbObjMatrix._m0[_160].w;
        float _200 = fma(_136, CB_CS_ANIMATION._m0[2u].z, fma(_133, CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[2u].x * _130));
        float _201 = _200 + CB_CS_ANIMATION._m0[2u].w;
        float _204 = fma(_136, CB_CS_ANIMATION._m0[3u].z, fma(_133, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[3u].x * _130));
        float _205 = _204 + CB_CS_ANIMATION._m0[3u].w;
        float _208 = fma(_136, CB_CS_ANIMATION._m0[4u].z, fma(_133, CB_CS_ANIMATION._m0[4u].y, CB_CS_ANIMATION._m0[4u].x * _130));
        float _209 = _208 + CB_CS_ANIMATION._m0[4u].w;
        float _215 = _170 - CB_CS_ANIMATION._m0[2u].w;
        float _216 = _215 - _200;
        float _217 = _174 - CB_CS_ANIMATION._m0[3u].w;
        float _218 = _217 - _204;
        float _219 = _178 - CB_CS_ANIMATION._m0[4u].w;
        float _220 = _219 - _208;
        float _241 = (cbMtdParam._m0[11u].x * sqrt(((_174 * _174) + (_170 * _170)) + (_178 * _178))) + cbPerFrame._m0[22u].x;
        uint _242 = _140.y;
        float _243;
        float _246;
        float _248;
        if (_143)
        {
            _243 = 0.0;
            _246 = 0.0;
            _248 = 0.0;
        }
        else
        {
            uint _338 = _140.x;
            float _245;
            float _247;
            float _249;
            float _753;
            float _755;
            float _757;
            float _460 = 0.0;
            float _461 = 0.0;
            float _462 = 0.0;
            uint _463 = _338;
            uint _465 = 0u;
            float _500;
            float _519;
            vec4 _532;
            float _533;
            float _534;
            float _547;
            float _548;
            float _549;
            float _566;
            float _567;
            float _568;
            float _569;
            bool _570;
            bool _571;
            bool _572;
            float _573;
            float _574;
            float _575;
            float _576;
            float _577;
            float _578;
            float _579;
            bool _582;
            for (;;)
            {
                uint _467 = _463 & 255u;
                uint _469 = _467 * 24u;
                uvec3 _478 = uvec3(texelFetch(g_forceParam, int(_469)).x, texelFetch(g_forceParam, int(_469 + 1u)).x, texelFetch(g_forceParam, int(_469 + 2u)).x);
                uint _483 = (_467 * 24u) + 4u;
                vec4 _496 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_483)).x, texelFetch(g_forceParam, int(_483 + 1u)).x, texelFetch(g_forceParam, int(_483 + 2u)).x, texelFetch(g_forceParam, int(_483 + 3u)).x));
                _500 = _496.w;
                uint _502 = (_467 * 24u) + 8u;
                vec4 _515 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_502)).x, texelFetch(g_forceParam, int(_502 + 1u)).x, texelFetch(g_forceParam, int(_502 + 2u)).x, texelFetch(g_forceParam, int(_502 + 3u)).x));
                _519 = _515.w;
                uint _521 = (_467 * 24u) + 12u;
                _532 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_521)).x, texelFetch(g_forceParam, int(_521 + 1u)).x, _527, texelFetch(g_forceParam, int(_521 + 3u)).x));
                _533 = _532.x;
                _534 = _532.w;
                uint _536 = (_467 * 24u) + 16u;
                vec3 _546 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_536)).x, texelFetch(g_forceParam, int(_536 + 1u)).x, texelFetch(g_forceParam, int(_536 + 2u)).x));
                _547 = _546.x;
                _548 = _546.y;
                _549 = _546.z;
                uint _552 = (_467 * 24u) + 20u;
                vec4 _565 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_552)).x, texelFetch(g_forceParam, int(_552 + 1u)).x, texelFetch(g_forceParam, int(_552 + 2u)).x, texelFetch(g_forceParam, int(_552 + 3u)).x));
                _566 = _565.x;
                _567 = _565.y;
                _568 = _565.z;
                _569 = _565.w;
                _570 = _478.x == 1u;
                _571 = _478.y == 1u;
                _572 = _478.z == 1u;
                _573 = CB_CS_ANIMATION._m0[2u].w - _496.x;
                _574 = CB_CS_ANIMATION._m0[3u].w - _496.y;
                _575 = CB_CS_ANIMATION._m0[4u].w - _496.z;
                _576 = _570 ? _515.x : _573;
                _577 = _570 ? _515.y : _574;
                _578 = _570 ? _515.z : _575;
                _579 = dot(vec3(_576, _577, _578), vec3(_576, _577, _578));
                _582 = _579 > 0.0;
                float frontier_phi_15_pred;
                float frontier_phi_15_pred_1;
                float frontier_phi_15_pred_2;
                if (_582)
                {
                    float _743 = sqrt(((_573 * _573) + (_574 * _574)) + (_575 * _575));
                    float _744 = inversesqrt(_579);
                    float _745 = _744 * _576;
                    float _746 = _744 * _577;
                    float _747 = _744 * _578;
                    float _751 = 1.0 - (_743 / (isnan(0.001000000047497451305389404296875) ? _532.y : (isnan(_532.y) ? 0.001000000047497451305389404296875 : max(_532.y, 0.001000000047497451305389404296875))));
                    float _1063 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
                    float _752 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
                    float _802;
                    if (_572)
                    {
                        float _789 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
                        float _798 = (dot(vec3(_745, _746, _747), vec3(_789 * _573, _789 * _574, _789 * _575)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _1074 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
                        _802 = (isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0))) * _752;
                    }
                    else
                    {
                        _802 = _752;
                    }
                    float frontier_phi_15_pred_19_ladder;
                    float frontier_phi_15_pred_19_ladder_1;
                    float frontier_phi_15_pred_19_ladder_2;
                    if (_802 > 0.0)
                    {
                        bool _821 = _570 && (!_572);
                        float _827 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _533 : (isnan(_533) ? 0.001000000047497451305389404296875 : max(_533, 0.001000000047497451305389404296875)));
                        float _829 = dot(vec2(_745, _747), vec2(_573, _575));
                        float _837 = sin(((_827 * _241) + (_821 ? 0.0 : (_743 * (-4.0)))) - ((_827 * float(_821)) * _829));
                        float _841 = _570 ? ((_534 * _519) * _837) : 0.0;
                        float _904;
                        if (_571)
                        {
                            float _865 = _547 * 2.0;
                            float _867 = _567 + _568;
                            float _868 = _867 + _569;
                            float _876 = dot(vec2(_747, (-0.0) - _745), vec2(_573, _575)) / _865;
                            float _880 = fract(abs(_876));
                            float _891 = _566 * _241;
                            float _895 = _868 * _566;
                            float _897 = (((_891 - (_547 * 0.25)) - _829) - (sin(((_547 * 12.56636810302734375) * ((_876 >= ((-0.0) - _876)) ? _880 : ((-0.0) - _880))) / _865) * (isnan(5.0) ? _547 : (isnan(_547) ? 5.0 : min(_547, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _895 : (isnan(_895) ? 0.001000000047497451305389404296875 : max(_895, 0.001000000047497451305389404296875)));
                            float _898 = fract(_897);
                            float _901 = (_897 < 0.0) ? (1.0 - _898) : _898;
                            float _902 = _567 / _868;
                            float _974;
                            if (_901 < _902)
                            {
                                _974 = _901 / _902;
                            }
                            else
                            {
                                float frontier_phi_34_31_ladder;
                                if (_901 < (_867 / _868))
                                {
                                    frontier_phi_34_31_ladder = 1.0 - (((_901 - _902) * _868) / _568);
                                }
                                else
                                {
                                    frontier_phi_34_31_ladder = 0.0;
                                }
                                _974 = frontier_phi_34_31_ladder;
                            }
                            _904 = (_974 * _549) * abs(sin((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _547 : (isnan(_547) ? 0.001000000047497451305389404296875 : max(_547, 0.001000000047497451305389404296875)))) * (_891 - _829)) + _548);
                        }
                        else
                        {
                            _904 = 0.0;
                        }
                        float _907 = ((_837 * _519) + _500) + _904;
                        float _914 = _802 * 0.0500000007450580596923828125;
                        frontier_phi_15_pred_19_ladder = _914 * ((_907 * _745) - (_841 * _747));
                        frontier_phi_15_pred_19_ladder_1 = ((_746 * 0.0500000007450580596923828125) * _802) * _907;
                        frontier_phi_15_pred_19_ladder_2 = _914 * ((_907 * _747) + (_841 * _745));
                    }
                    else
                    {
                        frontier_phi_15_pred_19_ladder = 0.0;
                        frontier_phi_15_pred_19_ladder_1 = 0.0;
                        frontier_phi_15_pred_19_ladder_2 = 0.0;
                    }
                    frontier_phi_15_pred = frontier_phi_15_pred_19_ladder;
                    frontier_phi_15_pred_1 = frontier_phi_15_pred_19_ladder_1;
                    frontier_phi_15_pred_2 = frontier_phi_15_pred_19_ladder_2;
                }
                else
                {
                    frontier_phi_15_pred = 0.0;
                    frontier_phi_15_pred_1 = 0.0;
                    frontier_phi_15_pred_2 = 0.0;
                }
                _753 = frontier_phi_15_pred;
                _755 = frontier_phi_15_pred_1;
                _757 = frontier_phi_15_pred_2;
                _245 = _753 + _460;
                _247 = _755 + _461;
                _249 = _757 + _462;
                uint _466 = _465 + 1u;
                if (_466 == _142)
                {
                    break;
                }
                else
                {
                    _460 = _245;
                    _461 = _247;
                    _462 = _249;
                    _463 = (_465 != 3u) ? (_463 >> 8u) : _242;
                    _465 = _466;
                    continue;
                }
            }
            _243 = _245;
            _246 = _247;
            _248 = _249;
        }
        float _255 = sqrt(((_246 * _246) + (_243 * _243)) + (_248 * _248));
        bool _256 = _255 < 0.00011000000085914507508277893066406;
        float _262 = inversesqrt(dot(vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y), vec3(CB_CS_ANIMATION._m0[2u].y, CB_CS_ANIMATION._m0[3u].y, CB_CS_ANIMATION._m0[4u].y)));
        float _263 = _262 * CB_CS_ANIMATION._m0[2u].y;
        float _264 = _262 * CB_CS_ANIMATION._m0[3u].y;
        float _265 = _262 * CB_CS_ANIMATION._m0[4u].y;
        float _269 = inversesqrt(dot(vec3(_243, _246, _248), vec3(_243, _246, _248)));
        float _270 = _269 * _243;
        float _271 = _269 * _246;
        float _272 = _269 * _248;
        float _275 = (_272 * _264) - (_271 * _265);
        float _278 = (_270 * _265) - (_272 * _263);
        float _281 = (_271 * _263) - (_270 * _264);
        float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
        float _286 = _275 * _285;
        float _287 = _278 * _285;
        float _288 = _281 * _285;
        float _292 = log2(_255 + 1.0) * cbMtdParam._m0[10u].w;
        float _293 = dot(vec3(_286, _287, _288), vec3(_215, _217, _219));
        float _299 = (_293 * _286) + CB_CS_ANIMATION._m0[2u].w;
        float _300 = (_293 * _287) + CB_CS_ANIMATION._m0[3u].w;
        float _301 = (_293 * _288) + CB_CS_ANIMATION._m0[4u].w;
        float _302 = _170 - _299;
        float _303 = _174 - _300;
        float _304 = _178 - _301;
        float _314 = sin(_292);
        float _315 = cos(_292);
        float _334 = (_256 ? 0.0 : (((_299 - _170) + (_315 * _302)) + (((_304 * _287) - (_303 * _288)) * _314))) + _170;
        float _335 = (_256 ? 0.0 : (((_300 - _174) + (((_302 * _288) - (_304 * _286)) * _314)) + (_315 * _303))) + _174;
        float _336 = (_256 ? 0.0 : (((_301 - _178) + (((_303 * _286) - (_302 * _287)) * _314)) + (_315 * _304))) + _178;
        float _337 = (sqrt(((_218 * _218) + (_216 * _216)) + (_220 * _220)) * cbMtdParam._m0[10u].z) + cbPerFrame._m0[22u].x;
        float _339;
        float _341;
        float _343;
        if (_143)
        {
            _339 = 0.0;
            _341 = 0.0;
            _343 = 0.0;
        }
        else
        {
            uint _459 = _140.x;
            float _340;
            float _342;
            float _344;
            float _777;
            float _779;
            float _781;
            float _616 = 0.0;
            float _617 = 0.0;
            float _618 = 0.0;
            uint _619 = _459;
            uint _621 = 0u;
            float _655;
            float _674;
            vec4 _687;
            float _688;
            float _689;
            float _702;
            float _703;
            float _704;
            float _720;
            float _721;
            float _722;
            float _723;
            bool _724;
            bool _725;
            bool _726;
            float _727;
            float _728;
            float _729;
            float _730;
            float _731;
            float _732;
            float _733;
            bool _736;
            for (;;)
            {
                uint _623 = _619 & 255u;
                uint _624 = _623 * 24u;
                uvec3 _633 = uvec3(texelFetch(g_forceParam, int(_624)).x, texelFetch(g_forceParam, int(_624 + 1u)).x, texelFetch(g_forceParam, int(_624 + 2u)).x);
                uint _638 = (_623 * 24u) + 4u;
                vec4 _651 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_638)).x, texelFetch(g_forceParam, int(_638 + 1u)).x, texelFetch(g_forceParam, int(_638 + 2u)).x, texelFetch(g_forceParam, int(_638 + 3u)).x));
                _655 = _651.w;
                uint _657 = (_623 * 24u) + 8u;
                vec4 _670 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_657)).x, texelFetch(g_forceParam, int(_657 + 1u)).x, texelFetch(g_forceParam, int(_657 + 2u)).x, texelFetch(g_forceParam, int(_657 + 3u)).x));
                _674 = _670.w;
                uint _676 = (_623 * 24u) + 12u;
                _687 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_676)).x, texelFetch(g_forceParam, int(_676 + 1u)).x, _682, texelFetch(g_forceParam, int(_676 + 3u)).x));
                _688 = _687.x;
                _689 = _687.w;
                uint _691 = (_623 * 24u) + 16u;
                vec3 _701 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_691)).x, texelFetch(g_forceParam, int(_691 + 1u)).x, texelFetch(g_forceParam, int(_691 + 2u)).x));
                _702 = _701.x;
                _703 = _701.y;
                _704 = _701.z;
                uint _706 = (_623 * 24u) + 20u;
                vec4 _719 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_706)).x, texelFetch(g_forceParam, int(_706 + 1u)).x, texelFetch(g_forceParam, int(_706 + 2u)).x, texelFetch(g_forceParam, int(_706 + 3u)).x));
                _720 = _719.x;
                _721 = _719.y;
                _722 = _719.z;
                _723 = _719.w;
                _724 = _633.x == 1u;
                _725 = _633.y == 1u;
                _726 = _633.z == 1u;
                _727 = _201 - _651.x;
                _728 = _205 - _651.y;
                _729 = _209 - _651.z;
                _730 = _724 ? _670.x : _727;
                _731 = _724 ? _670.y : _728;
                _732 = _724 ? _670.z : _729;
                _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
                _736 = _733 > 0.0;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                if (_736)
                {
                    float _768 = sqrt(((_727 * _727) + (_728 * _728)) + (_729 * _729));
                    float _769 = inversesqrt(_733);
                    float _770 = _769 * _730;
                    float _771 = _769 * _731;
                    float _772 = _769 * _732;
                    float _775 = 1.0 - (_768 / (isnan(0.001000000047497451305389404296875) ? _687.y : (isnan(_687.y) ? 0.001000000047497451305389404296875 : max(_687.y, 0.001000000047497451305389404296875))));
                    float _1110 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
                    float _776 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
                    float _818;
                    if (_726)
                    {
                        float _807 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
                        float _815 = (dot(vec3(_770, _771, _772), vec3(_807 * _727, _807 * _728, _807 * _729)) * 0.800000011920928955078125) + 0.20000000298023223876953125;
                        float _1121 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
                        _818 = (isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0))) * _776;
                    }
                    else
                    {
                        _818 = _776;
                    }
                    float frontier_phi_17_pred_22_ladder;
                    float frontier_phi_17_pred_22_ladder_1;
                    float frontier_phi_17_pred_22_ladder_2;
                    if (_818 > 0.0)
                    {
                        bool _843 = _724 && (!_726);
                        float _849 = (6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _688 : (isnan(_688) ? 0.001000000047497451305389404296875 : max(_688, 0.001000000047497451305389404296875)))) * cbMtdParam._m0[11u].y;
                        float _850 = dot(vec2(_770, _772), vec2(_727, _729));
                        float _858 = sin(((_849 * _337) + (_843 ? 0.0 : (_768 * (-4.0)))) - ((_849 * float(_843)) * _850));
                        float _862 = _724 ? ((_689 * _674) * _858) : 0.0;
                        float _955;
                        if (_725)
                        {
                            float _919 = _702 * 2.0;
                            float _920 = _721 + _722;
                            float _921 = _920 + _723;
                            float _929 = dot(vec2(_772, (-0.0) - _770), vec2(_727, _729)) / _919;
                            float _933 = fract(abs(_929));
                            float _942 = _720 * _337;
                            float _946 = _921 * _720;
                            float _948 = (((_942 - (_702 * 0.25)) - _850) - (sin(((_702 * 12.56636810302734375) * ((_929 >= ((-0.0) - _929)) ? _933 : ((-0.0) - _933))) / _919) * (isnan(5.0) ? _702 : (isnan(_702) ? 5.0 : min(_702, 5.0))))) / (isnan(0.001000000047497451305389404296875) ? _946 : (isnan(_946) ? 0.001000000047497451305389404296875 : max(_946, 0.001000000047497451305389404296875)));
                            float _949 = fract(_948);
                            float _952 = (_948 < 0.0) ? (1.0 - _949) : _949;
                            float _953 = _721 / _921;
                            float _985;
                            if (_952 < _953)
                            {
                                _985 = _952 / _953;
                            }
                            else
                            {
                                float frontier_phi_36_33_ladder;
                                if (_952 < (_920 / _921))
                                {
                                    frontier_phi_36_33_ladder = 1.0 - (((_952 - _953) * _921) / _722);
                                }
                                else
                                {
                                    frontier_phi_36_33_ladder = 0.0;
                                }
                                _985 = frontier_phi_36_33_ladder;
                            }
                            _955 = (_985 * _704) * abs(sin(((6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _702 : (isnan(_702) ? 0.001000000047497451305389404296875 : max(_702, 0.001000000047497451305389404296875)))) * cbMtdParam._m0[11u].y) * (_942 - _850)) + _703);
                        }
                        else
                        {
                            _955 = 0.0;
                        }
                        float _958 = ((_858 * _674) + _655) + _955;
                        float _965 = _818 * 0.0500000007450580596923828125;
                        frontier_phi_17_pred_22_ladder = _965 * ((_958 * _770) - (_862 * _772));
                        frontier_phi_17_pred_22_ladder_1 = ((_771 * 0.0500000007450580596923828125) * _818) * _958;
                        frontier_phi_17_pred_22_ladder_2 = _965 * ((_958 * _772) + (_862 * _770));
                    }
                    else
                    {
                        frontier_phi_17_pred_22_ladder = 0.0;
                        frontier_phi_17_pred_22_ladder_1 = 0.0;
                        frontier_phi_17_pred_22_ladder_2 = 0.0;
                    }
                    frontier_phi_17_pred = frontier_phi_17_pred_22_ladder;
                    frontier_phi_17_pred_1 = frontier_phi_17_pred_22_ladder_1;
                    frontier_phi_17_pred_2 = frontier_phi_17_pred_22_ladder_2;
                }
                else
                {
                    frontier_phi_17_pred = 0.0;
                    frontier_phi_17_pred_1 = 0.0;
                    frontier_phi_17_pred_2 = 0.0;
                }
                _777 = frontier_phi_17_pred;
                _779 = frontier_phi_17_pred_1;
                _781 = frontier_phi_17_pred_2;
                _340 = _777 + _616;
                _342 = _779 + _617;
                _344 = _781 + _618;
                uint _622 = _621 + 1u;
                if (_622 == _142)
                {
                    break;
                }
                else
                {
                    _616 = _340;
                    _617 = _342;
                    _618 = _344;
                    _619 = (_621 != 3u) ? (_619 >> 8u) : _242;
                    _621 = _622;
                    continue;
                }
            }
            _339 = _340;
            _341 = _342;
            _343 = _344;
        }
        float _350 = sqrt(((_341 * _341) + (_339 * _339)) + (_343 * _343));
        bool _351 = _350 < 0.00011000000085914507508277893066406;
        float _355 = inversesqrt(dot(vec3(_339, _341, _343), vec3(_339, _341, _343)));
        float _356 = _355 * _339;
        float _357 = _355 * _341;
        float _358 = _355 * _343;
        float _361 = (_358 * _264) - (_357 * _265);
        float _364 = (_356 * _265) - (_358 * _263);
        float _367 = (_357 * _263) - (_356 * _264);
        float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
        float _372 = _361 * _371;
        float _373 = _364 * _371;
        float _374 = _367 * _371;
        float _377 = log2(_350 + 1.0) * cbMtdParam._m0[10u].y;
        float _381 = dot(vec3(_372, _373, _374), vec3(_334 - _201, _335 - _205, _336 - _209));
        float _387 = (_381 * _372) + _201;
        float _388 = (_381 * _373) + _205;
        float _389 = (_381 * _374) + _209;
        float _390 = _334 - _387;
        float _391 = _335 - _388;
        float _392 = _336 - _389;
        float _402 = sin(_377);
        float _403 = cos(_377);
        float _422 = _334 + (_351 ? 0.0 : (((_387 - _334) + (_403 * _390)) + (((_392 * _373) - (_391 * _374)) * _402)));
        float _423 = _335 + (_351 ? 0.0 : (((_388 - _335) + (((_390 * _374) - (_392 * _372)) * _402)) + (_403 * _391)));
        float _424 = _336 + (_351 ? 0.0 : (((_389 - _336) + (((_391 * _372) - (_390 * _373)) * _402)) + (_403 * _392)));
        float _448 = fma(_424, CB_CS_ANIMATION._m0[5u].z, fma(_423, CB_CS_ANIMATION._m0[5u].y, _422 * CB_CS_ANIMATION._m0[5u].x)) + CB_CS_ANIMATION._m0[5u].w;
        float _452 = fma(_424, CB_CS_ANIMATION._m0[6u].z, fma(_423, CB_CS_ANIMATION._m0[6u].y, _422 * CB_CS_ANIMATION._m0[6u].x)) + CB_CS_ANIMATION._m0[6u].w;
        float _456 = fma(_424, CB_CS_ANIMATION._m0[7u].z, fma(_423, CB_CS_ANIMATION._m0[7u].y, _422 * CB_CS_ANIMATION._m0[7u].x)) + CB_CS_ANIMATION._m0[7u].w;
        if (_91.w == 0u)
        {
            uint _593 = _59 * 3u;
            imageStore(outPositionBuffer, int(_593), uvec4(uint(float(floatBitsToUint(_448)))));
            imageStore(outPositionBuffer, int(_593 + 1u), uvec4(uint(float(floatBitsToUint(_452)))));
            imageStore(outPositionBuffer, int(_593 + 2u), uvec4(uint(float(floatBitsToUint(_456)))));
        }
        else
        {
            uint _612 = _59 * 2u;
            imageStore(outPositionBuffer, int(_612), uvec4((packHalf2x16(vec2(_452, 0.0)) << 16u) | packHalf2x16(vec2(_448, 0.0))));
            imageStore(outPositionBuffer, int(_612 + 1u), uvec4((packHalf2x16(vec2(0.0)) << 16u) | packHalf2x16(vec2(_456, 0.0))));
        }
    }
}


