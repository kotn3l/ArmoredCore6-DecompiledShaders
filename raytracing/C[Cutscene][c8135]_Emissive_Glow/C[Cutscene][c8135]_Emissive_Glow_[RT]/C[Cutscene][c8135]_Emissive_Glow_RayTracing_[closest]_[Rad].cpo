#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1150;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _154 & 65535u;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _155 >> 16u;
        }
        _160 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _119.w == 0u;
    bool _173 = _170 || _172;
    uint _175 = (_168 * _160) + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 24u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 28u;
    }
    bool _208 = _169 == 0u;
    uint _209;
    if (_208)
    {
        _209 = _202;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 8u;
        }
        _209 = frontier_phi_9_10_ladder;
    }
    uint _219 = (((_168 * _160) + 4u) + (_170 ? (_209 + 4u) : _209)) >> 2u;
    uvec2 _225 = uvec2(texelFetch(l_geomAttrib_0, int(_219)).x, texelFetch(l_geomAttrib_0, int(_219 + 1u)).x);
    uint _226 = _225.x;
    uint _227 = _225.y;
    float _231 = float(int(uint(int(_226 << 16u) >> int(16u))));
    float _232 = float(int(uint(int(_226) >> int(16u))));
    uint _239 = (_168 * _162) + 12u;
    uint _260;
    uint _261;
    uint _262;
    uint _263;
    if (_173)
    {
        uvec4 _241 = texelFetch(l_geomAttrib_0, int(_239 >> 2u));
        uint _242 = _241.x;
        _260 = _242 & 255u;
        _261 = (_242 >> 8u) & 255u;
        _262 = (_242 >> 16u) & 255u;
        _263 = 24u;
    }
    else
    {
        uint _248 = _239 >> 2u;
        uvec2 _254 = uvec2(texelFetch(l_geomAttrib_0, int(_248)).x, texelFetch(l_geomAttrib_0, int(_248 + 1u)).x);
        uint _255 = _254.x;
        _260 = _255 & 65535u;
        _261 = _255 >> 16u;
        _262 = _254.y & 65535u;
        _263 = 28u;
    }
    uint _267;
    if (_208)
    {
        _267 = _263;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _263 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _263 + 8u;
        }
        _267 = frontier_phi_16_17_ladder;
    }
    uint _275 = (((_168 * _162) + 4u) + (_170 ? (_267 + 4u) : _267)) >> 2u;
    uvec2 _281 = uvec2(texelFetch(l_geomAttrib_0, int(_275)).x, texelFetch(l_geomAttrib_0, int(_275 + 1u)).x);
    uint _282 = _281.x;
    uint _283 = _281.y;
    float _287 = float(int(uint(int(_282 << 16u) >> int(16u))));
    float _288 = float(int(uint(int(_282) >> int(16u))));
    uint _295 = (_168 * _163) + 12u;
    uint _316;
    uint _317;
    uint _318;
    uint _319;
    if (_173)
    {
        uvec4 _297 = texelFetch(l_geomAttrib_0, int(_295 >> 2u));
        uint _298 = _297.x;
        _316 = _298 & 255u;
        _317 = (_298 >> 8u) & 255u;
        _318 = (_298 >> 16u) & 255u;
        _319 = 24u;
    }
    else
    {
        uint _304 = _295 >> 2u;
        uvec2 _310 = uvec2(texelFetch(l_geomAttrib_0, int(_304)).x, texelFetch(l_geomAttrib_0, int(_304 + 1u)).x);
        uint _311 = _310.x;
        _316 = _311 & 65535u;
        _317 = _311 >> 16u;
        _318 = _310.y & 65535u;
        _319 = 28u;
    }
    uint _323;
    if (_208)
    {
        _323 = _319;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _319 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _319 + 8u;
        }
        _323 = frontier_phi_23_24_ladder;
    }
    uint _331 = (((_168 * _163) + 4u) + (_170 ? (_323 + 4u) : _323)) >> 2u;
    uvec2 _337 = uvec2(texelFetch(l_geomAttrib_0, int(_331)).x, texelFetch(l_geomAttrib_0, int(_331 + 1u)).x);
    uint _338 = _337.x;
    uint _339 = _337.y;
    float _343 = float(int(uint(int(_338 << 16u) >> int(16u))));
    float _344 = float(int(uint(int(_338) >> int(16u))));
    bool _351 = _119.z == 0u;
    float _387;
    float _388;
    float _389;
    if (_351)
    {
        uint _354 = _160 * 3u;
        uvec3 _363 = uvec3(texelFetch(l_geomPositionBuffer, int(_354)).x, texelFetch(l_geomPositionBuffer, int(_354 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_354 + 2u)).x);
        _387 = uintBitsToFloat(_363.x);
        _388 = uintBitsToFloat(_363.y);
        _389 = uintBitsToFloat(_363.z);
    }
    else
    {
        uint _371 = _160 * 2u;
        uvec2 _377 = uvec2(texelFetch(l_geomPositionBuffer, int(_371)).x, texelFetch(l_geomPositionBuffer, int(_371 + 1u)).x);
        uint _378 = _377.x;
        _387 = unpackHalf2x16(_378).x;
        _388 = unpackHalf2x16(_378 >> 16u).x;
        _389 = unpackHalf2x16(_377.y).x;
    }
    float _425;
    float _426;
    float _427;
    if (_351)
    {
        uint _392 = _162 * 3u;
        uvec3 _401 = uvec3(texelFetch(l_geomPositionBuffer, int(_392)).x, texelFetch(l_geomPositionBuffer, int(_392 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_392 + 2u)).x);
        _425 = uintBitsToFloat(_401.x);
        _426 = uintBitsToFloat(_401.y);
        _427 = uintBitsToFloat(_401.z);
    }
    else
    {
        uint _409 = _162 * 2u;
        uvec2 _415 = uvec2(texelFetch(l_geomPositionBuffer, int(_409)).x, texelFetch(l_geomPositionBuffer, int(_409 + 1u)).x);
        uint _416 = _415.x;
        _425 = unpackHalf2x16(_416).x;
        _426 = unpackHalf2x16(_416 >> 16u).x;
        _427 = unpackHalf2x16(_415.y).x;
    }
    float _463;
    float _464;
    float _465;
    if (_351)
    {
        uint _430 = _163 * 3u;
        uvec3 _439 = uvec3(texelFetch(l_geomPositionBuffer, int(_430)).x, texelFetch(l_geomPositionBuffer, int(_430 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_430 + 2u)).x);
        _463 = uintBitsToFloat(_439.x);
        _464 = uintBitsToFloat(_439.y);
        _465 = uintBitsToFloat(_439.z);
    }
    else
    {
        uint _447 = _163 * 2u;
        uvec2 _453 = uvec2(texelFetch(l_geomPositionBuffer, int(_447)).x, texelFetch(l_geomPositionBuffer, int(_447 + 1u)).x);
        uint _454 = _453.x;
        _463 = unpackHalf2x16(_454).x;
        _464 = unpackHalf2x16(_454 >> 16u).x;
        _465 = unpackHalf2x16(_453.y).x;
    }
    float _468 = (1.0 - hit._m0.x) - hit._m0.y;
    float _500 = (_287 - _231) * 0.00048828125;
    float _502 = (_288 - _232) * 0.00048828125;
    float _505 = (_343 - _231) * 0.00048828125;
    float _506 = (_344 - _232) * 0.00048828125;
    float _528 = _425 - _387;
    float _529 = _426 - _388;
    float _530 = _427 - _389;
    float _533 = fma(_530, gl_ObjectToWorldEXT[2u].x, fma(_529, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _528));
    float _536 = fma(_530, gl_ObjectToWorldEXT[2u].y, fma(_529, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _528));
    float _539 = fma(_530, gl_ObjectToWorldEXT[2u].z, fma(_529, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _528));
    float _540 = _463 - _387;
    float _541 = _464 - _388;
    float _542 = _465 - _389;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = (((_287 * hit._m0.x) + (_231 * _468)) + (_343 * hit._m0.y)) * 0.00048828125;
    float _553 = (((_288 * hit._m0.x) + (_232 * _468)) + (_344 * hit._m0.y)) * 0.00048828125;
    float _559 = (((float(_199) * _468) + (-127.0)) + (float(_260) * hit._m0.x)) + (float(_316) * hit._m0.y);
    float _562 = (((float(_200) * _468) + (-127.0)) + (float(_261) * hit._m0.x)) + (float(_317) * hit._m0.y);
    float _565 = (((float(_201) * _468) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_318) * hit._m0.y);
    float _566 = _559 * 0.0078740157186985015869140625;
    float _568 = _562 * 0.0078740157186985015869140625;
    float _569 = _565 * 0.0078740157186985015869140625;
    uvec2 _587 = uvec2(textureSize(C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _592 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _645;
    if (_592)
    {
        float _603 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _609 = (_551 * _536) - (_548 * _539);
        float _612 = (_545 * _539) - (_551 * _533);
        float _615 = (_548 * _533) - (_545 * _536);
        float _642 = ((log2((((float(_587.y) * 0.5) * float(_587.x)) * abs((_506 * _500) - (_505 * _502))) / (sqrt(((_612 * _612) + (_615 * _615)) + (_609 * _609)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_603 * gl_WorldRayDirectionEXT.x, _603 * gl_WorldRayDirectionEXT.y, _603 * gl_WorldRayDirectionEXT.z), vec3(_566, _568, _569))));
        _645 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    }
    else
    {
        _645 = 0.0;
    }
    vec4 _649 = textureLod(sampler2D(C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _552) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _553) + cbTextureTilingScale._m0[0u].w), _645);
    float _654 = _649.x * cbMtdParam._m0[9u].y;
    float _655 = _649.y * cbMtdParam._m0[9u].z;
    float _656 = _649.z * cbMtdParam._m0[9u].w;
    uvec2 _678 = uvec2(textureSize(C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    float _729;
    if (_592)
    {
        float _689 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _695 = (_551 * _536) - (_548 * _539);
        float _698 = (_545 * _539) - (_551 * _533);
        float _701 = (_548 * _533) - (_545 * _536);
        float _727 = ((log2((((float(_678.y) * 0.5) * float(_678.x)) * abs((_506 * _500) - (_505 * _502))) / (sqrt(((_698 * _698) + (_701 * _701)) + (_695 * _695)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_689 * gl_WorldRayDirectionEXT.x, _689 * gl_WorldRayDirectionEXT.y, _689 * gl_WorldRayDirectionEXT.z), vec3(_566, _568, _569))));
        _729 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    }
    else
    {
        _729 = 0.0;
    }
    vec4 _731 = textureLod(sampler2D(C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _552) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _553) + cbTextureTilingScale._m0[1u].w), _729);
    bool _740 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _754 = (((((((float(int(uint(int(_283 << 16u) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_227 << 16u) >> int(16u)))) * _468)) + (float(int(uint(int(_339 << 16u) >> int(16u)))) * hit._m0.y)) * 0.00048828125) + (-0.5)) + cbMtdParam._m0[12u].x) * cbMtdParam._m0[12u].z) + 0.5;
    float _755 = (((((((float(int(uint(int(_283) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_227) >> int(16u)))) * _468)) + (float(int(uint(int(_339) >> int(16u)))) * hit._m0.y)) * 0.00048828125) + (-0.5)) + cbMtdParam._m0[12u].y) * cbMtdParam._m0[12u].w) + 0.5;
    float _1238 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1249 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _773 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _774 = _773 * gl_WorldRayDirectionEXT.x;
    float _775 = _773 * gl_WorldRayDirectionEXT.y;
    float _776 = _773 * gl_WorldRayDirectionEXT.z;
    float _792;
    if (_592)
    {
        float _784 = log2(0.0);
        float _790 = ((_784 * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_774, _775, _776), vec3(_566, _568, _569))));
        _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    }
    else
    {
        _792 = 0.0;
    }
    vec4 _795 = textureLod(sampler2D(C_Cutscene_c8135_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2(((_740 ? _754 : (isnan(1.0) ? _1238 : (isnan(_1238) ? 1.0 : min(_1238, 1.0)))) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_740 ? _755 : (isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0)))) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _792);
    float _797 = _795.x;
    float _805 = abs((fract(cbMtdParam._m0[12u].y * 20.0) * 2.0) + (-1.0));
    float _1265 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _1265 : (isnan(_1265) ? 1.0 : min(_1265, 1.0));
    float _814 = (((_806 * _806) * (3.0 - (_806 * 2.0))) * cbMtdParam._m0[11u].z) - cbMtdParam._m0[11u].w;
    float _830 = inversesqrt(dot(vec3(_566, _568, _569), vec3(_566, _568, _569)));
    float _831 = _830 * _566;
    float _832 = _830 * _568;
    float _833 = _830 * _569;
    float _845 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _846 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _847 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _848 = (-0.0) - _774;
    float _850 = (-0.0) - _775;
    float _851 = (-0.0) - _776;
    float _857 = float(gl_LaunchIDEXT.x);
    float _858 = float(gl_LaunchIDEXT.y);
    float _861 = float(gl_LaunchSizeEXT.x);
    float _875 = fract(fract(sin(dot(vec2(_857 / _861, _858 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _888 = fract(fract(sin(dot(vec2((_857 + 128.0) / _861, (_858 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _898 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _899 = _898.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _899, _898.w, _899, vec3(_845, _846, _847), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (_61._m0 == 0u)
    {
        float _919 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_831, _832, _833));
        float _1276 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _922 = isnan(1.0) ? _1276 : (isnan(_1276) ? 1.0 : min(_1276, 1.0));
        float _933 = g_sceneCB._m0[4u].x - _774;
        float _934 = g_sceneCB._m0[4u].y - _775;
        float _935 = g_sceneCB._m0[4u].z - _776;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _943 = dot(vec3(_831, _832, _833), vec3(g_sceneCB._m0[4u].xyz));
        float _1287 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _946 = isnan(1.0) ? _1287 : (isnan(_1287) ? 1.0 : min(_1287, 1.0));
        float _947 = dot(vec3(_831, _832, _833), vec3(_848, _850, _851));
        float _1298 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_933 * _939, _934 * _939, _935 * _939));
        float _1309 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _962 = (exp2(log2(1.0 - (isnan(1.0) ? _1309 : (isnan(_1309) ? 1.0 : min(_1309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _968 = (0.5 / ((_946 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0))))) * _946;
        float _1320 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _970 = (isnan(1.0) ? _1320 : (isnan(_1320) ? 1.0 : min(_1320, 1.0))) * 0.31831014156341552734375;
        _978 = ((_654 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _922;
        _979 = ((_655 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _922;
        _980 = ((_656 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _922;
        _981 = (_962 * g_sceneCB._m0[5u].x) * _970;
        _982 = (_962 * g_sceneCB._m0[5u].y) * _970;
        _983 = (_962 * g_sceneCB._m0[5u].z) * _970;
    }
    else
    {
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    bool _985 = abs(_832) < 0.89999997615814208984375;
    float _987 = float(_985);
    float _988 = _985 ? 0.0 : 1.0;
    float _991 = (_987 * _833) - (_988 * _832);
    float _992 = _988 * _831;
    float _994 = (-0.0) - (_831 * _987);
    float _998 = inversesqrt(dot(vec3(_991, _992, _994), vec3(_991, _992, _994)));
    float _999 = _991 * _998;
    float _1000 = _992 * _998;
    float _1001 = _998 * _994;
    float _1004 = (_1000 * _833) - (_1001 * _832);
    float _1007 = (_1001 * _831) - (_999 * _833);
    float _1010 = (_999 * _832) - (_1000 * _831);
    float _1012;
    float _1020;
    float _1011 = 0.0;
    uint _1013 = 0u;
    float _1017;
    bool _1019;
    for (;;)
    {
        _1017 = (float(_1013) + _875) * 0.03125;
        _1019 = _1013 == 0u;
        float frontier_phi_45_pred;
        if (_1019)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1155;
            float _1156;
            uint _1158;
            _1155 = 0.0;
            _1156 = 0.5;
            _1158 = _1013;
            float _1021;
            for (;;)
            {
                _1021 = ((_1158 & 1u) != 0u) ? (_1156 + _1155) : _1155;
                uint _1159 = _1158 >> 1u;
                if (_1159 == 0u)
                {
                    break;
                }
                else
                {
                    _1155 = _1021;
                    _1156 *= 0.5;
                    _1158 = _1159;
                }
            }
            frontier_phi_45_pred = _1021;
        }
        _1020 = frontier_phi_45_pred;
        float _1022 = _1020 + _888;
        float _1026 = sqrt(_1017);
        float _1027 = ((_1022 > 1.0) ? (_1022 + (-1.0)) : _1022) * 6.283185482025146484375;
        float _1030 = cos(_1027) * _1026;
        float _1032 = sin(_1027) * _1026;
        float _1034 = sqrt(1.0 - _1017);
        float _1047 = ((_1034 * _831) + (_1030 * _1004)) + (_1032 * _999);
        float _1048 = ((_1034 * _832) + (_1030 * _1007)) + (_1032 * _1000);
        float _1049 = ((_1034 * _833) + (_1030 * _1010)) + (_1032 * _1001);
        _60._m0 = 1u;
        uvec4 _1053 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1054 = _1053.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1054, _1053.w, _1054, vec3(_845, _846, _847), 9.9999997473787516355514526367188e-05, vec3(_1047, _1048, _1049), 10000.0, 1);
        float _1060 = dot(vec3(_831, _832, _833), vec3(_1047, _1048, _1049));
        float _1331 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1063 = isnan(1.0) ? _1331 : (isnan(_1331) ? 1.0 : min(_1331, 1.0));
        _1012 = ((float(_60._m0 == 0u) * _1063) / (_1063 * 0.3183098733425140380859375)) + _1011;
        uint _1014 = _1013 + 1u;
        if (_1014 == 32u)
        {
            break;
        }
        else
        {
            _1011 = _1012;
            _1013 = _1014;
            continue;
        }
    }
    float _1071 = _1012 * 0.009947183541953563690185546875;
    float _1076 = dot(vec3(_774, _775, _776), vec3(_831, _832, _833)) * 2.0;
    vec4 _1088 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_774 - (_1076 * _831), _775 - (_1076 * _832), _776 - (_1076 * _833)), 4.0);
    float _1093 = dot(vec3(_848, _850, _851), vec3(_831, _832, _833));
    float _1342 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1102 = (exp2(log2(1.0 - (isnan(1.0) ? _1342 : (isnan(_1342) ? 1.0 : min(_1342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1108 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_831, _832, _833), 0.0);
    float _1120 = ((_978 + ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _731.x) * _797) * _814)) + _981) + (((_1108.x * _654) + (_1102 * _1088.x)) * _1071);
    float _1125 = ((_979 + ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _731.y) * _797) * _814)) + _982) + (((_1108.y * _655) + (_1102 * _1088.y)) * _1071);
    float _1130 = ((_980 + ((((cbMtdParam._m0[10u].w * cbMtdParam._m0[11u].y) * _731.z) * _797) * _814)) + _983) + (((_1108.z * _656) + (_1102 * _1088.z)) * _1071);
    float _1353 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1364 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1375 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    bool _1138 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1149;
    _1149.x = _1138 ? ((_559 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1353 : (isnan(_1353) ? 1.0 : min(_1353, 1.0)));
    _1149.y = _1138 ? ((_562 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0)));
    _1149.z = _1138 ? ((_565 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0)));
    payload._m0 = _1149;
}


