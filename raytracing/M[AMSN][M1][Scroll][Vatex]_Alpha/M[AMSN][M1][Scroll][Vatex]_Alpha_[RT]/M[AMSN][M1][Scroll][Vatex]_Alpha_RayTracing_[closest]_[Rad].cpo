#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _56
{
    vec3 _m0;
};

struct _60
{
    vec2 _m0;
};

struct _63
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _56 payload;
hitAttributeEXT _60 hit;
layout(location = 1) rayPayloadEXT _63 _65;
layout(location = 2) rayPayloadEXT _63 _66;

vec3 _1190;

void main()
{
    float _80 = float(gl_LaunchSizeEXT.y);
    float _108 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _117 = sqrt(((_109 * _109) + (_108 * _108)) + (_110 * _110)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _80)))));
    uvec4 _128 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _129 = _128.y;
    uint _169;
    uint _171;
    uint _172;
    if (_128.x == 0u)
    {
        uint _137 = (_129 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _146 = uvec3(texelFetch(l_geomIndexBuffer, int(_137)).x, texelFetch(l_geomIndexBuffer, int(_137 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_137 + 2u)).x);
        _169 = _146.x;
        _171 = _146.y;
        _172 = _146.z;
    }
    else
    {
        uint _150 = uint(gl_PrimitiveID) * 6u;
        uint _152 = _150 & 4294967292u;
        uint _155 = (_129 + _152) >> 2u;
        uvec2 _162 = uvec2(texelFetch(l_geomIndexBuffer, int(_155)).x, texelFetch(l_geomIndexBuffer, int(_155 + 1u)).x);
        uint _163 = _162.x;
        uint _164 = _162.y;
        uint _166 = _163 >> 16u;
        uint _167 = _164 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_152 == _150)
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _166;
            frontier_phi_3_2_ladder_2 = _163 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _164 >> 16u;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _166;
        }
        _169 = frontier_phi_3_2_ladder_2;
        _171 = frontier_phi_3_2_ladder_1;
        _172 = frontier_phi_3_2_ladder;
    }
    uvec4 _176 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _177 = _176.x;
    uint _178 = _176.z;
    bool _179 = _178 != 0u;
    bool _181 = _128.w == 0u;
    bool _182 = _179 || _181;
    uint _183 = _177 * _169;
    uint _184 = _183 + 12u;
    uint _208;
    uint _209;
    uint _210;
    uint _211;
    if (_182)
    {
        uvec4 _187 = texelFetch(l_geomAttrib_0, int(_184 >> 2u));
        uint _188 = _187.x;
        _208 = _188 & 255u;
        _209 = (_188 >> 8u) & 255u;
        _210 = (_188 >> 16u) & 255u;
        _211 = 16u;
    }
    else
    {
        uint _196 = _184 >> 2u;
        uvec2 _202 = uvec2(texelFetch(l_geomAttrib_0, int(_196)).x, texelFetch(l_geomAttrib_0, int(_196 + 1u)).x);
        uint _203 = _202.x;
        _208 = _203 & 65535u;
        _209 = _203 >> 16u;
        _210 = _202.y & 65535u;
        _211 = 20u;
    }
    uvec4 _219 = texelFetch(l_geomAttrib_0, int((_211 + _183) >> 2u));
    uint _220 = _219.x;
    bool _234 = _178 == 0u;
    uint _235;
    if (_234)
    {
        _235 = _211 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_181)
        {
            frontier_phi_9_10_ladder = _211 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _211 + 12u;
        }
        _235 = frontier_phi_9_10_ladder;
    }
    uvec4 _243 = texelFetch(l_geomAttrib_0, int(((_183 + 4u) + (_179 ? (_235 + 4u) : _235)) >> 2u));
    uint _244 = _243.x;
    float _248 = float(int(uint(int(_244 << 16u) >> int(16u))));
    float _249 = float(int(uint(int(_244) >> int(16u))));
    uint _250 = _177 * _171;
    uint _251 = _250 + 12u;
    uint _272;
    uint _273;
    uint _274;
    uint _275;
    if (_182)
    {
        uvec4 _253 = texelFetch(l_geomAttrib_0, int(_251 >> 2u));
        uint _254 = _253.x;
        _272 = _254 & 255u;
        _273 = (_254 >> 8u) & 255u;
        _274 = (_254 >> 16u) & 255u;
        _275 = 16u;
    }
    else
    {
        uint _260 = _251 >> 2u;
        uvec2 _266 = uvec2(texelFetch(l_geomAttrib_0, int(_260)).x, texelFetch(l_geomAttrib_0, int(_260 + 1u)).x);
        uint _267 = _266.x;
        _272 = _267 & 65535u;
        _273 = _267 >> 16u;
        _274 = _266.y & 65535u;
        _275 = 20u;
    }
    uvec4 _281 = texelFetch(l_geomAttrib_0, int((_275 + _250) >> 2u));
    uint _282 = _281.x;
    uint _294;
    if (_234)
    {
        _294 = _275 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_181)
        {
            frontier_phi_16_17_ladder = _275 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _275 + 12u;
        }
        _294 = frontier_phi_16_17_ladder;
    }
    uvec4 _302 = texelFetch(l_geomAttrib_0, int(((_250 + 4u) + (_179 ? (_294 + 4u) : _294)) >> 2u));
    uint _303 = _302.x;
    float _307 = float(int(uint(int(_303 << 16u) >> int(16u))));
    float _308 = float(int(uint(int(_303) >> int(16u))));
    uint _309 = _177 * _172;
    uint _310 = _309 + 12u;
    uint _331;
    uint _332;
    uint _333;
    uint _334;
    if (_182)
    {
        uvec4 _312 = texelFetch(l_geomAttrib_0, int(_310 >> 2u));
        uint _313 = _312.x;
        _331 = _313 & 255u;
        _332 = (_313 >> 8u) & 255u;
        _333 = (_313 >> 16u) & 255u;
        _334 = 16u;
    }
    else
    {
        uint _319 = _310 >> 2u;
        uvec2 _325 = uvec2(texelFetch(l_geomAttrib_0, int(_319)).x, texelFetch(l_geomAttrib_0, int(_319 + 1u)).x);
        uint _326 = _325.x;
        _331 = _326 & 65535u;
        _332 = _326 >> 16u;
        _333 = _325.y & 65535u;
        _334 = 20u;
    }
    uvec4 _340 = texelFetch(l_geomAttrib_0, int((_334 + _309) >> 2u));
    uint _341 = _340.x;
    uint _353;
    if (_234)
    {
        _353 = _334 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_181)
        {
            frontier_phi_23_24_ladder = _334 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _334 + 12u;
        }
        _353 = frontier_phi_23_24_ladder;
    }
    uvec4 _361 = texelFetch(l_geomAttrib_0, int(((_309 + 4u) + (_179 ? (_353 + 4u) : _353)) >> 2u));
    uint _362 = _361.x;
    float _366 = float(int(uint(int(_362 << 16u) >> int(16u))));
    float _367 = float(int(uint(int(_362) >> int(16u))));
    bool _369 = _128.z == 0u;
    float _405;
    float _406;
    float _407;
    if (_369)
    {
        uint _372 = _169 * 3u;
        uvec3 _381 = uvec3(texelFetch(l_geomPositionBuffer, int(_372)).x, texelFetch(l_geomPositionBuffer, int(_372 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_372 + 2u)).x);
        _405 = uintBitsToFloat(_381.x);
        _406 = uintBitsToFloat(_381.y);
        _407 = uintBitsToFloat(_381.z);
    }
    else
    {
        uint _389 = _169 * 2u;
        uvec2 _395 = uvec2(texelFetch(l_geomPositionBuffer, int(_389)).x, texelFetch(l_geomPositionBuffer, int(_389 + 1u)).x);
        uint _396 = _395.x;
        _405 = unpackHalf2x16(_396).x;
        _406 = unpackHalf2x16(_396 >> 16u).x;
        _407 = unpackHalf2x16(_395.y).x;
    }
    float _443;
    float _444;
    float _445;
    if (_369)
    {
        uint _410 = _171 * 3u;
        uvec3 _419 = uvec3(texelFetch(l_geomPositionBuffer, int(_410)).x, texelFetch(l_geomPositionBuffer, int(_410 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_410 + 2u)).x);
        _443 = uintBitsToFloat(_419.x);
        _444 = uintBitsToFloat(_419.y);
        _445 = uintBitsToFloat(_419.z);
    }
    else
    {
        uint _427 = _171 * 2u;
        uvec2 _433 = uvec2(texelFetch(l_geomPositionBuffer, int(_427)).x, texelFetch(l_geomPositionBuffer, int(_427 + 1u)).x);
        uint _434 = _433.x;
        _443 = unpackHalf2x16(_434).x;
        _444 = unpackHalf2x16(_434 >> 16u).x;
        _445 = unpackHalf2x16(_433.y).x;
    }
    float _481;
    float _482;
    float _483;
    if (_369)
    {
        uint _448 = _172 * 3u;
        uvec3 _457 = uvec3(texelFetch(l_geomPositionBuffer, int(_448)).x, texelFetch(l_geomPositionBuffer, int(_448 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_448 + 2u)).x);
        _481 = uintBitsToFloat(_457.x);
        _482 = uintBitsToFloat(_457.y);
        _483 = uintBitsToFloat(_457.z);
    }
    else
    {
        uint _465 = _172 * 2u;
        uvec2 _471 = uvec2(texelFetch(l_geomPositionBuffer, int(_465)).x, texelFetch(l_geomPositionBuffer, int(_465 + 1u)).x);
        uint _472 = _471.x;
        _481 = unpackHalf2x16(_472).x;
        _482 = unpackHalf2x16(_472 >> 16u).x;
        _483 = unpackHalf2x16(_471.y).x;
    }
    float _486 = (1.0 - hit._m0.x) - hit._m0.y;
    float _520 = (_307 - _248) * 0.00048828125;
    float _522 = (_308 - _249) * 0.00048828125;
    float _525 = (_366 - _248) * 0.00048828125;
    float _526 = (_367 - _249) * 0.00048828125;
    float _548 = _443 - _405;
    float _549 = _444 - _406;
    float _550 = _445 - _407;
    float _553 = fma(_550, gl_ObjectToWorldEXT[2u].x, fma(_549, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _548));
    float _556 = fma(_550, gl_ObjectToWorldEXT[2u].y, fma(_549, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _548));
    float _559 = fma(_550, gl_ObjectToWorldEXT[2u].z, fma(_549, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _548));
    float _560 = _481 - _405;
    float _561 = _482 - _406;
    float _562 = _483 - _407;
    float _565 = fma(_562, gl_ObjectToWorldEXT[2u].x, fma(_561, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _560));
    float _568 = fma(_562, gl_ObjectToWorldEXT[2u].y, fma(_561, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _560));
    float _571 = fma(_562, gl_ObjectToWorldEXT[2u].z, fma(_561, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _560));
    float _577 = (((float(_208) * _486) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_331) * hit._m0.y);
    float _580 = (((float(_209) * _486) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_332) * hit._m0.y);
    float _583 = (((float(_210) * _486) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_333) * hit._m0.y);
    float _584 = _577 * 0.0078740157186985015869140625;
    float _586 = _580 * 0.0078740157186985015869140625;
    float _587 = _583 * 0.0078740157186985015869140625;
    float _600 = ((((float(_220 & 255u) * _486) + (-127.0)) + (float(_282 & 255u) * hit._m0.x)) + (float(_341 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _601 = ((((float((_220 >> 8u) & 255u) * _486) + (-127.0)) + (float((_282 >> 8u) & 255u) * hit._m0.x)) + (float((_341 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _602 = ((((float((_220 >> 16u) & 255u) * _486) + (-127.0)) + (float((_282 >> 16u) & 255u) * hit._m0.x)) + (float((_341 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _603 = ((((float(_220 >> 24u) * _486) + (-127.0)) + (float(_282 >> 24u) * hit._m0.x)) + (float(_341 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _613 = ((_601 * _587) - (_602 * _586)) * _603;
    float _614 = ((_602 * _584) - (_600 * _587)) * _603;
    float _615 = ((_600 * _586) - (_601 * _584)) * _603;
    float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
    float _636 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + ((((_307 * hit._m0.x) + (_248 * _486)) + (_366 * hit._m0.y)) * 0.00048828125);
    float _637 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + ((((_308 * hit._m0.x) + (_249 * _486)) + (_367 * hit._m0.y)) * 0.00048828125);
    uvec2 _649 = uvec2(textureSize(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, int(0u)));
    bool _654 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _707;
    if (_654)
    {
        float _665 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _671 = (_571 * _556) - (_568 * _559);
        float _674 = (_565 * _559) - (_571 * _553);
        float _677 = (_568 * _553) - (_565 * _556);
        float _704 = ((log2((((float(_649.y) * 0.5) * float(_649.x)) * abs((_526 * _520) - (_525 * _522))) / (sqrt(((_674 * _674) + (_677 * _677)) + (_671 * _671)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_665 * gl_WorldRayDirectionEXT.x, _665 * gl_WorldRayDirectionEXT.y, _665 * gl_WorldRayDirectionEXT.z), vec3(_584, _586, _587))));
        _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    }
    else
    {
        _707 = 0.0;
    }
    vec4 _711 = textureLod(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_636 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_637 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _707);
    float _716 = _711.x * cbMtdParam._m0[9u].x;
    float _717 = _711.y * cbMtdParam._m0[9u].y;
    float _718 = _711.z * cbMtdParam._m0[9u].z;
    uvec2 _731 = uvec2(textureSize(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, int(0u)));
    float _735 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _736 = _735 * gl_WorldRayDirectionEXT.x;
    float _737 = _735 * gl_WorldRayDirectionEXT.y;
    float _738 = _735 * gl_WorldRayDirectionEXT.z;
    float _782;
    if (_654)
    {
        float _748 = (_571 * _556) - (_568 * _559);
        float _751 = (_565 * _559) - (_571 * _553);
        float _754 = (_568 * _553) - (_565 * _556);
        float _780 = ((log2((((float(_731.y) * 0.5) * float(_731.x)) * abs((_526 * _520) - (_525 * _522))) / (sqrt(((_751 * _751) + (_754 * _754)) + (_748 * _748)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_736, _737, _738), vec3(_584, _586, _587))));
        _782 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    }
    else
    {
        _782 = 0.0;
    }
    vec4 _785 = textureLod(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _636) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _637) + cbTextureTilingScale._m0[1u].w), _782);
    float _789 = _785.z;
    float _792 = (_785.x * 2.0) + (-1.0);
    float _794 = (_785.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_792, _794), vec2(_792, _794));
    float _1276 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _1276 : (isnan(_1276) ? 1.0 : min(_1276, 1.0))));
    float _803 = fma(_800, _584, fma(_794, _600, (_619 * _613) * _792));
    float _806 = fma(_800, _586, fma(_794, _601, (_619 * _614) * _792));
    float _809 = fma(_800, _587, fma(_794, _602, (_619 * _615) * _792));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _828 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _829 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _830 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _831 = (-0.0) - _736;
    float _833 = (-0.0) - _737;
    float _834 = (-0.0) - _738;
    float _840 = float(gl_LaunchIDEXT.x);
    float _841 = float(gl_LaunchIDEXT.y);
    float _844 = float(gl_LaunchSizeEXT.x);
    float _858 = fract(fract(sin(dot(vec2(_840 / _844, _841 / _80), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _871 = fract(fract(sin(dot(vec2((_840 + 128.0) / _844, (_841 + 128.0) / _80), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _872 = 1.0 - cbMtdParam._m0[10u].x;
    float _873 = _872 * _716;
    float _874 = _872 * _717;
    float _875 = _872 * _718;
    float _880 = (_716 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _881 = (_717 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _882 = (_718 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    _66._m0 = 1u;
    uvec4 _896 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _897 = _896.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _897, _896.w, _897, vec3(_828, _829, _830), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (_66._m0 == 0u)
    {
        float _918 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_814, _815, _816));
        float _1287 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _921 = isnan(1.0) ? _1287 : (isnan(_1287) ? 1.0 : min(_1287, 1.0));
        float _940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _789) * 0.949999988079071044921875);
        float _941 = _940 * _940;
        float _942 = g_sceneCB._m0[4u].x - _736;
        float _943 = g_sceneCB._m0[4u].y - _737;
        float _944 = g_sceneCB._m0[4u].z - _738;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _949 = _948 * _942;
        float _950 = _948 * _943;
        float _951 = _948 * _944;
        float _952 = dot(vec3(_814, _815, _816), vec3(g_sceneCB._m0[4u].xyz));
        float _1298 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _955 = isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0));
        float _956 = dot(vec3(_814, _815, _816), vec3(_831, _833, _834));
        float _1309 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _959 = isnan(1.0) ? _1309 : (isnan(_1309) ? 1.0 : min(_1309, 1.0));
        float _960 = dot(vec3(_814, _815, _816), vec3(_949, _950, _951));
        float _1320 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _963 = isnan(1.0) ? _1320 : (isnan(_1320) ? 1.0 : min(_1320, 1.0));
        float _964 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_949, _950, _951));
        float _1331 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _941 * _941;
        float _972 = ((_963 * _963) * (_968 + (-1.0))) + 1.0;
        float _981 = exp2(log2(1.0 - (isnan(1.0) ? _1331 : (isnan(_1331) ? 1.0 : min(_1331, 1.0)))) * 5.0);
        float _992 = 1.0 - _941;
        float _1003 = (0.5 / (((_959 * ((_955 * _992) + _941)) + 9.9999999392252902907785028219223e-09) + (((_959 * _992) + _941) * _955))) * _955;
        float _1342 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1005 = (isnan(1.0) ? _1342 : (isnan(_1342) ? 1.0 : min(_1342, 1.0))) * (_968 / ((_972 * _972) * 3.141590118408203125));
        _1012 = ((_873 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _921;
        _1013 = ((_874 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _921;
        _1014 = ((_875 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _921;
        _1015 = (((_981 * (0.959999978542327880859375 - _880)) + _883) * g_sceneCB._m0[5u].x) * _1005;
        _1016 = (((_981 * (0.959999978542327880859375 - _881)) + _885) * g_sceneCB._m0[5u].y) * _1005;
        _1017 = (((_981 * (0.959999978542327880859375 - _882)) + _886) * g_sceneCB._m0[5u].z) * _1005;
    }
    else
    {
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    bool _1019 = abs(_815) < 0.89999997615814208984375;
    float _1021 = float(_1019);
    float _1022 = _1019 ? 0.0 : 1.0;
    float _1025 = (_1021 * _816) - (_1022 * _815);
    float _1026 = _1022 * _814;
    float _1028 = (-0.0) - (_814 * _1021);
    float _1032 = inversesqrt(dot(vec3(_1025, _1026, _1028), vec3(_1025, _1026, _1028)));
    float _1033 = _1025 * _1032;
    float _1034 = _1026 * _1032;
    float _1035 = _1032 * _1028;
    float _1038 = (_1034 * _816) - (_1035 * _815);
    float _1041 = (_1035 * _814) - (_1033 * _816);
    float _1044 = (_1033 * _815) - (_1034 * _814);
    float _1046;
    float _1054;
    float _1045 = 0.0;
    uint _1047 = 0u;
    float _1051;
    bool _1053;
    for (;;)
    {
        _1051 = (float(_1047) + _858) * 0.03125;
        _1053 = _1047 == 0u;
        float frontier_phi_43_pred;
        if (_1053)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1195;
            float _1196;
            uint _1198;
            _1195 = 0.0;
            _1196 = 0.5;
            _1198 = _1047;
            float _1055;
            for (;;)
            {
                _1055 = ((_1198 & 1u) != 0u) ? (_1196 + _1195) : _1195;
                uint _1199 = _1198 >> 1u;
                if (_1199 == 0u)
                {
                    break;
                }
                else
                {
                    _1195 = _1055;
                    _1196 *= 0.5;
                    _1198 = _1199;
                }
            }
            frontier_phi_43_pred = _1055;
        }
        _1054 = frontier_phi_43_pred;
        float _1056 = _1054 + _871;
        float _1060 = sqrt(_1051);
        float _1061 = ((_1056 > 1.0) ? (_1056 + (-1.0)) : _1056) * 6.283185482025146484375;
        float _1064 = cos(_1061) * _1060;
        float _1066 = sin(_1061) * _1060;
        float _1068 = sqrt(1.0 - _1051);
        float _1081 = ((_1068 * _814) + (_1064 * _1038)) + (_1066 * _1033);
        float _1082 = ((_1068 * _815) + (_1064 * _1041)) + (_1066 * _1034);
        float _1083 = ((_1068 * _816) + (_1064 * _1044)) + (_1066 * _1035);
        _65._m0 = 1u;
        uvec4 _1087 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1088 = _1087.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1088, _1087.w, _1088, vec3(_828, _829, _830), 9.9999997473787516355514526367188e-05, vec3(_1081, _1082, _1083), 10000.0, 1);
        float _1094 = dot(vec3(_814, _815, _816), vec3(_1081, _1082, _1083));
        float _1353 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1097 = isnan(1.0) ? _1353 : (isnan(_1353) ? 1.0 : min(_1353, 1.0));
        _1046 = ((float(_65._m0 == 0u) * _1097) / (_1097 * 0.3183098733425140380859375)) + _1045;
        uint _1048 = _1047 + 1u;
        if (_1048 == 32u)
        {
            break;
        }
        else
        {
            _1045 = _1046;
            _1047 = _1048;
            continue;
        }
    }
    float _1105 = _1046 * 0.009947183541953563690185546875;
    float _1110 = dot(vec3(_736, _737, _738), vec3(_814, _815, _816)) * 2.0;
    vec4 _1124 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_736 - (_1110 * _814), _737 - (_1110 * _815), _738 - (_1110 * _816)), 4.0 - (_789 * 4.0));
    float _1129 = dot(vec3(_831, _833, _834), vec3(_814, _815, _816));
    float _1364 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1139 = exp2(log2(1.0 - (isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0)))) * 5.0);
    vec4 _1151 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_814, _815, _816), 0.0);
    float _1162 = (_1015 + _1012) + (((_1151.x * _873) + (((_1139 * (0.959999978542327880859375 - _880)) + _883) * _1124.x)) * _1105);
    float _1166 = (_1016 + _1013) + (((_1151.y * _874) + (((_1139 * (0.959999978542327880859375 - _881)) + _885) * _1124.y)) * _1105);
    float _1170 = (_1017 + _1014) + (((_1151.z * _875) + (((_1139 * (0.959999978542327880859375 - _882)) + _886) * _1124.z)) * _1105);
    float _1375 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1386 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1397 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    bool _1178 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1189;
    _1189.x = _1178 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0)));
    _1189.y = _1178 ? ((_580 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0)));
    _1189.z = _1178 ? ((_583 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0)));
    payload._m0 = _1189;
}


