#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1037;

void main()
{
    float _79 = float(gl_LaunchSizeEXT.y);
    float _107 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _116 = sqrt(((_108 * _108) + (_107 * _107)) + (_109 * _109)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _79)))));
    uvec4 _127 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _128 = _127.y;
    uint _167;
    uint _169;
    uint _170;
    if (_127.x == 0u)
    {
        uint _135 = (_128 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_128 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _161 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _162 >> 16u;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _167 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder_1;
        _170 = frontier_phi_3_2_ladder;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _174.z;
    bool _177 = _176 != 0u;
    bool _179 = _127.w == 0u;
    bool _180 = _177 || _179;
    uint _182 = (_175 * _167) + 12u;
    uint _206;
    uint _207;
    uint _208;
    uint _209;
    if (_180)
    {
        uvec4 _185 = texelFetch(l_geomAttrib_0, int(_182 >> 2u));
        uint _186 = _185.x;
        _206 = _186 & 255u;
        _207 = (_186 >> 8u) & 255u;
        _208 = (_186 >> 16u) & 255u;
        _209 = 20u;
    }
    else
    {
        uint _194 = _182 >> 2u;
        uvec2 _200 = uvec2(texelFetch(l_geomAttrib_0, int(_194)).x, texelFetch(l_geomAttrib_0, int(_194 + 1u)).x);
        uint _201 = _200.x;
        _206 = _201 & 65535u;
        _207 = _201 >> 16u;
        _208 = _200.y & 65535u;
        _209 = 24u;
    }
    bool _215 = _176 == 0u;
    uint _216;
    if (_215)
    {
        _216 = _209;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_179)
        {
            frontier_phi_9_10_ladder = _209 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _209 + 8u;
        }
        _216 = frontier_phi_9_10_ladder;
    }
    uvec4 _227 = texelFetch(l_geomAttrib_0, int((((_175 * _167) + 4u) + (_177 ? (_216 + 4u) : _216)) >> 2u));
    uint _228 = _227.x;
    float _232 = float(int(uint(int(_228 << 16u) >> int(16u))));
    float _233 = float(int(uint(int(_228) >> int(16u))));
    uint _235 = (_175 * _169) + 12u;
    uint _256;
    uint _257;
    uint _258;
    uint _259;
    if (_180)
    {
        uvec4 _237 = texelFetch(l_geomAttrib_0, int(_235 >> 2u));
        uint _238 = _237.x;
        _256 = _238 & 255u;
        _257 = (_238 >> 8u) & 255u;
        _258 = (_238 >> 16u) & 255u;
        _259 = 20u;
    }
    else
    {
        uint _244 = _235 >> 2u;
        uvec2 _250 = uvec2(texelFetch(l_geomAttrib_0, int(_244)).x, texelFetch(l_geomAttrib_0, int(_244 + 1u)).x);
        uint _251 = _250.x;
        _256 = _251 & 65535u;
        _257 = _251 >> 16u;
        _258 = _250.y & 65535u;
        _259 = 24u;
    }
    uint _263;
    if (_215)
    {
        _263 = _259;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_179)
        {
            frontier_phi_16_17_ladder = _259 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _259 + 8u;
        }
        _263 = frontier_phi_16_17_ladder;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((((_175 * _169) + 4u) + (_177 ? (_263 + 4u) : _263)) >> 2u));
    uint _273 = _272.x;
    float _277 = float(int(uint(int(_273 << 16u) >> int(16u))));
    float _278 = float(int(uint(int(_273) >> int(16u))));
    uint _280 = (_175 * _170) + 12u;
    uint _301;
    uint _302;
    uint _303;
    uint _304;
    if (_180)
    {
        uvec4 _282 = texelFetch(l_geomAttrib_0, int(_280 >> 2u));
        uint _283 = _282.x;
        _301 = _283 & 255u;
        _302 = (_283 >> 8u) & 255u;
        _303 = (_283 >> 16u) & 255u;
        _304 = 20u;
    }
    else
    {
        uint _289 = _280 >> 2u;
        uvec2 _295 = uvec2(texelFetch(l_geomAttrib_0, int(_289)).x, texelFetch(l_geomAttrib_0, int(_289 + 1u)).x);
        uint _296 = _295.x;
        _301 = _296 & 65535u;
        _302 = _296 >> 16u;
        _303 = _295.y & 65535u;
        _304 = 24u;
    }
    uint _308;
    if (_215)
    {
        _308 = _304;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_179)
        {
            frontier_phi_23_24_ladder = _304 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _304 + 8u;
        }
        _308 = frontier_phi_23_24_ladder;
    }
    uvec4 _317 = texelFetch(l_geomAttrib_0, int((((_175 * _170) + 4u) + (_177 ? (_308 + 4u) : _308)) >> 2u));
    uint _318 = _317.x;
    float _322 = float(int(uint(int(_318 << 16u) >> int(16u))));
    float _323 = float(int(uint(int(_318) >> int(16u))));
    bool _325 = _127.z == 0u;
    float _361;
    float _362;
    float _363;
    if (_325)
    {
        uint _328 = _167 * 3u;
        uvec3 _337 = uvec3(texelFetch(l_geomPositionBuffer, int(_328)).x, texelFetch(l_geomPositionBuffer, int(_328 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_328 + 2u)).x);
        _361 = uintBitsToFloat(_337.x);
        _362 = uintBitsToFloat(_337.y);
        _363 = uintBitsToFloat(_337.z);
    }
    else
    {
        uint _345 = _167 * 2u;
        uvec2 _351 = uvec2(texelFetch(l_geomPositionBuffer, int(_345)).x, texelFetch(l_geomPositionBuffer, int(_345 + 1u)).x);
        uint _352 = _351.x;
        _361 = unpackHalf2x16(_352).x;
        _362 = unpackHalf2x16(_352 >> 16u).x;
        _363 = unpackHalf2x16(_351.y).x;
    }
    float _399;
    float _400;
    float _401;
    if (_325)
    {
        uint _366 = _169 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _169 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_325)
    {
        uint _404 = _170 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _170 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _442 = (1.0 - hit._m0.x) - hit._m0.y;
    float _464 = (_277 - _232) * 0.00048828125;
    float _466 = (_278 - _233) * 0.00048828125;
    float _469 = (_322 - _232) * 0.00048828125;
    float _470 = (_323 - _233) * 0.00048828125;
    float _492 = _399 - _361;
    float _493 = _400 - _362;
    float _494 = _401 - _363;
    float _497 = fma(_494, gl_ObjectToWorldEXT[2u].x, fma(_493, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _492));
    float _500 = fma(_494, gl_ObjectToWorldEXT[2u].y, fma(_493, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _492));
    float _503 = fma(_494, gl_ObjectToWorldEXT[2u].z, fma(_493, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _492));
    float _504 = _437 - _361;
    float _505 = _438 - _362;
    float _506 = _439 - _363;
    float _509 = fma(_506, gl_ObjectToWorldEXT[2u].x, fma(_505, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _504));
    float _512 = fma(_506, gl_ObjectToWorldEXT[2u].y, fma(_505, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _504));
    float _515 = fma(_506, gl_ObjectToWorldEXT[2u].z, fma(_505, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _504));
    float _516 = (((_277 * hit._m0.x) + (_232 * _442)) + (_322 * hit._m0.y)) * 0.00048828125;
    float _517 = (((_278 * hit._m0.x) + (_233 * _442)) + (_323 * hit._m0.y)) * 0.00048828125;
    float _521 = (((float(_206) * _442) + (-127.0)) + (float(_256) * hit._m0.x)) + (float(_301) * hit._m0.y);
    float _524 = (((float(_207) * _442) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_302) * hit._m0.y);
    float _527 = (((float(_208) * _442) + (-127.0)) + (float(_258) * hit._m0.x)) + (float(_303) * hit._m0.y);
    float _528 = _521 * 0.0078740157186985015869140625;
    float _530 = _524 * 0.0078740157186985015869140625;
    float _531 = _527 * 0.0078740157186985015869140625;
    uvec2 _558 = uvec2(textureSize(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0, int(0u)));
    bool _563 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _616;
    if (_563)
    {
        float _574 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _580 = (_515 * _500) - (_512 * _503);
        float _583 = (_509 * _503) - (_515 * _497);
        float _586 = (_512 * _497) - (_509 * _500);
        float _613 = ((log2((((float(_558.y) * 0.5) * float(_558.x)) * abs((_470 * _464) - (_469 * _466))) / (sqrt(((_583 * _583) + (_586 * _586)) + (_580 * _580)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_574 * gl_WorldRayDirectionEXT.x, _574 * gl_WorldRayDirectionEXT.y, _574 * gl_WorldRayDirectionEXT.z), vec3(_528, _530, _531))));
        _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    }
    else
    {
        _616 = 0.0;
    }
    vec4 _620 = textureLod(sampler2D(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + _516) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + _517) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _616);
    float _625 = _620.x * cbMtdParam._m0[9u].x;
    float _626 = _620.y * cbMtdParam._m0[9u].y;
    float _627 = _620.z * cbMtdParam._m0[9u].z;
    uvec2 _651 = uvec2(textureSize(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_1, int(0u)));
    float _655 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _656 = _655 * gl_WorldRayDirectionEXT.x;
    float _657 = _655 * gl_WorldRayDirectionEXT.y;
    float _658 = _655 * gl_WorldRayDirectionEXT.z;
    float _702;
    if (_563)
    {
        float _668 = (_515 * _500) - (_512 * _503);
        float _671 = (_509 * _503) - (_515 * _497);
        float _674 = (_512 * _497) - (_509 * _500);
        float _700 = ((log2((((float(_651.y) * 0.5) * float(_651.x)) * abs((_470 * _464) - (_469 * _466))) / (sqrt(((_671 * _671) + (_674 * _674)) + (_668 * _668)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_656, _657, _658), vec3(_528, _530, _531))));
        _702 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    }
    else
    {
        _702 = 0.0;
    }
    vec4 _704 = textureLod(sampler2D(M_A_M0_SCR_Alpha_NoLight_Emissive_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) + _516) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + _517) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _702);
    float _715 = inversesqrt(dot(vec3(_528, _530, _531), vec3(_528, _530, _531)));
    float _716 = _715 * _528;
    float _717 = _715 * _530;
    float _718 = _715 * _531;
    float _730 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _731 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _732 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _733 = (-0.0) - _656;
    float _735 = (-0.0) - _657;
    float _736 = (-0.0) - _658;
    float _742 = float(gl_LaunchIDEXT.x);
    float _743 = float(gl_LaunchIDEXT.y);
    float _746 = float(gl_LaunchSizeEXT.x);
    float _760 = fract(fract(sin(dot(vec2(_742 / _746, _743 / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _773 = fract(fract(sin(dot(vec2((_742 + 128.0) / _746, (_743 + 128.0) / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _65._m0 = 1u;
    uvec4 _783 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _784 = _783.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _784, _783.w, _784, vec3(_730, _731, _732), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (_65._m0 == 0u)
    {
        float _805 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_716, _717, _718));
        float _1123 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _808 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        float _819 = g_sceneCB._m0[4u].x - _656;
        float _820 = g_sceneCB._m0[4u].y - _657;
        float _821 = g_sceneCB._m0[4u].z - _658;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _829 = dot(vec3(_716, _717, _718), vec3(g_sceneCB._m0[4u].xyz));
        float _1134 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _832 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        float _833 = dot(vec3(_716, _717, _718), vec3(_733, _735, _736));
        float _1145 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_819 * _825, _820 * _825, _821 * _825));
        float _1156 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _848 = (exp2(log2(1.0 - (isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _854 = (0.5 / ((_832 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1145 : (isnan(_1145) ? 1.0 : min(_1145, 1.0))))) * _832;
        float _1167 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _856 = (isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0))) * 0.31831014156341552734375;
        _864 = ((_625 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _808;
        _865 = ((_626 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _808;
        _866 = ((_627 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _808;
        _867 = (_848 * g_sceneCB._m0[5u].x) * _856;
        _868 = (_848 * g_sceneCB._m0[5u].y) * _856;
        _869 = (_848 * g_sceneCB._m0[5u].z) * _856;
    }
    else
    {
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    bool _871 = abs(_717) < 0.89999997615814208984375;
    float _873 = float(_871);
    float _874 = _871 ? 0.0 : 1.0;
    float _877 = (_873 * _718) - (_874 * _717);
    float _878 = _874 * _716;
    float _880 = (-0.0) - (_716 * _873);
    float _884 = inversesqrt(dot(vec3(_877, _878, _880), vec3(_877, _878, _880)));
    float _885 = _877 * _884;
    float _886 = _878 * _884;
    float _887 = _884 * _880;
    float _890 = (_886 * _718) - (_887 * _717);
    float _893 = (_887 * _716) - (_885 * _718);
    float _896 = (_885 * _717) - (_886 * _716);
    float _898;
    float _906;
    float _897 = 0.0;
    uint _899 = 0u;
    float _903;
    bool _905;
    for (;;)
    {
        _903 = (float(_899) + _760) * 0.03125;
        _905 = _899 == 0u;
        float frontier_phi_43_pred;
        if (_905)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1042;
            float _1043;
            uint _1045;
            _1042 = 0.0;
            _1043 = 0.5;
            _1045 = _899;
            float _907;
            for (;;)
            {
                _907 = ((_1045 & 1u) != 0u) ? (_1043 + _1042) : _1042;
                uint _1046 = _1045 >> 1u;
                if (_1046 == 0u)
                {
                    break;
                }
                else
                {
                    _1042 = _907;
                    _1043 *= 0.5;
                    _1045 = _1046;
                }
            }
            frontier_phi_43_pred = _907;
        }
        _906 = frontier_phi_43_pred;
        float _908 = _906 + _773;
        float _913 = sqrt(_903);
        float _914 = ((_908 > 1.0) ? (_908 + (-1.0)) : _908) * 6.283185482025146484375;
        float _917 = cos(_914) * _913;
        float _919 = sin(_914) * _913;
        float _921 = sqrt(1.0 - _903);
        float _934 = ((_921 * _716) + (_917 * _890)) + (_919 * _885);
        float _935 = ((_921 * _717) + (_917 * _893)) + (_919 * _886);
        float _936 = ((_921 * _718) + (_917 * _896)) + (_919 * _887);
        _64._m0 = 1u;
        uvec4 _940 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _941 = _940.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _941, _940.w, _941, vec3(_730, _731, _732), 9.9999997473787516355514526367188e-05, vec3(_934, _935, _936), 10000.0, 1);
        float _947 = dot(vec3(_716, _717, _718), vec3(_934, _935, _936));
        float _1178 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _950 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
        _898 = ((float(_64._m0 == 0u) * _950) / (_950 * 0.3183098733425140380859375)) + _897;
        uint _900 = _899 + 1u;
        if (_900 == 32u)
        {
            break;
        }
        else
        {
            _897 = _898;
            _899 = _900;
            continue;
        }
    }
    float _958 = _898 * 0.009947183541953563690185546875;
    float _963 = dot(vec3(_656, _657, _658), vec3(_716, _717, _718)) * 2.0;
    vec4 _975 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_656 - (_963 * _716), _657 - (_963 * _717), _658 - (_963 * _718)), 4.0);
    float _980 = dot(vec3(_733, _735, _736), vec3(_716, _717, _718));
    float _1189 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _989 = (exp2(log2(1.0 - (isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _995 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_716, _717, _718), 0.0);
    float _1007 = ((_864 + (_704.x * cbMtdParam._m0[10u].x)) + _867) + (((_995.x * _625) + (_989 * _975.x)) * _958);
    float _1012 = ((_865 + (_704.y * cbMtdParam._m0[10u].y)) + _868) + (((_995.y * _626) + (_989 * _975.y)) * _958);
    float _1017 = ((_866 + (_704.z * cbMtdParam._m0[10u].z)) + _869) + (((_995.z * _627) + (_989 * _975.z)) * _958);
    float _1200 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1211 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1222 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    bool _1025 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1036;
    _1036.x = _1025 ? ((_521 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1200 : (isnan(_1200) ? 1.0 : min(_1200, 1.0)));
    _1036.y = _1025 ? ((_524 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0)));
    _1036.z = _1025 ? ((_527 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0)));
    payload._m0 = _1036;
}


