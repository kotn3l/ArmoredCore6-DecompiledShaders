#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _59
{
    vec3 _m0;
};

struct _63
{
    vec2 _m0;
};

struct _66
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _59 payload;
hitAttributeEXT _63 hit;
layout(location = 1) rayPayloadEXT _66 _68;
layout(location = 2) rayPayloadEXT _66 _69;

vec3 _1898;

void main()
{
    float _83 = float(gl_LaunchSizeEXT.y);
    float _111 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _113 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _120 = sqrt(((_112 * _112) + (_111 * _111)) + (_113 * _113)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _83)))));
    uvec4 _131 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _132 = _131.y;
    uint _172;
    uint _174;
    uint _175;
    if (_131.x == 0u)
    {
        uint _140 = (_132 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _149 = uvec3(texelFetch(l_geomIndexBuffer, int(_140)).x, texelFetch(l_geomIndexBuffer, int(_140 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_140 + 2u)).x);
        _172 = _149.x;
        _174 = _149.y;
        _175 = _149.z;
    }
    else
    {
        uint _153 = uint(gl_PrimitiveID) * 6u;
        uint _155 = _153 & 4294967292u;
        uint _158 = (_132 + _155) >> 2u;
        uvec2 _165 = uvec2(texelFetch(l_geomIndexBuffer, int(_158)).x, texelFetch(l_geomIndexBuffer, int(_158 + 1u)).x);
        uint _166 = _165.x;
        uint _167 = _165.y;
        uint _169 = _166 >> 16u;
        uint _170 = _167 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_155 == _153)
        {
            frontier_phi_3_2_ladder = _170;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _166 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _167 >> 16u;
            frontier_phi_3_2_ladder_1 = _170;
            frontier_phi_3_2_ladder_2 = _169;
        }
        _172 = frontier_phi_3_2_ladder_2;
        _174 = frontier_phi_3_2_ladder_1;
        _175 = frontier_phi_3_2_ladder;
    }
    uvec4 _179 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _180 = _179.x;
    uint _181 = _179.z;
    bool _182 = _181 != 0u;
    bool _184 = _131.w == 0u;
    bool _185 = _182 || _184;
    uint _186 = _180 * _172;
    uint _187 = _186 + 12u;
    uint _211;
    uint _212;
    uint _213;
    uint _214;
    if (_185)
    {
        uvec4 _190 = texelFetch(l_geomAttrib_0, int(_187 >> 2u));
        uint _191 = _190.x;
        _211 = _191 & 255u;
        _212 = (_191 >> 8u) & 255u;
        _213 = (_191 >> 16u) & 255u;
        _214 = 16u;
    }
    else
    {
        uint _199 = _187 >> 2u;
        uvec2 _205 = uvec2(texelFetch(l_geomAttrib_0, int(_199)).x, texelFetch(l_geomAttrib_0, int(_199 + 1u)).x);
        uint _206 = _205.x;
        _211 = _206 & 65535u;
        _212 = _206 >> 16u;
        _213 = _205.y & 65535u;
        _214 = 20u;
    }
    uvec4 _222 = texelFetch(l_geomAttrib_0, int((_214 + _186) >> 2u));
    uint _223 = _222.x;
    bool _237 = _181 == 0u;
    uint _238;
    if (_237)
    {
        _238 = _214 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_184)
        {
            frontier_phi_9_10_ladder = _214 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _214 + 12u;
        }
        _238 = frontier_phi_9_10_ladder;
    }
    uint _242 = _182 ? (_238 + 4u) : _238;
    uvec4 _245 = texelFetch(l_geomAttrib_0, int((_242 + _186) >> 2u));
    uint _246 = _245.x;
    uvec4 _258 = texelFetch(l_geomAttrib_0, int(((_186 + 8u) + _242) >> 2u));
    uint _259 = _258.x;
    float _263 = float(int(uint(int(_259 << 16u) >> int(16u))));
    float _264 = float(int(uint(int(_259) >> int(16u))));
    uvec4 _268 = texelFetch(l_geomAttrib_0, int(((_186 + 12u) + _242) >> 2u));
    uint _269 = _268.x;
    uint _275 = _180 * _174;
    uint _276 = _275 + 12u;
    uint _297;
    uint _298;
    uint _299;
    uint _300;
    if (_185)
    {
        uvec4 _278 = texelFetch(l_geomAttrib_0, int(_276 >> 2u));
        uint _279 = _278.x;
        _297 = _279 & 255u;
        _298 = (_279 >> 8u) & 255u;
        _299 = (_279 >> 16u) & 255u;
        _300 = 16u;
    }
    else
    {
        uint _285 = _276 >> 2u;
        uvec2 _291 = uvec2(texelFetch(l_geomAttrib_0, int(_285)).x, texelFetch(l_geomAttrib_0, int(_285 + 1u)).x);
        uint _292 = _291.x;
        _297 = _292 & 65535u;
        _298 = _292 >> 16u;
        _299 = _291.y & 65535u;
        _300 = 20u;
    }
    uvec4 _306 = texelFetch(l_geomAttrib_0, int((_300 + _275) >> 2u));
    uint _307 = _306.x;
    uint _319;
    if (_237)
    {
        _319 = _300 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_184)
        {
            frontier_phi_16_17_ladder = _300 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _300 + 12u;
        }
        _319 = frontier_phi_16_17_ladder;
    }
    uint _323 = _182 ? (_319 + 4u) : _319;
    uvec4 _326 = texelFetch(l_geomAttrib_0, int((_323 + _275) >> 2u));
    uint _327 = _326.x;
    uvec4 _339 = texelFetch(l_geomAttrib_0, int(((_275 + 8u) + _323) >> 2u));
    uint _340 = _339.x;
    float _344 = float(int(uint(int(_340 << 16u) >> int(16u))));
    float _345 = float(int(uint(int(_340) >> int(16u))));
    uvec4 _349 = texelFetch(l_geomAttrib_0, int(((_275 + 12u) + _323) >> 2u));
    uint _350 = _349.x;
    uint _356 = _180 * _175;
    uint _357 = _356 + 12u;
    uint _378;
    uint _379;
    uint _380;
    uint _381;
    if (_185)
    {
        uvec4 _359 = texelFetch(l_geomAttrib_0, int(_357 >> 2u));
        uint _360 = _359.x;
        _378 = _360 & 255u;
        _379 = (_360 >> 8u) & 255u;
        _380 = (_360 >> 16u) & 255u;
        _381 = 16u;
    }
    else
    {
        uint _366 = _357 >> 2u;
        uvec2 _372 = uvec2(texelFetch(l_geomAttrib_0, int(_366)).x, texelFetch(l_geomAttrib_0, int(_366 + 1u)).x);
        uint _373 = _372.x;
        _378 = _373 & 65535u;
        _379 = _373 >> 16u;
        _380 = _372.y & 65535u;
        _381 = 20u;
    }
    uvec4 _387 = texelFetch(l_geomAttrib_0, int((_381 + _356) >> 2u));
    uint _388 = _387.x;
    uint _400;
    if (_237)
    {
        _400 = _381 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_184)
        {
            frontier_phi_23_24_ladder = _381 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _381 + 12u;
        }
        _400 = frontier_phi_23_24_ladder;
    }
    uint _404 = _182 ? (_400 + 4u) : _400;
    uvec4 _407 = texelFetch(l_geomAttrib_0, int((_404 + _356) >> 2u));
    uint _408 = _407.x;
    uvec4 _420 = texelFetch(l_geomAttrib_0, int(((_356 + 8u) + _404) >> 2u));
    uint _421 = _420.x;
    float _425 = float(int(uint(int(_421 << 16u) >> int(16u))));
    float _426 = float(int(uint(int(_421) >> int(16u))));
    uvec4 _430 = texelFetch(l_geomAttrib_0, int(((_356 + 12u) + _404) >> 2u));
    uint _431 = _430.x;
    bool _438 = _131.z == 0u;
    float _474;
    float _475;
    float _476;
    if (_438)
    {
        uint _441 = _172 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _172 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _512;
    float _513;
    float _514;
    if (_438)
    {
        uint _479 = _174 * 3u;
        uvec3 _488 = uvec3(texelFetch(l_geomPositionBuffer, int(_479)).x, texelFetch(l_geomPositionBuffer, int(_479 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_479 + 2u)).x);
        _512 = uintBitsToFloat(_488.x);
        _513 = uintBitsToFloat(_488.y);
        _514 = uintBitsToFloat(_488.z);
    }
    else
    {
        uint _496 = _174 * 2u;
        uvec2 _502 = uvec2(texelFetch(l_geomPositionBuffer, int(_496)).x, texelFetch(l_geomPositionBuffer, int(_496 + 1u)).x);
        uint _503 = _502.x;
        _512 = unpackHalf2x16(_503).x;
        _513 = unpackHalf2x16(_503 >> 16u).x;
        _514 = unpackHalf2x16(_502.y).x;
    }
    float _550;
    float _551;
    float _552;
    if (_438)
    {
        uint _517 = _175 * 3u;
        uvec3 _526 = uvec3(texelFetch(l_geomPositionBuffer, int(_517)).x, texelFetch(l_geomPositionBuffer, int(_517 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_517 + 2u)).x);
        _550 = uintBitsToFloat(_526.x);
        _551 = uintBitsToFloat(_526.y);
        _552 = uintBitsToFloat(_526.z);
    }
    else
    {
        uint _534 = _175 * 2u;
        uvec2 _540 = uvec2(texelFetch(l_geomPositionBuffer, int(_534)).x, texelFetch(l_geomPositionBuffer, int(_534 + 1u)).x);
        uint _541 = _540.x;
        _550 = unpackHalf2x16(_541).x;
        _551 = unpackHalf2x16(_541 >> 16u).x;
        _552 = unpackHalf2x16(_540.y).x;
    }
    float _555 = (1.0 - hit._m0.x) - hit._m0.y;
    float _611 = (_344 - _263) * 0.00048828125;
    float _613 = (_345 - _264) * 0.00048828125;
    float _616 = (_425 - _263) * 0.00048828125;
    float _617 = (_426 - _264) * 0.00048828125;
    float _639 = _512 - _474;
    float _640 = _513 - _475;
    float _641 = _514 - _476;
    float _644 = fma(_641, gl_ObjectToWorldEXT[2u].x, fma(_640, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _639));
    float _647 = fma(_641, gl_ObjectToWorldEXT[2u].y, fma(_640, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _639));
    float _650 = fma(_641, gl_ObjectToWorldEXT[2u].z, fma(_640, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _639));
    float _651 = _550 - _474;
    float _652 = _551 - _475;
    float _653 = _552 - _476;
    float _656 = fma(_653, gl_ObjectToWorldEXT[2u].x, fma(_652, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _651));
    float _659 = fma(_653, gl_ObjectToWorldEXT[2u].y, fma(_652, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _651));
    float _662 = fma(_653, gl_ObjectToWorldEXT[2u].z, fma(_652, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _651));
    float _663 = (((_344 * hit._m0.x) + (_263 * _555)) + (_425 * hit._m0.y)) * 0.00048828125;
    float _664 = (((_345 * hit._m0.x) + (_264 * _555)) + (_426 * hit._m0.y)) * 0.00048828125;
    float _668 = (((float(_211) * _555) + (-127.0)) + (float(_297) * hit._m0.x)) + (float(_378) * hit._m0.y);
    float _671 = (((float(_212) * _555) + (-127.0)) + (float(_298) * hit._m0.x)) + (float(_379) * hit._m0.y);
    float _674 = (((float(_213) * _555) + (-127.0)) + (float(_299) * hit._m0.x)) + (float(_380) * hit._m0.y);
    float _675 = _668 * 0.0078740157186985015869140625;
    float _677 = _671 * 0.0078740157186985015869140625;
    float _678 = _674 * 0.0078740157186985015869140625;
    float _691 = ((((float(_223 & 255u) * _555) + (-127.0)) + (float(_307 & 255u) * hit._m0.x)) + (float(_388 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _692 = ((((float((_223 >> 8u) & 255u) * _555) + (-127.0)) + (float((_307 >> 8u) & 255u) * hit._m0.x)) + (float((_388 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _693 = ((((float((_223 >> 16u) & 255u) * _555) + (-127.0)) + (float((_307 >> 16u) & 255u) * hit._m0.x)) + (float((_388 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _694 = ((((float(_223 >> 24u) * _555) + (-127.0)) + (float(_307 >> 24u) * hit._m0.x)) + (float(_388 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _704 = ((_692 * _678) - (_693 * _677)) * _694;
    float _705 = ((_693 * _675) - (_691 * _678)) * _694;
    float _706 = ((_691 * _677) - (_692 * _675)) * _694;
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _710 * _704;
    float _712 = _710 * _705;
    float _713 = _710 * _706;
    float _728 = cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x;
    float _731 = (_728 * cbMtdParam._m0[22u].y) + _663;
    float _732 = (_728 * cbMtdParam._m0[22u].z) + _664;
    float _753 = (cbTextureTilingScale._m0[4u].x * ((_728 * cbMtdParam._m0[22u].w) + _663)) + cbTextureTilingScale._m0[4u].z;
    float _754 = (((_728 * cbMtdParam._m0[23u].x) + _664) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w;
    uvec2 _756 = uvec2(textureSize(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    bool _761 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _814;
    if (_761)
    {
        float _772 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _778 = (_662 * _647) - (_659 * _650);
        float _781 = (_656 * _650) - (_662 * _644);
        float _784 = (_659 * _644) - (_656 * _647);
        float _811 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_781 * _781) + (_784 * _784)) + (_778 * _778)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_772 * gl_WorldRayDirectionEXT.x, _772 * gl_WorldRayDirectionEXT.y, _772 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    }
    else
    {
        _814 = 0.0;
    }
    vec4 _818 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _814);
    float _824 = (_818.x * 2.0) + (-1.0);
    float _826 = (_818.y * 2.0) + (-1.0);
    float _830 = 1.0 - dot(vec2(_824, _826), vec2(_824, _826));
    float _1985 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0)));
    float _835 = fma(_832, _675, fma(_826, _691, _824 * _711));
    float _838 = fma(_832, _677, fma(_826, _692, _824 * _712));
    float _841 = fma(_832, _678, fma(_826, _693, _824 * _713));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _847 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[17u].y;
    float _848 = _847 * cbMtdParam._m0[17u].x;
    float _856 = (((_838 * 0.5) * _845) + (-0.25)) * cbMtdParam._m0[16u].w;
    float _858 = (-0.0) - (cbMtdParam._m0[16u].w * (((_835 * 0.5) * _845) + (-0.25)));
    float _860 = fract(_848);
    float _862 = fract(_848 + 0.5);
    float _873 = abs((_860 * 2.0) + (-1.0));
    vec4 _891 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_860 * _858) + _731) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_856 * _860) + _732) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w), 0.0);
    float _893 = _891.x;
    float _894 = _891.y;
    float _895 = _891.z;
    vec4 _896 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_862 * _858) + _731) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_856 * _862) + _732) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w), 0.0);
    float _916 = cbMtdParam._m0[20u].x * ((((float((_350 >> 8u) & 255u) * hit._m0.x) + (float((_269 >> 8u) & 255u) * _555)) + (float((_431 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _929 = (_728 * cbMtdParam._m0[23u].w) + _663;
    float _930 = (_728 * cbMtdParam._m0[24u].x) + _664;
    float _986;
    if (_761)
    {
        float _946 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _952 = (_662 * _647) - (_659 * _650);
        float _955 = (_656 * _650) - (_662 * _644);
        float _958 = (_659 * _644) - (_656 * _647);
        float _984 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_955 * _955) + (_958 * _958)) + (_952 * _952)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_946 * gl_WorldRayDirectionEXT.x, _946 * gl_WorldRayDirectionEXT.y, _946 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _986 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    }
    else
    {
        _986 = 0.0;
    }
    vec4 _988 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _986);
    float _994 = (_988.x * 2.0) + (-1.0);
    float _995 = (_988.y * 2.0) + (-1.0);
    float _999 = 1.0 - dot(vec2(_994, _995), vec2(_994, _995));
    float _2001 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0)));
    float _1004 = fma(_1001, _675, fma(_995, _691, _994 * _711));
    float _1007 = fma(_1001, _677, fma(_995, _692, _994 * _712));
    float _1010 = fma(_1001, _678, fma(_995, _693, _994 * _713));
    float _1014 = inversesqrt(dot(vec3(_1004, _1007, _1010), vec3(_1004, _1007, _1010)));
    float _1015 = _847 * cbMtdParam._m0[16u].y;
    float _1022 = (((_1007 * 0.5) * _1014) + (-0.25)) * cbMtdParam._m0[19u].x;
    float _1024 = (-0.0) - (cbMtdParam._m0[19u].x * (((_1004 * 0.5) * _1014) + (-0.25)));
    float _1025 = fract(_1015);
    float _1027 = fract(_1015 + 0.5);
    float _1038 = abs((_1025 * 2.0) + (-1.0));
    vec4 _1055 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1025 * _1024) + _929) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1022 * _1025) + _930) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1057 = _1055.x;
    float _1058 = _1055.y;
    float _1059 = _1055.z;
    vec4 _1060 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1027 * _1024) + _929) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1022 * _1027) + _930) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1087 = (_728 * cbMtdParam._m0[20u].y) + _663;
    float _1088 = (_728 * cbMtdParam._m0[20u].z) + _664;
    float _1144;
    if (_761)
    {
        float _1104 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1110 = (_662 * _647) - (_659 * _650);
        float _1113 = (_656 * _650) - (_662 * _644);
        float _1116 = (_659 * _644) - (_656 * _647);
        float _1142 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1113 * _1113) + (_1116 * _1116)) + (_1110 * _1110)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1104 * gl_WorldRayDirectionEXT.x, _1104 * gl_WorldRayDirectionEXT.y, _1104 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1144 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    }
    else
    {
        _1144 = 0.0;
    }
    vec4 _1146 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _1144);
    float _1152 = (_1146.x * 2.0) + (-1.0);
    float _1153 = (_1146.y * 2.0) + (-1.0);
    float _1157 = 1.0 - dot(vec2(_1152, _1153), vec2(_1152, _1153));
    float _2017 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1159 = sqrt(isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0)));
    float _1162 = fma(_1159, _675, fma(_1153, _691, _1152 * _711));
    float _1165 = fma(_1159, _677, fma(_1153, _692, _1152 * _712));
    float _1168 = fma(_1159, _678, fma(_1153, _693, _1152 * _713));
    float _1172 = inversesqrt(dot(vec3(_1162, _1165, _1168), vec3(_1162, _1165, _1168)));
    float _1173 = _847 * cbMtdParam._m0[18u].z;
    float _1180 = (((_1165 * 0.5) * _1172) + (-0.25)) * cbMtdParam._m0[18u].w;
    float _1182 = (-0.0) - (cbMtdParam._m0[18u].w * (((_1162 * 0.5) * _1172) + (-0.25)));
    float _1183 = fract(_1173);
    float _1185 = fract(_1173 + 0.5);
    float _1196 = abs((_1183 * 2.0) + (-1.0));
    vec4 _1213 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1183 * _1182) + _1087) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1180 * _1183) + _1088) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1215 = _1213.x;
    float _1216 = _1213.y;
    float _1217 = _1213.z;
    vec4 _1218 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1185 * _1182) + _1087) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1180 * _1185) + _1088) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1251 = (_728 * cbMtdParam._m0[21u].w) + _663;
    float _1252 = (_728 * cbMtdParam._m0[22u].x) + _664;
    float _1305;
    if (_761)
    {
        float _1265 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1271 = (_662 * _647) - (_659 * _650);
        float _1274 = (_656 * _650) - (_662 * _644);
        float _1277 = (_659 * _644) - (_656 * _647);
        float _1303 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1274 * _1274) + (_1277 * _1277)) + (_1271 * _1271)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1265 * gl_WorldRayDirectionEXT.x, _1265 * gl_WorldRayDirectionEXT.y, _1265 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1305 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
    }
    else
    {
        _1305 = 0.0;
    }
    vec4 _1307 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _1305);
    float _1313 = (_1307.x * 2.0) + (-1.0);
    float _1314 = (_1307.y * 2.0) + (-1.0);
    float _1318 = 1.0 - dot(vec2(_1313, _1314), vec2(_1313, _1314));
    float _2033 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1320 = sqrt(isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0)));
    float _1323 = fma(_1320, _675, fma(_1314, _691, _1313 * _711));
    float _1326 = fma(_1320, _677, fma(_1314, _692, _1313 * _712));
    float _1329 = fma(_1320, _678, fma(_1314, _693, _1313 * _713));
    float _1333 = inversesqrt(dot(vec3(_1323, _1326, _1329), vec3(_1323, _1326, _1329)));
    float _1334 = _847 * cbMtdParam._m0[17u].z;
    float _1341 = (((_1326 * 0.5) * _1333) + (-0.25)) * cbMtdParam._m0[17u].w;
    float _1343 = (-0.0) - (cbMtdParam._m0[17u].w * (((_1323 * 0.5) * _1333) + (-0.25)));
    float _1344 = fract(_1334);
    float _1346 = fract(_1334 + 0.5);
    float _1357 = abs((_1344 * 2.0) + (-1.0));
    vec4 _1374 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1344 * _1343) + _1251) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_1341 * _1344) + _1252) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0);
    float _1376 = _1374.x;
    float _1377 = _1374.y;
    float _1378 = _1374.z;
    vec4 _1379 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1346 * _1343) + _1251) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_1341 * _1346) + _1252) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0);
    float _1396 = (((((_1218.x - _1215) * _1196) + _1215) * cbMtdParam._m0[11u].x) + ((((_1060.x - _1057) * _1038) + _1057) * cbMtdParam._m0[10u].x)) + ((((_1379.x - _1376) * _1357) + _1376) * cbMtdParam._m0[13u].x);
    float _1397 = (((((_1218.y - _1216) * _1196) + _1216) * cbMtdParam._m0[11u].y) + ((((_1060.y - _1058) * _1038) + _1058) * cbMtdParam._m0[10u].y)) + ((((_1379.y - _1377) * _1357) + _1377) * cbMtdParam._m0[13u].y);
    float _1398 = (((((_1218.z - _1217) * _1196) + _1217) * cbMtdParam._m0[11u].z) + ((((_1060.z - _1059) * _1038) + _1059) * cbMtdParam._m0[10u].z)) + ((((_1379.z - _1378) * _1357) + _1378) * cbMtdParam._m0[13u].z);
    float _1408 = (_728 * cbMtdParam._m0[23u].y) + _663;
    float _1409 = (_728 * cbMtdParam._m0[23u].z) + _664;
    uvec2 _1430 = uvec2(textureSize(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5, int(0u)));
    float _1434 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1435 = _1434 * gl_WorldRayDirectionEXT.x;
    float _1436 = _1434 * gl_WorldRayDirectionEXT.y;
    float _1437 = _1434 * gl_WorldRayDirectionEXT.z;
    float _1481;
    if (_761)
    {
        float _1447 = (_662 * _647) - (_659 * _650);
        float _1450 = (_656 * _650) - (_662 * _644);
        float _1453 = (_659 * _644) - (_656 * _647);
        float _1479 = ((log2((((float(_1430.y) * 0.5) * float(_1430.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1450 * _1450) + (_1453 * _1453)) + (_1447 * _1447)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1435, _1436, _1437), vec3(_675, _677, _678))));
        _1481 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    }
    else
    {
        _1481 = 0.0;
    }
    vec4 _1483 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * ((_728 * cbMtdParam._m0[24u].y) + _663)) + cbTextureTilingScale._m0[5u].z, (((_728 * cbMtdParam._m0[24u].z) + _664) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), _1481);
    float _1489 = (_1483.x * 2.0) + (-1.0);
    float _1490 = (_1483.y * 2.0) + (-1.0);
    float _1494 = 1.0 - dot(vec2(_1489, _1490), vec2(_1489, _1490));
    float _2049 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
    float _1496 = sqrt(isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0)));
    float _1499 = fma(_1496, _675, fma(_1490, _691, _1489 * _711));
    float _1502 = fma(_1496, _677, fma(_1490, _692, _1489 * _712));
    float _1505 = fma(_1496, _678, fma(_1490, _693, _1489 * _713));
    float _1509 = inversesqrt(dot(vec3(_1499, _1502, _1505), vec3(_1499, _1502, _1505)));
    float _1510 = _847 * cbMtdParam._m0[19u].z;
    float _1517 = (((_1502 * 0.5) * _1509) + (-0.25)) * cbMtdParam._m0[19u].y;
    float _1519 = (-0.0) - (cbMtdParam._m0[19u].y * (((_1499 * 0.5) * _1509) + (-0.25)));
    float _1520 = fract(_1510);
    float _1522 = fract(_1510 + 0.5);
    float _1533 = abs((_1520 * 2.0) + (-1.0));
    vec4 _1550 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1520 * _1519) + _1408) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_1517 * _1520) + _1409) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _1552 = _1550.x;
    float _1553 = _1550.y;
    float _1554 = _1550.z;
    vec4 _1555 = textureLod(sampler2D(M_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1522 * _1519) + _1408) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_1517 * _1522) + _1409) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _1573 = cbMtdParam._m0[16u].z * ((((float(_350 & 255u) * hit._m0.x) + (float(_269 & 255u) * _555)) + (float(_431 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _1580 = (_1573 * (((((_1555.x - _1552) * _1533) + _1552) * cbMtdParam._m0[12u].x) - _1396)) + _1396;
    float _1581 = (_1573 * (((((_1555.y - _1553) * _1533) + _1553) * cbMtdParam._m0[12u].y) - _1397)) + _1397;
    float _1582 = (_1573 * (((((_1555.z - _1554) * _1533) + _1554) * cbMtdParam._m0[12u].z) - _1398)) + _1398;
    float _1611 = inversesqrt(dot(vec3(_675, _677, _678), vec3(_675, _677, _678)));
    float _1612 = _1611 * _675;
    float _1613 = _1611 * _677;
    float _1614 = _1611 * _678;
    float _1626 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1627 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1628 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1629 = (-0.0) - _1435;
    float _1630 = (-0.0) - _1436;
    float _1631 = (-0.0) - _1437;
    float _1637 = float(gl_LaunchIDEXT.x);
    float _1638 = float(gl_LaunchIDEXT.y);
    float _1641 = float(gl_LaunchSizeEXT.x);
    float _1655 = fract(fract(sin(dot(vec2(_1637 / _1641, _1638 / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1668 = fract(fract(sin(dot(vec2((_1637 + 128.0) / _1641, (_1638 + 128.0) / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _69._m0 = 1u;
    uvec4 _1678 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1679 = _1678.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1679, _1678.w, _1679, vec3(_1626, _1627, _1628), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1744;
    float _1745;
    float _1746;
    if (_69._m0 == 0u)
    {
        float _1699 = g_sceneCB._m0[4u].x - _1435;
        float _1700 = g_sceneCB._m0[4u].y - _1436;
        float _1701 = g_sceneCB._m0[4u].z - _1437;
        float _1705 = inversesqrt(dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701)));
        float _1709 = dot(vec3(_1612, _1613, _1614), vec3(g_sceneCB._m0[4u].xyz));
        float _2060 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1712 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        float _1713 = dot(vec3(_1612, _1613, _1614), vec3(_1629, _1630, _1631));
        float _2071 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1717 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1699 * _1705, _1700 * _1705, _1701 * _1705));
        float _2082 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1728 = (exp2(log2(1.0 - (isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1734 = (0.5 / ((_1712 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0))))) * _1712;
        float _2093 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1736 = (isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0))) * 0.31831014156341552734375;
        _1744 = (_1728 * g_sceneCB._m0[5u].x) * _1736;
        _1745 = (_1728 * g_sceneCB._m0[5u].y) * _1736;
        _1746 = (_1728 * g_sceneCB._m0[5u].z) * _1736;
    }
    else
    {
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    bool _1748 = abs(_1613) < 0.89999997615814208984375;
    float _1750 = float(_1748);
    float _1751 = _1748 ? 0.0 : 1.0;
    float _1754 = (_1750 * _1614) - (_1751 * _1613);
    float _1755 = _1751 * _1612;
    float _1757 = (-0.0) - (_1612 * _1750);
    float _1761 = inversesqrt(dot(vec3(_1754, _1755, _1757), vec3(_1754, _1755, _1757)));
    float _1762 = _1754 * _1761;
    float _1763 = _1755 * _1761;
    float _1764 = _1761 * _1757;
    float _1767 = (_1763 * _1614) - (_1764 * _1613);
    float _1770 = (_1764 * _1612) - (_1762 * _1614);
    float _1773 = (_1762 * _1613) - (_1763 * _1612);
    float _1775;
    float _1783;
    float _1774 = 0.0;
    uint _1776 = 0u;
    float _1780;
    bool _1782;
    for (;;)
    {
        _1780 = (float(_1776) + _1655) * 0.03125;
        _1782 = _1776 == 0u;
        float frontier_phi_49_pred;
        if (_1782)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1903;
            float _1904;
            uint _1906;
            _1903 = 0.0;
            _1904 = 0.5;
            _1906 = _1776;
            float _1784;
            for (;;)
            {
                _1784 = ((_1906 & 1u) != 0u) ? (_1904 + _1903) : _1903;
                uint _1907 = _1906 >> 1u;
                if (_1907 == 0u)
                {
                    break;
                }
                else
                {
                    _1903 = _1784;
                    _1904 *= 0.5;
                    _1906 = _1907;
                }
            }
            frontier_phi_49_pred = _1784;
        }
        _1783 = frontier_phi_49_pred;
        float _1785 = _1783 + _1668;
        float _1789 = sqrt(_1780);
        float _1790 = ((_1785 > 1.0) ? (_1785 + (-1.0)) : _1785) * 6.283185482025146484375;
        float _1793 = cos(_1790) * _1789;
        float _1795 = sin(_1790) * _1789;
        float _1797 = sqrt(1.0 - _1780);
        float _1810 = ((_1797 * _1612) + (_1793 * _1767)) + (_1795 * _1762);
        float _1811 = ((_1797 * _1613) + (_1793 * _1770)) + (_1795 * _1763);
        float _1812 = ((_1797 * _1614) + (_1793 * _1773)) + (_1795 * _1764);
        _68._m0 = 1u;
        uvec4 _1816 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1817 = _1816.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1817, _1816.w, _1817, vec3(_1626, _1627, _1628), 9.9999997473787516355514526367188e-05, vec3(_1810, _1811, _1812), 10000.0, 1);
        float _1823 = dot(vec3(_1612, _1613, _1614), vec3(_1810, _1811, _1812));
        float _2104 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1826 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _1775 = ((float(_68._m0 == 0u) * _1826) / (_1826 * 0.3183098733425140380859375)) + _1774;
        uint _1777 = _1776 + 1u;
        if (_1777 == 32u)
        {
            break;
        }
        else
        {
            _1774 = _1775;
            _1776 = _1777;
            continue;
        }
    }
    float _1835 = _1775 * 0.009947183541953563690185546875;
    float _1840 = dot(vec3(_1435, _1436, _1437), vec3(_1612, _1613, _1614)) * 2.0;
    vec4 _1852 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1435 - (_1840 * _1612), _1436 - (_1840 * _1613), _1437 - (_1840 * _1614)), 4.0);
    float _1857 = dot(vec3(_1629, _1630, _1631), vec3(_1612, _1613, _1614));
    float _2115 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1866 = (exp2(log2(1.0 - (isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1874 = (_1744 + (cbMtdParam._m0[16u].x * (((_916 * (((((_896.x - _893) * _873) + _893) * cbMtdParam._m0[14u].x) - _1580)) + _1580) + ((((float(_327 & 255u) * hit._m0.x) + (float(_246 & 255u) * _555)) + (float(_408 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1852.x * _1835) * _1866);
    float _1876 = (_1745 + (cbMtdParam._m0[16u].x * (((_916 * (((((_896.y - _894) * _873) + _894) * cbMtdParam._m0[14u].y) - _1581)) + _1581) + ((((float((_327 >> 8u) & 255u) * hit._m0.x) + (float((_246 >> 8u) & 255u) * _555)) + (float((_408 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1852.y * _1835) * _1866);
    float _1878 = (_1746 + (cbMtdParam._m0[16u].x * (((_916 * (((((_896.z - _895) * _873) + _895) * cbMtdParam._m0[14u].z) - _1582)) + _1582) + ((((float((_327 >> 16u) & 255u) * hit._m0.x) + (float((_246 >> 16u) & 255u) * _555)) + (float((_408 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1852.z * _1835) * _1866);
    float _2126 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _2137 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _2148 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    bool _1886 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1897;
    _1897.x = _1886 ? ((_668 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0)));
    _1897.y = _1886 ? ((_671 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0)));
    _1897.z = _1886 ? ((_674 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0)));
    payload._m0 = _1897;
}


