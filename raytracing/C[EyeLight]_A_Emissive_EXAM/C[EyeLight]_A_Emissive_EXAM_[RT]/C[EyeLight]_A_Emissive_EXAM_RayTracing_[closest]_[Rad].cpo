#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _50
{
    vec3 _m0;
};

struct _54
{
    vec2 _m0;
};

struct _57
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _50 payload;
hitAttributeEXT _54 hit;
layout(location = 1) rayPayloadEXT _57 _59;
layout(location = 2) rayPayloadEXT _57 _60;

vec3 _1019;

void main()
{
    float _68 = float(gl_LaunchSizeEXT.y);
    float _98 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _107 = sqrt(((_99 * _99) + (_98 * _98)) + (_100 * _100)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _68)))));
    uvec4 _118 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _119 = _118.y;
    uint _159;
    uint _161;
    uint _162;
    if (_118.x == 0u)
    {
        uint _127 = (_119 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _136 = uvec3(texelFetch(l_geomIndexBuffer, int(_127)).x, texelFetch(l_geomIndexBuffer, int(_127 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_127 + 2u)).x);
        _159 = _136.x;
        _161 = _136.y;
        _162 = _136.z;
    }
    else
    {
        uint _140 = uint(gl_PrimitiveID) * 6u;
        uint _142 = _140 & 4294967292u;
        uint _145 = (_119 + _142) >> 2u;
        uvec2 _152 = uvec2(texelFetch(l_geomIndexBuffer, int(_145)).x, texelFetch(l_geomIndexBuffer, int(_145 + 1u)).x);
        uint _153 = _152.x;
        uint _154 = _152.y;
        uint _156 = _153 >> 16u;
        uint _157 = _154 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_142 == _140)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _153 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _154 >> 16u;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _156;
        }
        _159 = frontier_phi_3_2_ladder_2;
        _161 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
    }
    uvec4 _166 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _167 = _166.x;
    uint _168 = _166.z;
    bool _169 = _168 != 0u;
    bool _171 = _118.w == 0u;
    bool _172 = _169 || _171;
    uint _174 = (_167 * _159) + 12u;
    uint _198;
    uint _199;
    uint _200;
    uint _201;
    if (_172)
    {
        uvec4 _177 = texelFetch(l_geomAttrib_0, int(_174 >> 2u));
        uint _178 = _177.x;
        _198 = _178 & 255u;
        _199 = (_178 >> 8u) & 255u;
        _200 = (_178 >> 16u) & 255u;
        _201 = 20u;
    }
    else
    {
        uint _186 = _174 >> 2u;
        uvec2 _192 = uvec2(texelFetch(l_geomAttrib_0, int(_186)).x, texelFetch(l_geomAttrib_0, int(_186 + 1u)).x);
        uint _193 = _192.x;
        _198 = _193 & 65535u;
        _199 = _193 >> 16u;
        _200 = _192.y & 65535u;
        _201 = 24u;
    }
    bool _207 = _168 == 0u;
    uint _208;
    if (_207)
    {
        _208 = _201;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_171)
        {
            frontier_phi_9_10_ladder = _201 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _201 + 8u;
        }
        _208 = frontier_phi_9_10_ladder;
    }
    uvec4 _219 = texelFetch(l_geomAttrib_0, int((((_167 * _159) + 4u) + (_169 ? (_208 + 4u) : _208)) >> 2u));
    uint _220 = _219.x;
    float _224 = float(int(uint(int(_220 << 16u) >> int(16u))));
    float _225 = float(int(uint(int(_220) >> int(16u))));
    uint _227 = (_167 * _161) + 12u;
    uint _248;
    uint _249;
    uint _250;
    uint _251;
    if (_172)
    {
        uvec4 _229 = texelFetch(l_geomAttrib_0, int(_227 >> 2u));
        uint _230 = _229.x;
        _248 = _230 & 255u;
        _249 = (_230 >> 8u) & 255u;
        _250 = (_230 >> 16u) & 255u;
        _251 = 20u;
    }
    else
    {
        uint _236 = _227 >> 2u;
        uvec2 _242 = uvec2(texelFetch(l_geomAttrib_0, int(_236)).x, texelFetch(l_geomAttrib_0, int(_236 + 1u)).x);
        uint _243 = _242.x;
        _248 = _243 & 65535u;
        _249 = _243 >> 16u;
        _250 = _242.y & 65535u;
        _251 = 24u;
    }
    uint _255;
    if (_207)
    {
        _255 = _251;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_171)
        {
            frontier_phi_16_17_ladder = _251 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _251 + 8u;
        }
        _255 = frontier_phi_16_17_ladder;
    }
    uvec4 _264 = texelFetch(l_geomAttrib_0, int((((_167 * _161) + 4u) + (_169 ? (_255 + 4u) : _255)) >> 2u));
    uint _265 = _264.x;
    float _269 = float(int(uint(int(_265 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_265) >> int(16u))));
    uint _272 = (_167 * _162) + 12u;
    uint _293;
    uint _294;
    uint _295;
    uint _296;
    if (_172)
    {
        uvec4 _274 = texelFetch(l_geomAttrib_0, int(_272 >> 2u));
        uint _275 = _274.x;
        _293 = _275 & 255u;
        _294 = (_275 >> 8u) & 255u;
        _295 = (_275 >> 16u) & 255u;
        _296 = 20u;
    }
    else
    {
        uint _281 = _272 >> 2u;
        uvec2 _287 = uvec2(texelFetch(l_geomAttrib_0, int(_281)).x, texelFetch(l_geomAttrib_0, int(_281 + 1u)).x);
        uint _288 = _287.x;
        _293 = _288 & 65535u;
        _294 = _288 >> 16u;
        _295 = _287.y & 65535u;
        _296 = 24u;
    }
    uint _300;
    if (_207)
    {
        _300 = _296;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_171)
        {
            frontier_phi_23_24_ladder = _296 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _296 + 8u;
        }
        _300 = frontier_phi_23_24_ladder;
    }
    uvec4 _309 = texelFetch(l_geomAttrib_0, int((((_167 * _162) + 4u) + (_169 ? (_300 + 4u) : _300)) >> 2u));
    uint _310 = _309.x;
    float _314 = float(int(uint(int(_310 << 16u) >> int(16u))));
    float _315 = float(int(uint(int(_310) >> int(16u))));
    bool _317 = _118.z == 0u;
    float _353;
    float _354;
    float _355;
    if (_317)
    {
        uint _320 = _159 * 3u;
        uvec3 _329 = uvec3(texelFetch(l_geomPositionBuffer, int(_320)).x, texelFetch(l_geomPositionBuffer, int(_320 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_320 + 2u)).x);
        _353 = uintBitsToFloat(_329.x);
        _354 = uintBitsToFloat(_329.y);
        _355 = uintBitsToFloat(_329.z);
    }
    else
    {
        uint _337 = _159 * 2u;
        uvec2 _343 = uvec2(texelFetch(l_geomPositionBuffer, int(_337)).x, texelFetch(l_geomPositionBuffer, int(_337 + 1u)).x);
        uint _344 = _343.x;
        _353 = unpackHalf2x16(_344).x;
        _354 = unpackHalf2x16(_344 >> 16u).x;
        _355 = unpackHalf2x16(_343.y).x;
    }
    float _391;
    float _392;
    float _393;
    if (_317)
    {
        uint _358 = _161 * 3u;
        uvec3 _367 = uvec3(texelFetch(l_geomPositionBuffer, int(_358)).x, texelFetch(l_geomPositionBuffer, int(_358 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_358 + 2u)).x);
        _391 = uintBitsToFloat(_367.x);
        _392 = uintBitsToFloat(_367.y);
        _393 = uintBitsToFloat(_367.z);
    }
    else
    {
        uint _375 = _161 * 2u;
        uvec2 _381 = uvec2(texelFetch(l_geomPositionBuffer, int(_375)).x, texelFetch(l_geomPositionBuffer, int(_375 + 1u)).x);
        uint _382 = _381.x;
        _391 = unpackHalf2x16(_382).x;
        _392 = unpackHalf2x16(_382 >> 16u).x;
        _393 = unpackHalf2x16(_381.y).x;
    }
    float _429;
    float _430;
    float _431;
    if (_317)
    {
        uint _396 = _162 * 3u;
        uvec3 _405 = uvec3(texelFetch(l_geomPositionBuffer, int(_396)).x, texelFetch(l_geomPositionBuffer, int(_396 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_396 + 2u)).x);
        _429 = uintBitsToFloat(_405.x);
        _430 = uintBitsToFloat(_405.y);
        _431 = uintBitsToFloat(_405.z);
    }
    else
    {
        uint _413 = _162 * 2u;
        uvec2 _419 = uvec2(texelFetch(l_geomPositionBuffer, int(_413)).x, texelFetch(l_geomPositionBuffer, int(_413 + 1u)).x);
        uint _420 = _419.x;
        _429 = unpackHalf2x16(_420).x;
        _430 = unpackHalf2x16(_420 >> 16u).x;
        _431 = unpackHalf2x16(_419.y).x;
    }
    float _434 = (1.0 - hit._m0.x) - hit._m0.y;
    float _456 = (_269 - _224) * 0.00048828125;
    float _458 = (_270 - _225) * 0.00048828125;
    float _461 = (_314 - _224) * 0.00048828125;
    float _462 = (_315 - _225) * 0.00048828125;
    float _484 = _391 - _353;
    float _485 = _392 - _354;
    float _486 = _393 - _355;
    float _489 = fma(_486, gl_ObjectToWorldEXT[2u].x, fma(_485, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _484));
    float _492 = fma(_486, gl_ObjectToWorldEXT[2u].y, fma(_485, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _484));
    float _495 = fma(_486, gl_ObjectToWorldEXT[2u].z, fma(_485, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _484));
    float _496 = _429 - _353;
    float _497 = _430 - _354;
    float _498 = _431 - _355;
    float _501 = fma(_498, gl_ObjectToWorldEXT[2u].x, fma(_497, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _496));
    float _504 = fma(_498, gl_ObjectToWorldEXT[2u].y, fma(_497, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _496));
    float _507 = fma(_498, gl_ObjectToWorldEXT[2u].z, fma(_497, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _496));
    float _508 = (((_269 * hit._m0.x) + (_224 * _434)) + (_314 * hit._m0.y)) * 0.00048828125;
    float _509 = (((_270 * hit._m0.x) + (_225 * _434)) + (_315 * hit._m0.y)) * 0.00048828125;
    float _513 = (((float(_198) * _434) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _516 = (((float(_199) * _434) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _519 = (((float(_200) * _434) + (-127.0)) + (float(_250) * hit._m0.x)) + (float(_295) * hit._m0.y);
    float _520 = _513 * 0.0078740157186985015869140625;
    float _522 = _516 * 0.0078740157186985015869140625;
    float _523 = _519 * 0.0078740157186985015869140625;
    uvec2 _539 = uvec2(textureSize(C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_0, int(0u)));
    bool _544 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _597;
    if (_544)
    {
        float _555 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _561 = (_507 * _492) - (_504 * _495);
        float _564 = (_501 * _495) - (_507 * _489);
        float _567 = (_504 * _489) - (_501 * _492);
        float _594 = ((log2((((float(_539.y) * 0.5) * float(_539.x)) * abs((_462 * _456) - (_461 * _458))) / (sqrt(((_564 * _564) + (_567 * _567)) + (_561 * _561)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_555 * gl_WorldRayDirectionEXT.x, _555 * gl_WorldRayDirectionEXT.y, _555 * gl_WorldRayDirectionEXT.z), vec3(_520, _522, _523))));
        _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    }
    else
    {
        _597 = 0.0;
    }
    vec4 _601 = textureLod(sampler2D(C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _508) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _509) + cbTextureTilingScale._m0[0u].w), _597);
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    uvec2 _617 = uvec2(textureSize(C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_1, int(0u)));
    float _621 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _622 = _621 * gl_WorldRayDirectionEXT.x;
    float _623 = _621 * gl_WorldRayDirectionEXT.y;
    float _624 = _621 * gl_WorldRayDirectionEXT.z;
    float _668;
    if (_544)
    {
        float _634 = (_507 * _492) - (_504 * _495);
        float _637 = (_501 * _495) - (_507 * _489);
        float _640 = (_504 * _489) - (_501 * _492);
        float _666 = ((log2((((float(_617.y) * 0.5) * float(_617.x)) * abs((_462 * _456) - (_461 * _458))) / (sqrt(((_637 * _637) + (_640 * _640)) + (_634 * _634)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_622, _623, _624), vec3(_520, _522, _523))));
        _668 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    }
    else
    {
        _668 = 0.0;
    }
    vec4 _670 = textureLod(sampler2D(C_EyeLight_A_Emissive_EXAM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _508) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _509) + cbTextureTilingScale._m0[1u].w), _668);
    float _682 = (cbMatDynParam._m0[17u].x * (_670.x - _603)) + _603;
    float _683 = (cbMatDynParam._m0[17u].x * (_670.y - _604)) + _604;
    float _684 = (cbMatDynParam._m0[17u].x * (_670.z - _605)) + _605;
    float _692 = (((-0.0500000007450580596923828125) - _682) * cbMatDynParam._m0[17u].y) + _682;
    float _693 = (((-0.0500000007450580596923828125) - _683) * cbMatDynParam._m0[17u].y) + _683;
    float _694 = (((-0.0500000007450580596923828125) - _684) * cbMatDynParam._m0[17u].y) + _684;
    float _702 = inversesqrt(dot(vec3(_520, _522, _523), vec3(_520, _522, _523)));
    float _703 = _702 * _520;
    float _704 = _702 * _522;
    float _705 = _702 * _523;
    float _717 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _718 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _719 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _720 = (-0.0) - _622;
    float _722 = (-0.0) - _623;
    float _723 = (-0.0) - _624;
    float _729 = float(gl_LaunchIDEXT.x);
    float _730 = float(gl_LaunchIDEXT.y);
    float _733 = float(gl_LaunchSizeEXT.x);
    float _747 = fract(fract(sin(dot(vec2(_729 / _733, _730 / _68), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _760 = fract(fract(sin(dot(vec2((_729 + 128.0) / _733, (_730 + 128.0) / _68), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _60._m0 = 1u;
    uvec4 _770 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _771 = _770.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _771, _770.w, _771, vec3(_717, _718, _719), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (_60._m0 == 0u)
    {
        float _792 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_703, _704, _705));
        float _1105 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _795 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        float _806 = g_sceneCB._m0[4u].x - _622;
        float _807 = g_sceneCB._m0[4u].y - _623;
        float _808 = g_sceneCB._m0[4u].z - _624;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _816 = dot(vec3(_703, _704, _705), vec3(g_sceneCB._m0[4u].xyz));
        float _1116 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _819 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        float _820 = dot(vec3(_703, _704, _705), vec3(_720, _722, _723));
        float _1127 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_806 * _812, _807 * _812, _808 * _812));
        float _1138 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _832 = exp2(log2(1.0 - (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0)))) * 5.0);
        float _837 = (0.5 / ((_819 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0))))) * _819;
        float _1149 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _839 = (isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0))) * 0.31831014156341552734375;
        _847 = ((_692 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _795;
        _848 = ((_693 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _795;
        _849 = ((_694 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _795;
        _850 = (_832 * g_sceneCB._m0[5u].x) * _839;
        _851 = (_832 * g_sceneCB._m0[5u].y) * _839;
        _852 = (_832 * g_sceneCB._m0[5u].z) * _839;
    }
    else
    {
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
        _852 = 0.0;
    }
    bool _854 = abs(_704) < 0.89999997615814208984375;
    float _856 = float(_854);
    float _857 = _854 ? 0.0 : 1.0;
    float _860 = (_856 * _705) - (_857 * _704);
    float _861 = _857 * _703;
    float _863 = (-0.0) - (_703 * _856);
    float _867 = inversesqrt(dot(vec3(_860, _861, _863), vec3(_860, _861, _863)));
    float _868 = _860 * _867;
    float _869 = _861 * _867;
    float _870 = _867 * _863;
    float _873 = (_869 * _705) - (_870 * _704);
    float _876 = (_870 * _703) - (_868 * _705);
    float _879 = (_868 * _704) - (_869 * _703);
    float _881;
    float _889;
    float _880 = 0.0;
    uint _882 = 0u;
    float _886;
    bool _888;
    for (;;)
    {
        _886 = (float(_882) + _747) * 0.03125;
        _888 = _882 == 0u;
        float frontier_phi_43_pred;
        if (_888)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1024;
            float _1025;
            uint _1027;
            _1024 = 0.0;
            _1025 = 0.5;
            _1027 = _882;
            float _890;
            for (;;)
            {
                _890 = ((_1027 & 1u) != 0u) ? (_1025 + _1024) : _1024;
                uint _1028 = _1027 >> 1u;
                if (_1028 == 0u)
                {
                    break;
                }
                else
                {
                    _1024 = _890;
                    _1025 *= 0.5;
                    _1027 = _1028;
                }
            }
            frontier_phi_43_pred = _890;
        }
        _889 = frontier_phi_43_pred;
        float _891 = _889 + _760;
        float _896 = sqrt(_886);
        float _897 = ((_891 > 1.0) ? (_891 + (-1.0)) : _891) * 6.283185482025146484375;
        float _900 = cos(_897) * _896;
        float _902 = sin(_897) * _896;
        float _904 = sqrt(1.0 - _886);
        float _917 = ((_904 * _703) + (_900 * _873)) + (_902 * _868);
        float _918 = ((_904 * _704) + (_900 * _876)) + (_902 * _869);
        float _919 = ((_904 * _705) + (_900 * _879)) + (_902 * _870);
        _59._m0 = 1u;
        uvec4 _923 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _924 = _923.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _924, _923.w, _924, vec3(_717, _718, _719), 9.9999997473787516355514526367188e-05, vec3(_917, _918, _919), 10000.0, 1);
        float _930 = dot(vec3(_703, _704, _705), vec3(_917, _918, _919));
        float _1160 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _933 = isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0));
        _881 = ((float(_59._m0 == 0u) * _933) / (_933 * 0.3183098733425140380859375)) + _880;
        uint _883 = _882 + 1u;
        if (_883 == 32u)
        {
            break;
        }
        else
        {
            _880 = _881;
            _882 = _883;
            continue;
        }
    }
    float _941 = _881 * 0.009947183541953563690185546875;
    float _946 = dot(vec3(_622, _623, _624), vec3(_703, _704, _705)) * 2.0;
    vec4 _958 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_622 - (_946 * _703), _623 - (_946 * _704), _624 - (_946 * _705)), 4.0);
    float _963 = dot(vec3(_720, _722, _723), vec3(_703, _704, _705));
    float _1171 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _970 = exp2(log2(1.0 - (isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0)))) * 5.0);
    vec4 _976 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_703, _704, _705), 0.0);
    float _988 = ((_847 + (_692 * cbMatDynParam._m0[17u].z)) + _850) + (((_976.x * _692) + (_970 * _958.x)) * _941);
    float _993 = ((_848 + (_693 * cbMatDynParam._m0[17u].z)) + _851) + (((_976.y * _693) + (_970 * _958.y)) * _941);
    float _998 = ((_849 + (_694 * cbMatDynParam._m0[17u].z)) + _852) + (((_976.z * _694) + (_970 * _958.z)) * _941);
    float _1182 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1193 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1204 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    bool _1007 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1018;
    _1018.x = _1007 ? ((_513 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0)));
    _1018.y = _1007 ? ((_516 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0)));
    _1018.z = _1007 ? ((_519 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0)));
    payload._m0 = _1018;
}


