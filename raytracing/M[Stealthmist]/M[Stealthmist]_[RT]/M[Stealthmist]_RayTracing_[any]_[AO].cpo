#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _44
{
    uint _m0;
};

struct _48
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_Stealthmist_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _44 payload;
hitAttributeEXT _48 hit;

void main()
{
    uint _54 = payload._m0;
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _105 = sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _156;
    uint _158;
    uint _159;
    if (_116.x == 0u)
    {
        uint _124 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _133 = uvec3(texelFetch(l_geomIndexBuffer, int(_124)).x, texelFetch(l_geomIndexBuffer, int(_124 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_124 + 2u)).x);
        _156 = _133.x;
        _158 = _133.y;
        _159 = _133.z;
    }
    else
    {
        uint _137 = uint(gl_PrimitiveID) * 6u;
        uint _139 = _137 & 4294967292u;
        uint _142 = (_117 + _139) >> 2u;
        uvec2 _149 = uvec2(texelFetch(l_geomIndexBuffer, int(_142)).x, texelFetch(l_geomIndexBuffer, int(_142 + 1u)).x);
        uint _150 = _149.x;
        uint _151 = _149.y;
        uint _153 = _150 >> 16u;
        uint _154 = _151 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_139 == _137)
        {
            frontier_phi_3_2_ladder = _150 & 65535u;
            frontier_phi_3_2_ladder_1 = _153;
            frontier_phi_3_2_ladder_2 = _154;
        }
        else
        {
            frontier_phi_3_2_ladder = _153;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _151 >> 16u;
        }
        _156 = frontier_phi_3_2_ladder;
        _158 = frontier_phi_3_2_ladder_1;
        _159 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _163 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _164 = _163.x;
    uint _165 = _163.z;
    bool _166 = _165 != 0u;
    bool _168 = _116.w == 0u;
    bool _169 = _166 || _168;
    uint _171 = (_164 * _156) + 12u;
    uint _195;
    uint _196;
    uint _197;
    uint _198;
    if (_169)
    {
        uvec4 _174 = texelFetch(l_geomAttrib_0, int(_171 >> 2u));
        uint _175 = _174.x;
        _195 = _175 & 255u;
        _196 = (_175 >> 8u) & 255u;
        _197 = (_175 >> 16u) & 255u;
        _198 = 20u;
    }
    else
    {
        uint _183 = _171 >> 2u;
        uvec2 _189 = uvec2(texelFetch(l_geomAttrib_0, int(_183)).x, texelFetch(l_geomAttrib_0, int(_183 + 1u)).x);
        uint _190 = _189.x;
        _195 = _190 & 65535u;
        _196 = _190 >> 16u;
        _197 = _189.y & 65535u;
        _198 = 24u;
    }
    bool _204 = _165 == 0u;
    uint _205;
    if (_204)
    {
        _205 = _198;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_168)
        {
            frontier_phi_9_10_ladder = _198 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _198 + 8u;
        }
        _205 = frontier_phi_9_10_ladder;
    }
    uint _210 = _166 ? (_205 + 4u) : _205;
    uint _211 = _164 * _156;
    uvec4 _222 = texelFetch(l_geomAttrib_0, int(((_211 + 4u) + _210) >> 2u));
    uint _223 = _222.x;
    float _227 = float(int(uint(int(_223 << 16u) >> int(16u))));
    float _228 = float(int(uint(int(_223) >> int(16u))));
    uint _230 = (_164 * _158) + 12u;
    uint _251;
    uint _252;
    uint _253;
    uint _254;
    if (_169)
    {
        uvec4 _232 = texelFetch(l_geomAttrib_0, int(_230 >> 2u));
        uint _233 = _232.x;
        _251 = _233 & 255u;
        _252 = (_233 >> 8u) & 255u;
        _253 = (_233 >> 16u) & 255u;
        _254 = 20u;
    }
    else
    {
        uint _239 = _230 >> 2u;
        uvec2 _245 = uvec2(texelFetch(l_geomAttrib_0, int(_239)).x, texelFetch(l_geomAttrib_0, int(_239 + 1u)).x);
        uint _246 = _245.x;
        _251 = _246 & 65535u;
        _252 = _246 >> 16u;
        _253 = _245.y & 65535u;
        _254 = 24u;
    }
    uint _258;
    if (_204)
    {
        _258 = _254;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_168)
        {
            frontier_phi_16_17_ladder = _254 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _254 + 8u;
        }
        _258 = frontier_phi_16_17_ladder;
    }
    uint _262 = _166 ? (_258 + 4u) : _258;
    uint _263 = _164 * _158;
    uvec4 _273 = texelFetch(l_geomAttrib_0, int(((_263 + 4u) + _262) >> 2u));
    uint _274 = _273.x;
    float _278 = float(int(uint(int(_274 << 16u) >> int(16u))));
    float _279 = float(int(uint(int(_274) >> int(16u))));
    uint _281 = (_164 * _159) + 12u;
    uint _302;
    uint _303;
    uint _304;
    uint _305;
    if (_169)
    {
        uvec4 _283 = texelFetch(l_geomAttrib_0, int(_281 >> 2u));
        uint _284 = _283.x;
        _302 = _284 & 255u;
        _303 = (_284 >> 8u) & 255u;
        _304 = (_284 >> 16u) & 255u;
        _305 = 20u;
    }
    else
    {
        uint _290 = _281 >> 2u;
        uvec2 _296 = uvec2(texelFetch(l_geomAttrib_0, int(_290)).x, texelFetch(l_geomAttrib_0, int(_290 + 1u)).x);
        uint _297 = _296.x;
        _302 = _297 & 65535u;
        _303 = _297 >> 16u;
        _304 = _296.y & 65535u;
        _305 = 24u;
    }
    uint _309;
    if (_204)
    {
        _309 = _305;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_168)
        {
            frontier_phi_23_24_ladder = _305 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _305 + 8u;
        }
        _309 = frontier_phi_23_24_ladder;
    }
    uint _313 = _166 ? (_309 + 4u) : _309;
    uint _314 = _164 * _159;
    uvec4 _324 = texelFetch(l_geomAttrib_0, int(((_314 + 4u) + _313) >> 2u));
    uint _325 = _324.x;
    float _329 = float(int(uint(int(_325 << 16u) >> int(16u))));
    float _330 = float(int(uint(int(_325) >> int(16u))));
    bool _332 = _116.z == 0u;
    float _368;
    float _369;
    float _370;
    if (_332)
    {
        uint _335 = _156 * 3u;
        uvec3 _344 = uvec3(texelFetch(l_geomPositionBuffer, int(_335)).x, texelFetch(l_geomPositionBuffer, int(_335 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_335 + 2u)).x);
        _368 = uintBitsToFloat(_344.x);
        _369 = uintBitsToFloat(_344.y);
        _370 = uintBitsToFloat(_344.z);
    }
    else
    {
        uint _352 = _156 * 2u;
        uvec2 _358 = uvec2(texelFetch(l_geomPositionBuffer, int(_352)).x, texelFetch(l_geomPositionBuffer, int(_352 + 1u)).x);
        uint _359 = _358.x;
        _368 = unpackHalf2x16(_359).x;
        _369 = unpackHalf2x16(_359 >> 16u).x;
        _370 = unpackHalf2x16(_358.y).x;
    }
    float _406;
    float _407;
    float _408;
    if (_332)
    {
        uint _373 = _158 * 3u;
        uvec3 _382 = uvec3(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_373 + 2u)).x);
        _406 = uintBitsToFloat(_382.x);
        _407 = uintBitsToFloat(_382.y);
        _408 = uintBitsToFloat(_382.z);
    }
    else
    {
        uint _390 = _158 * 2u;
        uvec2 _396 = uvec2(texelFetch(l_geomPositionBuffer, int(_390)).x, texelFetch(l_geomPositionBuffer, int(_390 + 1u)).x);
        uint _397 = _396.x;
        _406 = unpackHalf2x16(_397).x;
        _407 = unpackHalf2x16(_397 >> 16u).x;
        _408 = unpackHalf2x16(_396.y).x;
    }
    float _444;
    float _445;
    float _446;
    if (_332)
    {
        uint _411 = _159 * 3u;
        uvec3 _420 = uvec3(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_411 + 2u)).x);
        _444 = uintBitsToFloat(_420.x);
        _445 = uintBitsToFloat(_420.y);
        _446 = uintBitsToFloat(_420.z);
    }
    else
    {
        uint _428 = _159 * 2u;
        uvec2 _434 = uvec2(texelFetch(l_geomPositionBuffer, int(_428)).x, texelFetch(l_geomPositionBuffer, int(_428 + 1u)).x);
        uint _435 = _434.x;
        _444 = unpackHalf2x16(_435).x;
        _445 = unpackHalf2x16(_435 >> 16u).x;
        _446 = unpackHalf2x16(_434.y).x;
    }
    float _449 = (1.0 - hit._m0.x) - hit._m0.y;
    float _478 = (_278 - _227) * 0.00048828125;
    float _480 = (_279 - _228) * 0.00048828125;
    float _483 = (_329 - _227) * 0.00048828125;
    float _484 = (_330 - _228) * 0.00048828125;
    float _506 = _406 - _368;
    float _507 = _407 - _369;
    float _508 = _408 - _370;
    float _511 = fma(_508, gl_ObjectToWorldEXT[2u].x, fma(_507, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _506));
    float _514 = fma(_508, gl_ObjectToWorldEXT[2u].y, fma(_507, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _506));
    float _517 = fma(_508, gl_ObjectToWorldEXT[2u].z, fma(_507, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _506));
    float _518 = _444 - _368;
    float _519 = _445 - _369;
    float _520 = _446 - _370;
    float _523 = fma(_520, gl_ObjectToWorldEXT[2u].x, fma(_519, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _518));
    float _526 = fma(_520, gl_ObjectToWorldEXT[2u].y, fma(_519, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _518));
    float _529 = fma(_520, gl_ObjectToWorldEXT[2u].z, fma(_519, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _518));
    float _530 = (((_278 * hit._m0.x) + (_227 * _449)) + (_329 * hit._m0.y)) * 0.00048828125;
    float _531 = (((_279 * hit._m0.x) + (_228 * _449)) + (_330 * hit._m0.y)) * 0.00048828125;
    float _542 = ((((float(_195) * _449) + (-127.0)) + (float(_251) * hit._m0.x)) + (float(_302) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _544 = ((((float(_196) * _449) + (-127.0)) + (float(_252) * hit._m0.x)) + (float(_303) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _545 = ((((float(_197) * _449) + (-127.0)) + (float(_253) * hit._m0.x)) + (float(_304) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _555 = cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x;
    float _562 = _531 - ((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    uvec2 _576 = uvec2(textureSize(M_Stealthmist_snp_0_Texture2D_0, int(0u)));
    bool _581 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _634;
    if (_581)
    {
        float _592 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _598 = (_529 * _514) - (_526 * _517);
        float _601 = (_523 * _517) - (_529 * _511);
        float _604 = (_526 * _511) - (_523 * _514);
        float _631 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_484 * _478) - (_483 * _480))) / (sqrt(((_601 * _601) + (_604 * _604)) + (_598 * _598)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_592 * gl_WorldRayDirectionEXT.x, _592 * gl_WorldRayDirectionEXT.y, _592 * gl_WorldRayDirectionEXT.z), vec3(_542, _544, _545))));
        _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    }
    else
    {
        _634 = 0.0;
    }
    float _703;
    if (_581)
    {
        float _663 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _669 = (_529 * _514) - (_526 * _517);
        float _672 = (_523 * _517) - (_529 * _511);
        float _675 = (_526 * _511) - (_523 * _514);
        float _701 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_484 * _478) - (_483 * _480))) / (sqrt(((_672 * _672) + (_675 * _675)) + (_669 * _669)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_663 * gl_WorldRayDirectionEXT.x, _663 * gl_WorldRayDirectionEXT.y, _663 * gl_WorldRayDirectionEXT.z), vec3(_542, _544, _545))));
        _703 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    }
    else
    {
        _703 = 0.0;
    }
    float _717 = ((_562 * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _768;
    if (_581)
    {
        float _728 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _734 = (_529 * _514) - (_526 * _517);
        float _737 = (_523 * _517) - (_529 * _511);
        float _740 = (_526 * _511) - (_523 * _514);
        float _766 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_484 * _478) - (_483 * _480))) / (sqrt(((_737 * _737) + (_740 * _740)) + (_734 * _734)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_728 * gl_WorldRayDirectionEXT.x, _728 * gl_WorldRayDirectionEXT.y, _728 * gl_WorldRayDirectionEXT.z), vec3(_542, _544, _545))));
        _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    }
    else
    {
        _768 = 0.0;
    }
    float _832;
    if (_581)
    {
        float _792 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _798 = (_529 * _514) - (_526 * _517);
        float _801 = (_523 * _517) - (_529 * _511);
        float _804 = (_526 * _511) - (_523 * _514);
        float _830 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_484 * _478) - (_483 * _480))) / (sqrt(((_801 * _801) + (_804 * _804)) + (_798 * _798)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_792 * gl_WorldRayDirectionEXT.x, _792 * gl_WorldRayDirectionEXT.y, _792 * gl_WorldRayDirectionEXT.z), vec3(_542, _544, _545))));
        _832 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    }
    else
    {
        _832 = 0.0;
    }
    float _840 = ((((float(texelFetch(l_geomAttrib_0, int((_262 + _263) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_210 + _211) >> 2u)).x >> 24u) * _449)) + (float(texelFetch(l_geomAttrib_0, int((_313 + _314) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (((textureLod(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2((((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + _530) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + _531) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _703).z - (textureLod(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[10u].x) * ((_555 * 3.2999999523162841796875) + _530)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[10u].x) * _562) + cbTextureTilingScale._m0[0u].w), _634).y * 0.20000000298023223876953125)) + (textureLod(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_555 * 6.900000095367431640625) + _530) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _717), _768).x * 0.0500000007450580596923828125)) + (textureLod(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_555 * 16.0) + _530) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _717), _832).x * 0.100000001490116119384765625));
    if (_840 < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _54;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _54;
        return;
    }
}


