#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1336;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _162;
    uint _164;
    uint _165;
    if (_122.x == 0u)
    {
        uint _130 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_123 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _156 & 65535u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _157 >> 16u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        _162 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
        _165 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _122.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _122.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    uvec2 _633 = uvec2(textureSize(C_Camouflage_test_02_snp_0_Texture2D_1, int(0u)));
    bool _638 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _691;
    if (_638)
    {
        float _649 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _655 = (_564 * _549) - (_561 * _552);
        float _658 = (_558 * _552) - (_564 * _546);
        float _661 = (_561 * _546) - (_558 * _549);
        float _688 = ((log2((((float(_633.y) * 0.5) * float(_633.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_658 * _658) + (_661 * _661)) + (_655 * _655)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_649 * gl_WorldRayDirectionEXT.x, _649 * gl_WorldRayDirectionEXT.y, _649 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    }
    else
    {
        _691 = 0.0;
    }
    vec4 _695 = textureLod(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _565) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _566) + cbTextureTilingScale._m0[0u].w), _691);
    float _700 = _695.x * cbMtdParam._m0[9u].x;
    float _701 = _695.y * cbMtdParam._m0[9u].y;
    float _702 = _695.z * cbMtdParam._m0[9u].z;
    uvec2 _718 = uvec2(textureSize(C_Camouflage_test_02_snp_0_Texture2D_2, int(0u)));
    float _769;
    if (_638)
    {
        float _729 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _735 = (_564 * _549) - (_561 * _552);
        float _738 = (_558 * _552) - (_564 * _546);
        float _741 = (_561 * _546) - (_558 * _549);
        float _767 = ((log2((((float(_718.y) * 0.5) * float(_718.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_738 * _738) + (_741 * _741)) + (_735 * _735)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_729 * gl_WorldRayDirectionEXT.x, _729 * gl_WorldRayDirectionEXT.y, _729 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _769 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    }
    else
    {
        _769 = 0.0;
    }
    float _775 = textureLod(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _565) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _566) + cbTextureTilingScale._m0[2u].w), _769).x + cbMtdParam._m0[11u].z;
    uvec2 _788 = uvec2(textureSize(C_Camouflage_test_02_snp_0_Texture2D_3, int(0u)));
    float _839;
    if (_638)
    {
        float _799 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _805 = (_564 * _549) - (_561 * _552);
        float _808 = (_558 * _552) - (_564 * _546);
        float _811 = (_561 * _546) - (_558 * _549);
        float _837 = ((log2((((float(_788.y) * 0.5) * float(_788.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_808 * _808) + (_811 * _811)) + (_805 * _805)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_799 * gl_WorldRayDirectionEXT.x, _799 * gl_WorldRayDirectionEXT.y, _799 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _839 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    }
    else
    {
        _839 = 0.0;
    }
    vec4 _842 = textureLod(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _565) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _566) + cbTextureTilingScale._m0[3u].w), _839);
    float _849 = (_842.x * 2.0) + (-1.0);
    float _851 = (_842.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_849, _851), vec2(_849, _851));
    float _1431 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _857 = sqrt(1.0 - (isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0))));
    float _860 = fma(_857, _577, fma(_851, _593, (_612 * _606) * _849));
    float _863 = fma(_857, _579, fma(_851, _594, (_612 * _607) * _849));
    float _866 = fma(_857, _580, fma(_851, _595, (_612 * _608) * _849));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _874 = _842.z + cbMtdParam._m0[11u].w;
    uvec2 _892 = uvec2(textureSize(C_Camouflage_test_02_snp_0_Texture2D_0, int(0u)));
    float _896 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _897 = _896 * gl_WorldRayDirectionEXT.x;
    float _898 = _896 * gl_WorldRayDirectionEXT.y;
    float _899 = _896 * gl_WorldRayDirectionEXT.z;
    float _943;
    if (_638)
    {
        float _909 = (_564 * _549) - (_561 * _552);
        float _912 = (_558 * _552) - (_564 * _546);
        float _915 = (_561 * _546) - (_558 * _549);
        float _941 = ((log2((((float(_892.y) * 0.5) * float(_892.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_912 * _912) + (_915 * _915)) + (_909 * _909)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_897, _898, _899), vec3(_577, _579, _580))));
        _943 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    }
    else
    {
        _943 = 0.0;
    }
    vec4 _945 = textureLod(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _565) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _566) + cbTextureTilingScale._m0[1u].w), _943);
    float _956 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _957 = _956 * _871;
    float _958 = _956 * _872;
    float _959 = _956 * _873;
    float _971 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _972 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _973 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _974 = (-0.0) - _897;
    float _976 = (-0.0) - _898;
    float _977 = (-0.0) - _899;
    float _983 = float(gl_LaunchIDEXT.x);
    float _984 = float(gl_LaunchIDEXT.y);
    float _987 = float(gl_LaunchSizeEXT.x);
    float _1001 = fract(fract(sin(dot(vec2(_983 / _987, _984 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1014 = fract(fract(sin(dot(vec2((_983 + 128.0) / _987, (_984 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1015 = 1.0 - _775;
    float _1016 = _1015 * _700;
    float _1017 = _1015 * _701;
    float _1018 = _1015 * _702;
    float _1023 = _775 * (_700 + (-0.039999999105930328369140625));
    float _1024 = _775 * (_701 + (-0.039999999105930328369140625));
    float _1025 = _775 * (_702 + (-0.039999999105930328369140625));
    float _1026 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    float _1029 = _1025 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _1039 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1040 = _1039.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1040, _1039.w, _1040, vec3(_971, _972, _973), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (_64._m0 == 0u)
    {
        float _1061 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_957, _958, _959));
        float _1447 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1064 = isnan(1.0) ? _1447 : (isnan(_1447) ? 1.0 : min(_1447, 1.0));
        float _1083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _874) * 0.949999988079071044921875);
        float _1084 = _1083 * _1083;
        float _1085 = g_sceneCB._m0[4u].x - _897;
        float _1086 = g_sceneCB._m0[4u].y - _898;
        float _1087 = g_sceneCB._m0[4u].z - _899;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1092 = _1091 * _1085;
        float _1093 = _1091 * _1086;
        float _1094 = _1091 * _1087;
        float _1095 = dot(vec3(_957, _958, _959), vec3(g_sceneCB._m0[4u].xyz));
        float _1458 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1098 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        float _1099 = dot(vec3(_957, _958, _959), vec3(_974, _976, _977));
        float _1469 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1102 = isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0));
        float _1103 = dot(vec3(_957, _958, _959), vec3(_1092, _1093, _1094));
        float _1480 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1106 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
        float _1107 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1092, _1093, _1094));
        float _1491 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1084 * _1084;
        float _1115 = ((_1106 * _1106) * (_1111 + (-1.0))) + 1.0;
        float _1124 = exp2(log2(1.0 - (isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0)))) * 5.0);
        float _1135 = 1.0 - _1084;
        float _1146 = (0.5 / (((_1102 * ((_1098 * _1135) + _1084)) + 9.9999999392252902907785028219223e-09) + (((_1102 * _1135) + _1084) * _1098))) * _1098;
        float _1502 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1148 = (isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0))) * (_1111 / ((_1115 * _1115) * 3.141590118408203125));
        _1155 = ((_1016 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1064;
        _1156 = ((_1017 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1064;
        _1157 = ((_1018 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1064;
        _1158 = (((_1124 * (0.959999978542327880859375 - _1023)) + _1026) * g_sceneCB._m0[5u].x) * _1148;
        _1159 = (((_1124 * (0.959999978542327880859375 - _1024)) + _1028) * g_sceneCB._m0[5u].y) * _1148;
        _1160 = (((_1124 * (0.959999978542327880859375 - _1025)) + _1029) * g_sceneCB._m0[5u].z) * _1148;
    }
    else
    {
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    bool _1162 = abs(_958) < 0.89999997615814208984375;
    float _1164 = float(_1162);
    float _1165 = _1162 ? 0.0 : 1.0;
    float _1168 = (_1164 * _959) - (_1165 * _958);
    float _1169 = _1165 * _957;
    float _1171 = (-0.0) - (_957 * _1164);
    float _1175 = inversesqrt(dot(vec3(_1168, _1169, _1171), vec3(_1168, _1169, _1171)));
    float _1176 = _1168 * _1175;
    float _1177 = _1169 * _1175;
    float _1178 = _1175 * _1171;
    float _1181 = (_1177 * _959) - (_1178 * _958);
    float _1184 = (_1178 * _957) - (_1176 * _959);
    float _1187 = (_1176 * _958) - (_1177 * _957);
    float _1189;
    float _1197;
    float _1188 = 0.0;
    uint _1190 = 0u;
    float _1194;
    bool _1196;
    for (;;)
    {
        _1194 = (float(_1190) + _1001) * 0.03125;
        _1196 = _1190 == 0u;
        float frontier_phi_47_pred;
        if (_1196)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1341;
            float _1342;
            uint _1344;
            _1341 = 0.0;
            _1342 = 0.5;
            _1344 = _1190;
            float _1198;
            for (;;)
            {
                _1198 = ((_1344 & 1u) != 0u) ? (_1342 + _1341) : _1341;
                uint _1345 = _1344 >> 1u;
                if (_1345 == 0u)
                {
                    break;
                }
                else
                {
                    _1341 = _1198;
                    _1342 *= 0.5;
                    _1344 = _1345;
                }
            }
            frontier_phi_47_pred = _1198;
        }
        _1197 = frontier_phi_47_pred;
        float _1199 = _1197 + _1014;
        float _1203 = sqrt(_1194);
        float _1204 = ((_1199 > 1.0) ? (_1199 + (-1.0)) : _1199) * 6.283185482025146484375;
        float _1207 = cos(_1204) * _1203;
        float _1209 = sin(_1204) * _1203;
        float _1211 = sqrt(1.0 - _1194);
        float _1224 = ((_1211 * _957) + (_1207 * _1181)) + (_1209 * _1176);
        float _1225 = ((_1211 * _958) + (_1207 * _1184)) + (_1209 * _1177);
        float _1226 = ((_1211 * _959) + (_1207 * _1187)) + (_1209 * _1178);
        _63._m0 = 1u;
        uvec4 _1230 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1231 = _1230.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1231, _1230.w, _1231, vec3(_971, _972, _973), 9.9999997473787516355514526367188e-05, vec3(_1224, _1225, _1226), 10000.0, 1);
        float _1237 = dot(vec3(_957, _958, _959), vec3(_1224, _1225, _1226));
        float _1513 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1240 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        _1189 = ((float(_63._m0 == 0u) * _1240) / (_1240 * 0.3183098733425140380859375)) + _1188;
        uint _1191 = _1190 + 1u;
        if (_1191 == 32u)
        {
            break;
        }
        else
        {
            _1188 = _1189;
            _1190 = _1191;
            continue;
        }
    }
    float _1248 = _1189 * 0.009947183541953563690185546875;
    float _1253 = dot(vec3(_897, _898, _899), vec3(_957, _958, _959)) * 2.0;
    vec4 _1267 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_897 - (_1253 * _957), _898 - (_1253 * _958), _899 - (_1253 * _959)), 4.0 - (_874 * 4.0));
    float _1272 = dot(vec3(_974, _976, _977), vec3(_957, _958, _959));
    float _1524 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1282 = exp2(log2(1.0 - (isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0)))) * 5.0);
    vec4 _1294 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_957, _958, _959), 0.0);
    float _1306 = ((_1155 + (_945.x * cbMtdParam._m0[10u].x)) + _1158) + (((_1294.x * _1016) + (((_1282 * (0.959999978542327880859375 - _1023)) + _1026) * _1267.x)) * _1248);
    float _1311 = ((_1156 + (_945.y * cbMtdParam._m0[10u].y)) + _1159) + (((_1294.y * _1017) + (((_1282 * (0.959999978542327880859375 - _1024)) + _1028) * _1267.y)) * _1248);
    float _1316 = ((_1157 + (_945.z * cbMtdParam._m0[10u].z)) + _1160) + (((_1294.z * _1018) + (((_1282 * (0.959999978542327880859375 - _1025)) + _1029) * _1267.z)) * _1248);
    float _1535 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1546 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1557 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    bool _1324 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1335;
    _1335.x = _1324 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0)));
    _1335.y = _1324 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0)));
    _1335.z = _1324 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0)));
    payload._m0 = _1335;
}


