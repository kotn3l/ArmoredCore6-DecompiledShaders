#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _50
{
    vec3 _m0;
};

struct _54
{
    vec2 _m0;
};

struct _57
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _50 payload;
hitAttributeEXT _54 hit;
layout(location = 1) rayPayloadEXT _57 _59;
layout(location = 2) rayPayloadEXT _57 _60;

vec3 _1021;

void main()
{
    float _68 = float(gl_LaunchSizeEXT.y);
    float _98 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _107 = sqrt(((_99 * _99) + (_98 * _98)) + (_100 * _100)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _68)))));
    uvec4 _118 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _119 = _118.y;
    uint _159;
    uint _161;
    uint _162;
    if (_118.x == 0u)
    {
        uint _127 = (_119 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _136 = uvec3(texelFetch(l_geomIndexBuffer, int(_127)).x, texelFetch(l_geomIndexBuffer, int(_127 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_127 + 2u)).x);
        _159 = _136.x;
        _161 = _136.y;
        _162 = _136.z;
    }
    else
    {
        uint _140 = uint(gl_PrimitiveID) * 6u;
        uint _142 = _140 & 4294967292u;
        uint _145 = (_119 + _142) >> 2u;
        uvec2 _152 = uvec2(texelFetch(l_geomIndexBuffer, int(_145)).x, texelFetch(l_geomIndexBuffer, int(_145 + 1u)).x);
        uint _153 = _152.x;
        uint _154 = _152.y;
        uint _156 = _153 >> 16u;
        uint _157 = _154 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_142 == _140)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _153 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _154 >> 16u;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _156;
        }
        _159 = frontier_phi_3_2_ladder_2;
        _161 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
    }
    uvec4 _166 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _167 = _166.x;
    uint _168 = _166.z;
    bool _169 = _168 != 0u;
    bool _171 = _118.w == 0u;
    bool _172 = _169 || _171;
    uint _174 = (_167 * _159) + 12u;
    uint _198;
    uint _199;
    uint _200;
    uint _201;
    if (_172)
    {
        uvec4 _177 = texelFetch(l_geomAttrib_0, int(_174 >> 2u));
        uint _178 = _177.x;
        _198 = _178 & 255u;
        _199 = (_178 >> 8u) & 255u;
        _200 = (_178 >> 16u) & 255u;
        _201 = 20u;
    }
    else
    {
        uint _186 = _174 >> 2u;
        uvec2 _192 = uvec2(texelFetch(l_geomAttrib_0, int(_186)).x, texelFetch(l_geomAttrib_0, int(_186 + 1u)).x);
        uint _193 = _192.x;
        _198 = _193 & 65535u;
        _199 = _193 >> 16u;
        _200 = _192.y & 65535u;
        _201 = 24u;
    }
    bool _207 = _168 == 0u;
    uint _208;
    if (_207)
    {
        _208 = _201;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_171)
        {
            frontier_phi_9_10_ladder = _201 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _201 + 8u;
        }
        _208 = frontier_phi_9_10_ladder;
    }
    uvec4 _219 = texelFetch(l_geomAttrib_0, int((((_167 * _159) + 4u) + (_169 ? (_208 + 4u) : _208)) >> 2u));
    uint _220 = _219.x;
    float _224 = float(int(uint(int(_220 << 16u) >> int(16u))));
    float _225 = float(int(uint(int(_220) >> int(16u))));
    uint _227 = (_167 * _161) + 12u;
    uint _248;
    uint _249;
    uint _250;
    uint _251;
    if (_172)
    {
        uvec4 _229 = texelFetch(l_geomAttrib_0, int(_227 >> 2u));
        uint _230 = _229.x;
        _248 = _230 & 255u;
        _249 = (_230 >> 8u) & 255u;
        _250 = (_230 >> 16u) & 255u;
        _251 = 20u;
    }
    else
    {
        uint _236 = _227 >> 2u;
        uvec2 _242 = uvec2(texelFetch(l_geomAttrib_0, int(_236)).x, texelFetch(l_geomAttrib_0, int(_236 + 1u)).x);
        uint _243 = _242.x;
        _248 = _243 & 65535u;
        _249 = _243 >> 16u;
        _250 = _242.y & 65535u;
        _251 = 24u;
    }
    uint _255;
    if (_207)
    {
        _255 = _251;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_171)
        {
            frontier_phi_16_17_ladder = _251 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _251 + 8u;
        }
        _255 = frontier_phi_16_17_ladder;
    }
    uvec4 _264 = texelFetch(l_geomAttrib_0, int((((_167 * _161) + 4u) + (_169 ? (_255 + 4u) : _255)) >> 2u));
    uint _265 = _264.x;
    float _269 = float(int(uint(int(_265 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_265) >> int(16u))));
    uint _272 = (_167 * _162) + 12u;
    uint _293;
    uint _294;
    uint _295;
    uint _296;
    if (_172)
    {
        uvec4 _274 = texelFetch(l_geomAttrib_0, int(_272 >> 2u));
        uint _275 = _274.x;
        _293 = _275 & 255u;
        _294 = (_275 >> 8u) & 255u;
        _295 = (_275 >> 16u) & 255u;
        _296 = 20u;
    }
    else
    {
        uint _281 = _272 >> 2u;
        uvec2 _287 = uvec2(texelFetch(l_geomAttrib_0, int(_281)).x, texelFetch(l_geomAttrib_0, int(_281 + 1u)).x);
        uint _288 = _287.x;
        _293 = _288 & 65535u;
        _294 = _288 >> 16u;
        _295 = _287.y & 65535u;
        _296 = 24u;
    }
    uint _300;
    if (_207)
    {
        _300 = _296;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_171)
        {
            frontier_phi_23_24_ladder = _296 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _296 + 8u;
        }
        _300 = frontier_phi_23_24_ladder;
    }
    uvec4 _309 = texelFetch(l_geomAttrib_0, int((((_167 * _162) + 4u) + (_169 ? (_300 + 4u) : _300)) >> 2u));
    uint _310 = _309.x;
    float _314 = float(int(uint(int(_310 << 16u) >> int(16u))));
    float _315 = float(int(uint(int(_310) >> int(16u))));
    bool _317 = _118.z == 0u;
    float _353;
    float _354;
    float _355;
    if (_317)
    {
        uint _320 = _159 * 3u;
        uvec3 _329 = uvec3(texelFetch(l_geomPositionBuffer, int(_320)).x, texelFetch(l_geomPositionBuffer, int(_320 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_320 + 2u)).x);
        _353 = uintBitsToFloat(_329.x);
        _354 = uintBitsToFloat(_329.y);
        _355 = uintBitsToFloat(_329.z);
    }
    else
    {
        uint _337 = _159 * 2u;
        uvec2 _343 = uvec2(texelFetch(l_geomPositionBuffer, int(_337)).x, texelFetch(l_geomPositionBuffer, int(_337 + 1u)).x);
        uint _344 = _343.x;
        _353 = unpackHalf2x16(_344).x;
        _354 = unpackHalf2x16(_344 >> 16u).x;
        _355 = unpackHalf2x16(_343.y).x;
    }
    float _391;
    float _392;
    float _393;
    if (_317)
    {
        uint _358 = _161 * 3u;
        uvec3 _367 = uvec3(texelFetch(l_geomPositionBuffer, int(_358)).x, texelFetch(l_geomPositionBuffer, int(_358 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_358 + 2u)).x);
        _391 = uintBitsToFloat(_367.x);
        _392 = uintBitsToFloat(_367.y);
        _393 = uintBitsToFloat(_367.z);
    }
    else
    {
        uint _375 = _161 * 2u;
        uvec2 _381 = uvec2(texelFetch(l_geomPositionBuffer, int(_375)).x, texelFetch(l_geomPositionBuffer, int(_375 + 1u)).x);
        uint _382 = _381.x;
        _391 = unpackHalf2x16(_382).x;
        _392 = unpackHalf2x16(_382 >> 16u).x;
        _393 = unpackHalf2x16(_381.y).x;
    }
    float _429;
    float _430;
    float _431;
    if (_317)
    {
        uint _396 = _162 * 3u;
        uvec3 _405 = uvec3(texelFetch(l_geomPositionBuffer, int(_396)).x, texelFetch(l_geomPositionBuffer, int(_396 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_396 + 2u)).x);
        _429 = uintBitsToFloat(_405.x);
        _430 = uintBitsToFloat(_405.y);
        _431 = uintBitsToFloat(_405.z);
    }
    else
    {
        uint _413 = _162 * 2u;
        uvec2 _419 = uvec2(texelFetch(l_geomPositionBuffer, int(_413)).x, texelFetch(l_geomPositionBuffer, int(_413 + 1u)).x);
        uint _420 = _419.x;
        _429 = unpackHalf2x16(_420).x;
        _430 = unpackHalf2x16(_420 >> 16u).x;
        _431 = unpackHalf2x16(_419.y).x;
    }
    float _434 = (1.0 - hit._m0.x) - hit._m0.y;
    float _456 = (_269 - _224) * 0.00048828125;
    float _458 = (_270 - _225) * 0.00048828125;
    float _461 = (_314 - _224) * 0.00048828125;
    float _462 = (_315 - _225) * 0.00048828125;
    float _484 = _391 - _353;
    float _485 = _392 - _354;
    float _486 = _393 - _355;
    float _489 = fma(_486, gl_ObjectToWorldEXT[2u].x, fma(_485, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _484));
    float _492 = fma(_486, gl_ObjectToWorldEXT[2u].y, fma(_485, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _484));
    float _495 = fma(_486, gl_ObjectToWorldEXT[2u].z, fma(_485, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _484));
    float _496 = _429 - _353;
    float _497 = _430 - _354;
    float _498 = _431 - _355;
    float _501 = fma(_498, gl_ObjectToWorldEXT[2u].x, fma(_497, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _496));
    float _504 = fma(_498, gl_ObjectToWorldEXT[2u].y, fma(_497, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _496));
    float _507 = fma(_498, gl_ObjectToWorldEXT[2u].z, fma(_497, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _496));
    float _508 = (((_269 * hit._m0.x) + (_224 * _434)) + (_314 * hit._m0.y)) * 0.00048828125;
    float _509 = (((_270 * hit._m0.x) + (_225 * _434)) + (_315 * hit._m0.y)) * 0.00048828125;
    float _513 = (((float(_198) * _434) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _516 = (((float(_199) * _434) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _519 = (((float(_200) * _434) + (-127.0)) + (float(_250) * hit._m0.x)) + (float(_295) * hit._m0.y);
    float _520 = _513 * 0.0078740157186985015869140625;
    float _522 = _516 * 0.0078740157186985015869140625;
    float _523 = _519 * 0.0078740157186985015869140625;
    uvec2 _541 = uvec2(textureSize(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _546 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _599;
    if (_546)
    {
        float _557 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _563 = (_507 * _492) - (_504 * _495);
        float _566 = (_501 * _495) - (_507 * _489);
        float _569 = (_504 * _489) - (_501 * _492);
        float _596 = ((log2((((float(_541.y) * 0.5) * float(_541.x)) * abs((_462 * _456) - (_461 * _458))) / (sqrt(((_566 * _566) + (_569 * _569)) + (_563 * _563)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_557 * gl_WorldRayDirectionEXT.x, _557 * gl_WorldRayDirectionEXT.y, _557 * gl_WorldRayDirectionEXT.z), vec3(_520, _522, _523))));
        _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    }
    else
    {
        _599 = 0.0;
    }
    vec4 _603 = textureLod(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _508) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _509) + cbTextureTilingScale._m0[0u].w), _599);
    float _608 = _603.x * cbMtdParam._m0[9u].x;
    float _609 = _603.y * cbMtdParam._m0[9u].y;
    float _610 = _603.z * cbMtdParam._m0[9u].z;
    uvec2 _622 = uvec2(textureSize(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, int(0u)));
    float _626 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _627 = _626 * gl_WorldRayDirectionEXT.x;
    float _628 = _626 * gl_WorldRayDirectionEXT.y;
    float _629 = _626 * gl_WorldRayDirectionEXT.z;
    float _673;
    if (_546)
    {
        float _639 = (_507 * _492) - (_504 * _495);
        float _642 = (_501 * _495) - (_507 * _489);
        float _645 = (_504 * _489) - (_501 * _492);
        float _671 = ((log2((((float(_622.y) * 0.5) * float(_622.x)) * abs((_462 * _456) - (_461 * _458))) / (sqrt(((_642 * _642) + (_645 * _645)) + (_639 * _639)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_107) / abs(dot(vec3(_627, _628, _629), vec3(_520, _522, _523))));
        _673 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    }
    else
    {
        _673 = 0.0;
    }
    vec4 _675 = textureLod(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _508) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _509) + cbTextureTilingScale._m0[1u].w), _673);
    float _699 = inversesqrt(dot(vec3(_520, _522, _523), vec3(_520, _522, _523)));
    float _700 = _699 * _520;
    float _701 = _699 * _522;
    float _702 = _699 * _523;
    float _714 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _715 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _716 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _717 = (-0.0) - _627;
    float _719 = (-0.0) - _628;
    float _720 = (-0.0) - _629;
    float _726 = float(gl_LaunchIDEXT.x);
    float _727 = float(gl_LaunchIDEXT.y);
    float _730 = float(gl_LaunchSizeEXT.x);
    float _744 = fract(fract(sin(dot(vec2(_726 / _730, _727 / _68), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _757 = fract(fract(sin(dot(vec2((_726 + 128.0) / _730, (_727 + 128.0) / _68), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _60._m0 = 1u;
    uvec4 _767 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _768 = _767.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _768, _767.w, _768, vec3(_714, _715, _716), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    if (_60._m0 == 0u)
    {
        float _789 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_700, _701, _702));
        float _1107 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _792 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        float _803 = g_sceneCB._m0[4u].x - _627;
        float _804 = g_sceneCB._m0[4u].y - _628;
        float _805 = g_sceneCB._m0[4u].z - _629;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _813 = dot(vec3(_700, _701, _702), vec3(g_sceneCB._m0[4u].xyz));
        float _1118 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _816 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
        float _817 = dot(vec3(_700, _701, _702), vec3(_717, _719, _720));
        float _1129 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_803 * _809, _804 * _809, _805 * _809));
        float _1140 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _832 = (exp2(log2(1.0 - (isnan(1.0) ? _1140 : (isnan(_1140) ? 1.0 : min(_1140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _838 = (0.5 / ((_816 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1129 : (isnan(_1129) ? 1.0 : min(_1129, 1.0))))) * _816;
        float _1151 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _840 = (isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0))) * 0.31831014156341552734375;
        _848 = ((_608 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _792;
        _849 = ((_609 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _792;
        _850 = ((_610 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _792;
        _851 = (_832 * g_sceneCB._m0[5u].x) * _840;
        _852 = (_832 * g_sceneCB._m0[5u].y) * _840;
        _853 = (_832 * g_sceneCB._m0[5u].z) * _840;
    }
    else
    {
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
        _852 = 0.0;
        _853 = 0.0;
    }
    bool _855 = abs(_701) < 0.89999997615814208984375;
    float _857 = float(_855);
    float _858 = _855 ? 0.0 : 1.0;
    float _861 = (_857 * _702) - (_858 * _701);
    float _862 = _858 * _700;
    float _864 = (-0.0) - (_700 * _857);
    float _868 = inversesqrt(dot(vec3(_861, _862, _864), vec3(_861, _862, _864)));
    float _869 = _861 * _868;
    float _870 = _862 * _868;
    float _871 = _868 * _864;
    float _874 = (_870 * _702) - (_871 * _701);
    float _877 = (_871 * _700) - (_869 * _702);
    float _880 = (_869 * _701) - (_870 * _700);
    float _882;
    float _890;
    float _881 = 0.0;
    uint _883 = 0u;
    float _887;
    bool _889;
    for (;;)
    {
        _887 = (float(_883) + _744) * 0.03125;
        _889 = _883 == 0u;
        float frontier_phi_43_pred;
        if (_889)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1026;
            float _1027;
            uint _1029;
            _1026 = 0.0;
            _1027 = 0.5;
            _1029 = _883;
            float _891;
            for (;;)
            {
                _891 = ((_1029 & 1u) != 0u) ? (_1027 + _1026) : _1026;
                uint _1030 = _1029 >> 1u;
                if (_1030 == 0u)
                {
                    break;
                }
                else
                {
                    _1026 = _891;
                    _1027 *= 0.5;
                    _1029 = _1030;
                }
            }
            frontier_phi_43_pred = _891;
        }
        _890 = frontier_phi_43_pred;
        float _892 = _890 + _757;
        float _897 = sqrt(_887);
        float _898 = ((_892 > 1.0) ? (_892 + (-1.0)) : _892) * 6.283185482025146484375;
        float _901 = cos(_898) * _897;
        float _903 = sin(_898) * _897;
        float _905 = sqrt(1.0 - _887);
        float _918 = ((_905 * _700) + (_901 * _874)) + (_903 * _869);
        float _919 = ((_905 * _701) + (_901 * _877)) + (_903 * _870);
        float _920 = ((_905 * _702) + (_901 * _880)) + (_903 * _871);
        _59._m0 = 1u;
        uvec4 _924 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _925 = _924.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _925, _924.w, _925, vec3(_714, _715, _716), 9.9999997473787516355514526367188e-05, vec3(_918, _919, _920), 10000.0, 1);
        float _931 = dot(vec3(_700, _701, _702), vec3(_918, _919, _920));
        float _1162 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _934 = isnan(1.0) ? _1162 : (isnan(_1162) ? 1.0 : min(_1162, 1.0));
        _882 = ((float(_59._m0 == 0u) * _934) / (_934 * 0.3183098733425140380859375)) + _881;
        uint _884 = _883 + 1u;
        if (_884 == 32u)
        {
            break;
        }
        else
        {
            _881 = _882;
            _883 = _884;
            continue;
        }
    }
    float _942 = _882 * 0.009947183541953563690185546875;
    float _947 = dot(vec3(_627, _628, _629), vec3(_700, _701, _702)) * 2.0;
    vec4 _959 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_627 - (_947 * _700), _628 - (_947 * _701), _629 - (_947 * _702)), 4.0);
    float _964 = dot(vec3(_717, _719, _720), vec3(_700, _701, _702));
    float _1173 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _973 = (exp2(log2(1.0 - (isnan(1.0) ? _1173 : (isnan(_1173) ? 1.0 : min(_1173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _979 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_700, _701, _702), 0.0);
    float _991 = ((_848 + ((cbMtdParam._m0[11u].x * _675.x) * cbMtdParam._m0[10u].x)) + _851) + (((_979.x * _608) + (_973 * _959.x)) * _942);
    float _996 = ((_849 + ((cbMtdParam._m0[11u].x * _675.y) * cbMtdParam._m0[10u].y)) + _852) + (((_979.y * _609) + (_973 * _959.y)) * _942);
    float _1001 = ((_850 + ((cbMtdParam._m0[11u].x * _675.z) * cbMtdParam._m0[10u].z)) + _853) + (((_979.z * _610) + (_973 * _959.z)) * _942);
    float _1184 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1195 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1206 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    bool _1009 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1020;
    _1020.x = _1009 ? ((_513 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1184 : (isnan(_1184) ? 1.0 : min(_1184, 1.0)));
    _1020.y = _1009 ? ((_516 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1195 : (isnan(_1195) ? 1.0 : min(_1195, 1.0)));
    _1020.z = _1009 ? ((_519 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1206 : (isnan(_1206) ? 1.0 : min(_1206, 1.0)));
    payload._m0 = _1020;
}


