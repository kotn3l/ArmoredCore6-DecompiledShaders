#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _47
{
    vec3 _m0;
};

struct _51
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _47 payload;
hitAttributeEXT _51 hit;

void main()
{
    vec3 _57 = payload._m0;
    float _98 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _99 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _118 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _119 = _118.y;
    uint _159;
    uint _161;
    uint _162;
    if (_118.x == 0u)
    {
        uint _127 = (_119 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _136 = uvec3(texelFetch(l_geomIndexBuffer, int(_127)).x, texelFetch(l_geomIndexBuffer, int(_127 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_127 + 2u)).x);
        _159 = _136.x;
        _161 = _136.y;
        _162 = _136.z;
    }
    else
    {
        uint _140 = uint(gl_PrimitiveID) * 6u;
        uint _142 = _140 & 4294967292u;
        uint _145 = (_119 + _142) >> 2u;
        uvec2 _152 = uvec2(texelFetch(l_geomIndexBuffer, int(_145)).x, texelFetch(l_geomIndexBuffer, int(_145 + 1u)).x);
        uint _153 = _152.x;
        uint _154 = _152.y;
        uint _156 = _153 >> 16u;
        uint _157 = _154 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_142 == _140)
        {
            frontier_phi_3_2_ladder = _153 & 65535u;
            frontier_phi_3_2_ladder_1 = _156;
            frontier_phi_3_2_ladder_2 = _157;
        }
        else
        {
            frontier_phi_3_2_ladder = _156;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 >> 16u;
        }
        _159 = frontier_phi_3_2_ladder;
        _161 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _166 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _167 = _166.x;
    uint _168 = _166.z;
    bool _169 = _168 != 0u;
    bool _171 = _118.w == 0u;
    bool _172 = _169 || _171;
    uint _174 = (_167 * _159) + 12u;
    uint _198;
    uint _199;
    uint _200;
    uint _201;
    if (_172)
    {
        uvec4 _177 = texelFetch(l_geomAttrib_0, int(_174 >> 2u));
        uint _178 = _177.x;
        _198 = _178 & 255u;
        _199 = (_178 >> 8u) & 255u;
        _200 = (_178 >> 16u) & 255u;
        _201 = 20u;
    }
    else
    {
        uint _186 = _174 >> 2u;
        uvec2 _192 = uvec2(texelFetch(l_geomAttrib_0, int(_186)).x, texelFetch(l_geomAttrib_0, int(_186 + 1u)).x);
        uint _193 = _192.x;
        _198 = _193 & 65535u;
        _199 = _193 >> 16u;
        _200 = _192.y & 65535u;
        _201 = 24u;
    }
    bool _207 = _168 == 0u;
    uint _208;
    if (_207)
    {
        _208 = _201;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_171)
        {
            frontier_phi_9_10_ladder = _201 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _201 + 8u;
        }
        _208 = frontier_phi_9_10_ladder;
    }
    uvec4 _219 = texelFetch(l_geomAttrib_0, int((((_167 * _159) + 4u) + (_169 ? (_208 + 4u) : _208)) >> 2u));
    uint _220 = _219.x;
    float _224 = float(int(uint(int(_220 << 16u) >> int(16u))));
    float _225 = float(int(uint(int(_220) >> int(16u))));
    uint _227 = (_167 * _161) + 12u;
    uint _248;
    uint _249;
    uint _250;
    uint _251;
    if (_172)
    {
        uvec4 _229 = texelFetch(l_geomAttrib_0, int(_227 >> 2u));
        uint _230 = _229.x;
        _248 = _230 & 255u;
        _249 = (_230 >> 8u) & 255u;
        _250 = (_230 >> 16u) & 255u;
        _251 = 20u;
    }
    else
    {
        uint _236 = _227 >> 2u;
        uvec2 _242 = uvec2(texelFetch(l_geomAttrib_0, int(_236)).x, texelFetch(l_geomAttrib_0, int(_236 + 1u)).x);
        uint _243 = _242.x;
        _248 = _243 & 65535u;
        _249 = _243 >> 16u;
        _250 = _242.y & 65535u;
        _251 = 24u;
    }
    uint _255;
    if (_207)
    {
        _255 = _251;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_171)
        {
            frontier_phi_16_17_ladder = _251 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _251 + 8u;
        }
        _255 = frontier_phi_16_17_ladder;
    }
    uvec4 _264 = texelFetch(l_geomAttrib_0, int((((_167 * _161) + 4u) + (_169 ? (_255 + 4u) : _255)) >> 2u));
    uint _265 = _264.x;
    float _269 = float(int(uint(int(_265 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_265) >> int(16u))));
    uint _272 = (_167 * _162) + 12u;
    uint _293;
    uint _294;
    uint _295;
    uint _296;
    if (_172)
    {
        uvec4 _274 = texelFetch(l_geomAttrib_0, int(_272 >> 2u));
        uint _275 = _274.x;
        _293 = _275 & 255u;
        _294 = (_275 >> 8u) & 255u;
        _295 = (_275 >> 16u) & 255u;
        _296 = 20u;
    }
    else
    {
        uint _281 = _272 >> 2u;
        uvec2 _287 = uvec2(texelFetch(l_geomAttrib_0, int(_281)).x, texelFetch(l_geomAttrib_0, int(_281 + 1u)).x);
        uint _288 = _287.x;
        _293 = _288 & 65535u;
        _294 = _288 >> 16u;
        _295 = _287.y & 65535u;
        _296 = 24u;
    }
    uint _300;
    if (_207)
    {
        _300 = _296;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_171)
        {
            frontier_phi_23_24_ladder = _296 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _296 + 8u;
        }
        _300 = frontier_phi_23_24_ladder;
    }
    uvec4 _309 = texelFetch(l_geomAttrib_0, int((((_167 * _162) + 4u) + (_169 ? (_300 + 4u) : _300)) >> 2u));
    uint _310 = _309.x;
    float _314 = float(int(uint(int(_310 << 16u) >> int(16u))));
    float _315 = float(int(uint(int(_310) >> int(16u))));
    bool _317 = _118.z == 0u;
    float _353;
    float _354;
    float _355;
    if (_317)
    {
        uint _320 = _159 * 3u;
        uvec3 _329 = uvec3(texelFetch(l_geomPositionBuffer, int(_320)).x, texelFetch(l_geomPositionBuffer, int(_320 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_320 + 2u)).x);
        _353 = uintBitsToFloat(_329.x);
        _354 = uintBitsToFloat(_329.y);
        _355 = uintBitsToFloat(_329.z);
    }
    else
    {
        uint _337 = _159 * 2u;
        uvec2 _343 = uvec2(texelFetch(l_geomPositionBuffer, int(_337)).x, texelFetch(l_geomPositionBuffer, int(_337 + 1u)).x);
        uint _344 = _343.x;
        _353 = unpackHalf2x16(_344).x;
        _354 = unpackHalf2x16(_344 >> 16u).x;
        _355 = unpackHalf2x16(_343.y).x;
    }
    float _391;
    float _392;
    float _393;
    if (_317)
    {
        uint _358 = _161 * 3u;
        uvec3 _367 = uvec3(texelFetch(l_geomPositionBuffer, int(_358)).x, texelFetch(l_geomPositionBuffer, int(_358 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_358 + 2u)).x);
        _391 = uintBitsToFloat(_367.x);
        _392 = uintBitsToFloat(_367.y);
        _393 = uintBitsToFloat(_367.z);
    }
    else
    {
        uint _375 = _161 * 2u;
        uvec2 _381 = uvec2(texelFetch(l_geomPositionBuffer, int(_375)).x, texelFetch(l_geomPositionBuffer, int(_375 + 1u)).x);
        uint _382 = _381.x;
        _391 = unpackHalf2x16(_382).x;
        _392 = unpackHalf2x16(_382 >> 16u).x;
        _393 = unpackHalf2x16(_381.y).x;
    }
    float _429;
    float _430;
    float _431;
    if (_317)
    {
        uint _396 = _162 * 3u;
        uvec3 _405 = uvec3(texelFetch(l_geomPositionBuffer, int(_396)).x, texelFetch(l_geomPositionBuffer, int(_396 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_396 + 2u)).x);
        _429 = uintBitsToFloat(_405.x);
        _430 = uintBitsToFloat(_405.y);
        _431 = uintBitsToFloat(_405.z);
    }
    else
    {
        uint _413 = _162 * 2u;
        uvec2 _419 = uvec2(texelFetch(l_geomPositionBuffer, int(_413)).x, texelFetch(l_geomPositionBuffer, int(_413 + 1u)).x);
        uint _420 = _419.x;
        _429 = unpackHalf2x16(_420).x;
        _430 = unpackHalf2x16(_420 >> 16u).x;
        _431 = unpackHalf2x16(_419.y).x;
    }
    float _434 = (1.0 - hit._m0.x) - hit._m0.y;
    float _466 = _391 - _353;
    float _467 = _392 - _354;
    float _468 = _393 - _355;
    float _471 = fma(_468, gl_ObjectToWorldEXT[2u].x, fma(_467, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _466));
    float _474 = fma(_468, gl_ObjectToWorldEXT[2u].y, fma(_467, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _466));
    float _477 = fma(_468, gl_ObjectToWorldEXT[2u].z, fma(_467, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _466));
    float _478 = _429 - _353;
    float _479 = _430 - _354;
    float _480 = _431 - _355;
    float _483 = fma(_480, gl_ObjectToWorldEXT[2u].x, fma(_479, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _478));
    float _486 = fma(_480, gl_ObjectToWorldEXT[2u].y, fma(_479, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _478));
    float _489 = fma(_480, gl_ObjectToWorldEXT[2u].z, fma(_479, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _478));
    float _490 = (((_269 * hit._m0.x) + (_224 * _434)) + (_314 * hit._m0.y)) * 0.00048828125;
    float _492 = (((_270 * hit._m0.x) + (_225 * _434)) + (_315 * hit._m0.y)) * 0.00048828125;
    float _506 = cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x;
    uvec2 _524 = uvec2(textureSize(M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_2, int(0u)));
    float _611;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _567 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _573 = (_489 * _474) - (_486 * _477);
        float _576 = (_483 * _477) - (_489 * _471);
        float _579 = (_486 * _471) - (_483 * _474);
        float _606 = log2(abs(sqrt(((_99 * _99) + (_98 * _98)) + (_100 * _100)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_567 * gl_WorldRayDirectionEXT.x, _567 * gl_WorldRayDirectionEXT.y, _567 * gl_WorldRayDirectionEXT.z), vec3(((((float(_198) * _434) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_199) * _434) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_200) * _434) + (-127.0)) + (float(_250) * hit._m0.x)) + (float(_295) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _608 = ((log2((((float(_524.y) * 0.5) * float(_524.x)) * abs((((_315 - _225) * (_269 - _224)) - ((_314 - _224) * (_270 - _225))) * 2.384185791015625e-07)) / (sqrt(((_576 * _576) + (_579 * _579)) + (_573 * _573)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _606;
        _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    }
    else
    {
        _611 = 0.0;
    }
    vec4 _615 = textureLod(sampler2D(M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * ((_506 * cbMtdParam._m0[14u].y) + _490)) + cbTextureTilingScale._m0[1u].z, (((_506 * cbMtdParam._m0[14u].z) + _492) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _611);
    float _621 = ((cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[13u].x) * cbMtdParam._m0[13u].z;
    float _627 = ((_615.y * 0.5) + (-0.25)) * cbMtdParam._m0[13u].y;
    float _629 = (-0.0) - (cbMtdParam._m0[13u].y * ((_615.x * 0.5) + (-0.25)));
    float _631 = fract(_621);
    float _633 = fract(_621 + 0.5);
    vec4 _663 = textureLod(sampler2D(M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_631 * _629) + _490) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_627 * _631) + _492) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _665 = _663.w;
    if (((((textureLod(sampler2D(M_PlanetBroken_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_633 * _629) + _490) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_627 * _633) + _492) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0).w - _665) * abs((_631 * 2.0) + (-1.0))) + _665) * cbMtdParam._m0[9u].w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _57;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _57;
        return;
    }
}


