#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1633;

void main()
{
    float _75 = float(gl_LaunchSizeEXT.y);
    float _105 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _106 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _114 = sqrt(((_106 * _106) + (_105 * _105)) + (_107 * _107)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _75)))));
    uvec4 _125 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _126 = _125.y;
    uint _166;
    uint _168;
    uint _169;
    if (_125.x == 0u)
    {
        uint _134 = (_126 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_126 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _163;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _164;
        }
        else
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _161 >> 16u;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder;
        _169 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _125.w == 0u;
    bool _179 = _176 || _178;
    uint _180 = _174 * _166;
    uint _181 = _180 + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 16u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 20u;
    }
    uvec4 _216 = texelFetch(l_geomAttrib_0, int((_208 + _180) >> 2u));
    uint _217 = _216.x;
    bool _231 = _175 == 0u;
    uint _232;
    if (_231)
    {
        _232 = _208 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _208 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _208 + 12u;
        }
        _232 = frontier_phi_9_10_ladder;
    }
    uint _236 = _176 ? (_232 + 4u) : _232;
    uvec4 _240 = texelFetch(l_geomAttrib_0, int(((_180 + 4u) + _236) >> 2u));
    uint _241 = _240.x;
    float _245 = float(int(uint(int(_241 << 16u) >> int(16u))));
    float _246 = float(int(uint(int(_241) >> int(16u))));
    uint _254 = _174 * _168;
    uint _255 = _254 + 12u;
    uint _276;
    uint _277;
    uint _278;
    uint _279;
    if (_179)
    {
        uvec4 _257 = texelFetch(l_geomAttrib_0, int(_255 >> 2u));
        uint _258 = _257.x;
        _276 = _258 & 255u;
        _277 = (_258 >> 8u) & 255u;
        _278 = (_258 >> 16u) & 255u;
        _279 = 16u;
    }
    else
    {
        uint _264 = _255 >> 2u;
        uvec2 _270 = uvec2(texelFetch(l_geomAttrib_0, int(_264)).x, texelFetch(l_geomAttrib_0, int(_264 + 1u)).x);
        uint _271 = _270.x;
        _276 = _271 & 65535u;
        _277 = _271 >> 16u;
        _278 = _270.y & 65535u;
        _279 = 20u;
    }
    uvec4 _285 = texelFetch(l_geomAttrib_0, int((_279 + _254) >> 2u));
    uint _286 = _285.x;
    uint _298;
    if (_231)
    {
        _298 = _279 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _279 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _279 + 12u;
        }
        _298 = frontier_phi_16_17_ladder;
    }
    uint _302 = _176 ? (_298 + 4u) : _298;
    uvec4 _306 = texelFetch(l_geomAttrib_0, int(((_254 + 4u) + _302) >> 2u));
    uint _307 = _306.x;
    float _311 = float(int(uint(int(_307 << 16u) >> int(16u))));
    float _312 = float(int(uint(int(_307) >> int(16u))));
    uint _320 = _174 * _169;
    uint _321 = _320 + 12u;
    uint _342;
    uint _343;
    uint _344;
    uint _345;
    if (_179)
    {
        uvec4 _323 = texelFetch(l_geomAttrib_0, int(_321 >> 2u));
        uint _324 = _323.x;
        _342 = _324 & 255u;
        _343 = (_324 >> 8u) & 255u;
        _344 = (_324 >> 16u) & 255u;
        _345 = 16u;
    }
    else
    {
        uint _330 = _321 >> 2u;
        uvec2 _336 = uvec2(texelFetch(l_geomAttrib_0, int(_330)).x, texelFetch(l_geomAttrib_0, int(_330 + 1u)).x);
        uint _337 = _336.x;
        _342 = _337 & 65535u;
        _343 = _337 >> 16u;
        _344 = _336.y & 65535u;
        _345 = 20u;
    }
    uvec4 _351 = texelFetch(l_geomAttrib_0, int((_345 + _320) >> 2u));
    uint _352 = _351.x;
    uint _364;
    if (_231)
    {
        _364 = _345 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _345 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _345 + 12u;
        }
        _364 = frontier_phi_23_24_ladder;
    }
    uint _368 = _176 ? (_364 + 4u) : _364;
    uvec4 _372 = texelFetch(l_geomAttrib_0, int(((_320 + 4u) + _368) >> 2u));
    uint _373 = _372.x;
    float _377 = float(int(uint(int(_373 << 16u) >> int(16u))));
    float _378 = float(int(uint(int(_373) >> int(16u))));
    bool _387 = _125.z == 0u;
    float _423;
    float _424;
    float _425;
    if (_387)
    {
        uint _390 = _166 * 3u;
        uvec3 _399 = uvec3(texelFetch(l_geomPositionBuffer, int(_390)).x, texelFetch(l_geomPositionBuffer, int(_390 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_390 + 2u)).x);
        _423 = uintBitsToFloat(_399.x);
        _424 = uintBitsToFloat(_399.y);
        _425 = uintBitsToFloat(_399.z);
    }
    else
    {
        uint _407 = _166 * 2u;
        uvec2 _413 = uvec2(texelFetch(l_geomPositionBuffer, int(_407)).x, texelFetch(l_geomPositionBuffer, int(_407 + 1u)).x);
        uint _414 = _413.x;
        _423 = unpackHalf2x16(_414).x;
        _424 = unpackHalf2x16(_414 >> 16u).x;
        _425 = unpackHalf2x16(_413.y).x;
    }
    float _461;
    float _462;
    float _463;
    if (_387)
    {
        uint _428 = _168 * 3u;
        uvec3 _437 = uvec3(texelFetch(l_geomPositionBuffer, int(_428)).x, texelFetch(l_geomPositionBuffer, int(_428 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_428 + 2u)).x);
        _461 = uintBitsToFloat(_437.x);
        _462 = uintBitsToFloat(_437.y);
        _463 = uintBitsToFloat(_437.z);
    }
    else
    {
        uint _445 = _168 * 2u;
        uvec2 _451 = uvec2(texelFetch(l_geomPositionBuffer, int(_445)).x, texelFetch(l_geomPositionBuffer, int(_445 + 1u)).x);
        uint _452 = _451.x;
        _461 = unpackHalf2x16(_452).x;
        _462 = unpackHalf2x16(_452 >> 16u).x;
        _463 = unpackHalf2x16(_451.y).x;
    }
    float _499;
    float _500;
    float _501;
    if (_387)
    {
        uint _466 = _169 * 3u;
        uvec3 _475 = uvec3(texelFetch(l_geomPositionBuffer, int(_466)).x, texelFetch(l_geomPositionBuffer, int(_466 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_466 + 2u)).x);
        _499 = uintBitsToFloat(_475.x);
        _500 = uintBitsToFloat(_475.y);
        _501 = uintBitsToFloat(_475.z);
    }
    else
    {
        uint _483 = _169 * 2u;
        uvec2 _489 = uvec2(texelFetch(l_geomPositionBuffer, int(_483)).x, texelFetch(l_geomPositionBuffer, int(_483 + 1u)).x);
        uint _490 = _489.x;
        _499 = unpackHalf2x16(_490).x;
        _500 = unpackHalf2x16(_490 >> 16u).x;
        _501 = unpackHalf2x16(_489.y).x;
    }
    float _504 = (1.0 - hit._m0.x) - hit._m0.y;
    float _545 = (_311 - _245) * 0.00048828125;
    float _547 = (_312 - _246) * 0.00048828125;
    float _550 = (_377 - _245) * 0.00048828125;
    float _551 = (_378 - _246) * 0.00048828125;
    float _573 = _461 - _423;
    float _574 = _462 - _424;
    float _575 = _463 - _425;
    float _578 = fma(_575, gl_ObjectToWorldEXT[2u].x, fma(_574, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _573));
    float _581 = fma(_575, gl_ObjectToWorldEXT[2u].y, fma(_574, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _573));
    float _584 = fma(_575, gl_ObjectToWorldEXT[2u].z, fma(_574, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _573));
    float _585 = _499 - _423;
    float _586 = _500 - _424;
    float _587 = _501 - _425;
    float _590 = fma(_587, gl_ObjectToWorldEXT[2u].x, fma(_586, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _585));
    float _593 = fma(_587, gl_ObjectToWorldEXT[2u].y, fma(_586, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _585));
    float _596 = fma(_587, gl_ObjectToWorldEXT[2u].z, fma(_586, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _585));
    float _597 = (((_311 * hit._m0.x) + (_245 * _504)) + (_377 * hit._m0.y)) * 0.00048828125;
    float _598 = (((_312 * hit._m0.x) + (_246 * _504)) + (_378 * hit._m0.y)) * 0.00048828125;
    float _602 = (((float(_205) * _504) + (-127.0)) + (float(_276) * hit._m0.x)) + (float(_342) * hit._m0.y);
    float _605 = (((float(_206) * _504) + (-127.0)) + (float(_277) * hit._m0.x)) + (float(_343) * hit._m0.y);
    float _608 = (((float(_207) * _504) + (-127.0)) + (float(_278) * hit._m0.x)) + (float(_344) * hit._m0.y);
    float _609 = _602 * 0.0078740157186985015869140625;
    float _611 = _605 * 0.0078740157186985015869140625;
    float _612 = _608 * 0.0078740157186985015869140625;
    float _625 = ((((float(_217 & 255u) * _504) + (-127.0)) + (float(_286 & 255u) * hit._m0.x)) + (float(_352 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _626 = ((((float((_217 >> 8u) & 255u) * _504) + (-127.0)) + (float((_286 >> 8u) & 255u) * hit._m0.x)) + (float((_352 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _627 = ((((float((_217 >> 16u) & 255u) * _504) + (-127.0)) + (float((_286 >> 16u) & 255u) * hit._m0.x)) + (float((_352 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _628 = ((((float(_217 >> 24u) * _504) + (-127.0)) + (float(_286 >> 24u) * hit._m0.x)) + (float(_352 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _638 = ((_626 * _612) - (_627 * _611)) * _628;
    float _639 = ((_627 * _609) - (_625 * _612)) * _628;
    float _640 = ((_625 * _611) - (_626 * _609)) * _628;
    float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
    float _645 = _644 * _638;
    float _646 = _644 * _639;
    float _647 = _644 * _640;
    uvec2 _664 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, int(0u)));
    bool _669 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _722;
    if (_669)
    {
        float _680 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _686 = (_596 * _581) - (_593 * _584);
        float _689 = (_590 * _584) - (_596 * _578);
        float _692 = (_593 * _578) - (_590 * _581);
        float _719 = ((log2((((float(_664.y) * 0.5) * float(_664.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_689 * _689) + (_692 * _692)) + (_686 * _686)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_680 * gl_WorldRayDirectionEXT.x, _680 * gl_WorldRayDirectionEXT.y, _680 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    }
    else
    {
        _722 = 0.0;
    }
    vec4 _726 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _597) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _598) + cbTextureTilingScale._m0[1u].w), _722);
    float _730 = _726.z;
    float _733 = (_726.x * 2.0) + (-1.0);
    float _735 = (_726.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_733, _735), vec2(_733, _735));
    float _1724 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0))));
    float _744 = fma(_741, _609, fma(_735, _625, _733 * _645));
    float _747 = fma(_741, _611, fma(_735, _626, _733 * _646));
    float _750 = fma(_741, _612, fma(_735, _627, _733 * _647));
    float _759 = exp2(log2(inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750))) * _747) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _1735 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    uvec2 _775 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, int(0u)));
    float _826;
    if (_669)
    {
        float _786 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _792 = (_596 * _581) - (_593 * _584);
        float _795 = (_590 * _584) - (_596 * _578);
        float _798 = (_593 * _578) - (_590 * _581);
        float _824 = ((log2((((float(_775.y) * 0.5) * float(_775.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_795 * _795) + (_798 * _798)) + (_792 * _792)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_786 * gl_WorldRayDirectionEXT.x, _786 * gl_WorldRayDirectionEXT.y, _786 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _826 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    }
    else
    {
        _826 = 0.0;
    }
    float _839 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _597) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _598) + cbTextureTilingScale._m0[6u].w), _826).x + (-1.0)) + ((((1.0 - ((_504 * 0.0039215688593685626983642578125) * float(texelFetch(l_geomAttrib_0, int(((_180 + 8u) + _236) >> 2u)).x & 255u))) - ((hit._m0.x * 0.0039215688593685626983642578125) * float(texelFetch(l_geomAttrib_0, int(((_254 + 8u) + _302) >> 2u)).x & 255u))) - ((hit._m0.y * 0.0039215688593685626983642578125) * float(texelFetch(l_geomAttrib_0, int(((_320 + 8u) + _368) >> 2u)).x & 255u))) * 2.0))) + 1.0;
    float _1751 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _845 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0)));
    float _846 = _845 * (isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0)));
    float _847 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _848 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
    uvec2 _860 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, int(0u)));
    float _911;
    if (_669)
    {
        float _871 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _877 = (_596 * _581) - (_593 * _584);
        float _880 = (_590 * _584) - (_596 * _578);
        float _883 = (_593 * _578) - (_590 * _581);
        float _909 = ((log2((((float(_860.y) * 0.5) * float(_860.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_880 * _880) + (_883 * _883)) + (_877 * _877)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_871 * gl_WorldRayDirectionEXT.x, _871 * gl_WorldRayDirectionEXT.y, _871 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _911 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    }
    else
    {
        _911 = 0.0;
    }
    vec4 _914 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _597) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _598) + cbTextureTilingScale._m0[0u].w), _911);
    uvec2 _939 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, int(0u)));
    float _990;
    if (_669)
    {
        float _950 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _956 = (_596 * _581) - (_593 * _584);
        float _959 = (_590 * _584) - (_596 * _578);
        float _962 = (_593 * _578) - (_590 * _581);
        float _988 = ((log2((((float(_939.y) * 0.5) * float(_939.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_959 * _959) + (_962 * _962)) + (_956 * _956)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_950 * gl_WorldRayDirectionEXT.x, _950 * gl_WorldRayDirectionEXT.y, _950 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _990 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    }
    else
    {
        _990 = 0.0;
    }
    vec4 _992 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _597) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _598) + cbTextureTilingScale._m0[3u].w), _990);
    float _1003 = cbMtdParam._m0[9u].x * _992.x;
    float _1004 = cbMtdParam._m0[9u].y * _992.y;
    float _1005 = cbMtdParam._m0[9u].z * _992.z;
    float _1012 = (((cbMtdParam._m0[10u].x * _914.x) - _1003) * _848) + _1003;
    float _1013 = (((cbMtdParam._m0[10u].y * _914.y) - _1004) * _848) + _1004;
    float _1014 = (((cbMtdParam._m0[10u].z * _914.z) - _1005) * _848) + _1005;
    uvec2 _1026 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, int(0u)));
    float _1077;
    if (_669)
    {
        float _1037 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1043 = (_596 * _581) - (_593 * _584);
        float _1046 = (_590 * _584) - (_596 * _578);
        float _1049 = (_593 * _578) - (_590 * _581);
        float _1075 = ((log2((((float(_1026.y) * 0.5) * float(_1026.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_1046 * _1046) + (_1049 * _1049)) + (_1043 * _1043)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1037 * gl_WorldRayDirectionEXT.x, _1037 * gl_WorldRayDirectionEXT.y, _1037 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _1077 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    }
    else
    {
        _1077 = 0.0;
    }
    vec4 _1079 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _597) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _598) + cbTextureTilingScale._m0[4u].w), _1077);
    float _1086 = (_1079.x * 2.0) + (-1.0);
    float _1087 = (_1079.y * 2.0) + (-1.0);
    float _1088 = dot(vec2(_1086, _1087), vec2(_1086, _1087));
    float _1787 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1096 = ((_1079.z - _730) * _848) + _730;
    float _1097 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _1098 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
    uvec2 _1119 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, int(0u)));
    float _1170;
    if (_669)
    {
        float _1130 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1136 = (_596 * _581) - (_593 * _584);
        float _1139 = (_590 * _584) - (_596 * _578);
        float _1142 = (_593 * _578) - (_590 * _581);
        float _1168 = ((log2((((float(_1119.y) * 0.5) * float(_1119.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_1139 * _1139) + (_1142 * _1142)) + (_1136 * _1136)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1130 * gl_WorldRayDirectionEXT.x, _1130 * gl_WorldRayDirectionEXT.y, _1130 * gl_WorldRayDirectionEXT.z), vec3(_609, _611, _612))));
        _1170 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    }
    else
    {
        _1170 = 0.0;
    }
    vec4 _1172 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _597) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _598) + cbTextureTilingScale._m0[2u].w), _1170);
    float _1178 = (_1172.x * 2.0) + (-1.0);
    float _1179 = (_1172.y * 2.0) + (-1.0);
    float _1180 = dot(vec2(_1178, _1179), vec2(_1178, _1179));
    float _1813 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1185 = sqrt(1.0 - (isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0))));
    float _1194 = (((((sqrt(1.0 - (isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0)))) - _741) * _848) + _741) - _1185) * _1098) + _1185;
    uvec2 _1208 = uvec2(textureSize(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, int(0u)));
    float _1212 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1213 = _1212 * gl_WorldRayDirectionEXT.x;
    float _1214 = _1212 * gl_WorldRayDirectionEXT.y;
    float _1215 = _1212 * gl_WorldRayDirectionEXT.z;
    float _1259;
    if (_669)
    {
        float _1225 = (_596 * _581) - (_593 * _584);
        float _1228 = (_590 * _584) - (_596 * _578);
        float _1231 = (_593 * _578) - (_590 * _581);
        float _1257 = ((log2((((float(_1208.y) * 0.5) * float(_1208.x)) * abs((_551 * _545) - (_550 * _547))) / (sqrt(((_1228 * _1228) + (_1231 * _1231)) + (_1225 * _1225)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_114) / abs(dot(vec3(_1213, _1214, _1215), vec3(_609, _611, _612))));
        _1259 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    }
    else
    {
        _1259 = 0.0;
    }
    vec4 _1261 = textureLod(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _597) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _598) + cbTextureTilingScale._m0[5u].w), _1259);
    float _1271 = ((((((_1086 - _733) * _848) + _733) - _1178) * _1098) + _1178) + (((_1261.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _1272 = ((((((_1087 - _735) * _848) + _735) - _1179) * _1098) + _1179) + (((_1261.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _1275 = fma(_1194, _609, fma(_1272, _625, _1271 * _645));
    float _1278 = fma(_1194, _611, fma(_1272, _626, _1271 * _646));
    float _1281 = fma(_1194, _612, fma(_1272, _627, _1271 * _647));
    float _1285 = inversesqrt(dot(vec3(_1275, _1278, _1281), vec3(_1275, _1278, _1281)));
    float _1286 = _1285 * _1275;
    float _1287 = _1285 * _1278;
    float _1288 = _1285 * _1281;
    float _1300 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1301 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1302 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1303 = (-0.0) - _1213;
    float _1305 = (-0.0) - _1214;
    float _1306 = (-0.0) - _1215;
    float _1312 = float(gl_LaunchIDEXT.x);
    float _1313 = float(gl_LaunchIDEXT.y);
    float _1316 = float(gl_LaunchSizeEXT.x);
    float _1330 = fract(fract(sin(dot(vec2(_1312 / _1316, _1313 / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1343 = fract(fract(sin(dot(vec2((_1312 + 128.0) / _1316, (_1313 + 128.0) / _75), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _67._m0 = 1u;
    uvec4 _1353 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1354 = _1353.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1354, _1353.w, _1354, vec3(_1300, _1301, _1302), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (_67._m0 == 0u)
    {
        float _1374 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1286, _1287, _1288));
        float _1829 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1377 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        float _1396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1096) * 0.949999988079071044921875);
        float _1397 = _1396 * _1396;
        float _1398 = g_sceneCB._m0[4u].x - _1213;
        float _1399 = g_sceneCB._m0[4u].y - _1214;
        float _1400 = g_sceneCB._m0[4u].z - _1215;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1405 = _1404 * _1398;
        float _1406 = _1404 * _1399;
        float _1407 = _1404 * _1400;
        float _1408 = dot(vec3(_1286, _1287, _1288), vec3(g_sceneCB._m0[4u].xyz));
        float _1840 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1411 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        float _1412 = dot(vec3(_1286, _1287, _1288), vec3(_1303, _1305, _1306));
        float _1851 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1415 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        float _1416 = dot(vec3(_1286, _1287, _1288), vec3(_1405, _1406, _1407));
        float _1862 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1419 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        float _1420 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1405, _1406, _1407));
        float _1873 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1397 * _1397;
        float _1428 = ((_1419 * _1419) * (_1424 + (-1.0))) + 1.0;
        float _1440 = (exp2(log2(1.0 - (isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1442 = 1.0 - _1397;
        float _1453 = (0.5 / (((_1415 * ((_1411 * _1442) + _1397)) + 9.9999999392252902907785028219223e-09) + (((_1415 * _1442) + _1397) * _1411))) * _1411;
        float _1884 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1455 = (isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0))) * (_1424 / ((_1428 * _1428) * 3.141590118408203125));
        _1462 = ((_1012 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1377;
        _1463 = ((_1013 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1377;
        _1464 = ((_1014 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1377;
        _1465 = (_1440 * g_sceneCB._m0[5u].x) * _1455;
        _1466 = (_1440 * g_sceneCB._m0[5u].y) * _1455;
        _1467 = (_1440 * g_sceneCB._m0[5u].z) * _1455;
    }
    else
    {
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    bool _1469 = abs(_1287) < 0.89999997615814208984375;
    float _1471 = float(_1469);
    float _1472 = _1469 ? 0.0 : 1.0;
    float _1475 = (_1471 * _1288) - (_1472 * _1287);
    float _1476 = _1472 * _1286;
    float _1478 = (-0.0) - (_1286 * _1471);
    float _1482 = inversesqrt(dot(vec3(_1475, _1476, _1478), vec3(_1475, _1476, _1478)));
    float _1483 = _1475 * _1482;
    float _1484 = _1476 * _1482;
    float _1485 = _1482 * _1478;
    float _1488 = (_1484 * _1288) - (_1485 * _1287);
    float _1491 = (_1485 * _1286) - (_1483 * _1288);
    float _1494 = (_1483 * _1287) - (_1484 * _1286);
    float _1496;
    float _1504;
    float _1495 = 0.0;
    uint _1497 = 0u;
    float _1501;
    bool _1503;
    for (;;)
    {
        _1501 = (float(_1497) + _1330) * 0.03125;
        _1503 = _1497 == 0u;
        float frontier_phi_53_pred;
        if (_1503)
        {
            frontier_phi_53_pred = 0.0;
        }
        else
        {
            float _1638;
            float _1639;
            uint _1641;
            _1638 = 0.0;
            _1639 = 0.5;
            _1641 = _1497;
            float _1505;
            for (;;)
            {
                _1505 = ((_1641 & 1u) != 0u) ? (_1639 + _1638) : _1638;
                uint _1642 = _1641 >> 1u;
                if (_1642 == 0u)
                {
                    break;
                }
                else
                {
                    _1638 = _1505;
                    _1639 *= 0.5;
                    _1641 = _1642;
                }
            }
            frontier_phi_53_pred = _1505;
        }
        _1504 = frontier_phi_53_pred;
        float _1506 = _1504 + _1343;
        float _1510 = sqrt(_1501);
        float _1511 = ((_1506 > 1.0) ? (_1506 + (-1.0)) : _1506) * 6.283185482025146484375;
        float _1514 = cos(_1511) * _1510;
        float _1516 = sin(_1511) * _1510;
        float _1518 = sqrt(1.0 - _1501);
        float _1531 = ((_1518 * _1286) + (_1514 * _1488)) + (_1516 * _1483);
        float _1532 = ((_1518 * _1287) + (_1514 * _1491)) + (_1516 * _1484);
        float _1533 = ((_1518 * _1288) + (_1514 * _1494)) + (_1516 * _1485);
        _66._m0 = 1u;
        uvec4 _1537 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1538 = _1537.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1538, _1537.w, _1538, vec3(_1300, _1301, _1302), 9.9999997473787516355514526367188e-05, vec3(_1531, _1532, _1533), 10000.0, 1);
        float _1544 = dot(vec3(_1286, _1287, _1288), vec3(_1531, _1532, _1533));
        float _1895 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1547 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _1496 = ((float(_66._m0 == 0u) * _1547) / (_1547 * 0.3183098733425140380859375)) + _1495;
        uint _1498 = _1497 + 1u;
        if (_1498 == 32u)
        {
            break;
        }
        else
        {
            _1495 = _1496;
            _1497 = _1498;
            continue;
        }
    }
    float _1555 = _1496 * 0.009947183541953563690185546875;
    float _1560 = dot(vec3(_1213, _1214, _1215), vec3(_1286, _1287, _1288)) * 2.0;
    vec4 _1574 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1213 - (_1560 * _1286), _1214 - (_1560 * _1287), _1215 - (_1560 * _1288)), 4.0 - (_1096 * 4.0));
    float _1579 = dot(vec3(_1303, _1305, _1306), vec3(_1286, _1287, _1288));
    float _1906 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1588 = (exp2(log2(1.0 - (isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1594 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1286, _1287, _1288), 0.0);
    float _1605 = (_1465 + _1462) + (((_1594.x * _1012) + (_1588 * _1574.x)) * _1555);
    float _1609 = (_1466 + _1463) + (((_1594.y * _1013) + (_1588 * _1574.y)) * _1555);
    float _1613 = (_1467 + _1464) + (((_1594.z * _1014) + (_1588 * _1574.z)) * _1555);
    float _1917 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1928 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1939 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    bool _1621 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1632;
    _1632.x = _1621 ? ((_602 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0)));
    _1632.y = _1621 ? ((_605 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0)));
    _1632.z = _1621 ? ((_608 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0)));
    payload._m0 = _1632;
}


