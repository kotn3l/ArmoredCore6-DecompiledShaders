#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _52
{
    vec3 _m0;
};

struct _56
{
    vec2 _m0;
};

struct _59
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _52 payload;
hitAttributeEXT _56 hit;
layout(location = 1) rayPayloadEXT _59 _61;
layout(location = 2) rayPayloadEXT _59 _62;

vec3 _1260;

void main()
{
    float _70 = float(gl_LaunchSizeEXT.y);
    float _100 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _109 = sqrt(((_101 * _101) + (_100 * _100)) + (_102 * _102)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _70)))));
    uvec4 _120 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _121 = _120.y;
    uint _160;
    uint _162;
    uint _163;
    if (_120.x == 0u)
    {
        uint _128 = (_121 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_121 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _157;
            frontier_phi_3_2_ladder_1 = _154 & 65535u;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _155 >> 16u;
        }
        _160 = frontier_phi_3_2_ladder_1;
        _162 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _120.w == 0u;
    bool _173 = _170 || _172;
    uint _174 = _168 * _160;
    uint _175 = _174 + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 16u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 20u;
    }
    uvec4 _210 = texelFetch(l_geomAttrib_0, int((_202 + _174) >> 2u));
    uint _211 = _210.x;
    bool _225 = _169 == 0u;
    uint _226;
    if (_225)
    {
        _226 = _202 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 12u;
        }
        _226 = frontier_phi_9_10_ladder;
    }
    uvec4 _234 = texelFetch(l_geomAttrib_0, int(((_174 + 4u) + (_170 ? (_226 + 4u) : _226)) >> 2u));
    uint _235 = _234.x;
    float _239 = float(int(uint(int(_235 << 16u) >> int(16u))));
    float _240 = float(int(uint(int(_235) >> int(16u))));
    uint _241 = _168 * _162;
    uint _242 = _241 + 12u;
    uint _263;
    uint _264;
    uint _265;
    uint _266;
    if (_173)
    {
        uvec4 _244 = texelFetch(l_geomAttrib_0, int(_242 >> 2u));
        uint _245 = _244.x;
        _263 = _245 & 255u;
        _264 = (_245 >> 8u) & 255u;
        _265 = (_245 >> 16u) & 255u;
        _266 = 16u;
    }
    else
    {
        uint _251 = _242 >> 2u;
        uvec2 _257 = uvec2(texelFetch(l_geomAttrib_0, int(_251)).x, texelFetch(l_geomAttrib_0, int(_251 + 1u)).x);
        uint _258 = _257.x;
        _263 = _258 & 65535u;
        _264 = _258 >> 16u;
        _265 = _257.y & 65535u;
        _266 = 20u;
    }
    uvec4 _272 = texelFetch(l_geomAttrib_0, int((_266 + _241) >> 2u));
    uint _273 = _272.x;
    uint _285;
    if (_225)
    {
        _285 = _266 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _266 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _266 + 12u;
        }
        _285 = frontier_phi_16_17_ladder;
    }
    uvec4 _293 = texelFetch(l_geomAttrib_0, int(((_241 + 4u) + (_170 ? (_285 + 4u) : _285)) >> 2u));
    uint _294 = _293.x;
    float _298 = float(int(uint(int(_294 << 16u) >> int(16u))));
    float _299 = float(int(uint(int(_294) >> int(16u))));
    uint _300 = _168 * _163;
    uint _301 = _300 + 12u;
    uint _322;
    uint _323;
    uint _324;
    uint _325;
    if (_173)
    {
        uvec4 _303 = texelFetch(l_geomAttrib_0, int(_301 >> 2u));
        uint _304 = _303.x;
        _322 = _304 & 255u;
        _323 = (_304 >> 8u) & 255u;
        _324 = (_304 >> 16u) & 255u;
        _325 = 16u;
    }
    else
    {
        uint _310 = _301 >> 2u;
        uvec2 _316 = uvec2(texelFetch(l_geomAttrib_0, int(_310)).x, texelFetch(l_geomAttrib_0, int(_310 + 1u)).x);
        uint _317 = _316.x;
        _322 = _317 & 65535u;
        _323 = _317 >> 16u;
        _324 = _316.y & 65535u;
        _325 = 20u;
    }
    uvec4 _331 = texelFetch(l_geomAttrib_0, int((_325 + _300) >> 2u));
    uint _332 = _331.x;
    uint _344;
    if (_225)
    {
        _344 = _325 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _325 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _325 + 12u;
        }
        _344 = frontier_phi_23_24_ladder;
    }
    uvec4 _352 = texelFetch(l_geomAttrib_0, int(((_300 + 4u) + (_170 ? (_344 + 4u) : _344)) >> 2u));
    uint _353 = _352.x;
    float _357 = float(int(uint(int(_353 << 16u) >> int(16u))));
    float _358 = float(int(uint(int(_353) >> int(16u))));
    bool _360 = _120.z == 0u;
    float _396;
    float _397;
    float _398;
    if (_360)
    {
        uint _363 = _160 * 3u;
        uvec3 _372 = uvec3(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_363 + 2u)).x);
        _396 = uintBitsToFloat(_372.x);
        _397 = uintBitsToFloat(_372.y);
        _398 = uintBitsToFloat(_372.z);
    }
    else
    {
        uint _380 = _160 * 2u;
        uvec2 _386 = uvec2(texelFetch(l_geomPositionBuffer, int(_380)).x, texelFetch(l_geomPositionBuffer, int(_380 + 1u)).x);
        uint _387 = _386.x;
        _396 = unpackHalf2x16(_387).x;
        _397 = unpackHalf2x16(_387 >> 16u).x;
        _398 = unpackHalf2x16(_386.y).x;
    }
    float _434;
    float _435;
    float _436;
    if (_360)
    {
        uint _401 = _162 * 3u;
        uvec3 _410 = uvec3(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_401 + 2u)).x);
        _434 = uintBitsToFloat(_410.x);
        _435 = uintBitsToFloat(_410.y);
        _436 = uintBitsToFloat(_410.z);
    }
    else
    {
        uint _418 = _162 * 2u;
        uvec2 _424 = uvec2(texelFetch(l_geomPositionBuffer, int(_418)).x, texelFetch(l_geomPositionBuffer, int(_418 + 1u)).x);
        uint _425 = _424.x;
        _434 = unpackHalf2x16(_425).x;
        _435 = unpackHalf2x16(_425 >> 16u).x;
        _436 = unpackHalf2x16(_424.y).x;
    }
    float _472;
    float _473;
    float _474;
    if (_360)
    {
        uint _439 = _163 * 3u;
        uvec3 _448 = uvec3(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_439 + 2u)).x);
        _472 = uintBitsToFloat(_448.x);
        _473 = uintBitsToFloat(_448.y);
        _474 = uintBitsToFloat(_448.z);
    }
    else
    {
        uint _456 = _163 * 2u;
        uvec2 _462 = uvec2(texelFetch(l_geomPositionBuffer, int(_456)).x, texelFetch(l_geomPositionBuffer, int(_456 + 1u)).x);
        uint _463 = _462.x;
        _472 = unpackHalf2x16(_463).x;
        _473 = unpackHalf2x16(_463 >> 16u).x;
        _474 = unpackHalf2x16(_462.y).x;
    }
    float _477 = (1.0 - hit._m0.x) - hit._m0.y;
    float _511 = (_298 - _239) * 0.00048828125;
    float _513 = (_299 - _240) * 0.00048828125;
    float _516 = (_357 - _239) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _539 = _434 - _396;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _544 = fma(_541, gl_ObjectToWorldEXT[2u].x, fma(_540, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _539));
    float _547 = fma(_541, gl_ObjectToWorldEXT[2u].y, fma(_540, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _539));
    float _550 = fma(_541, gl_ObjectToWorldEXT[2u].z, fma(_540, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _539));
    float _551 = _472 - _396;
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _556 = fma(_553, gl_ObjectToWorldEXT[2u].x, fma(_552, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _551));
    float _559 = fma(_553, gl_ObjectToWorldEXT[2u].y, fma(_552, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _551));
    float _562 = fma(_553, gl_ObjectToWorldEXT[2u].z, fma(_552, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _551));
    float _563 = (((_298 * hit._m0.x) + (_239 * _477)) + (_357 * hit._m0.y)) * 0.00048828125;
    float _564 = (((_299 * hit._m0.x) + (_240 * _477)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _568 = (((float(_199) * _477) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_322) * hit._m0.y);
    float _571 = (((float(_200) * _477) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _574 = (((float(_201) * _477) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = _568 * 0.0078740157186985015869140625;
    float _577 = _571 * 0.0078740157186985015869140625;
    float _578 = _574 * 0.0078740157186985015869140625;
    float _591 = ((((float(_211 & 255u) * _477) + (-127.0)) + (float(_273 & 255u) * hit._m0.x)) + (float(_332 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _592 = ((((float((_211 >> 8u) & 255u) * _477) + (-127.0)) + (float((_273 >> 8u) & 255u) * hit._m0.x)) + (float((_332 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_211 >> 16u) & 255u) * _477) + (-127.0)) + (float((_273 >> 16u) & 255u) * hit._m0.x)) + (float((_332 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float(_211 >> 24u) * _477) + (-127.0)) + (float(_273 >> 24u) * hit._m0.x)) + (float(_332 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((_592 * _578) - (_593 * _577)) * _594;
    float _605 = ((_593 * _575) - (_591 * _578)) * _594;
    float _606 = ((_591 * _577) - (_592 * _575)) * _594;
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    uvec2 _631 = uvec2(textureSize(M_AMSN_M1_Emissive_snp_0_Texture2D_0, int(0u)));
    bool _636 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _689;
    if (_636)
    {
        float _647 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _653 = (_562 * _547) - (_559 * _550);
        float _656 = (_556 * _550) - (_562 * _544);
        float _659 = (_559 * _544) - (_556 * _547);
        float _686 = ((log2((((float(_631.y) * 0.5) * float(_631.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_656 * _656) + (_659 * _659)) + (_653 * _653)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_647 * gl_WorldRayDirectionEXT.x, _647 * gl_WorldRayDirectionEXT.y, _647 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    }
    else
    {
        _689 = 0.0;
    }
    vec4 _693 = textureLod(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _563) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _564) + cbTextureTilingScale._m0[0u].w), _689);
    float _698 = _693.x * cbMtdParam._m0[9u].x;
    float _699 = _693.y * cbMtdParam._m0[9u].y;
    float _700 = _693.z * cbMtdParam._m0[9u].z;
    uvec2 _716 = uvec2(textureSize(M_AMSN_M1_Emissive_snp_0_Texture2D_1, int(0u)));
    float _767;
    if (_636)
    {
        float _727 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _733 = (_562 * _547) - (_559 * _550);
        float _736 = (_556 * _550) - (_562 * _544);
        float _739 = (_559 * _544) - (_556 * _547);
        float _765 = ((log2((((float(_716.y) * 0.5) * float(_716.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_736 * _736) + (_739 * _739)) + (_733 * _733)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_727 * gl_WorldRayDirectionEXT.x, _727 * gl_WorldRayDirectionEXT.y, _727 * gl_WorldRayDirectionEXT.z), vec3(_575, _577, _578))));
        _767 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    }
    else
    {
        _767 = 0.0;
    }
    vec4 _770 = textureLod(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _563) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _564) + cbTextureTilingScale._m0[1u].w), _767);
    float _774 = _770.z;
    float _777 = (_770.x * 2.0) + (-1.0);
    float _779 = (_770.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_777, _779), vec2(_777, _779));
    float _1348 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _1348 : (isnan(_1348) ? 1.0 : min(_1348, 1.0))));
    uvec2 _804 = uvec2(textureSize(M_AMSN_M1_Emissive_snp_0_Texture2D_3, int(0u)));
    float _808 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _809 = _808 * gl_WorldRayDirectionEXT.x;
    float _810 = _808 * gl_WorldRayDirectionEXT.y;
    float _811 = _808 * gl_WorldRayDirectionEXT.z;
    float _855;
    if (_636)
    {
        float _821 = (_562 * _547) - (_559 * _550);
        float _824 = (_556 * _550) - (_562 * _544);
        float _827 = (_559 * _544) - (_556 * _547);
        float _853 = ((log2((((float(_804.y) * 0.5) * float(_804.x)) * abs((_517 * _511) - (_516 * _513))) / (sqrt(((_824 * _824) + (_827 * _827)) + (_821 * _821)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_809, _810, _811), vec3(_575, _577, _578))));
        _855 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    }
    else
    {
        _855 = 0.0;
    }
    vec4 _857 = textureLod(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _563) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _564) + cbTextureTilingScale._m0[3u].w), _855);
    float _870 = fma(_785, _575, fma(_779, _591, (_610 * _604) * _777));
    float _873 = fma(_785, _577, fma(_779, _592, (_610 * _605) * _777));
    float _876 = fma(_785, _578, fma(_779, _593, (_610 * _606) * _777));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _895 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _896 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _897 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _898 = (-0.0) - _809;
    float _900 = (-0.0) - _810;
    float _901 = (-0.0) - _811;
    float _907 = float(gl_LaunchIDEXT.x);
    float _908 = float(gl_LaunchIDEXT.y);
    float _911 = float(gl_LaunchSizeEXT.x);
    float _925 = fract(fract(sin(dot(vec2(_907 / _911, _908 / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _938 = fract(fract(sin(dot(vec2((_907 + 128.0) / _911, (_908 + 128.0) / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _939 = 1.0 - cbMtdParam._m0[11u].x;
    float _940 = _939 * _698;
    float _941 = _939 * _699;
    float _942 = _939 * _700;
    float _947 = (_698 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _948 = (_699 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _949 = (_700 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _950 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    _62._m0 = 1u;
    uvec4 _963 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _964 = _963.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _964, _963.w, _964, vec3(_895, _896, _897), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (_62._m0 == 0u)
    {
        float _985 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_881, _882, _883));
        float _1364 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _988 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
        float _1007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _774) * 0.949999988079071044921875);
        float _1008 = _1007 * _1007;
        float _1009 = g_sceneCB._m0[4u].x - _809;
        float _1010 = g_sceneCB._m0[4u].y - _810;
        float _1011 = g_sceneCB._m0[4u].z - _811;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1016 = _1015 * _1009;
        float _1017 = _1015 * _1010;
        float _1018 = _1015 * _1011;
        float _1019 = dot(vec3(_881, _882, _883), vec3(g_sceneCB._m0[4u].xyz));
        float _1375 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1022 = isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0));
        float _1023 = dot(vec3(_881, _882, _883), vec3(_898, _900, _901));
        float _1386 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1026 = isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0));
        float _1027 = dot(vec3(_881, _882, _883), vec3(_1016, _1017, _1018));
        float _1397 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1030 = isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0));
        float _1031 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1016, _1017, _1018));
        float _1408 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _1008 * _1008;
        float _1039 = ((_1030 * _1030) * (_1035 + (-1.0))) + 1.0;
        float _1048 = exp2(log2(1.0 - (isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0)))) * 5.0);
        float _1059 = 1.0 - _1008;
        float _1070 = (0.5 / (((_1026 * ((_1022 * _1059) + _1008)) + 9.9999999392252902907785028219223e-09) + (((_1026 * _1059) + _1008) * _1022))) * _1022;
        float _1419 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1072 = (isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0))) * (_1035 / ((_1039 * _1039) * 3.141590118408203125));
        _1079 = ((_940 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _988;
        _1080 = ((_941 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _988;
        _1081 = ((_942 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _988;
        _1082 = (((_1048 * (0.959999978542327880859375 - _947)) + _950) * g_sceneCB._m0[5u].x) * _1072;
        _1083 = (((_1048 * (0.959999978542327880859375 - _948)) + _952) * g_sceneCB._m0[5u].y) * _1072;
        _1084 = (((_1048 * (0.959999978542327880859375 - _949)) + _953) * g_sceneCB._m0[5u].z) * _1072;
    }
    else
    {
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    bool _1086 = abs(_882) < 0.89999997615814208984375;
    float _1088 = float(_1086);
    float _1089 = _1086 ? 0.0 : 1.0;
    float _1092 = (_1088 * _883) - (_1089 * _882);
    float _1093 = _1089 * _881;
    float _1095 = (-0.0) - (_881 * _1088);
    float _1099 = inversesqrt(dot(vec3(_1092, _1093, _1095), vec3(_1092, _1093, _1095)));
    float _1100 = _1092 * _1099;
    float _1101 = _1093 * _1099;
    float _1102 = _1099 * _1095;
    float _1105 = (_1101 * _883) - (_1102 * _882);
    float _1108 = (_1102 * _881) - (_1100 * _883);
    float _1111 = (_1100 * _882) - (_1101 * _881);
    float _1113;
    float _1121;
    float _1112 = 0.0;
    uint _1114 = 0u;
    float _1118;
    bool _1120;
    for (;;)
    {
        _1118 = (float(_1114) + _925) * 0.03125;
        _1120 = _1114 == 0u;
        float frontier_phi_45_pred;
        if (_1120)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1265;
            float _1266;
            uint _1268;
            _1265 = 0.0;
            _1266 = 0.5;
            _1268 = _1114;
            float _1122;
            for (;;)
            {
                _1122 = ((_1268 & 1u) != 0u) ? (_1266 + _1265) : _1265;
                uint _1269 = _1268 >> 1u;
                if (_1269 == 0u)
                {
                    break;
                }
                else
                {
                    _1265 = _1122;
                    _1266 *= 0.5;
                    _1268 = _1269;
                }
            }
            frontier_phi_45_pred = _1122;
        }
        _1121 = frontier_phi_45_pred;
        float _1123 = _1121 + _938;
        float _1127 = sqrt(_1118);
        float _1128 = ((_1123 > 1.0) ? (_1123 + (-1.0)) : _1123) * 6.283185482025146484375;
        float _1131 = cos(_1128) * _1127;
        float _1133 = sin(_1128) * _1127;
        float _1135 = sqrt(1.0 - _1118);
        float _1148 = ((_1135 * _881) + (_1131 * _1105)) + (_1133 * _1100);
        float _1149 = ((_1135 * _882) + (_1131 * _1108)) + (_1133 * _1101);
        float _1150 = ((_1135 * _883) + (_1131 * _1111)) + (_1133 * _1102);
        _61._m0 = 1u;
        uvec4 _1154 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1155 = _1154.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1155, _1154.w, _1155, vec3(_895, _896, _897), 9.9999997473787516355514526367188e-05, vec3(_1148, _1149, _1150), 10000.0, 1);
        float _1161 = dot(vec3(_881, _882, _883), vec3(_1148, _1149, _1150));
        float _1430 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1164 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1113 = ((float(_61._m0 == 0u) * _1164) / (_1164 * 0.3183098733425140380859375)) + _1112;
        uint _1115 = _1114 + 1u;
        if (_1115 == 32u)
        {
            break;
        }
        else
        {
            _1112 = _1113;
            _1114 = _1115;
            continue;
        }
    }
    float _1172 = _1113 * 0.009947183541953563690185546875;
    float _1177 = dot(vec3(_809, _810, _811), vec3(_881, _882, _883)) * 2.0;
    vec4 _1191 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_809 - (_1177 * _881), _810 - (_1177 * _882), _811 - (_1177 * _883)), 4.0 - (_774 * 4.0));
    float _1196 = dot(vec3(_898, _900, _901), vec3(_881, _882, _883));
    float _1441 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1206 = exp2(log2(1.0 - (isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0)))) * 5.0);
    vec4 _1218 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_881, _882, _883), 0.0);
    float _1230 = ((_1079 + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _857.x)) + _1082) + (((_1218.x * _940) + (((_1206 * (0.959999978542327880859375 - _947)) + _950) * _1191.x)) * _1172);
    float _1235 = ((_1080 + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _857.y)) + _1083) + (((_1218.y * _941) + (((_1206 * (0.959999978542327880859375 - _948)) + _952) * _1191.y)) * _1172);
    float _1240 = ((_1081 + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _857.z)) + _1084) + (((_1218.z * _942) + (((_1206 * (0.959999978542327880859375 - _949)) + _953) * _1191.z)) * _1172);
    float _1452 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1463 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1474 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    bool _1248 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1259;
    _1259.x = _1248 ? ((_568 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0)));
    _1259.y = _1248 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0)));
    _1259.z = _1248 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0)));
    payload._m0 = _1259;
}


