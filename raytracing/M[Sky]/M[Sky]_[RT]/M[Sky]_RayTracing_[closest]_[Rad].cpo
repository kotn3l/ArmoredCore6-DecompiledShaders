#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _66
{
    vec3 _m0;
};

struct _70
{
    vec2 _m0;
};

struct _73
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[82];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Sky_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Sky_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Sky_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Sky_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Sky_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D M_Sky_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_Sky_snp_0_Texture2D_8;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(location = 0) rayPayloadInEXT _66 payload;
hitAttributeEXT _70 hit;
layout(location = 1) rayPayloadEXT _73 _75;
layout(location = 2) rayPayloadEXT _73 _76;

vec3 _3084;

void main()
{
    float _90 = float(gl_LaunchSizeEXT.y);
    float _118 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _119 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _120 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _127 = sqrt(((_119 * _119) + (_118 * _118)) + (_120 * _120)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _90)))));
    uvec4 _138 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _139 = _138.y;
    uint _179;
    uint _181;
    uint _182;
    if (_138.x == 0u)
    {
        uint _147 = (_139 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _156 = uvec3(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_147 + 2u)).x);
        _179 = _156.x;
        _181 = _156.y;
        _182 = _156.z;
    }
    else
    {
        uint _160 = uint(gl_PrimitiveID) * 6u;
        uint _162 = _160 & 4294967292u;
        uint _165 = (_139 + _162) >> 2u;
        uvec2 _172 = uvec2(texelFetch(l_geomIndexBuffer, int(_165)).x, texelFetch(l_geomIndexBuffer, int(_165 + 1u)).x);
        uint _173 = _172.x;
        uint _174 = _172.y;
        uint _176 = _173 >> 16u;
        uint _177 = _174 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_162 == _160)
        {
            frontier_phi_3_2_ladder = _176;
            frontier_phi_3_2_ladder_1 = _173 & 65535u;
            frontier_phi_3_2_ladder_2 = _177;
        }
        else
        {
            frontier_phi_3_2_ladder = _177;
            frontier_phi_3_2_ladder_1 = _176;
            frontier_phi_3_2_ladder_2 = _174 >> 16u;
        }
        _179 = frontier_phi_3_2_ladder_1;
        _181 = frontier_phi_3_2_ladder;
        _182 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _186 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _187 = _186.x;
    uint _188 = _187 * _179;
    uint _190 = _188 >> 2u;
    uvec3 _199 = uvec3(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x, texelFetch(l_geomAttrib_0, int(_190 + 2u)).x);
    uint _206 = _186.z;
    bool _207 = _206 != 0u;
    bool _209 = _138.w == 0u;
    bool _210 = _207 || _209;
    uint _211 = _188 + 12u;
    uint _234;
    uint _235;
    uint _236;
    uint _237;
    if (_210)
    {
        uvec4 _213 = texelFetch(l_geomAttrib_0, int(_211 >> 2u));
        uint _214 = _213.x;
        _234 = _214 & 255u;
        _235 = (_214 >> 8u) & 255u;
        _236 = (_214 >> 16u) & 255u;
        _237 = 20u;
    }
    else
    {
        uint _222 = _211 >> 2u;
        uvec2 _228 = uvec2(texelFetch(l_geomAttrib_0, int(_222)).x, texelFetch(l_geomAttrib_0, int(_222 + 1u)).x);
        uint _229 = _228.x;
        _234 = _229 & 65535u;
        _235 = _229 >> 16u;
        _236 = _228.y & 65535u;
        _237 = 24u;
    }
    bool _243 = _206 == 0u;
    uint _244;
    if (_243)
    {
        _244 = _237;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_209)
        {
            frontier_phi_9_10_ladder = _237 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _237 + 8u;
        }
        _244 = frontier_phi_9_10_ladder;
    }
    uint _249 = _207 ? (_244 + 4u) : _244;
    uint _252 = ((_188 + 4u) + _249) >> 2u;
    uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
    uint _259 = _258.x;
    uint _260 = _258.y;
    float _264 = float(int(uint(int(_259 << 16u) >> int(16u))));
    float _265 = float(int(uint(int(_259) >> int(16u))));
    float _269 = float(int(uint(int(_260 << 16u) >> int(16u))));
    float _270 = float(int(uint(int(_260) >> int(16u))));
    uvec4 _274 = texelFetch(l_geomAttrib_0, int(((_188 + 12u) + _249) >> 2u));
    uint _275 = _274.x;
    float _279 = float(int(uint(int(_275 << 16u) >> int(16u))));
    float _280 = float(int(uint(int(_275) >> int(16u))));
    uint _281 = _187 * _181;
    uint _282 = _281 >> 2u;
    uvec3 _291 = uvec3(texelFetch(l_geomAttrib_0, int(_282)).x, texelFetch(l_geomAttrib_0, int(_282 + 1u)).x, texelFetch(l_geomAttrib_0, int(_282 + 2u)).x);
    uint _298 = _281 + 12u;
    uint _319;
    uint _320;
    uint _321;
    uint _322;
    if (_210)
    {
        uvec4 _300 = texelFetch(l_geomAttrib_0, int(_298 >> 2u));
        uint _301 = _300.x;
        _319 = _301 & 255u;
        _320 = (_301 >> 8u) & 255u;
        _321 = (_301 >> 16u) & 255u;
        _322 = 20u;
    }
    else
    {
        uint _307 = _298 >> 2u;
        uvec2 _313 = uvec2(texelFetch(l_geomAttrib_0, int(_307)).x, texelFetch(l_geomAttrib_0, int(_307 + 1u)).x);
        uint _314 = _313.x;
        _319 = _314 & 65535u;
        _320 = _314 >> 16u;
        _321 = _313.y & 65535u;
        _322 = 24u;
    }
    uint _326;
    if (_243)
    {
        _326 = _322;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_209)
        {
            frontier_phi_16_17_ladder = _322 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _322 + 8u;
        }
        _326 = frontier_phi_16_17_ladder;
    }
    uint _330 = _207 ? (_326 + 4u) : _326;
    uint _333 = ((_281 + 4u) + _330) >> 2u;
    uvec2 _339 = uvec2(texelFetch(l_geomAttrib_0, int(_333)).x, texelFetch(l_geomAttrib_0, int(_333 + 1u)).x);
    uint _340 = _339.x;
    uint _341 = _339.y;
    float _345 = float(int(uint(int(_340 << 16u) >> int(16u))));
    float _346 = float(int(uint(int(_340) >> int(16u))));
    float _350 = float(int(uint(int(_341 << 16u) >> int(16u))));
    float _351 = float(int(uint(int(_341) >> int(16u))));
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_281 + 12u) + _330) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    uint _362 = _187 * _182;
    uint _363 = _362 >> 2u;
    uvec3 _372 = uvec3(texelFetch(l_geomAttrib_0, int(_363)).x, texelFetch(l_geomAttrib_0, int(_363 + 1u)).x, texelFetch(l_geomAttrib_0, int(_363 + 2u)).x);
    uint _379 = _362 + 12u;
    uint _400;
    uint _401;
    uint _402;
    uint _403;
    if (_210)
    {
        uvec4 _381 = texelFetch(l_geomAttrib_0, int(_379 >> 2u));
        uint _382 = _381.x;
        _400 = _382 & 255u;
        _401 = (_382 >> 8u) & 255u;
        _402 = (_382 >> 16u) & 255u;
        _403 = 20u;
    }
    else
    {
        uint _388 = _379 >> 2u;
        uvec2 _394 = uvec2(texelFetch(l_geomAttrib_0, int(_388)).x, texelFetch(l_geomAttrib_0, int(_388 + 1u)).x);
        uint _395 = _394.x;
        _400 = _395 & 65535u;
        _401 = _395 >> 16u;
        _402 = _394.y & 65535u;
        _403 = 24u;
    }
    uint _407;
    if (_243)
    {
        _407 = _403;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_209)
        {
            frontier_phi_23_24_ladder = _403 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _403 + 8u;
        }
        _407 = frontier_phi_23_24_ladder;
    }
    uint _411 = _207 ? (_407 + 4u) : _407;
    uint _414 = ((_362 + 4u) + _411) >> 2u;
    uvec2 _420 = uvec2(texelFetch(l_geomAttrib_0, int(_414)).x, texelFetch(l_geomAttrib_0, int(_414 + 1u)).x);
    uint _421 = _420.x;
    uint _422 = _420.y;
    float _426 = float(int(uint(int(_421 << 16u) >> int(16u))));
    float _427 = float(int(uint(int(_421) >> int(16u))));
    float _431 = float(int(uint(int(_422 << 16u) >> int(16u))));
    float _432 = float(int(uint(int(_422) >> int(16u))));
    uvec4 _436 = texelFetch(l_geomAttrib_0, int(((_362 + 12u) + _411) >> 2u));
    uint _437 = _436.x;
    float _441 = float(int(uint(int(_437 << 16u) >> int(16u))));
    float _442 = float(int(uint(int(_437) >> int(16u))));
    bool _444 = _138.z == 0u;
    float _480;
    float _481;
    float _482;
    if (_444)
    {
        uint _447 = _179 * 3u;
        uvec3 _456 = uvec3(texelFetch(l_geomPositionBuffer, int(_447)).x, texelFetch(l_geomPositionBuffer, int(_447 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_447 + 2u)).x);
        _480 = uintBitsToFloat(_456.x);
        _481 = uintBitsToFloat(_456.y);
        _482 = uintBitsToFloat(_456.z);
    }
    else
    {
        uint _464 = _179 * 2u;
        uvec2 _470 = uvec2(texelFetch(l_geomPositionBuffer, int(_464)).x, texelFetch(l_geomPositionBuffer, int(_464 + 1u)).x);
        uint _471 = _470.x;
        _480 = unpackHalf2x16(_471).x;
        _481 = unpackHalf2x16(_471 >> 16u).x;
        _482 = unpackHalf2x16(_470.y).x;
    }
    float _518;
    float _519;
    float _520;
    if (_444)
    {
        uint _485 = _181 * 3u;
        uvec3 _494 = uvec3(texelFetch(l_geomPositionBuffer, int(_485)).x, texelFetch(l_geomPositionBuffer, int(_485 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_485 + 2u)).x);
        _518 = uintBitsToFloat(_494.x);
        _519 = uintBitsToFloat(_494.y);
        _520 = uintBitsToFloat(_494.z);
    }
    else
    {
        uint _502 = _181 * 2u;
        uvec2 _508 = uvec2(texelFetch(l_geomPositionBuffer, int(_502)).x, texelFetch(l_geomPositionBuffer, int(_502 + 1u)).x);
        uint _509 = _508.x;
        _518 = unpackHalf2x16(_509).x;
        _519 = unpackHalf2x16(_509 >> 16u).x;
        _520 = unpackHalf2x16(_508.y).x;
    }
    float _556;
    float _557;
    float _558;
    if (_444)
    {
        uint _523 = _182 * 3u;
        uvec3 _532 = uvec3(texelFetch(l_geomPositionBuffer, int(_523)).x, texelFetch(l_geomPositionBuffer, int(_523 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_523 + 2u)).x);
        _556 = uintBitsToFloat(_532.x);
        _557 = uintBitsToFloat(_532.y);
        _558 = uintBitsToFloat(_532.z);
    }
    else
    {
        uint _540 = _182 * 2u;
        uvec2 _546 = uvec2(texelFetch(l_geomPositionBuffer, int(_540)).x, texelFetch(l_geomPositionBuffer, int(_540 + 1u)).x);
        uint _547 = _546.x;
        _556 = unpackHalf2x16(_547).x;
        _557 = unpackHalf2x16(_547 >> 16u).x;
        _558 = unpackHalf2x16(_546.y).x;
    }
    float _561 = (1.0 - hit._m0.x) - hit._m0.y;
    float _574 = ((uintBitsToFloat(_291.x) * hit._m0.x) + (uintBitsToFloat(_199.x) * _561)) + (uintBitsToFloat(_372.x) * hit._m0.y);
    float _575 = ((uintBitsToFloat(_291.y) * hit._m0.x) + (uintBitsToFloat(_199.y) * _561)) + (uintBitsToFloat(_372.y) * hit._m0.y);
    float _576 = ((uintBitsToFloat(_291.z) * hit._m0.x) + (uintBitsToFloat(_199.z) * _561)) + (uintBitsToFloat(_372.z) * hit._m0.y);
    float _618 = (_345 - _264) * 0.00048828125;
    float _620 = (_346 - _265) * 0.00048828125;
    float _623 = (_426 - _264) * 0.00048828125;
    float _624 = (_427 - _265) * 0.00048828125;
    float _631 = (_360 - _279) * 0.00048828125;
    float _632 = (_361 - _280) * 0.00048828125;
    float _635 = (_441 - _279) * 0.00048828125;
    float _636 = (_442 - _280) * 0.00048828125;
    float _658 = _518 - _480;
    float _659 = _519 - _481;
    float _660 = _520 - _482;
    float _663 = fma(_660, gl_ObjectToWorldEXT[2u].x, fma(_659, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _658));
    float _666 = fma(_660, gl_ObjectToWorldEXT[2u].y, fma(_659, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _658));
    float _669 = fma(_660, gl_ObjectToWorldEXT[2u].z, fma(_659, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _658));
    float _670 = _556 - _480;
    float _671 = _557 - _481;
    float _672 = _558 - _482;
    float _675 = fma(_672, gl_ObjectToWorldEXT[2u].x, fma(_671, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _670));
    float _678 = fma(_672, gl_ObjectToWorldEXT[2u].y, fma(_671, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _670));
    float _681 = fma(_672, gl_ObjectToWorldEXT[2u].z, fma(_671, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _670));
    float _682 = (((_345 * hit._m0.x) + (_264 * _561)) + (_426 * hit._m0.y)) * 0.00048828125;
    float _683 = (((_346 * hit._m0.x) + (_265 * _561)) + (_427 * hit._m0.y)) * 0.00048828125;
    float _686 = (((_360 * hit._m0.x) + (_279 * _561)) + (_441 * hit._m0.y)) * 0.00048828125;
    float _687 = (((_361 * hit._m0.x) + (_280 * _561)) + (_442 * hit._m0.y)) * 0.00048828125;
    float _691 = (((float(_234) * _561) + (-127.0)) + (float(_319) * hit._m0.x)) + (float(_400) * hit._m0.y);
    float _694 = (((float(_235) * _561) + (-127.0)) + (float(_320) * hit._m0.x)) + (float(_401) * hit._m0.y);
    float _697 = (((float(_236) * _561) + (-127.0)) + (float(_321) * hit._m0.x)) + (float(_402) * hit._m0.y);
    float _698 = _691 * 0.0078740157186985015869140625;
    float _700 = _694 * 0.0078740157186985015869140625;
    float _701 = _697 * 0.0078740157186985015869140625;
    float _705 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _706 = _705 * _574;
    float _707 = _705 * _575;
    float _708 = _705 * _576;
    float _725 = (floatBitsToUint(cbMtdParam._m0[9u]).x != 0u) ? cbMtdParam._m0[71u].y : (cbSceneParam._m0[93u].x - 24.0 * trunc(cbSceneParam._m0[93u].x / 24.0));
    float _730 = (_725 * 0.0999200642108917236328125) + (-0.19904075562953948974609375);
    float _3172 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _734 = _733 * (-0.85000002384185791015625);
    float _736 = _733 * 0.550000011920928955078125;
    float _738 = _733 * (-0.89999997615814208984375);
    float _748 = (_725 * 0.10016022622585296630859375) + (-1.2019226551055908203125);
    float _3183 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _750 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _758 = (_734 + 0.800000011920928955078125) + (_750 * ((-1.4700000286102294921875) - _734));
    float _759 = (_736 + (-0.20000000298023223876953125)) - (_750 * _736);
    float _760 = (_738 + 0.75) + (_750 * ((-1.1800000667572021484375) - _738));
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _764 * _758;
    float _766 = _764 * _759;
    float _767 = _760 * _764;
    float _768 = dot(vec4(_706, _707, _708, 0.0), vec4(_765, _766, _767, 0.0));
    float _3194 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _775 = (-0.0) - (0.7799999713897705078125 - (_771 * _771));
    float _777 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = log2(isnan(64.0) ? _777 : (isnan(_777) ? 64.0 : min(_777, 64.0)));
    float _798 = (_725 * 1.89393937587738037109375) + (-9.45454502105712890625);
    float _3215 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    float _801 = _800 * cbMtdParam._m0[35u].y;
    float _802 = _800 * cbMtdParam._m0[35u].z;
    float _803 = _800 * cbMtdParam._m0[35u].w;
    float _806 = (_725 * 0.27777779102325439453125) + (-1.53333342075347900390625);
    float _3226 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    float _815 = (_808 * (cbMtdParam._m0[18u].y - _801)) + _801;
    float _816 = (_808 * (cbMtdParam._m0[18u].z - _802)) + _802;
    float _817 = (_808 * (cbMtdParam._m0[18u].w - _803)) + _803;
    float _820 = (_725 * 0.462963104248046875) + (-7.33333587646484375);
    float _3237 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _822 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _829 = (_822 * (cbMtdParam._m0[35u].y - _815)) + _815;
    float _830 = (_822 * (cbMtdParam._m0[35u].z - _816)) + _816;
    float _831 = (_822 * (cbMtdParam._m0[35u].w - _817)) + _817;
    float _834 = (_725 * 2.314829349517822265625) + (-44.72251129150390625);
    float _3248 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _840 = _829 - (_836 * _829);
    float _841 = _830 - (_836 * _830);
    float _842 = _831 - (_836 * _831);
    float _849 = (_725 * 0.5555555820465087890625) + (-1.66666662693023681640625);
    float _3259 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _854 = (_725 * 0.33333301544189453125) + (-6.327993869781494140625);
    float _3270 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _858 = _851 - ((isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * _851);
    float _863 = cbMtdParam._m0[69u].y * cbPerFrame._m0[22u].x;
    float _872 = (_863 * cbMtdParam._m0[79u].z) + _686;
    float _873 = (cbMtdParam._m0[79u].w * _863) + _687;
    uvec2 _891 = uvec2(textureSize(M_Sky_snp_0_Texture2D_6, int(0u)));
    bool _896 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _948;
    if (_896)
    {
        float _907 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _913 = (_681 * _666) - (_678 * _669);
        float _916 = (_675 * _669) - (_681 * _663);
        float _919 = (_678 * _663) - (_675 * _666);
        float _946 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_636 * _631) - (_635 * _632))) / (sqrt(((_916 * _916) + (_919 * _919)) + (_913 * _913)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_907 * gl_WorldRayDirectionEXT.x, _907 * gl_WorldRayDirectionEXT.y, _907 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _948 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    }
    else
    {
        _948 = 0.0;
    }
    float _955 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_872 * 4.0) - _863) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_873 * 3.0) + (_863 * 2.0)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), _948).w * 4.0;
    float _1019;
    if (_896)
    {
        float _979 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _985 = (_681 * _666) - (_678 * _669);
        float _988 = (_675 * _669) - (_681 * _663);
        float _991 = (_678 * _663) - (_675 * _666);
        float _1017 = ((log2((((float(_891.y) * 0.5) * float(_891.x)) * abs((_636 * _631) - (_635 * _632))) / (sqrt(((_988 * _988) + (_991 * _991)) + (_985 * _985)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_979 * gl_WorldRayDirectionEXT.x, _979 * gl_WorldRayDirectionEXT.y, _979 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _1019 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    }
    else
    {
        _1019 = 0.0;
    }
    vec4 _1021 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_6, SS_DiffuseMap), vec2(((_872 * 5.0) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((_873 * 5.0) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), _1019);
    float _1029 = (_1021.x * cbMtdParam._m0[68u].y) - _955;
    float _1030 = (_1021.y * cbMtdParam._m0[68u].z) - _955;
    float _1031 = (_1021.z * cbMtdParam._m0[68u].w) - _955;
    float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    uvec2 _1062 = uvec2(textureSize(M_Sky_snp_0_Texture2D_1, int(0u)));
    float _1113;
    if (_896)
    {
        float _1073 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1079 = (_681 * _666) - (_678 * _669);
        float _1082 = (_675 * _669) - (_681 * _663);
        float _1085 = (_678 * _663) - (_675 * _666);
        float _1111 = ((log2((((float(_1062.y) * 0.5) * float(_1062.x)) * abs((_636 * _631) - (_635 * _632))) / (sqrt(((_1082 * _1082) + (_1085 * _1085)) + (_1079 * _1079)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_1073 * gl_WorldRayDirectionEXT.x, _1073 * gl_WorldRayDirectionEXT.y, _1073 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _1113 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    }
    else
    {
        _1113 = 0.0;
    }
    vec4 _1116 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_1, SS_WrapLinear), vec2(((cbMtdParam._m0[76u].x * _872) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((cbMtdParam._m0[76u].y * _873) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _1113);
    float _1124 = (_1116.x * cbMtdParam._m0[12u].y) + (isnan(128.0) ? _1032 : (isnan(_1032) ? 128.0 : min(_1032, 128.0)));
    float _1125 = (_1116.y * cbMtdParam._m0[12u].z) + (isnan(128.0) ? _1033 : (isnan(_1033) ? 128.0 : min(_1033, 128.0)));
    float _1126 = (_1116.z * cbMtdParam._m0[12u].w) + (isnan(128.0) ? _1034 : (isnan(_1034) ? 128.0 : min(_1034, 128.0)));
    bool _1133 = (_725 * 0.0416666679084300994873046875) >= 0.699999988079071044921875;
    float _1144 = (_725 * 0.12550200521945953369140625) + (-0.00301204808056354522705078125);
    float _3326 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _1160 = (_725 * 0.138888895511627197265625) + (-2.3333332538604736328125);
    float _3337 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1162 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    uvec2 _1191 = uvec2(textureSize(M_Sky_snp_0_Texture2D_8, int(0u)));
    float _1242;
    if (_896)
    {
        float _1202 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1208 = (_681 * _666) - (_678 * _669);
        float _1211 = (_675 * _669) - (_681 * _663);
        float _1214 = (_678 * _663) - (_675 * _666);
        float _1240 = ((log2((((float(_1191.y) * 0.5) * float(_1191.x)) * abs((_636 * _631) - (_635 * _632))) / (sqrt(((_1211 * _1211) + (_1214 * _1214)) + (_1208 * _1208)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_1202 * gl_WorldRayDirectionEXT.x, _1202 * gl_WorldRayDirectionEXT.y, _1202 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _1242 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    }
    else
    {
        _1242 = 0.0;
    }
    vec4 _1245 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_8, SS_ClampLinear), vec2((((cbMtdParam._m0[77u].z * _686) + (_1133 ? ((_1162 * (cbMtdParam._m0[75u].z - cbMtdParam._m0[80u].x)) + cbMtdParam._m0[80u].x) : ((_1146 * (cbMtdParam._m0[76u].z - cbMtdParam._m0[75u].z)) + cbMtdParam._m0[75u].z))) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((cbMtdParam._m0[77u].w * _687) + (_1133 ? ((_1162 * (cbMtdParam._m0[75u].w - cbMtdParam._m0[80u].y)) + cbMtdParam._m0[80u].y) : ((_1146 * (cbMtdParam._m0[76u].w - cbMtdParam._m0[75u].w)) + cbMtdParam._m0[75u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), _1242);
    float _1247 = _1245.x;
    float _1248 = _1245.y;
    float _1252 = _1247 * 5.0;
    float _3353 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _1253 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _1275 = _575 * 0.000624999986030161380767822265625;
    float _1282 = exp2(log2(isnan(0.001000000047497451305389404296875) ? _1275 : (isnan(_1275) ? 0.001000000047497451305389404296875 : max(_1275, 0.001000000047497451305389404296875))) * 1.25);
    float _3369 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
    float _1283 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _1284 = _1283 * (((((_1247 * cbMtdParam._m0[53u].y) - _1124) * _1253) + _1124) + (cbMtdParam._m0[62u].y * _1248));
    float _1285 = _1283 * (((((_1247 * cbMtdParam._m0[53u].z) - _1125) * _1253) + _1125) + (cbMtdParam._m0[62u].z * _1248));
    float _1286 = _1283 * (((_1253 * ((_1247 * cbMtdParam._m0[53u].w) - _1126)) + _1126) + (cbMtdParam._m0[62u].w * _1248));
    float _1331 = (_725 * 0.946969687938690185546875) + (-3.3181817531585693359375);
    float _3380 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _1333 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _1340 = (_1333 * (cbMtdParam._m0[52u].y - cbMtdParam._m0[30u].y)) + cbMtdParam._m0[30u].y;
    float _1341 = (_1333 * (cbMtdParam._m0[52u].z - cbMtdParam._m0[30u].z)) + cbMtdParam._m0[30u].z;
    float _1342 = (_1333 * (cbMtdParam._m0[52u].w - cbMtdParam._m0[30u].w)) + cbMtdParam._m0[30u].w;
    float _1349 = ((cbMtdParam._m0[27u].y - _1340) * _800) + _1340;
    float _1350 = ((cbMtdParam._m0[27u].z - _1341) * _800) + _1341;
    float _1351 = ((cbMtdParam._m0[27u].w - _1342) * _800) + _1342;
    float _1358 = ((cbMtdParam._m0[28u].y - _1349) * _808) + _1349;
    float _1359 = ((cbMtdParam._m0[28u].z - _1350) * _808) + _1350;
    float _1360 = ((cbMtdParam._m0[28u].w - _1351) * _808) + _1351;
    float _1367 = ((cbMtdParam._m0[29u].y - _1358) * _822) + _1358;
    float _1368 = ((cbMtdParam._m0[29u].z - _1359) * _822) + _1359;
    float _1369 = ((cbMtdParam._m0[29u].w - _1360) * _822) + _1360;
    float _1372 = (_725 * 0.99206078052520751953125) + (-17.85709381103515625);
    float _3391 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
    float _1374 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _1381 = ((cbMtdParam._m0[58u].y - _1367) * _1374) + _1367;
    float _1382 = ((cbMtdParam._m0[58u].z - _1368) * _1374) + _1368;
    float _1383 = ((cbMtdParam._m0[58u].w - _1369) * _1374) + _1369;
    float _1390 = 1.0 - _707;
    float _1391 = _1390 * _1390;
    float _1394 = (_1391 * 1.0099999904632568359375) + (-0.38999998569488525390625);
    float _3402 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
    float _1396 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _1450 = ((cbMtdParam._m0[50u].y - cbMtdParam._m0[25u].y) * _1333) + cbMtdParam._m0[25u].y;
    float _1451 = ((cbMtdParam._m0[50u].z - cbMtdParam._m0[25u].z) * _1333) + cbMtdParam._m0[25u].z;
    float _1452 = ((cbMtdParam._m0[50u].w - cbMtdParam._m0[25u].w) * _1333) + cbMtdParam._m0[25u].w;
    float _1459 = ((cbMtdParam._m0[21u].y - _1450) * _800) + _1450;
    float _1460 = ((cbMtdParam._m0[21u].z - _1451) * _800) + _1451;
    float _1461 = ((cbMtdParam._m0[21u].w - _1452) * _800) + _1452;
    float _1468 = ((cbMtdParam._m0[15u].y - _1459) * _808) + _1459;
    float _1469 = ((cbMtdParam._m0[15u].z - _1460) * _808) + _1460;
    float _1470 = ((cbMtdParam._m0[15u].w - _1461) * _808) + _1461;
    float _1477 = ((cbMtdParam._m0[22u].y - _1468) * _822) + _1468;
    float _1478 = ((cbMtdParam._m0[22u].z - _1469) * _822) + _1469;
    float _1479 = ((cbMtdParam._m0[22u].w - _1470) * _822) + _1470;
    float _1486 = ((cbMtdParam._m0[56u].y - _1477) * _1374) + _1477;
    float _1487 = ((cbMtdParam._m0[56u].z - _1478) * _1374) + _1478;
    float _1488 = ((cbMtdParam._m0[56u].w - _1479) * _1374) + _1479;
    float _1538 = ((cbMtdParam._m0[49u].y - cbMtdParam._m0[24u].y) * _1333) + cbMtdParam._m0[24u].y;
    float _1539 = ((cbMtdParam._m0[49u].z - cbMtdParam._m0[24u].z) * _1333) + cbMtdParam._m0[24u].z;
    float _1540 = ((cbMtdParam._m0[49u].w - cbMtdParam._m0[24u].w) * _1333) + cbMtdParam._m0[24u].w;
    float _1547 = ((cbMtdParam._m0[9u].y - _1538) * _800) + _1538;
    float _1548 = ((cbMtdParam._m0[9u].z - _1539) * _800) + _1539;
    float _1549 = ((cbMtdParam._m0[9u].w - _1540) * _800) + _1540;
    float _1556 = ((cbMtdParam._m0[14u].y - _1547) * _808) + _1547;
    float _1557 = ((cbMtdParam._m0[14u].z - _1548) * _808) + _1548;
    float _1558 = ((cbMtdParam._m0[14u].w - _1549) * _808) + _1549;
    float _1565 = ((cbMtdParam._m0[17u].y - _1556) * _822) + _1556;
    float _1566 = ((cbMtdParam._m0[17u].z - _1557) * _822) + _1557;
    float _1567 = ((cbMtdParam._m0[17u].w - _1558) * _822) + _1558;
    float _1574 = ((cbMtdParam._m0[55u].y - _1565) * _1374) + _1565;
    float _1575 = ((cbMtdParam._m0[55u].z - _1566) * _1374) + _1566;
    float _1576 = ((cbMtdParam._m0[55u].w - _1567) * _1374) + _1567;
    float _1583 = ((cbMtdParam._m0[24u].y - _1574) * _836) + _1574;
    float _1584 = ((cbMtdParam._m0[24u].z - _1575) * _836) + _1575;
    float _1585 = ((cbMtdParam._m0[24u].w - _1576) * _836) + _1576;
    float _1586 = _1391 * 1.60000002384185791015625;
    float _3413 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1588 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _1595 = (((((cbMtdParam._m0[25u].y - _1486) * _836) + _1486) - _1583) * _1588) + _1583;
    float _1596 = (((((cbMtdParam._m0[25u].z - _1487) * _836) + _1487) - _1584) * _1588) + _1584;
    float _1597 = (((((cbMtdParam._m0[25u].w - _1488) * _836) + _1488) - _1585) * _1588) + _1585;
    float _1638 = ((cbMtdParam._m0[51u].y - cbMtdParam._m0[26u].y) * _1333) + cbMtdParam._m0[26u].y;
    float _1639 = ((cbMtdParam._m0[51u].z - cbMtdParam._m0[26u].z) * _1333) + cbMtdParam._m0[26u].z;
    float _1640 = ((cbMtdParam._m0[51u].w - cbMtdParam._m0[26u].w) * _1333) + cbMtdParam._m0[26u].w;
    float _1647 = ((cbMtdParam._m0[32u].y - _1638) * _800) + _1638;
    float _1648 = ((cbMtdParam._m0[32u].z - _1639) * _800) + _1639;
    float _1649 = ((cbMtdParam._m0[32u].w - _1640) * _800) + _1640;
    float _1656 = ((cbMtdParam._m0[16u].y - _1647) * _808) + _1647;
    float _1657 = ((cbMtdParam._m0[16u].z - _1648) * _808) + _1648;
    float _1658 = ((cbMtdParam._m0[16u].w - _1649) * _808) + _1649;
    float _1665 = ((cbMtdParam._m0[23u].y - _1656) * _822) + _1656;
    float _1666 = ((cbMtdParam._m0[23u].z - _1657) * _822) + _1657;
    float _1667 = ((cbMtdParam._m0[23u].w - _1658) * _822) + _1658;
    float _1674 = ((cbMtdParam._m0[57u].y - _1665) * _1374) + _1665;
    float _1675 = ((cbMtdParam._m0[57u].z - _1666) * _1374) + _1666;
    float _1676 = ((cbMtdParam._m0[57u].w - _1667) * _1374) + _1667;
    float _1685 = (_1391 * 1.28000009059906005859375) + (-0.839999973773956298828125);
    float _3424 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _1702 = (cbMtdParam._m0[71u].w + _768) * 0.800000011920928955078125;
    float _3435 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1703 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _1707 = ((((((_1381 + (-0.5)) + ((cbMtdParam._m0[30u].y - _1381) * _836)) * _1396) + 0.5) * 4.55000019073486328125) * _1703) * ((((_1674 - _1595) + ((cbMtdParam._m0[26u].y - _1674) * _836)) * _1687) + _1595);
    float _1710 = ((((((_1382 + (-0.5)) + ((cbMtdParam._m0[30u].z - _1382) * _836)) * _1396) + 0.5) * 4.55000019073486328125) * _1703) * ((((_1675 - _1596) + ((cbMtdParam._m0[26u].z - _1675) * _836)) * _1687) + _1596);
    float _1713 = ((((((_1383 + (-0.5)) + ((cbMtdParam._m0[30u].w - _1383) * _836)) * _1396) + 0.5) * 4.55000019073486328125) * _1703) * ((((_1676 - _1597) + ((cbMtdParam._m0[26u].w - _1676) * _836)) * _1687) + _1597);
    float _1717 = (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) + (_1284 - (_1284 * _858));
    float _1718 = (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) + (_1285 - (_1285 * _858));
    float _1719 = (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) + (_1286 - (_1286 * _858));
    float _3461 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _1720 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _1762 = ((cbMtdParam._m0[54u].y - cbMtdParam._m0[34u].y) * _1333) + cbMtdParam._m0[34u].y;
    float _1763 = ((cbMtdParam._m0[54u].z - cbMtdParam._m0[34u].z) * _1333) + cbMtdParam._m0[34u].z;
    float _1764 = ((cbMtdParam._m0[54u].w - cbMtdParam._m0[34u].w) * _1333) + cbMtdParam._m0[34u].w;
    float _1771 = ((cbMtdParam._m0[20u].y - _1762) * _800) + _1762;
    float _1772 = ((cbMtdParam._m0[20u].z - _1763) * _800) + _1763;
    float _1773 = ((cbMtdParam._m0[20u].w - _1764) * _800) + _1764;
    float _1780 = ((cbMtdParam._m0[31u].y - _1771) * _808) + _1771;
    float _1781 = ((cbMtdParam._m0[31u].z - _1772) * _808) + _1772;
    float _1782 = ((cbMtdParam._m0[31u].w - _1773) * _808) + _1773;
    float _1789 = ((cbMtdParam._m0[33u].y - _1780) * _822) + _1780;
    float _1790 = ((cbMtdParam._m0[33u].z - _1781) * _822) + _1781;
    float _1791 = ((cbMtdParam._m0[33u].w - _1782) * _822) + _1782;
    float _1798 = ((cbMtdParam._m0[59u].y - _1789) * _1374) + _1789;
    float _1799 = ((cbMtdParam._m0[59u].z - _1790) * _1374) + _1790;
    float _1800 = ((cbMtdParam._m0[59u].w - _1791) * _1374) + _1791;
    float _1831 = (0.959999978542327880859375 - exp2(log2(_771) * 90.0)) * (-60.0);
    float _3472 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1838 = ((_1833 * _840) + _1717) + (((((_1717 * 4.55000019073486328125) * _771) * (((cbMtdParam._m0[34u].y - _1798) * _836) + _1798)) - _1717) * _1720);
    float _1840 = ((_1833 * _841) + _1718) + (((((_1718 * 4.55000019073486328125) * _771) * (((cbMtdParam._m0[34u].z - _1799) * _836) + _1799)) - _1718) * _1720);
    float _1842 = ((_1833 * _842) + _1719) + (((((_1719 * 4.55000019073486328125) * _771) * (((cbMtdParam._m0[34u].w - _1800) * _836) + _1800)) - _1719) * _1720);
    float _1874 = ((cbMtdParam._m0[73u].y - cbMtdParam._m0[71u].x) * _800) + cbMtdParam._m0[71u].x;
    float _1875 = ((cbMtdParam._m0[71u].z - cbMtdParam._m0[69u].w) * _800) + cbMtdParam._m0[69u].w;
    float _1876 = ((cbMtdParam._m0[73u].z - cbMtdParam._m0[72u].z) * _800) + cbMtdParam._m0[72u].z;
    float _1883 = ((cbMtdParam._m0[70u].x - _1874) * _808) + _1874;
    float _1884 = ((cbMtdParam._m0[73u].w - _1875) * _808) + _1875;
    float _1885 = ((cbMtdParam._m0[73u].x - _1876) * _808) + _1876;
    float _1892 = ((cbMtdParam._m0[70u].y - _1883) * _822) + _1883;
    float _1893 = ((cbMtdParam._m0[69u].z - _1884) * _822) + _1884;
    float _1894 = ((cbMtdParam._m0[72u].w - _1885) * _822) + _1885;
    uvec2 _1931 = uvec2(textureSize(M_Sky_snp_0_Texture2D_7, int(0u)));
    bool _1936 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _1989;
    if (_1936)
    {
        float _1947 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1953 = (_681 * _666) - (_678 * _669);
        float _1956 = (_675 * _669) - (_681 * _663);
        float _1959 = (_678 * _663) - (_675 * _666);
        float _1987 = ((log2((((float(_1931.y) * 0.5) * float(_1931.x)) * abs((((_432 - _270) * (_350 - _269)) - ((_431 - _269) * (_351 - _270))) * 2.384185791015625e-07)) / (sqrt(((_1956 * _1956) + (_1959 * _1959)) + (_1953 * _1953)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_1947 * gl_WorldRayDirectionEXT.x, _1947 * gl_WorldRayDirectionEXT.y, _1947 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _1989 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    }
    else
    {
        _1989 = 0.0;
    }
    vec4 _1992 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_7, SS_DiffuseMap), vec2(((((cbMtdParam._m0[78u].z * _863) + ((((_350 * hit._m0.x) + (_269 * _561)) + (_431 * hit._m0.y)) * 0.00048828125)) + cbMtdParam._m0[77u].x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((((cbMtdParam._m0[78u].w * _863) + ((((_351 * hit._m0.x) + (_270 * _561)) + (_432 * hit._m0.y)) * 0.00048828125)) + cbMtdParam._m0[77u].y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), _1989);
    float _1998 = _1992.w * (((cbMtdParam._m0[69u].w - _1893) * _836) + _1893);
    float _3488 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _1999 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _2030 = ((cbMtdParam._m0[41u].y - cbMtdParam._m0[61u].y) * _800) + cbMtdParam._m0[61u].y;
    float _2031 = ((cbMtdParam._m0[41u].z - cbMtdParam._m0[61u].z) * _800) + cbMtdParam._m0[61u].z;
    float _2032 = ((cbMtdParam._m0[41u].w - cbMtdParam._m0[61u].w) * _800) + cbMtdParam._m0[61u].w;
    float _2039 = ((cbMtdParam._m0[19u].y - _2030) * _808) + _2030;
    float _2040 = ((cbMtdParam._m0[19u].z - _2031) * _808) + _2031;
    float _2041 = ((cbMtdParam._m0[19u].w - _2032) * _808) + _2032;
    float _2048 = ((cbMtdParam._m0[60u].y - _2039) * _822) + _2039;
    float _2049 = ((cbMtdParam._m0[60u].z - _2040) * _822) + _2040;
    float _2050 = ((cbMtdParam._m0[60u].w - _2041) * _822) + _2041;
    float _2090 = ((cbMtdParam._m0[13u].y - cbMtdParam._m0[64u].y) * _800) + cbMtdParam._m0[64u].y;
    float _2091 = ((cbMtdParam._m0[13u].z - cbMtdParam._m0[64u].z) * _800) + cbMtdParam._m0[64u].z;
    float _2092 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[64u].w) * _800) + cbMtdParam._m0[64u].w;
    float _2099 = ((cbMtdParam._m0[43u].y - _2090) * _808) + _2090;
    float _2100 = ((cbMtdParam._m0[43u].z - _2091) * _808) + _2091;
    float _2101 = ((cbMtdParam._m0[43u].w - _2092) * _808) + _2092;
    float _2108 = ((cbMtdParam._m0[65u].y - _2099) * _822) + _2099;
    float _2109 = ((cbMtdParam._m0[65u].z - _2100) * _822) + _2100;
    float _2110 = ((cbMtdParam._m0[65u].w - _2101) * _822) + _2101;
    float _2120 = (((cbMtdParam._m0[64u].y - _2108) * _836) + _2108) * _1992.x;
    float _2121 = (((cbMtdParam._m0[64u].z - _2109) * _836) + _2109) * _1992.y;
    float _2122 = (((cbMtdParam._m0[64u].w - _2110) * _836) + _2110) * _1992.z;
    float _2129 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _2133 = dot(vec4(_706, _707, _708, 0.0), vec4(_2129 * _765, _2129 * _766, _2129 * _767, 0.0));
    float _3499 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2143 = (-0.0) - (0.199999988079071044921875 - exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 6.0));
    float _3510 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2144 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _2151 = (_2144 * ((_2120 * (((cbMtdParam._m0[61u].y - _2048) * _836) + _2048)) - _2120)) + _2120;
    float _2152 = (_2144 * ((_2121 * (((cbMtdParam._m0[61u].z - _2049) * _836) + _2049)) - _2121)) + _2121;
    float _2153 = (_2144 * ((_2122 * (((cbMtdParam._m0[61u].w - _2050) * _836) + _2050)) - _2122)) + _2122;
    uvec2 _2196 = uvec2(textureSize(M_Sky_snp_0_Texture2D_2, int(0u)));
    float _2247;
    if (_1936)
    {
        float _2207 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _2213 = (_681 * _666) - (_678 * _669);
        float _2216 = (_675 * _669) - (_681 * _663);
        float _2219 = (_678 * _663) - (_675 * _666);
        float _2245 = ((log2((((float(_2196.y) * 0.5) * float(_2196.x)) * abs((_624 * _618) - (_623 * _620))) / (sqrt(((_2216 * _2216) + (_2219 * _2219)) + (_2213 * _2213)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_2207 * gl_WorldRayDirectionEXT.x, _2207 * gl_WorldRayDirectionEXT.y, _2207 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _2247 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    }
    else
    {
        _2247 = 0.0;
    }
    vec4 _2250 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_2, SS_WrapLinear), vec2(((((cbMtdParam._m0[75u].x * _863) + _682) * cbMtdParam._m0[74u].x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((cbTextureTilingScale._m0[2u].y * cbMtdParam._m0[74u].y) * ((cbMtdParam._m0[75u].y * _863) + _683)) + cbTextureTilingScale._m0[2u].w), _2247);
    float _2252 = _2250.w;
    float _2253 = _2252 * cbMtdParam._m0[80u].z;
    float _2254 = _2252 * cbMtdParam._m0[80u].w;
    uvec2 _2280 = uvec2(textureSize(M_Sky_snp_0_Texture2D_5, int(0u)));
    float _2331;
    if (_1936)
    {
        float _2291 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _2297 = (_681 * _666) - (_678 * _669);
        float _2300 = (_675 * _669) - (_681 * _663);
        float _2303 = (_678 * _663) - (_675 * _666);
        float _2329 = ((log2((((float(_2280.y) * 0.5) * float(_2280.x)) * abs((_624 * _618) - (_623 * _620))) / (sqrt(((_2300 * _2300) + (_2303 * _2303)) + (_2297 * _2297)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_2291 * gl_WorldRayDirectionEXT.x, _2291 * gl_WorldRayDirectionEXT.y, _2291 * gl_WorldRayDirectionEXT.z), vec3(_698, _700, _701))));
        _2331 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    }
    else
    {
        _2331 = 0.0;
    }
    vec4 _2333 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_5, SS_DiffuseMap), vec2(((((cbMtdParam._m0[78u].x * _863) + _2253) + (cbMtdParam._m0[79u].x * _682)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[78u].y * _863) + _2254) + (cbMtdParam._m0[79u].y * _683)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), _2331);
    float _2369 = ((cbMtdParam._m0[42u].y - cbMtdParam._m0[46u].y) * _800) + cbMtdParam._m0[46u].y;
    float _2370 = ((cbMtdParam._m0[42u].z - cbMtdParam._m0[46u].z) * _800) + cbMtdParam._m0[46u].z;
    float _2371 = ((cbMtdParam._m0[42u].w - cbMtdParam._m0[46u].w) * _800) + cbMtdParam._m0[46u].w;
    float _2378 = ((cbMtdParam._m0[66u].y - _2369) * _808) + _2369;
    float _2379 = ((cbMtdParam._m0[66u].z - _2370) * _808) + _2370;
    float _2380 = ((cbMtdParam._m0[66u].w - _2371) * _808) + _2371;
    float _2387 = ((cbMtdParam._m0[45u].y - _2378) * _822) + _2378;
    float _2388 = ((cbMtdParam._m0[45u].z - _2379) * _822) + _2379;
    float _2389 = ((cbMtdParam._m0[45u].w - _2380) * _822) + _2380;
    float _2399 = (((cbMtdParam._m0[46u].y - _2387) * _836) + _2387) * _2333.x;
    float _2400 = (((cbMtdParam._m0[46u].z - _2388) * _836) + _2388) * _2333.y;
    float _2401 = (((cbMtdParam._m0[46u].w - _2389) * _836) + _2389) * _2333.z;
    float _2432 = ((cbMtdParam._m0[63u].y - cbMtdParam._m0[47u].y) * _800) + cbMtdParam._m0[47u].y;
    float _2433 = ((cbMtdParam._m0[63u].z - cbMtdParam._m0[47u].z) * _800) + cbMtdParam._m0[47u].z;
    float _2434 = ((cbMtdParam._m0[63u].w - cbMtdParam._m0[47u].w) * _800) + cbMtdParam._m0[47u].w;
    float _2441 = ((cbMtdParam._m0[44u].y - _2432) * _808) + _2432;
    float _2442 = ((cbMtdParam._m0[44u].z - _2433) * _808) + _2433;
    float _2443 = ((cbMtdParam._m0[44u].w - _2434) * _808) + _2434;
    float _2450 = ((cbMtdParam._m0[48u].y - _2441) * _822) + _2441;
    float _2451 = ((cbMtdParam._m0[48u].z - _2442) * _822) + _2442;
    float _2452 = ((cbMtdParam._m0[48u].w - _2443) * _822) + _2443;
    float _2474 = _707 * 5.0;
    float _3546 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = (_2333.w * (((cbMtdParam._m0[72u].z - _1894) * _836) + _1894)) * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)));
    float _2478 = _2477 * (((((((cbMtdParam._m0[47u].y - _2450) * _836) + _2450) * _2399) - _2399) * _2144) + _2399);
    float _2479 = _2477 * (((((((cbMtdParam._m0[47u].z - _2451) * _836) + _2451) * _2400) - _2400) * _2144) + _2400);
    float _2480 = _2477 * (((((((cbMtdParam._m0[47u].w - _2452) * _836) + _2452) * _2401) - _2401) * _2144) + _2401);
    float _2484 = (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))) - _1999;
    float _2485 = (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))) - _1999;
    float _2486 = (isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0))) - _1999;
    float _3572 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _3583 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _3594 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = ((((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) - _1838) * _1999) + _1838) + (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)));
    float _2491 = ((((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) - _1840) * _1999) + _1840) + (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)));
    float _2492 = ((((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) - _1842) * _1999) + _1842) + (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)));
    uvec2 _2519 = uvec2(textureSize(M_Sky_snp_0_Texture2D_0, int(0u)));
    float _2523 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _2524 = _2523 * gl_WorldRayDirectionEXT.x;
    float _2525 = _2523 * gl_WorldRayDirectionEXT.y;
    float _2526 = _2523 * gl_WorldRayDirectionEXT.z;
    float _2570;
    if (_1936)
    {
        float _2536 = (_681 * _666) - (_678 * _669);
        float _2539 = (_675 * _669) - (_681 * _663);
        float _2542 = (_678 * _663) - (_675 * _666);
        float _2568 = ((log2((((float(_2519.y) * 0.5) * float(_2519.x)) * abs((_624 * _618) - (_623 * _620))) / (sqrt(((_2539 * _2539) + (_2542 * _2542)) + (_2536 * _2536)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_127) / abs(dot(vec3(_2524, _2525, _2526), vec3(_698, _700, _701))));
        _2570 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    }
    else
    {
        _2570 = 0.0;
    }
    vec4 _2572 = textureLod(sampler2D(M_Sky_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((cbMtdParam._m0[74u].z * _863) + _2253) + (cbMtdParam._m0[81u].x * _682)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[74u].w * _863) + _2254) + (cbMtdParam._m0[81u].y * _683)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _2570);
    float _2580 = _707 * cbMtdParam._m0[70u].w;
    float _2585 = exp2(log2(isnan(0.001000000047497451305389404296875) ? _2580 : (isnan(_2580) ? 0.001000000047497451305389404296875 : max(_2580, 0.001000000047497451305389404296875))) * 3.5);
    float _3615 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (_2572.w * (((cbMtdParam._m0[71u].x - _1892) * _836) + _1892)) * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)));
    float _3626 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2588 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _2619 = ((cbMtdParam._m0[37u].y - cbMtdParam._m0[40u].y) * _800) + cbMtdParam._m0[40u].y;
    float _2620 = ((cbMtdParam._m0[37u].z - cbMtdParam._m0[40u].z) * _800) + cbMtdParam._m0[40u].z;
    float _2621 = ((cbMtdParam._m0[37u].w - cbMtdParam._m0[40u].w) * _800) + cbMtdParam._m0[40u].w;
    float _2628 = ((cbMtdParam._m0[38u].y - _2619) * _808) + _2619;
    float _2629 = ((cbMtdParam._m0[38u].z - _2620) * _808) + _2620;
    float _2630 = ((cbMtdParam._m0[38u].w - _2621) * _808) + _2621;
    float _2637 = ((cbMtdParam._m0[39u].y - _2628) * _822) + _2628;
    float _2638 = ((cbMtdParam._m0[39u].z - _2629) * _822) + _2629;
    float _2639 = ((cbMtdParam._m0[39u].w - _2630) * _822) + _2630;
    float _2679 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[36u].y) * _800) + cbMtdParam._m0[36u].y;
    float _2680 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[36u].z) * _800) + cbMtdParam._m0[36u].z;
    float _2681 = ((cbMtdParam._m0[10u].w - cbMtdParam._m0[36u].w) * _800) + cbMtdParam._m0[36u].w;
    float _2688 = ((cbMtdParam._m0[67u].y - _2679) * _808) + _2679;
    float _2689 = ((cbMtdParam._m0[67u].z - _2680) * _808) + _2680;
    float _2690 = ((cbMtdParam._m0[67u].w - _2681) * _808) + _2681;
    float _2697 = ((cbMtdParam._m0[11u].y - _2688) * _822) + _2688;
    float _2698 = ((cbMtdParam._m0[11u].z - _2689) * _822) + _2689;
    float _2699 = ((cbMtdParam._m0[11u].w - _2690) * _822) + _2690;
    float _2709 = (((cbMtdParam._m0[36u].y - _2697) * _836) + _2697) * _2572.x;
    float _2710 = (((cbMtdParam._m0[36u].z - _2698) * _836) + _2698) * _2572.y;
    float _2711 = (((cbMtdParam._m0[36u].w - _2699) * _836) + _2699) * _2572.z;
    float _3637 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _3648 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _3659 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2725 = exp2(log2(1.0 - dot(vec3(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)), isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)), isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) * 1.5);
    float _2735 = (((_2725 * (((cbMtdParam._m0[40u].y - _2637) * _836) + _2637)) - _2709) * _2144) + _2709;
    float _2736 = (((_2725 * (((cbMtdParam._m0[40u].z - _2638) * _836) + _2638)) - _2710) * _2144) + _2710;
    float _2737 = (((_2725 * (((cbMtdParam._m0[40u].w - _2639) * _836) + _2639)) - _2711) * _2144) + _2711;
    float _2747 = (((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) - _2490) * _2588) + _2490;
    float _2748 = (((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) - _2491) * _2588) + _2491;
    float _2749 = (((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) - _2492) * _2588) + _2492;
    float _2753 = exp2(_780 * 1.2400000095367431640625) + (exp2(_780 * 2.690000057220458984375) * 2.0);
    float _2755 = (_2753 * _840) + (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)));
    float _2757 = (_2753 * _841) + (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)));
    float _2759 = (_2753 * _842) + (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)));
    float _2786 = float(gl_LaunchIDEXT.x);
    float _2787 = float(gl_LaunchIDEXT.y);
    float _2790 = float(gl_LaunchSizeEXT.x);
    float _2804 = (((((_2787 + 0.5) / _90) * 1.2000000476837158203125) + cbMtdParam._m0[70u].z) * cbMtdParam._m0[72u].y) * (((1.0 - abs(((_2786 + 0.5) / _2790) + (-0.5))) * 1.2000000476837158203125) + cbMtdParam._m0[70u].z);
    float _3700 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2805 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _2812 = inversesqrt(dot(vec3(_698, _700, _701), vec3(_698, _700, _701)));
    float _2813 = _2812 * _698;
    float _2814 = _2812 * _700;
    float _2815 = _2812 * _701;
    float _2827 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _2828 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _2829 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _2830 = (-0.0) - _2524;
    float _2831 = (-0.0) - _2525;
    float _2832 = (-0.0) - _2526;
    float _2846 = fract(fract(sin(dot(vec2(_2786 / _2790, _2787 / _90), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _2858 = fract(fract(sin(dot(vec2((_2786 + 128.0) / _2790, (_2787 + 128.0) / _90), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _76._m0 = 1u;
    uvec4 _2868 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _2869 = _2868.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _2869, _2868.w, _2869, vec3(_2827, _2828, _2829), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _2931;
    float _2932;
    float _2933;
    if (_76._m0 == 0u)
    {
        float _2888 = g_sceneCB._m0[4u].x - _2524;
        float _2889 = g_sceneCB._m0[4u].y - _2525;
        float _2890 = g_sceneCB._m0[4u].z - _2526;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2898 = dot(vec3(_2813, _2814, _2815), vec3(g_sceneCB._m0[4u].xyz));
        float _3711 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _2902 = dot(vec3(_2813, _2814, _2815), vec3(_2830, _2831, _2832));
        float _3722 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_2888 * _2894, _2889 * _2894, _2890 * _2894));
        float _3733 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2915 = (exp2(log2(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2921 = (0.5 / ((_2901 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))))) * _2901;
        float _3744 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2923 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.31831014156341552734375;
        _2931 = (_2915 * g_sceneCB._m0[5u].x) * _2923;
        _2932 = (_2915 * g_sceneCB._m0[5u].y) * _2923;
        _2933 = (_2915 * g_sceneCB._m0[5u].z) * _2923;
    }
    else
    {
        _2931 = 0.0;
        _2932 = 0.0;
        _2933 = 0.0;
    }
    bool _2935 = abs(_2814) < 0.89999997615814208984375;
    float _2937 = float(_2935);
    float _2938 = _2935 ? 0.0 : 1.0;
    float _2941 = (_2937 * _2815) - (_2938 * _2814);
    float _2942 = _2938 * _2813;
    float _2944 = (-0.0) - (_2813 * _2937);
    float _2948 = inversesqrt(dot(vec3(_2941, _2942, _2944), vec3(_2941, _2942, _2944)));
    float _2949 = _2941 * _2948;
    float _2950 = _2942 * _2948;
    float _2951 = _2948 * _2944;
    float _2954 = (_2950 * _2815) - (_2951 * _2814);
    float _2957 = (_2951 * _2813) - (_2949 * _2815);
    float _2960 = (_2949 * _2814) - (_2950 * _2813);
    float _2962;
    float _2970;
    float _2961 = 0.0;
    uint _2963 = 0u;
    float _2967;
    bool _2969;
    for (;;)
    {
        _2967 = (float(_2963) + _2846) * 0.03125;
        _2969 = _2963 == 0u;
        float frontier_phi_55_pred;
        if (_2969)
        {
            frontier_phi_55_pred = 0.0;
        }
        else
        {
            float _3089;
            float _3090;
            uint _3092;
            _3089 = 0.0;
            _3090 = 0.5;
            _3092 = _2963;
            float _2971;
            for (;;)
            {
                _2971 = ((_3092 & 1u) != 0u) ? (_3090 + _3089) : _3089;
                uint _3093 = _3092 >> 1u;
                if (_3093 == 0u)
                {
                    break;
                }
                else
                {
                    _3089 = _2971;
                    _3090 *= 0.5;
                    _3092 = _3093;
                }
            }
            frontier_phi_55_pred = _2971;
        }
        _2970 = frontier_phi_55_pred;
        float _2972 = _2970 + _2858;
        float _2977 = sqrt(_2967);
        float _2978 = ((_2972 > 1.0) ? (_2972 + (-1.0)) : _2972) * 6.283185482025146484375;
        float _2981 = cos(_2978) * _2977;
        float _2983 = sin(_2978) * _2977;
        float _2985 = sqrt(1.0 - _2967);
        float _2998 = ((_2985 * _2813) + (_2981 * _2954)) + (_2983 * _2949);
        float _2999 = ((_2985 * _2814) + (_2981 * _2957)) + (_2983 * _2950);
        float _3000 = ((_2985 * _2815) + (_2981 * _2960)) + (_2983 * _2951);
        _75._m0 = 1u;
        uvec4 _3004 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _3005 = _3004.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _3005, _3004.w, _3005, vec3(_2827, _2828, _2829), 9.9999997473787516355514526367188e-05, vec3(_2998, _2999, _3000), 10000.0, 1);
        float _3011 = dot(vec3(_2813, _2814, _2815), vec3(_2998, _2999, _3000));
        float _3755 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3014 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        _2962 = ((float(_75._m0 == 0u) * _3014) / (_3014 * 0.3183098733425140380859375)) + _2961;
        uint _2964 = _2963 + 1u;
        if (_2964 == 32u)
        {
            break;
        }
        else
        {
            _2961 = _2962;
            _2963 = _2964;
            continue;
        }
    }
    float _3022 = _2962 * 0.009947183541953563690185546875;
    float _3027 = dot(vec3(_2524, _2525, _2526), vec3(_2813, _2814, _2815)) * 2.0;
    vec4 _3038 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_2524 - (_3027 * _2813), _2525 - (_3027 * _2814), _2526 - (_3027 * _2815)), 4.0);
    float _3043 = dot(vec3(_2830, _2831, _2832), vec3(_2813, _2814, _2815));
    float _3766 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
    float _3052 = (exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _3060 = (_2931 + (_2805 * (((exp2(log2(_2755) * cbMtdParam._m0[72u].x) - _2755) * _2144) + _2755))) + ((_3038.x * _3022) * _3052);
    float _3062 = (_2932 + (_2805 * (((exp2(log2(_2757) * cbMtdParam._m0[72u].x) - _2757) * _2144) + _2757))) + ((_3038.y * _3022) * _3052);
    float _3064 = (_2933 + (_2805 * (((exp2(log2(_2759) * cbMtdParam._m0[72u].x) - _2759) * _2144) + _2759))) + ((_3038.z * _3022) * _3052);
    float _3777 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
    float _3788 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
    float _3799 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
    bool _3072 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _3083;
    _3083.x = _3072 ? ((_691 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)));
    _3083.y = _3072 ? ((_694 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)));
    _3083.z = _3072 ? ((_697 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)));
    payload._m0 = _3083;
}


