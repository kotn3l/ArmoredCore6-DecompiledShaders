#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1429;

void main()
{
    float _73 = float(gl_LaunchSizeEXT.y);
    float _103 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _105 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _112 = sqrt(((_104 * _104) + (_103 * _103)) + (_105 * _105)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _73)))));
    uvec4 _123 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _124 = _123.y;
    uint _164;
    uint _166;
    uint _167;
    if (_123.x == 0u)
    {
        uint _132 = (_124 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _141 = uvec3(texelFetch(l_geomIndexBuffer, int(_132)).x, texelFetch(l_geomIndexBuffer, int(_132 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_132 + 2u)).x);
        _164 = _141.x;
        _166 = _141.y;
        _167 = _141.z;
    }
    else
    {
        uint _145 = uint(gl_PrimitiveID) * 6u;
        uint _147 = _145 & 4294967292u;
        uint _150 = (_124 + _147) >> 2u;
        uvec2 _157 = uvec2(texelFetch(l_geomIndexBuffer, int(_150)).x, texelFetch(l_geomIndexBuffer, int(_150 + 1u)).x);
        uint _158 = _157.x;
        uint _159 = _157.y;
        uint _161 = _158 >> 16u;
        uint _162 = _159 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_147 == _145)
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _158 & 65535u;
            frontier_phi_3_2_ladder_2 = _162;
        }
        else
        {
            frontier_phi_3_2_ladder = _162;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _159 >> 16u;
        }
        _164 = frontier_phi_3_2_ladder_1;
        _166 = frontier_phi_3_2_ladder;
        _167 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _171 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _172 = _171.x;
    uint _173 = _171.z;
    bool _174 = _173 != 0u;
    bool _176 = _123.w == 0u;
    bool _177 = _174 || _176;
    uint _178 = _172 * _164;
    uint _179 = _178 + 12u;
    uint _203;
    uint _204;
    uint _205;
    uint _206;
    if (_177)
    {
        uvec4 _182 = texelFetch(l_geomAttrib_0, int(_179 >> 2u));
        uint _183 = _182.x;
        _203 = _183 & 255u;
        _204 = (_183 >> 8u) & 255u;
        _205 = (_183 >> 16u) & 255u;
        _206 = 16u;
    }
    else
    {
        uint _191 = _179 >> 2u;
        uvec2 _197 = uvec2(texelFetch(l_geomAttrib_0, int(_191)).x, texelFetch(l_geomAttrib_0, int(_191 + 1u)).x);
        uint _198 = _197.x;
        _203 = _198 & 65535u;
        _204 = _198 >> 16u;
        _205 = _197.y & 65535u;
        _206 = 20u;
    }
    uvec4 _214 = texelFetch(l_geomAttrib_0, int((_206 + _178) >> 2u));
    uint _215 = _214.x;
    bool _229 = _173 == 0u;
    uint _230;
    if (_229)
    {
        _230 = _206 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_176)
        {
            frontier_phi_9_10_ladder = _206 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _206 + 12u;
        }
        _230 = frontier_phi_9_10_ladder;
    }
    uvec4 _238 = texelFetch(l_geomAttrib_0, int(((_178 + 4u) + (_174 ? (_230 + 4u) : _230)) >> 2u));
    uint _239 = _238.x;
    float _243 = float(int(uint(int(_239 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_239) >> int(16u))));
    uint _245 = _172 * _166;
    uint _246 = _245 + 12u;
    uint _267;
    uint _268;
    uint _269;
    uint _270;
    if (_177)
    {
        uvec4 _248 = texelFetch(l_geomAttrib_0, int(_246 >> 2u));
        uint _249 = _248.x;
        _267 = _249 & 255u;
        _268 = (_249 >> 8u) & 255u;
        _269 = (_249 >> 16u) & 255u;
        _270 = 16u;
    }
    else
    {
        uint _255 = _246 >> 2u;
        uvec2 _261 = uvec2(texelFetch(l_geomAttrib_0, int(_255)).x, texelFetch(l_geomAttrib_0, int(_255 + 1u)).x);
        uint _262 = _261.x;
        _267 = _262 & 65535u;
        _268 = _262 >> 16u;
        _269 = _261.y & 65535u;
        _270 = 20u;
    }
    uvec4 _276 = texelFetch(l_geomAttrib_0, int((_270 + _245) >> 2u));
    uint _277 = _276.x;
    uint _289;
    if (_229)
    {
        _289 = _270 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_176)
        {
            frontier_phi_16_17_ladder = _270 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _270 + 12u;
        }
        _289 = frontier_phi_16_17_ladder;
    }
    uvec4 _297 = texelFetch(l_geomAttrib_0, int(((_245 + 4u) + (_174 ? (_289 + 4u) : _289)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    uint _304 = _172 * _167;
    uint _305 = _304 + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_177)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 16u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 20u;
    }
    uvec4 _335 = texelFetch(l_geomAttrib_0, int((_329 + _304) >> 2u));
    uint _336 = _335.x;
    uint _348;
    if (_229)
    {
        _348 = _329 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_176)
        {
            frontier_phi_23_24_ladder = _329 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 12u;
        }
        _348 = frontier_phi_23_24_ladder;
    }
    uvec4 _356 = texelFetch(l_geomAttrib_0, int(((_304 + 4u) + (_174 ? (_348 + 4u) : _348)) >> 2u));
    uint _357 = _356.x;
    float _361 = float(int(uint(int(_357 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_357) >> int(16u))));
    bool _364 = _123.z == 0u;
    float _400;
    float _401;
    float _402;
    if (_364)
    {
        uint _367 = _164 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _164 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_364)
    {
        uint _405 = _166 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _166 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _476;
    float _477;
    float _478;
    if (_364)
    {
        uint _443 = _167 * 3u;
        uvec3 _452 = uvec3(texelFetch(l_geomPositionBuffer, int(_443)).x, texelFetch(l_geomPositionBuffer, int(_443 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_443 + 2u)).x);
        _476 = uintBitsToFloat(_452.x);
        _477 = uintBitsToFloat(_452.y);
        _478 = uintBitsToFloat(_452.z);
    }
    else
    {
        uint _460 = _167 * 2u;
        uvec2 _466 = uvec2(texelFetch(l_geomPositionBuffer, int(_460)).x, texelFetch(l_geomPositionBuffer, int(_460 + 1u)).x);
        uint _467 = _466.x;
        _476 = unpackHalf2x16(_467).x;
        _477 = unpackHalf2x16(_467 >> 16u).x;
        _478 = unpackHalf2x16(_466.y).x;
    }
    float _481 = (1.0 - hit._m0.x) - hit._m0.y;
    float _515 = (_302 - _243) * 0.00048828125;
    float _517 = (_303 - _244) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_302 * hit._m0.x) + (_243 * _481)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_303 * hit._m0.x) + (_244 * _481)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_203) * _481) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_204) * _481) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_205) * _481) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _595 = ((((float(_215 & 255u) * _481) + (-127.0)) + (float(_277 & 255u) * hit._m0.x)) + (float(_336 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_215 >> 8u) & 255u) * _481) + (-127.0)) + (float((_277 >> 8u) & 255u) * hit._m0.x)) + (float((_336 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_215 >> 16u) & 255u) * _481) + (-127.0)) + (float((_277 >> 16u) & 255u) * hit._m0.x)) + (float((_336 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float(_215 >> 24u) * _481) + (-127.0)) + (float(_277 >> 24u) * hit._m0.x)) + (float(_336 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _608 = ((_596 * _582) - (_597 * _581)) * _598;
    float _609 = ((_597 * _579) - (_595 * _582)) * _598;
    float _610 = ((_595 * _581) - (_596 * _579)) * _598;
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _614 * _608;
    float _616 = _614 * _609;
    float _617 = _614 * _610;
    uvec2 _634 = uvec2(textureSize(M_AMSN_Snow_snp_0_Texture2D_1, int(0u)));
    bool _639 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _692;
    if (_639)
    {
        float _650 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _656 = (_566 * _551) - (_563 * _554);
        float _659 = (_560 * _554) - (_566 * _548);
        float _662 = (_563 * _548) - (_560 * _551);
        float _689 = ((log2((((float(_634.y) * 0.5) * float(_634.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_659 * _659) + (_662 * _662)) + (_656 * _656)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_650 * gl_WorldRayDirectionEXT.x, _650 * gl_WorldRayDirectionEXT.y, _650 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    }
    else
    {
        _692 = 0.0;
    }
    vec4 _696 = textureLod(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _567) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _568) + cbTextureTilingScale._m0[1u].w), _692);
    float _700 = _696.z;
    float _703 = (_696.x * 2.0) + (-1.0);
    float _705 = (_696.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _1516 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0))));
    float _714 = fma(_711, _579, fma(_705, _595, _703 * _615));
    float _717 = fma(_711, _581, fma(_705, _596, _703 * _616));
    float _720 = fma(_711, _582, fma(_705, _597, _703 * _617));
    float _729 = exp2(log2(inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720))) * _717) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _1527 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uvec2 _742 = uvec2(textureSize(M_AMSN_Snow_snp_0_Texture2D_0, int(0u)));
    float _793;
    if (_639)
    {
        float _753 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _759 = (_566 * _551) - (_563 * _554);
        float _762 = (_560 * _554) - (_566 * _548);
        float _765 = (_563 * _548) - (_560 * _551);
        float _791 = ((log2((((float(_742.y) * 0.5) * float(_742.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_762 * _762) + (_765 * _765)) + (_759 * _759)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_753 * gl_WorldRayDirectionEXT.x, _753 * gl_WorldRayDirectionEXT.y, _753 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _793 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    }
    else
    {
        _793 = 0.0;
    }
    vec4 _796 = textureLod(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _567) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _568) + cbTextureTilingScale._m0[0u].w), _793);
    uvec2 _812 = uvec2(textureSize(M_AMSN_Snow_snp_0_Texture2D_2, int(0u)));
    float _863;
    if (_639)
    {
        float _823 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _829 = (_566 * _551) - (_563 * _554);
        float _832 = (_560 * _554) - (_566 * _548);
        float _835 = (_563 * _548) - (_560 * _551);
        float _861 = ((log2((((float(_812.y) * 0.5) * float(_812.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_832 * _832) + (_835 * _835)) + (_829 * _829)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_823 * gl_WorldRayDirectionEXT.x, _823 * gl_WorldRayDirectionEXT.y, _823 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _863 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    }
    else
    {
        _863 = 0.0;
    }
    vec4 _865 = textureLod(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _567) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _568) + cbTextureTilingScale._m0[2u].w), _863);
    float _867 = _865.x;
    float _868 = _865.y;
    float _869 = _865.z;
    float _876 = ((_796.x - _867) * _730) + _867;
    float _877 = ((_796.y - _868) * _730) + _868;
    float _878 = ((_796.z - _869) * _730) + _869;
    uvec2 _890 = uvec2(textureSize(M_AMSN_Snow_snp_0_Texture2D_4, int(0u)));
    float _941;
    if (_639)
    {
        float _901 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _907 = (_566 * _551) - (_563 * _554);
        float _910 = (_560 * _554) - (_566 * _548);
        float _913 = (_563 * _548) - (_560 * _551);
        float _939 = ((log2((((float(_890.y) * 0.5) * float(_890.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_910 * _910) + (_913 * _913)) + (_907 * _907)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_901 * gl_WorldRayDirectionEXT.x, _901 * gl_WorldRayDirectionEXT.y, _901 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _941 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    }
    else
    {
        _941 = 0.0;
    }
    vec4 _944 = textureLod(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _567) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _568) + cbTextureTilingScale._m0[4u].w), _941);
    float _946 = _944.x;
    float _948 = _946 - (_946 * _730);
    uvec2 _960 = uvec2(textureSize(M_AMSN_Snow_snp_0_Texture2D_3, int(0u)));
    float _964 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _965 = _964 * gl_WorldRayDirectionEXT.x;
    float _966 = _964 * gl_WorldRayDirectionEXT.y;
    float _967 = _964 * gl_WorldRayDirectionEXT.z;
    float _1011;
    if (_639)
    {
        float _977 = (_566 * _551) - (_563 * _554);
        float _980 = (_560 * _554) - (_566 * _548);
        float _983 = (_563 * _548) - (_560 * _551);
        float _1009 = ((log2((((float(_960.y) * 0.5) * float(_960.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_980 * _980) + (_983 * _983)) + (_977 * _977)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_965, _966, _967), vec3(_579, _581, _582))));
        _1011 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    }
    else
    {
        _1011 = 0.0;
    }
    vec4 _1013 = textureLod(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _567) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _568) + cbTextureTilingScale._m0[3u].w), _1011);
    float _1020 = (_1013.x * 2.0) + (-1.0);
    float _1021 = (_1013.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _1558 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = ((_1013.z - _700) * _730) + _700;
    float _1037 = ((_1020 - _703) * _730) + _703;
    float _1038 = ((_1021 - _705) * _730) + _705;
    float _1039 = ((sqrt(1.0 - (isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0)))) - _711) * _730) + _711;
    float _1042 = fma(_1039, _579, fma(_1038, _595, _1037 * _615));
    float _1045 = fma(_1039, _581, fma(_1038, _596, _1037 * _616));
    float _1048 = fma(_1039, _582, fma(_1038, _597, _1037 * _617));
    float _1052 = inversesqrt(dot(vec3(_1042, _1045, _1048), vec3(_1042, _1045, _1048)));
    float _1053 = _1052 * _1042;
    float _1054 = _1052 * _1045;
    float _1055 = _1052 * _1048;
    float _1067 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1068 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1069 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1070 = (-0.0) - _965;
    float _1072 = (-0.0) - _966;
    float _1073 = (-0.0) - _967;
    float _1079 = float(gl_LaunchIDEXT.x);
    float _1080 = float(gl_LaunchIDEXT.y);
    float _1083 = float(gl_LaunchSizeEXT.x);
    float _1097 = fract(fract(sin(dot(vec2(_1079 / _1083, _1080 / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1110 = fract(fract(sin(dot(vec2((_1079 + 128.0) / _1083, (_1080 + 128.0) / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1111 = 1.0 - _948;
    float _1112 = _1111 * _876;
    float _1113 = _1111 * _877;
    float _1114 = _1111 * _878;
    float _1119 = _948 * (_876 + (-0.039999999105930328369140625));
    float _1120 = _948 * (_877 + (-0.039999999105930328369140625));
    float _1121 = _948 * (_878 + (-0.039999999105930328369140625));
    float _1122 = _1119 + 0.039999999105930328369140625;
    float _1124 = _1120 + 0.039999999105930328369140625;
    float _1125 = _1121 + 0.039999999105930328369140625;
    _65._m0 = 1u;
    uvec4 _1135 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1136 = _1135.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1136, _1135.w, _1136, vec3(_1067, _1068, _1069), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (_65._m0 == 0u)
    {
        float _1157 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1053, _1054, _1055));
        float _1569 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1160 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        float _1179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1030) * 0.949999988079071044921875);
        float _1180 = _1179 * _1179;
        float _1181 = g_sceneCB._m0[4u].x - _965;
        float _1182 = g_sceneCB._m0[4u].y - _966;
        float _1183 = g_sceneCB._m0[4u].z - _967;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1188 = _1187 * _1181;
        float _1189 = _1187 * _1182;
        float _1190 = _1187 * _1183;
        float _1191 = dot(vec3(_1053, _1054, _1055), vec3(g_sceneCB._m0[4u].xyz));
        float _1580 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1194 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        float _1195 = dot(vec3(_1053, _1054, _1055), vec3(_1070, _1072, _1073));
        float _1591 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1198 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        float _1199 = dot(vec3(_1053, _1054, _1055), vec3(_1188, _1189, _1190));
        float _1602 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1202 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        float _1203 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1188, _1189, _1190));
        float _1613 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1180 * _1180;
        float _1211 = ((_1202 * _1202) * (_1207 + (-1.0))) + 1.0;
        float _1220 = exp2(log2(1.0 - (isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0)))) * 5.0);
        float _1231 = 1.0 - _1180;
        float _1242 = (0.5 / (((_1198 * ((_1194 * _1231) + _1180)) + 9.9999999392252902907785028219223e-09) + (((_1198 * _1231) + _1180) * _1194))) * _1194;
        float _1624 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1244 = (isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0))) * (_1207 / ((_1211 * _1211) * 3.141590118408203125));
        _1251 = ((_1112 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1160;
        _1252 = ((_1113 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1160;
        _1253 = ((_1114 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1160;
        _1254 = (((_1220 * (0.959999978542327880859375 - _1119)) + _1122) * g_sceneCB._m0[5u].x) * _1244;
        _1255 = (((_1220 * (0.959999978542327880859375 - _1120)) + _1124) * g_sceneCB._m0[5u].y) * _1244;
        _1256 = (((_1220 * (0.959999978542327880859375 - _1121)) + _1125) * g_sceneCB._m0[5u].z) * _1244;
    }
    else
    {
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    bool _1258 = abs(_1054) < 0.89999997615814208984375;
    float _1260 = float(_1258);
    float _1261 = _1258 ? 0.0 : 1.0;
    float _1264 = (_1260 * _1055) - (_1261 * _1054);
    float _1265 = _1261 * _1053;
    float _1267 = (-0.0) - (_1053 * _1260);
    float _1271 = inversesqrt(dot(vec3(_1264, _1265, _1267), vec3(_1264, _1265, _1267)));
    float _1272 = _1264 * _1271;
    float _1273 = _1265 * _1271;
    float _1274 = _1271 * _1267;
    float _1277 = (_1273 * _1055) - (_1274 * _1054);
    float _1280 = (_1274 * _1053) - (_1272 * _1055);
    float _1283 = (_1272 * _1054) - (_1273 * _1053);
    float _1285;
    float _1293;
    float _1284 = 0.0;
    uint _1286 = 0u;
    float _1290;
    bool _1292;
    for (;;)
    {
        _1290 = (float(_1286) + _1097) * 0.03125;
        _1292 = _1286 == 0u;
        float frontier_phi_49_pred;
        if (_1292)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1434;
            float _1435;
            uint _1437;
            _1434 = 0.0;
            _1435 = 0.5;
            _1437 = _1286;
            float _1294;
            for (;;)
            {
                _1294 = ((_1437 & 1u) != 0u) ? (_1435 + _1434) : _1434;
                uint _1438 = _1437 >> 1u;
                if (_1438 == 0u)
                {
                    break;
                }
                else
                {
                    _1434 = _1294;
                    _1435 *= 0.5;
                    _1437 = _1438;
                }
            }
            frontier_phi_49_pred = _1294;
        }
        _1293 = frontier_phi_49_pred;
        float _1295 = _1293 + _1110;
        float _1299 = sqrt(_1290);
        float _1300 = ((_1295 > 1.0) ? (_1295 + (-1.0)) : _1295) * 6.283185482025146484375;
        float _1303 = cos(_1300) * _1299;
        float _1305 = sin(_1300) * _1299;
        float _1307 = sqrt(1.0 - _1290);
        float _1320 = ((_1307 * _1053) + (_1303 * _1277)) + (_1305 * _1272);
        float _1321 = ((_1307 * _1054) + (_1303 * _1280)) + (_1305 * _1273);
        float _1322 = ((_1307 * _1055) + (_1303 * _1283)) + (_1305 * _1274);
        _64._m0 = 1u;
        uvec4 _1326 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1327 = _1326.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1327, _1326.w, _1327, vec3(_1067, _1068, _1069), 9.9999997473787516355514526367188e-05, vec3(_1320, _1321, _1322), 10000.0, 1);
        float _1333 = dot(vec3(_1053, _1054, _1055), vec3(_1320, _1321, _1322));
        float _1635 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1336 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1285 = ((float(_64._m0 == 0u) * _1336) / (_1336 * 0.3183098733425140380859375)) + _1284;
        uint _1287 = _1286 + 1u;
        if (_1287 == 32u)
        {
            break;
        }
        else
        {
            _1284 = _1285;
            _1286 = _1287;
            continue;
        }
    }
    float _1344 = _1285 * 0.009947183541953563690185546875;
    float _1349 = dot(vec3(_965, _966, _967), vec3(_1053, _1054, _1055)) * 2.0;
    vec4 _1363 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_965 - (_1349 * _1053), _966 - (_1349 * _1054), _967 - (_1349 * _1055)), 4.0 - (_1030 * 4.0));
    float _1368 = dot(vec3(_1070, _1072, _1073), vec3(_1053, _1054, _1055));
    float _1646 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _1378 = exp2(log2(1.0 - (isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0)))) * 5.0);
    vec4 _1390 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1053, _1054, _1055), 0.0);
    float _1401 = (_1254 + _1251) + (((_1390.x * _1112) + (((_1378 * (0.959999978542327880859375 - _1119)) + _1122) * _1363.x)) * _1344);
    float _1405 = (_1255 + _1252) + (((_1390.y * _1113) + (((_1378 * (0.959999978542327880859375 - _1120)) + _1124) * _1363.y)) * _1344);
    float _1409 = (_1256 + _1253) + (((_1390.z * _1114) + (((_1378 * (0.959999978542327880859375 - _1121)) + _1125) * _1363.z)) * _1344);
    float _1657 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1668 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1679 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    bool _1417 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1428;
    _1428.x = _1417 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0)));
    _1428.y = _1417 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0)));
    _1428.z = _1417 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0)));
    payload._m0 = _1428;
}


