#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1456;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _157 & 65535u;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _158 >> 16u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        _163 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
        _166 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    bool _228 = _172 == 0u;
    uint _229;
    if (_228)
    {
        _229 = _205 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 12u;
        }
        _229 = frontier_phi_9_10_ladder;
    }
    uint _233 = _173 ? (_229 + 4u) : _229;
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + _233) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _251 = _171 * _165;
    uint _252 = _251 + 12u;
    uint _273;
    uint _274;
    uint _275;
    uint _276;
    if (_176)
    {
        uvec4 _254 = texelFetch(l_geomAttrib_0, int(_252 >> 2u));
        uint _255 = _254.x;
        _273 = _255 & 255u;
        _274 = (_255 >> 8u) & 255u;
        _275 = (_255 >> 16u) & 255u;
        _276 = 16u;
    }
    else
    {
        uint _261 = _252 >> 2u;
        uvec2 _267 = uvec2(texelFetch(l_geomAttrib_0, int(_261)).x, texelFetch(l_geomAttrib_0, int(_261 + 1u)).x);
        uint _268 = _267.x;
        _273 = _268 & 65535u;
        _274 = _268 >> 16u;
        _275 = _267.y & 65535u;
        _276 = 20u;
    }
    uvec4 _282 = texelFetch(l_geomAttrib_0, int((_276 + _251) >> 2u));
    uint _283 = _282.x;
    uint _295;
    if (_228)
    {
        _295 = _276 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _276 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _276 + 12u;
        }
        _295 = frontier_phi_16_17_ladder;
    }
    uint _299 = _173 ? (_295 + 4u) : _295;
    uvec4 _303 = texelFetch(l_geomAttrib_0, int(((_251 + 4u) + _299) >> 2u));
    uint _304 = _303.x;
    float _308 = float(int(uint(int(_304 << 16u) >> int(16u))));
    float _309 = float(int(uint(int(_304) >> int(16u))));
    uint _317 = _171 * _166;
    uint _318 = _317 + 12u;
    uint _339;
    uint _340;
    uint _341;
    uint _342;
    if (_176)
    {
        uvec4 _320 = texelFetch(l_geomAttrib_0, int(_318 >> 2u));
        uint _321 = _320.x;
        _339 = _321 & 255u;
        _340 = (_321 >> 8u) & 255u;
        _341 = (_321 >> 16u) & 255u;
        _342 = 16u;
    }
    else
    {
        uint _327 = _318 >> 2u;
        uvec2 _333 = uvec2(texelFetch(l_geomAttrib_0, int(_327)).x, texelFetch(l_geomAttrib_0, int(_327 + 1u)).x);
        uint _334 = _333.x;
        _339 = _334 & 65535u;
        _340 = _334 >> 16u;
        _341 = _333.y & 65535u;
        _342 = 20u;
    }
    uvec4 _348 = texelFetch(l_geomAttrib_0, int((_342 + _317) >> 2u));
    uint _349 = _348.x;
    uint _361;
    if (_228)
    {
        _361 = _342 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _342 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _342 + 12u;
        }
        _361 = frontier_phi_23_24_ladder;
    }
    uint _365 = _173 ? (_361 + 4u) : _361;
    uvec4 _369 = texelFetch(l_geomAttrib_0, int(((_317 + 4u) + _365) >> 2u));
    uint _370 = _369.x;
    float _374 = float(int(uint(int(_370 << 16u) >> int(16u))));
    float _375 = float(int(uint(int(_370) >> int(16u))));
    bool _384 = _122.z == 0u;
    float _420;
    float _421;
    float _422;
    if (_384)
    {
        uint _387 = _163 * 3u;
        uvec3 _396 = uvec3(texelFetch(l_geomPositionBuffer, int(_387)).x, texelFetch(l_geomPositionBuffer, int(_387 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_387 + 2u)).x);
        _420 = uintBitsToFloat(_396.x);
        _421 = uintBitsToFloat(_396.y);
        _422 = uintBitsToFloat(_396.z);
    }
    else
    {
        uint _404 = _163 * 2u;
        uvec2 _410 = uvec2(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x);
        uint _411 = _410.x;
        _420 = unpackHalf2x16(_411).x;
        _421 = unpackHalf2x16(_411 >> 16u).x;
        _422 = unpackHalf2x16(_410.y).x;
    }
    float _458;
    float _459;
    float _460;
    if (_384)
    {
        uint _425 = _165 * 3u;
        uvec3 _434 = uvec3(texelFetch(l_geomPositionBuffer, int(_425)).x, texelFetch(l_geomPositionBuffer, int(_425 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_425 + 2u)).x);
        _458 = uintBitsToFloat(_434.x);
        _459 = uintBitsToFloat(_434.y);
        _460 = uintBitsToFloat(_434.z);
    }
    else
    {
        uint _442 = _165 * 2u;
        uvec2 _448 = uvec2(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x);
        uint _449 = _448.x;
        _458 = unpackHalf2x16(_449).x;
        _459 = unpackHalf2x16(_449 >> 16u).x;
        _460 = unpackHalf2x16(_448.y).x;
    }
    float _496;
    float _497;
    float _498;
    if (_384)
    {
        uint _463 = _166 * 3u;
        uvec3 _472 = uvec3(texelFetch(l_geomPositionBuffer, int(_463)).x, texelFetch(l_geomPositionBuffer, int(_463 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_463 + 2u)).x);
        _496 = uintBitsToFloat(_472.x);
        _497 = uintBitsToFloat(_472.y);
        _498 = uintBitsToFloat(_472.z);
    }
    else
    {
        uint _480 = _166 * 2u;
        uvec2 _486 = uvec2(texelFetch(l_geomPositionBuffer, int(_480)).x, texelFetch(l_geomPositionBuffer, int(_480 + 1u)).x);
        uint _487 = _486.x;
        _496 = unpackHalf2x16(_487).x;
        _497 = unpackHalf2x16(_487 >> 16u).x;
        _498 = unpackHalf2x16(_486.y).x;
    }
    float _501 = (1.0 - hit._m0.x) - hit._m0.y;
    float _542 = (_308 - _242) * 0.00048828125;
    float _544 = (_309 - _243) * 0.00048828125;
    float _547 = (_374 - _242) * 0.00048828125;
    float _548 = (_375 - _243) * 0.00048828125;
    float _570 = _458 - _420;
    float _571 = _459 - _421;
    float _572 = _460 - _422;
    float _575 = fma(_572, gl_ObjectToWorldEXT[2u].x, fma(_571, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _570));
    float _578 = fma(_572, gl_ObjectToWorldEXT[2u].y, fma(_571, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _570));
    float _581 = fma(_572, gl_ObjectToWorldEXT[2u].z, fma(_571, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _570));
    float _582 = _496 - _420;
    float _583 = _497 - _421;
    float _584 = _498 - _422;
    float _587 = fma(_584, gl_ObjectToWorldEXT[2u].x, fma(_583, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _582));
    float _590 = fma(_584, gl_ObjectToWorldEXT[2u].y, fma(_583, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _582));
    float _593 = fma(_584, gl_ObjectToWorldEXT[2u].z, fma(_583, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _582));
    float _594 = (((_308 * hit._m0.x) + (_242 * _501)) + (_374 * hit._m0.y)) * 0.00048828125;
    float _595 = (((_309 * hit._m0.x) + (_243 * _501)) + (_375 * hit._m0.y)) * 0.00048828125;
    float _599 = (((float(_202) * _501) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_339) * hit._m0.y);
    float _602 = (((float(_203) * _501) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_340) * hit._m0.y);
    float _605 = (((float(_204) * _501) + (-127.0)) + (float(_275) * hit._m0.x)) + (float(_341) * hit._m0.y);
    float _606 = _599 * 0.0078740157186985015869140625;
    float _608 = _602 * 0.0078740157186985015869140625;
    float _609 = _605 * 0.0078740157186985015869140625;
    float _622 = ((((float(_214 & 255u) * _501) + (-127.0)) + (float(_283 & 255u) * hit._m0.x)) + (float(_349 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _623 = ((((float((_214 >> 8u) & 255u) * _501) + (-127.0)) + (float((_283 >> 8u) & 255u) * hit._m0.x)) + (float((_349 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _624 = ((((float((_214 >> 16u) & 255u) * _501) + (-127.0)) + (float((_283 >> 16u) & 255u) * hit._m0.x)) + (float((_349 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _625 = ((((float(_214 >> 24u) * _501) + (-127.0)) + (float(_283 >> 24u) * hit._m0.x)) + (float(_349 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _635 = ((_623 * _609) - (_624 * _608)) * _625;
    float _636 = ((_624 * _606) - (_622 * _609)) * _625;
    float _637 = ((_622 * _608) - (_623 * _606)) * _625;
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    uvec2 _662 = uvec2(textureSize(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, int(0u)));
    bool _667 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _720;
    if (_667)
    {
        float _678 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _684 = (_593 * _578) - (_590 * _581);
        float _687 = (_587 * _581) - (_593 * _575);
        float _690 = (_590 * _575) - (_587 * _578);
        float _717 = ((log2((((float(_662.y) * 0.5) * float(_662.x)) * abs((_548 * _542) - (_547 * _544))) / (sqrt(((_687 * _687) + (_690 * _690)) + (_684 * _684)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_678 * gl_WorldRayDirectionEXT.x, _678 * gl_WorldRayDirectionEXT.y, _678 * gl_WorldRayDirectionEXT.z), vec3(_606, _608, _609))));
        _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    }
    else
    {
        _720 = 0.0;
    }
    vec4 _724 = textureLod(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _594) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _595) + cbTextureTilingScale._m0[2u].w), _720);
    float _726 = _724.x;
    float _731 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _737 = fract(abs(_731));
    float _744 = (((((float(texelFetch(l_geomAttrib_0, int(((_251 + 8u) + _299) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_177 + 8u) + _233) >> 2u)).x & 255u) * _501)) + (float(texelFetch(l_geomAttrib_0, int(((_317 + 8u) + _365) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) + 0.5) - ((((_731 >= ((-0.0) - _731)) ? _737 : ((-0.0) - _737)) * 3.0) - _726);
    float _745 = ceil(_744);
    float _1541 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    float _751 = sin(cbMtdParam._m0[12u].y);
    float _752 = cos(cbMtdParam._m0[12u].y);
    float _753 = _594 - cbMtdParam._m0[12u].x;
    float _754 = _595 - cbMtdParam._m0[12u].x;
    uvec2 _773 = uvec2(textureSize(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, int(0u)));
    float _824;
    if (_667)
    {
        float _784 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _790 = (_593 * _578) - (_590 * _581);
        float _793 = (_587 * _581) - (_593 * _575);
        float _796 = (_590 * _575) - (_587 * _578);
        float _822 = ((log2((((float(_773.y) * 0.5) * float(_773.x)) * abs((_548 * _542) - (_547 * _544))) / (sqrt(((_793 * _793) + (_796 * _796)) + (_790 * _790)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_784 * gl_WorldRayDirectionEXT.x, _784 * gl_WorldRayDirectionEXT.y, _784 * gl_WorldRayDirectionEXT.z), vec3(_606, _608, _609))));
        _824 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    }
    else
    {
        _824 = 0.0;
    }
    vec4 _827 = textureLod(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_754, (-0.0) - _751, _752 * _753) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_754, _752, _753 * _751) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w), _824);
    float _838 = cbMtdParam._m0[9u].x * _827.x;
    float _839 = cbMtdParam._m0[9u].y * _827.y;
    float _840 = cbMtdParam._m0[9u].z * _827.z;
    float _847 = ((_838 - cbMtdParam._m0[11u].x) * _746) + cbMtdParam._m0[11u].x;
    float _848 = ((_839 - cbMtdParam._m0[11u].y) * _746) + cbMtdParam._m0[11u].y;
    float _849 = ((_840 - cbMtdParam._m0[11u].z) * _746) + cbMtdParam._m0[11u].z;
    float _853 = abs(cbMtdParam._m0[12u].z * _744);
    float _857 = (((_853 * cbMtdParam._m0[12u].w) - _726) * _853) + _726;
    float _1557 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uvec2 _870 = uvec2(textureSize(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, int(0u)));
    float _921;
    if (_667)
    {
        float _881 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _887 = (_593 * _578) - (_590 * _581);
        float _890 = (_587 * _581) - (_593 * _575);
        float _893 = (_590 * _575) - (_587 * _578);
        float _919 = ((log2((((float(_870.y) * 0.5) * float(_870.x)) * abs((_548 * _542) - (_547 * _544))) / (sqrt(((_890 * _890) + (_893 * _893)) + (_887 * _887)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_881 * gl_WorldRayDirectionEXT.x, _881 * gl_WorldRayDirectionEXT.y, _881 * gl_WorldRayDirectionEXT.z), vec3(_606, _608, _609))));
        _921 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    }
    else
    {
        _921 = 0.0;
    }
    vec4 _923 = textureLod(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _594) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _595) + cbTextureTilingScale._m0[3u].w), _921);
    float _934 = cbMtdParam._m0[10u].x * _923.x;
    float _935 = cbMtdParam._m0[10u].y * _923.y;
    float _936 = cbMtdParam._m0[10u].z * _923.z;
    float _937 = _934 * _858;
    float _938 = _935 * _858;
    float _939 = _936 * _858;
    float _946 = exp2(log2(_858) * cbMtdParam._m0[13u].x);
    float _956 = (_946 * ((_934 - _847) - _937)) + _847;
    float _957 = (_946 * ((_935 - _848) - _938)) + _848;
    float _958 = (_946 * ((_936 - _849) - _939)) + _849;
    uvec2 _972 = uvec2(textureSize(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, int(0u)));
    float _976 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _977 = _976 * gl_WorldRayDirectionEXT.x;
    float _978 = _976 * gl_WorldRayDirectionEXT.y;
    float _979 = _976 * gl_WorldRayDirectionEXT.z;
    float _1023;
    if (_667)
    {
        float _989 = (_593 * _578) - (_590 * _581);
        float _992 = (_587 * _581) - (_593 * _575);
        float _995 = (_590 * _575) - (_587 * _578);
        float _1021 = ((log2((((float(_972.y) * 0.5) * float(_972.x)) * abs((_548 * _542) - (_547 * _544))) / (sqrt(((_992 * _992) + (_995 * _995)) + (_989 * _989)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_977, _978, _979), vec3(_606, _608, _609))));
        _1023 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    }
    else
    {
        _1023 = 0.0;
    }
    vec4 _1026 = textureLod(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * _594) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _595) + cbTextureTilingScale._m0[0u].w), _1023);
    float _1033 = (_1026.x * 2.0) + (-1.0);
    float _1035 = (_1026.y * 2.0) + (-1.0);
    float _1036 = dot(vec2(_1033, _1035), vec2(_1033, _1035));
    float _1578 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1041 = sqrt(1.0 - (isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0))));
    float _1045 = ((cbMtdParam._m0[13u].y + _1026.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _1046 = _838 * _746;
    float _1047 = _839 * _746;
    float _1048 = _840 * _746;
    float _1067 = fma(_1041, _606, fma(_1035, _622, (_641 * _635) * _1033));
    float _1070 = fma(_1041, _608, fma(_1035, _623, (_641 * _636) * _1033));
    float _1073 = fma(_1041, _609, fma(_1035, _624, (_641 * _637) * _1033));
    float _1077 = inversesqrt(dot(vec3(_1067, _1070, _1073), vec3(_1067, _1070, _1073)));
    float _1078 = _1077 * _1067;
    float _1079 = _1077 * _1070;
    float _1080 = _1077 * _1073;
    float _1092 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1093 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1094 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1095 = (-0.0) - _977;
    float _1096 = (-0.0) - _978;
    float _1097 = (-0.0) - _979;
    float _1103 = float(gl_LaunchIDEXT.x);
    float _1104 = float(gl_LaunchIDEXT.y);
    float _1107 = float(gl_LaunchSizeEXT.x);
    float _1121 = fract(fract(sin(dot(vec2(_1103 / _1107, _1104 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1134 = fract(fract(sin(dot(vec2((_1103 + 128.0) / _1107, (_1104 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1135 = 1.0 - cbMtdParam._m0[14u].x;
    float _1136 = _1135 * _956;
    float _1137 = _1135 * _957;
    float _1138 = _1135 * _958;
    float _1143 = cbMtdParam._m0[14u].x * (_956 + (-0.039999999105930328369140625));
    float _1144 = cbMtdParam._m0[14u].x * (_957 + (-0.039999999105930328369140625));
    float _1145 = (_958 + (-0.039999999105930328369140625)) * cbMtdParam._m0[14u].x;
    float _1146 = _1143 + 0.039999999105930328369140625;
    float _1148 = _1144 + 0.039999999105930328369140625;
    float _1149 = _1145 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _1159 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1160 = _1159.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1160, _1159.w, _1160, vec3(_1092, _1093, _1094), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (_64._m0 == 0u)
    {
        float _1181 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1078, _1079, _1080));
        float _1589 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1184 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        float _1203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1045) * 0.949999988079071044921875);
        float _1204 = _1203 * _1203;
        float _1205 = g_sceneCB._m0[4u].x - _977;
        float _1206 = g_sceneCB._m0[4u].y - _978;
        float _1207 = g_sceneCB._m0[4u].z - _979;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1212 = _1211 * _1205;
        float _1213 = _1211 * _1206;
        float _1214 = _1211 * _1207;
        float _1215 = dot(vec3(_1078, _1079, _1080), vec3(g_sceneCB._m0[4u].xyz));
        float _1600 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1218 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        float _1219 = dot(vec3(_1078, _1079, _1080), vec3(_1095, _1096, _1097));
        float _1611 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1222 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        float _1223 = dot(vec3(_1078, _1079, _1080), vec3(_1212, _1213, _1214));
        float _1622 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1226 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        float _1227 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1212, _1213, _1214));
        float _1633 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1204 * _1204;
        float _1235 = ((_1226 * _1226) * (_1231 + (-1.0))) + 1.0;
        float _1244 = exp2(log2(1.0 - (isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0)))) * 5.0);
        float _1255 = 1.0 - _1204;
        float _1266 = (0.5 / (((_1222 * ((_1218 * _1255) + _1204)) + 9.9999999392252902907785028219223e-09) + (((_1222 * _1255) + _1204) * _1218))) * _1218;
        float _1644 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1268 = (isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0))) * (_1231 / ((_1235 * _1235) * 3.141590118408203125));
        _1275 = ((_1136 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1184;
        _1276 = ((_1137 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1184;
        _1277 = ((_1138 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1184;
        _1278 = (((_1244 * (0.959999978542327880859375 - _1143)) + _1146) * g_sceneCB._m0[5u].x) * _1268;
        _1279 = (((_1244 * (0.959999978542327880859375 - _1144)) + _1148) * g_sceneCB._m0[5u].y) * _1268;
        _1280 = (((_1244 * (0.959999978542327880859375 - _1145)) + _1149) * g_sceneCB._m0[5u].z) * _1268;
    }
    else
    {
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    bool _1282 = abs(_1079) < 0.89999997615814208984375;
    float _1284 = float(_1282);
    float _1285 = _1282 ? 0.0 : 1.0;
    float _1288 = (_1284 * _1080) - (_1285 * _1079);
    float _1289 = _1285 * _1078;
    float _1291 = (-0.0) - (_1078 * _1284);
    float _1295 = inversesqrt(dot(vec3(_1288, _1289, _1291), vec3(_1288, _1289, _1291)));
    float _1296 = _1288 * _1295;
    float _1297 = _1289 * _1295;
    float _1298 = _1295 * _1291;
    float _1301 = (_1297 * _1080) - (_1298 * _1079);
    float _1304 = (_1298 * _1078) - (_1296 * _1080);
    float _1307 = (_1296 * _1079) - (_1297 * _1078);
    float _1309;
    float _1317;
    float _1308 = 0.0;
    uint _1310 = 0u;
    float _1314;
    bool _1316;
    for (;;)
    {
        _1314 = (float(_1310) + _1121) * 0.03125;
        _1316 = _1310 == 0u;
        float frontier_phi_47_pred;
        if (_1316)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1461;
            float _1462;
            uint _1464;
            _1461 = 0.0;
            _1462 = 0.5;
            _1464 = _1310;
            float _1318;
            for (;;)
            {
                _1318 = ((_1464 & 1u) != 0u) ? (_1462 + _1461) : _1461;
                uint _1465 = _1464 >> 1u;
                if (_1465 == 0u)
                {
                    break;
                }
                else
                {
                    _1461 = _1318;
                    _1462 *= 0.5;
                    _1464 = _1465;
                }
            }
            frontier_phi_47_pred = _1318;
        }
        _1317 = frontier_phi_47_pred;
        float _1319 = _1317 + _1134;
        float _1323 = sqrt(_1314);
        float _1324 = ((_1319 > 1.0) ? (_1319 + (-1.0)) : _1319) * 6.283185482025146484375;
        float _1327 = cos(_1324) * _1323;
        float _1329 = sin(_1324) * _1323;
        float _1331 = sqrt(1.0 - _1314);
        float _1344 = ((_1331 * _1078) + (_1327 * _1301)) + (_1329 * _1296);
        float _1345 = ((_1331 * _1079) + (_1327 * _1304)) + (_1329 * _1297);
        float _1346 = ((_1331 * _1080) + (_1327 * _1307)) + (_1329 * _1298);
        _63._m0 = 1u;
        uvec4 _1350 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1351 = _1350.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1351, _1350.w, _1351, vec3(_1092, _1093, _1094), 9.9999997473787516355514526367188e-05, vec3(_1344, _1345, _1346), 10000.0, 1);
        float _1357 = dot(vec3(_1078, _1079, _1080), vec3(_1344, _1345, _1346));
        float _1655 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1360 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1309 = ((float(_63._m0 == 0u) * _1360) / (_1360 * 0.3183098733425140380859375)) + _1308;
        uint _1311 = _1310 + 1u;
        if (_1311 == 32u)
        {
            break;
        }
        else
        {
            _1308 = _1309;
            _1310 = _1311;
            continue;
        }
    }
    float _1368 = _1309 * 0.009947183541953563690185546875;
    float _1373 = dot(vec3(_977, _978, _979), vec3(_1078, _1079, _1080)) * 2.0;
    vec4 _1387 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_977 - (_1373 * _1078), _978 - (_1373 * _1079), _979 - (_1373 * _1080)), 4.0 - (_1045 * 4.0));
    float _1392 = dot(vec3(_1095, _1096, _1097), vec3(_1078, _1079, _1080));
    float _1666 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
    float _1402 = exp2(log2(1.0 - (isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0)))) * 5.0);
    vec4 _1414 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1078, _1079, _1080), 0.0);
    float _1426 = ((_1275 + (cbMtdParam._m0[13u].w * ((_946 * ((_934 - _1046) - _937)) + _1046))) + _1278) + (((_1414.x * _1136) + (((_1402 * (0.959999978542327880859375 - _1143)) + _1146) * _1387.x)) * _1368);
    float _1431 = ((_1276 + (cbMtdParam._m0[13u].w * ((_946 * ((_935 - _1047) - _938)) + _1047))) + _1279) + (((_1414.y * _1137) + (((_1402 * (0.959999978542327880859375 - _1144)) + _1148) * _1387.y)) * _1368);
    float _1436 = ((_1277 + (cbMtdParam._m0[13u].w * ((_946 * ((_936 - _1048) - _939)) + _1048))) + _1280) + (((_1414.z * _1138) + (((_1402 * (0.959999978542327880859375 - _1145)) + _1149) * _1387.z)) * _1368);
    float _1677 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
    float _1688 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1699 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
    bool _1444 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1455;
    _1455.x = _1444 ? ((_599 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0)));
    _1455.y = _1444 ? ((_602 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0)));
    _1455.z = _1444 ? ((_605 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0)));
    payload._m0 = _1455;
}


