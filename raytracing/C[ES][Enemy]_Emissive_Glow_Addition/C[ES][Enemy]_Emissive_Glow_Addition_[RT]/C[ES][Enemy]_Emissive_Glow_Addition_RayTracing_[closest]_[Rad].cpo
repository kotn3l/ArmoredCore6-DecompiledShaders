#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1158;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _167;
    uint _169;
    uint _170;
    if (_126.x == 0u)
    {
        uint _135 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_127 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _161 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _162 >> 16u;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _167 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder_1;
        _170 = frontier_phi_3_2_ladder;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _174.z;
    bool _177 = _176 != 0u;
    bool _179 = _126.w == 0u;
    bool _180 = _177 || _179;
    uint _182 = (_175 * _167) + 12u;
    uint _206;
    uint _207;
    uint _208;
    uint _209;
    if (_180)
    {
        uvec4 _185 = texelFetch(l_geomAttrib_0, int(_182 >> 2u));
        uint _186 = _185.x;
        _206 = _186 & 255u;
        _207 = (_186 >> 8u) & 255u;
        _208 = (_186 >> 16u) & 255u;
        _209 = 20u;
    }
    else
    {
        uint _194 = _182 >> 2u;
        uvec2 _200 = uvec2(texelFetch(l_geomAttrib_0, int(_194)).x, texelFetch(l_geomAttrib_0, int(_194 + 1u)).x);
        uint _201 = _200.x;
        _206 = _201 & 65535u;
        _207 = _201 >> 16u;
        _208 = _200.y & 65535u;
        _209 = 24u;
    }
    bool _215 = _176 == 0u;
    uint _216;
    if (_215)
    {
        _216 = _209;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_179)
        {
            frontier_phi_9_10_ladder = _209 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _209 + 8u;
        }
        _216 = frontier_phi_9_10_ladder;
    }
    uint _221 = _177 ? (_216 + 4u) : _216;
    uint _222 = _175 * _167;
    uvec4 _233 = texelFetch(l_geomAttrib_0, int(((_222 + 4u) + _221) >> 2u));
    uint _234 = _233.x;
    float _238 = float(int(uint(int(_234 << 16u) >> int(16u))));
    float _239 = float(int(uint(int(_234) >> int(16u))));
    uint _241 = (_175 * _169) + 12u;
    uint _262;
    uint _263;
    uint _264;
    uint _265;
    if (_180)
    {
        uvec4 _243 = texelFetch(l_geomAttrib_0, int(_241 >> 2u));
        uint _244 = _243.x;
        _262 = _244 & 255u;
        _263 = (_244 >> 8u) & 255u;
        _264 = (_244 >> 16u) & 255u;
        _265 = 20u;
    }
    else
    {
        uint _250 = _241 >> 2u;
        uvec2 _256 = uvec2(texelFetch(l_geomAttrib_0, int(_250)).x, texelFetch(l_geomAttrib_0, int(_250 + 1u)).x);
        uint _257 = _256.x;
        _262 = _257 & 65535u;
        _263 = _257 >> 16u;
        _264 = _256.y & 65535u;
        _265 = 24u;
    }
    uint _269;
    if (_215)
    {
        _269 = _265;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_179)
        {
            frontier_phi_16_17_ladder = _265 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _265 + 8u;
        }
        _269 = frontier_phi_16_17_ladder;
    }
    uint _273 = _177 ? (_269 + 4u) : _269;
    uint _274 = _175 * _169;
    uvec4 _284 = texelFetch(l_geomAttrib_0, int(((_274 + 4u) + _273) >> 2u));
    uint _285 = _284.x;
    float _289 = float(int(uint(int(_285 << 16u) >> int(16u))));
    float _290 = float(int(uint(int(_285) >> int(16u))));
    uint _292 = (_175 * _170) + 12u;
    uint _313;
    uint _314;
    uint _315;
    uint _316;
    if (_180)
    {
        uvec4 _294 = texelFetch(l_geomAttrib_0, int(_292 >> 2u));
        uint _295 = _294.x;
        _313 = _295 & 255u;
        _314 = (_295 >> 8u) & 255u;
        _315 = (_295 >> 16u) & 255u;
        _316 = 20u;
    }
    else
    {
        uint _301 = _292 >> 2u;
        uvec2 _307 = uvec2(texelFetch(l_geomAttrib_0, int(_301)).x, texelFetch(l_geomAttrib_0, int(_301 + 1u)).x);
        uint _308 = _307.x;
        _313 = _308 & 65535u;
        _314 = _308 >> 16u;
        _315 = _307.y & 65535u;
        _316 = 24u;
    }
    uint _320;
    if (_215)
    {
        _320 = _316;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_179)
        {
            frontier_phi_23_24_ladder = _316 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _316 + 8u;
        }
        _320 = frontier_phi_23_24_ladder;
    }
    uint _324 = _177 ? (_320 + 4u) : _320;
    uint _325 = _175 * _170;
    uvec4 _335 = texelFetch(l_geomAttrib_0, int(((_325 + 4u) + _324) >> 2u));
    uint _336 = _335.x;
    float _340 = float(int(uint(int(_336 << 16u) >> int(16u))));
    float _341 = float(int(uint(int(_336) >> int(16u))));
    bool _343 = _126.z == 0u;
    float _379;
    float _380;
    float _381;
    if (_343)
    {
        uint _346 = _167 * 3u;
        uvec3 _355 = uvec3(texelFetch(l_geomPositionBuffer, int(_346)).x, texelFetch(l_geomPositionBuffer, int(_346 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_346 + 2u)).x);
        _379 = uintBitsToFloat(_355.x);
        _380 = uintBitsToFloat(_355.y);
        _381 = uintBitsToFloat(_355.z);
    }
    else
    {
        uint _363 = _167 * 2u;
        uvec2 _369 = uvec2(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x);
        uint _370 = _369.x;
        _379 = unpackHalf2x16(_370).x;
        _380 = unpackHalf2x16(_370 >> 16u).x;
        _381 = unpackHalf2x16(_369.y).x;
    }
    float _417;
    float _418;
    float _419;
    if (_343)
    {
        uint _384 = _169 * 3u;
        uvec3 _393 = uvec3(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_384 + 2u)).x);
        _417 = uintBitsToFloat(_393.x);
        _418 = uintBitsToFloat(_393.y);
        _419 = uintBitsToFloat(_393.z);
    }
    else
    {
        uint _401 = _169 * 2u;
        uvec2 _407 = uvec2(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x);
        uint _408 = _407.x;
        _417 = unpackHalf2x16(_408).x;
        _418 = unpackHalf2x16(_408 >> 16u).x;
        _419 = unpackHalf2x16(_407.y).x;
    }
    float _455;
    float _456;
    float _457;
    if (_343)
    {
        uint _422 = _170 * 3u;
        uvec3 _431 = uvec3(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_422 + 2u)).x);
        _455 = uintBitsToFloat(_431.x);
        _456 = uintBitsToFloat(_431.y);
        _457 = uintBitsToFloat(_431.z);
    }
    else
    {
        uint _439 = _170 * 2u;
        uvec2 _445 = uvec2(texelFetch(l_geomPositionBuffer, int(_439)).x, texelFetch(l_geomPositionBuffer, int(_439 + 1u)).x);
        uint _446 = _445.x;
        _455 = unpackHalf2x16(_446).x;
        _456 = unpackHalf2x16(_446 >> 16u).x;
        _457 = unpackHalf2x16(_445.y).x;
    }
    float _460 = (1.0 - hit._m0.x) - hit._m0.y;
    float _475 = (((float(texelFetch(l_geomAttrib_0, int((_273 + _274) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_221 + _222) >> 2u)).x >> 24u) * _460)) + (float(texelFetch(l_geomAttrib_0, int((_324 + _325) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _489 = (_289 - _238) * 0.00048828125;
    float _491 = (_290 - _239) * 0.00048828125;
    float _494 = (_340 - _238) * 0.00048828125;
    float _495 = (_341 - _239) * 0.00048828125;
    float _517 = _417 - _379;
    float _518 = _418 - _380;
    float _519 = _419 - _381;
    float _522 = fma(_519, gl_ObjectToWorldEXT[2u].x, fma(_518, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _517));
    float _525 = fma(_519, gl_ObjectToWorldEXT[2u].y, fma(_518, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _517));
    float _528 = fma(_519, gl_ObjectToWorldEXT[2u].z, fma(_518, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _517));
    float _529 = _455 - _379;
    float _530 = _456 - _380;
    float _531 = _457 - _381;
    float _534 = fma(_531, gl_ObjectToWorldEXT[2u].x, fma(_530, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _529));
    float _537 = fma(_531, gl_ObjectToWorldEXT[2u].y, fma(_530, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _529));
    float _540 = fma(_531, gl_ObjectToWorldEXT[2u].z, fma(_530, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _529));
    float _541 = (((_289 * hit._m0.x) + (_238 * _460)) + (_340 * hit._m0.y)) * 0.00048828125;
    float _542 = (((_290 * hit._m0.x) + (_239 * _460)) + (_341 * hit._m0.y)) * 0.00048828125;
    float _546 = (((float(_206) * _460) + (-127.0)) + (float(_262) * hit._m0.x)) + (float(_313) * hit._m0.y);
    float _549 = (((float(_207) * _460) + (-127.0)) + (float(_263) * hit._m0.x)) + (float(_314) * hit._m0.y);
    float _552 = (((float(_208) * _460) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_315) * hit._m0.y);
    float _553 = _546 * 0.0078740157186985015869140625;
    float _555 = _549 * 0.0078740157186985015869140625;
    float _556 = _552 * 0.0078740157186985015869140625;
    float _572 = inversesqrt(dot(vec3(_553, _555, _556), vec3(_553, _555, _556)));
    float _573 = _572 * _553;
    float _574 = _572 * _555;
    float _575 = _572 * _556;
    float _581 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_573, _574, _575, 0.0)) - cbMtdParam._m0[13u].x;
    float _1236 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _588 = exp2(log2(1.0 - (isnan(1.0) ? _1236 : (isnan(_1236) ? 1.0 : min(_1236, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    uvec2 _621 = uvec2(textureSize(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_2, int(0u)));
    bool _626 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _678;
    if (_626)
    {
        float _637 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _643 = (_540 * _525) - (_537 * _528);
        float _646 = (_534 * _528) - (_540 * _522);
        float _649 = (_537 * _522) - (_534 * _525);
        float _676 = ((log2((((float(_621.y) * 0.5) * float(_621.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_646 * _646) + (_649 * _649)) + (_643 * _643)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_637 * gl_WorldRayDirectionEXT.x, _637 * gl_WorldRayDirectionEXT.y, _637 * gl_WorldRayDirectionEXT.z), vec3(_553, _555, _556))));
        _678 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    }
    else
    {
        _678 = 0.0;
    }
    vec4 _682 = textureLod(sampler2D(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _678);
    uvec2 _713 = uvec2(textureSize(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_1, int(0u)));
    float _764;
    if (_626)
    {
        float _724 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _730 = (_540 * _525) - (_537 * _528);
        float _733 = (_534 * _528) - (_540 * _522);
        float _736 = (_537 * _522) - (_534 * _525);
        float _762 = ((log2((((float(_713.y) * 0.5) * float(_713.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_733 * _733) + (_736 * _736)) + (_730 * _730)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_724 * gl_WorldRayDirectionEXT.x, _724 * gl_WorldRayDirectionEXT.y, _724 * gl_WorldRayDirectionEXT.z), vec3(_553, _555, _556))));
        _764 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    }
    else
    {
        _764 = 0.0;
    }
    vec4 _766 = textureLod(sampler2D(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _764);
    uvec2 _799 = uvec2(textureSize(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_3, int(0u)));
    float _803 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _804 = _803 * gl_WorldRayDirectionEXT.x;
    float _805 = _803 * gl_WorldRayDirectionEXT.y;
    float _806 = _803 * gl_WorldRayDirectionEXT.z;
    float _850;
    if (_626)
    {
        float _816 = (_540 * _525) - (_537 * _528);
        float _819 = (_534 * _528) - (_540 * _522);
        float _822 = (_537 * _522) - (_534 * _525);
        float _848 = ((log2((((float(_799.y) * 0.5) * float(_799.x)) * abs((_495 * _489) - (_494 * _491))) / (sqrt(((_819 * _819) + (_822 * _822)) + (_816 * _816)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_804, _805, _806), vec3(_553, _555, _556))));
        _850 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    }
    else
    {
        _850 = 0.0;
    }
    vec4 _852 = textureLod(sampler2D(C_ES_Enemy_Emissive_Glow_Addition_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + _541) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + _542) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _850);
    float _871 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _872 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _873 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _874 = (-0.0) - _804;
    float _876 = (-0.0) - _805;
    float _877 = (-0.0) - _806;
    float _883 = float(gl_LaunchIDEXT.x);
    float _884 = float(gl_LaunchIDEXT.y);
    float _887 = float(gl_LaunchSizeEXT.x);
    float _901 = fract(fract(sin(dot(vec2(_883 / _887, _884 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _914 = fract(fract(sin(dot(vec2((_883 + 128.0) / _887, (_884 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _924 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _925 = _924.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _925, _924.w, _925, vec3(_871, _872, _873), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _991;
    float _992;
    float _993;
    if (_64._m0 == 0u)
    {
        float _946 = g_sceneCB._m0[4u].x - _804;
        float _947 = g_sceneCB._m0[4u].y - _805;
        float _948 = g_sceneCB._m0[4u].z - _806;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _956 = dot(vec3(_573, _574, _575), vec3(g_sceneCB._m0[4u].xyz));
        float _1267 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _959 = isnan(1.0) ? _1267 : (isnan(_1267) ? 1.0 : min(_1267, 1.0));
        float _960 = dot(vec3(_573, _574, _575), vec3(_874, _876, _877));
        float _1278 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_946 * _952, _947 * _952, _948 * _952));
        float _1289 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _975 = (exp2(log2(1.0 - (isnan(1.0) ? _1289 : (isnan(_1289) ? 1.0 : min(_1289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _981 = (0.5 / ((_959 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1278 : (isnan(_1278) ? 1.0 : min(_1278, 1.0))))) * _959;
        float _1300 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _983 = (isnan(1.0) ? _1300 : (isnan(_1300) ? 1.0 : min(_1300, 1.0))) * 0.31831014156341552734375;
        _991 = (_975 * g_sceneCB._m0[5u].x) * _983;
        _992 = (_975 * g_sceneCB._m0[5u].y) * _983;
        _993 = (_975 * g_sceneCB._m0[5u].z) * _983;
    }
    else
    {
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    bool _995 = abs(_574) < 0.89999997615814208984375;
    float _997 = float(_995);
    float _998 = _995 ? 0.0 : 1.0;
    float _1001 = (_997 * _575) - (_998 * _574);
    float _1002 = _998 * _573;
    float _1004 = (-0.0) - (_573 * _997);
    float _1008 = inversesqrt(dot(vec3(_1001, _1002, _1004), vec3(_1001, _1002, _1004)));
    float _1009 = _1001 * _1008;
    float _1010 = _1002 * _1008;
    float _1011 = _1008 * _1004;
    float _1014 = (_1010 * _575) - (_1011 * _574);
    float _1017 = (_1011 * _573) - (_1009 * _575);
    float _1020 = (_1009 * _574) - (_1010 * _573);
    float _1022;
    float _1030;
    float _1021 = 0.0;
    uint _1023 = 0u;
    float _1027;
    bool _1029;
    for (;;)
    {
        _1027 = (float(_1023) + _901) * 0.03125;
        _1029 = _1023 == 0u;
        float frontier_phi_45_pred;
        if (_1029)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1163;
            float _1164;
            uint _1166;
            _1163 = 0.0;
            _1164 = 0.5;
            _1166 = _1023;
            float _1031;
            for (;;)
            {
                _1031 = ((_1166 & 1u) != 0u) ? (_1164 + _1163) : _1163;
                uint _1167 = _1166 >> 1u;
                if (_1167 == 0u)
                {
                    break;
                }
                else
                {
                    _1163 = _1031;
                    _1164 *= 0.5;
                    _1166 = _1167;
                }
            }
            frontier_phi_45_pred = _1031;
        }
        _1030 = frontier_phi_45_pred;
        float _1032 = _1030 + _914;
        float _1037 = sqrt(_1027);
        float _1038 = ((_1032 > 1.0) ? (_1032 + (-1.0)) : _1032) * 6.283185482025146484375;
        float _1041 = cos(_1038) * _1037;
        float _1043 = sin(_1038) * _1037;
        float _1045 = sqrt(1.0 - _1027);
        float _1058 = ((_1045 * _573) + (_1041 * _1014)) + (_1043 * _1009);
        float _1059 = ((_1045 * _574) + (_1041 * _1017)) + (_1043 * _1010);
        float _1060 = ((_1045 * _575) + (_1041 * _1020)) + (_1043 * _1011);
        _63._m0 = 1u;
        uvec4 _1064 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1065 = _1064.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1065, _1064.w, _1065, vec3(_871, _872, _873), 9.9999997473787516355514526367188e-05, vec3(_1058, _1059, _1060), 10000.0, 1);
        float _1071 = dot(vec3(_573, _574, _575), vec3(_1058, _1059, _1060));
        float _1311 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1074 = isnan(1.0) ? _1311 : (isnan(_1311) ? 1.0 : min(_1311, 1.0));
        _1022 = ((float(_63._m0 == 0u) * _1074) / (_1074 * 0.3183098733425140380859375)) + _1021;
        uint _1024 = _1023 + 1u;
        if (_1024 == 32u)
        {
            break;
        }
        else
        {
            _1021 = _1022;
            _1023 = _1024;
            continue;
        }
    }
    float _1083 = _1022 * 0.009947183541953563690185546875;
    float _1088 = dot(vec3(_804, _805, _806), vec3(_573, _574, _575)) * 2.0;
    vec4 _1100 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_804 - (_1088 * _573), _805 - (_1088 * _574), _806 - (_1088 * _575)), 4.0);
    float _1105 = dot(vec3(_874, _876, _877), vec3(_573, _574, _575));
    float _1322 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1114 = (exp2(log2(1.0 - (isnan(1.0) ? _1322 : (isnan(_1322) ? 1.0 : min(_1322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1126 = (((_1100.x * _1083) * _1114) + _991) + (((((_682.x * cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[9u].x * _475) * _588)) + (_766.x * cbMtdParam._m0[11u].x)) + (_852.x * cbMtdParam._m0[12u].x)) * cbMtdParam._m0[13u].z);
    float _1132 = (((_1100.y * _1083) * _1114) + _992) + (((((_682.y * cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[9u].y * _475) * _588)) + (_766.y * cbMtdParam._m0[11u].y)) + (_852.y * cbMtdParam._m0[12u].y)) * cbMtdParam._m0[13u].z);
    float _1138 = (((_1100.z * _1083) * _1114) + _993) + (((((_682.z * cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[9u].z * _475) * _588)) + (_766.z * cbMtdParam._m0[11u].z)) + (_852.z * cbMtdParam._m0[12u].z)) * cbMtdParam._m0[13u].z);
    float _1333 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1344 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1355 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    bool _1146 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1157;
    _1157.x = _1146 ? ((_546 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1333 : (isnan(_1333) ? 1.0 : min(_1333, 1.0)));
    _1157.y = _1146 ? ((_549 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1344 : (isnan(_1344) ? 1.0 : min(_1344, 1.0)));
    _1157.z = _1146 ? ((_552 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1355 : (isnan(_1355) ? 1.0 : min(_1355, 1.0)));
    payload._m0 = _1157;
}


