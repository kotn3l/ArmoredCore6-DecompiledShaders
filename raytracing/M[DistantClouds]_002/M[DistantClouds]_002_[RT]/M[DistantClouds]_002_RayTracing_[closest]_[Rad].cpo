#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[22];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_DistantClouds_002_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_DistantClouds_002_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1347;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _167;
    uint _169;
    uint _170;
    if (_126.x == 0u)
    {
        uint _135 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _144 = uvec3(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_135 + 2u)).x);
        _167 = _144.x;
        _169 = _144.y;
        _170 = _144.z;
    }
    else
    {
        uint _148 = uint(gl_PrimitiveID) * 6u;
        uint _150 = _148 & 4294967292u;
        uint _153 = (_127 + _150) >> 2u;
        uvec2 _160 = uvec2(texelFetch(l_geomIndexBuffer, int(_153)).x, texelFetch(l_geomIndexBuffer, int(_153 + 1u)).x);
        uint _161 = _160.x;
        uint _162 = _160.y;
        uint _164 = _161 >> 16u;
        uint _165 = _162 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_150 == _148)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _161 & 65535u;
            frontier_phi_3_2_ladder_2 = _165;
        }
        else
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _164;
            frontier_phi_3_2_ladder_2 = _162 >> 16u;
        }
        _167 = frontier_phi_3_2_ladder_1;
        _169 = frontier_phi_3_2_ladder;
        _170 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _174 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _175 = _174.x;
    uint _176 = _175 * _167;
    uint _178 = _176 >> 2u;
    uvec3 _187 = uvec3(texelFetch(l_geomAttrib_0, int(_178)).x, texelFetch(l_geomAttrib_0, int(_178 + 1u)).x, texelFetch(l_geomAttrib_0, int(_178 + 2u)).x);
    uint _194 = _174.z;
    bool _195 = _194 != 0u;
    bool _197 = _126.w == 0u;
    bool _198 = _195 || _197;
    uint _199 = _176 + 12u;
    uint _222;
    uint _223;
    uint _224;
    uint _225;
    if (_198)
    {
        uvec4 _201 = texelFetch(l_geomAttrib_0, int(_199 >> 2u));
        uint _202 = _201.x;
        _222 = _202 & 255u;
        _223 = (_202 >> 8u) & 255u;
        _224 = (_202 >> 16u) & 255u;
        _225 = 20u;
    }
    else
    {
        uint _210 = _199 >> 2u;
        uvec2 _216 = uvec2(texelFetch(l_geomAttrib_0, int(_210)).x, texelFetch(l_geomAttrib_0, int(_210 + 1u)).x);
        uint _217 = _216.x;
        _222 = _217 & 65535u;
        _223 = _217 >> 16u;
        _224 = _216.y & 65535u;
        _225 = 24u;
    }
    bool _231 = _194 == 0u;
    uint _232;
    if (_231)
    {
        _232 = _225;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_197)
        {
            frontier_phi_9_10_ladder = _225 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _225 + 8u;
        }
        _232 = frontier_phi_9_10_ladder;
    }
    uvec4 _241 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_195 ? (_232 + 4u) : _232)) >> 2u));
    uint _242 = _241.x;
    float _246 = float(int(uint(int(_242 << 16u) >> int(16u))));
    float _247 = float(int(uint(int(_242) >> int(16u))));
    uint _248 = _175 * _169;
    uint _249 = _248 >> 2u;
    uvec3 _258 = uvec3(texelFetch(l_geomAttrib_0, int(_249)).x, texelFetch(l_geomAttrib_0, int(_249 + 1u)).x, texelFetch(l_geomAttrib_0, int(_249 + 2u)).x);
    uint _265 = _248 + 12u;
    uint _286;
    uint _287;
    uint _288;
    uint _289;
    if (_198)
    {
        uvec4 _267 = texelFetch(l_geomAttrib_0, int(_265 >> 2u));
        uint _268 = _267.x;
        _286 = _268 & 255u;
        _287 = (_268 >> 8u) & 255u;
        _288 = (_268 >> 16u) & 255u;
        _289 = 20u;
    }
    else
    {
        uint _274 = _265 >> 2u;
        uvec2 _280 = uvec2(texelFetch(l_geomAttrib_0, int(_274)).x, texelFetch(l_geomAttrib_0, int(_274 + 1u)).x);
        uint _281 = _280.x;
        _286 = _281 & 65535u;
        _287 = _281 >> 16u;
        _288 = _280.y & 65535u;
        _289 = 24u;
    }
    uint _293;
    if (_231)
    {
        _293 = _289;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_197)
        {
            frontier_phi_16_17_ladder = _289 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _289 + 8u;
        }
        _293 = frontier_phi_16_17_ladder;
    }
    uvec4 _301 = texelFetch(l_geomAttrib_0, int(((_248 + 4u) + (_195 ? (_293 + 4u) : _293)) >> 2u));
    uint _302 = _301.x;
    float _306 = float(int(uint(int(_302 << 16u) >> int(16u))));
    float _307 = float(int(uint(int(_302) >> int(16u))));
    uint _308 = _175 * _170;
    uint _309 = _308 >> 2u;
    uvec3 _318 = uvec3(texelFetch(l_geomAttrib_0, int(_309)).x, texelFetch(l_geomAttrib_0, int(_309 + 1u)).x, texelFetch(l_geomAttrib_0, int(_309 + 2u)).x);
    uint _325 = _308 + 12u;
    uint _346;
    uint _347;
    uint _348;
    uint _349;
    if (_198)
    {
        uvec4 _327 = texelFetch(l_geomAttrib_0, int(_325 >> 2u));
        uint _328 = _327.x;
        _346 = _328 & 255u;
        _347 = (_328 >> 8u) & 255u;
        _348 = (_328 >> 16u) & 255u;
        _349 = 20u;
    }
    else
    {
        uint _334 = _325 >> 2u;
        uvec2 _340 = uvec2(texelFetch(l_geomAttrib_0, int(_334)).x, texelFetch(l_geomAttrib_0, int(_334 + 1u)).x);
        uint _341 = _340.x;
        _346 = _341 & 65535u;
        _347 = _341 >> 16u;
        _348 = _340.y & 65535u;
        _349 = 24u;
    }
    uint _353;
    if (_231)
    {
        _353 = _349;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_197)
        {
            frontier_phi_23_24_ladder = _349 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _349 + 8u;
        }
        _353 = frontier_phi_23_24_ladder;
    }
    uvec4 _361 = texelFetch(l_geomAttrib_0, int(((_308 + 4u) + (_195 ? (_353 + 4u) : _353)) >> 2u));
    uint _362 = _361.x;
    float _366 = float(int(uint(int(_362 << 16u) >> int(16u))));
    float _367 = float(int(uint(int(_362) >> int(16u))));
    bool _369 = _126.z == 0u;
    float _405;
    float _406;
    float _407;
    if (_369)
    {
        uint _372 = _167 * 3u;
        uvec3 _381 = uvec3(texelFetch(l_geomPositionBuffer, int(_372)).x, texelFetch(l_geomPositionBuffer, int(_372 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_372 + 2u)).x);
        _405 = uintBitsToFloat(_381.x);
        _406 = uintBitsToFloat(_381.y);
        _407 = uintBitsToFloat(_381.z);
    }
    else
    {
        uint _389 = _167 * 2u;
        uvec2 _395 = uvec2(texelFetch(l_geomPositionBuffer, int(_389)).x, texelFetch(l_geomPositionBuffer, int(_389 + 1u)).x);
        uint _396 = _395.x;
        _405 = unpackHalf2x16(_396).x;
        _406 = unpackHalf2x16(_396 >> 16u).x;
        _407 = unpackHalf2x16(_395.y).x;
    }
    float _443;
    float _444;
    float _445;
    if (_369)
    {
        uint _410 = _169 * 3u;
        uvec3 _419 = uvec3(texelFetch(l_geomPositionBuffer, int(_410)).x, texelFetch(l_geomPositionBuffer, int(_410 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_410 + 2u)).x);
        _443 = uintBitsToFloat(_419.x);
        _444 = uintBitsToFloat(_419.y);
        _445 = uintBitsToFloat(_419.z);
    }
    else
    {
        uint _427 = _169 * 2u;
        uvec2 _433 = uvec2(texelFetch(l_geomPositionBuffer, int(_427)).x, texelFetch(l_geomPositionBuffer, int(_427 + 1u)).x);
        uint _434 = _433.x;
        _443 = unpackHalf2x16(_434).x;
        _444 = unpackHalf2x16(_434 >> 16u).x;
        _445 = unpackHalf2x16(_433.y).x;
    }
    float _481;
    float _482;
    float _483;
    if (_369)
    {
        uint _448 = _170 * 3u;
        uvec3 _457 = uvec3(texelFetch(l_geomPositionBuffer, int(_448)).x, texelFetch(l_geomPositionBuffer, int(_448 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_448 + 2u)).x);
        _481 = uintBitsToFloat(_457.x);
        _482 = uintBitsToFloat(_457.y);
        _483 = uintBitsToFloat(_457.z);
    }
    else
    {
        uint _465 = _170 * 2u;
        uvec2 _471 = uvec2(texelFetch(l_geomPositionBuffer, int(_465)).x, texelFetch(l_geomPositionBuffer, int(_465 + 1u)).x);
        uint _472 = _471.x;
        _481 = unpackHalf2x16(_472).x;
        _482 = unpackHalf2x16(_472 >> 16u).x;
        _483 = unpackHalf2x16(_471.y).x;
    }
    float _486 = (1.0 - hit._m0.x) - hit._m0.y;
    float _499 = ((uintBitsToFloat(_258.x) * hit._m0.x) + (uintBitsToFloat(_187.x) * _486)) + (uintBitsToFloat(_318.x) * hit._m0.y);
    float _500 = ((uintBitsToFloat(_258.y) * hit._m0.x) + (uintBitsToFloat(_187.y) * _486)) + (uintBitsToFloat(_318.y) * hit._m0.y);
    float _501 = ((uintBitsToFloat(_258.z) * hit._m0.x) + (uintBitsToFloat(_187.z) * _486)) + (uintBitsToFloat(_318.z) * hit._m0.y);
    float _523 = (_306 - _246) * 0.00048828125;
    float _525 = (_307 - _247) * 0.00048828125;
    float _528 = (_366 - _246) * 0.00048828125;
    float _529 = (_367 - _247) * 0.00048828125;
    float _551 = _443 - _405;
    float _552 = _444 - _406;
    float _553 = _445 - _407;
    float _556 = fma(_553, gl_ObjectToWorldEXT[2u].x, fma(_552, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _551));
    float _559 = fma(_553, gl_ObjectToWorldEXT[2u].y, fma(_552, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _551));
    float _562 = fma(_553, gl_ObjectToWorldEXT[2u].z, fma(_552, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _551));
    float _563 = _481 - _405;
    float _564 = _482 - _406;
    float _565 = _483 - _407;
    float _568 = fma(_565, gl_ObjectToWorldEXT[2u].x, fma(_564, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _563));
    float _571 = fma(_565, gl_ObjectToWorldEXT[2u].y, fma(_564, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _563));
    float _574 = fma(_565, gl_ObjectToWorldEXT[2u].z, fma(_564, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _563));
    float _575 = (((_306 * hit._m0.x) + (_246 * _486)) + (_366 * hit._m0.y)) * 0.00048828125;
    float _576 = (((_307 * hit._m0.x) + (_247 * _486)) + (_367 * hit._m0.y)) * 0.00048828125;
    float _580 = (((float(_222) * _486) + (-127.0)) + (float(_286) * hit._m0.x)) + (float(_346) * hit._m0.y);
    float _583 = (((float(_223) * _486) + (-127.0)) + (float(_287) * hit._m0.x)) + (float(_347) * hit._m0.y);
    float _586 = (((float(_224) * _486) + (-127.0)) + (float(_288) * hit._m0.x)) + (float(_348) * hit._m0.y);
    float _587 = _580 * 0.0078740157186985015869140625;
    float _589 = _583 * 0.0078740157186985015869140625;
    float _590 = _586 * 0.0078740157186985015869140625;
    float _606 = cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x;
    uvec2 _624 = uvec2(textureSize(M_DistantClouds_002_snp_0_Texture2D_1, int(0u)));
    bool _629 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _682;
    if (_629)
    {
        float _640 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _646 = (_574 * _559) - (_571 * _562);
        float _649 = (_568 * _562) - (_574 * _556);
        float _652 = (_571 * _556) - (_568 * _559);
        float _679 = ((log2((((float(_624.y) * 0.5) * float(_624.x)) * abs((_529 * _523) - (_528 * _525))) / (sqrt(((_649 * _649) + (_652 * _652)) + (_646 * _646)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_640 * gl_WorldRayDirectionEXT.x, _640 * gl_WorldRayDirectionEXT.y, _640 * gl_WorldRayDirectionEXT.z), vec3(_587, _589, _590))));
        _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    }
    else
    {
        _682 = 0.0;
    }
    vec4 _686 = textureLod(sampler2D(M_DistantClouds_002_snp_0_Texture2D_1, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[20u].x) * ((_606 * cbMtdParam._m0[19u].z) + _575)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[20u].y) * ((_606 * cbMtdParam._m0[19u].w) + _576)) + cbTextureTilingScale._m0[0u].w), _682);
    float _688 = _686.x;
    uvec2 _717 = uvec2(textureSize(M_DistantClouds_002_snp_0_Texture2D_2, int(0u)));
    float _768;
    if (_629)
    {
        float _728 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _734 = (_574 * _559) - (_571 * _562);
        float _737 = (_568 * _562) - (_574 * _556);
        float _740 = (_571 * _556) - (_568 * _559);
        float _766 = ((log2((((float(_717.y) * 0.5) * float(_717.x)) * abs((_529 * _523) - (_528 * _525))) / (sqrt(((_737 * _737) + (_740 * _740)) + (_734 * _734)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_728 * gl_WorldRayDirectionEXT.x, _728 * gl_WorldRayDirectionEXT.y, _728 * gl_WorldRayDirectionEXT.z), vec3(_587, _589, _590))));
        _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    }
    else
    {
        _768 = 0.0;
    }
    vec4 _771 = textureLod(sampler2D(M_DistantClouds_002_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((((_688 * cbMtdParam._m0[19u].x) + _575) + (cbMtdParam._m0[18u].z * _606)) + cbMtdParam._m0[18u].x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_688 * cbMtdParam._m0[19u].y) + _576) + (cbMtdParam._m0[18u].w * _606)) + cbMtdParam._m0[18u].y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _768);
    float _782 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
    float _783 = _782 * _499;
    float _784 = _782 * _500;
    float _785 = _782 * _501;
    bool _791 = floatBitsToUint(cbMtdParam._m0[9u]).y != 0u;
    float _801 = inversesqrt(dot(vec3(cbMtdParam._m0[20u].zw, cbMtdParam._m0[21u].x), vec3(cbMtdParam._m0[20u].zw, cbMtdParam._m0[21u].x)));
    float _810 = _791 ? g_sceneCB._m0[4u].x : (_801 * cbMtdParam._m0[20u].z);
    float _811 = _791 ? g_sceneCB._m0[4u].y : (_801 * cbMtdParam._m0[20u].w);
    float _812 = _791 ? g_sceneCB._m0[4u].z : (_801 * cbMtdParam._m0[21u].x);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    float _820 = dot(vec4(_783, _784, _785, 0.0), vec4(_817, _818, _819, 0.0));
    float _1463 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
    float _825 = 1.0 - (_823 * _823);
    float _827 = (-0.0) - (_825 - cbMtdParam._m0[16u].w);
    float _829 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _852 = (-0.0) - (_825 - cbMtdParam._m0[17u].y);
    float _853 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _878 = cbMtdParam._m0[12u].z - (cbMtdParam._m0[16u].z * cbMtdParam._m0[12u].z);
    float _879 = cbMtdParam._m0[12u].w - (cbMtdParam._m0[16u].z * cbMtdParam._m0[12u].w);
    float _880 = cbMtdParam._m0[13u].x - (cbMtdParam._m0[16u].z * cbMtdParam._m0[13u].x);
    float _891 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _906 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_783, _784, _785, 0.0), vec4(_891 * _817, _891 * _818, _891 * _819, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _1494 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    float _914 = exp2(log2(_908 * 6.5) * 7.0);
    float _1505 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = (isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0))) + _908;
    float _1516 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _917 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
    float _929 = ((_917 * ((cbMtdParam._m0[11u].z - (cbMtdParam._m0[11u].z * cbMtdParam._m0[16u].z)) - _878)) + _878) * _771.x;
    float _930 = ((_917 * ((cbMtdParam._m0[11u].w - _879) - (cbMtdParam._m0[11u].w * cbMtdParam._m0[16u].z))) + _879) * _771.y;
    float _931 = ((_917 * ((cbMtdParam._m0[12u].x - _880) - (cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z))) + _880) * _771.z;
    float _932 = isnan(_930) ? _929 : (isnan(_929) ? _930 : max(_929, _930));
    float _933 = isnan(_931) ? _932 : (isnan(_932) ? _931 : max(_932, _931));
    float _936;
    float _938;
    if (_933 < 1.1920928955078125e-07)
    {
        _936 = 0.0;
        _938 = 0.0;
    }
    else
    {
        float _962 = isnan(_930) ? _929 : (isnan(_929) ? _930 : min(_929, _930));
        float _964 = _933 - (isnan(_931) ? _962 : (isnan(_962) ? _931 : min(_962, _931)));
        float _939 = _964 / _933;
        float frontier_phi_40_41_ladder;
        float frontier_phi_40_41_ladder_1;
        if (_964 < 1.1920928955078125e-07)
        {
            frontier_phi_40_41_ladder = _939;
            frontier_phi_40_41_ladder_1 = 0.0;
        }
        else
        {
            float _1214;
            if (_933 == _929)
            {
                _1214 = ((_930 - _931) / _964) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_52_49_ladder;
                if (_933 == _930)
                {
                    frontier_phi_52_49_ladder = (((_931 - _929) / _964) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_52_49_ladder = (((_929 - _930) / _964) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1214 = frontier_phi_52_49_ladder;
            }
            float _1219 = (_1214 < 0.0) ? (_1214 + 1.0) : _1214;
            precise float _937 = (_1219 - floor(_1219)) * 6.0;
            frontier_phi_40_41_ladder = _939;
            frontier_phi_40_41_ladder_1 = _937;
        }
        _936 = frontier_phi_40_41_ladder_1;
        _938 = frontier_phi_40_41_ladder;
    }
    float _941 = cbMtdParam._m0[17u].x + _933;
    float _1547 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _942 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    float _944 = cbMtdParam._m0[17u].z + _938;
    float _1558 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _945 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _947 = uint(int(floor(_936)));
    float _949 = _936 - float(int(_947));
    float _951 = (1.0 - _945) * _942;
    float _954 = (1.0 - (_949 * _945)) * _942;
    float _958 = (1.0 - ((1.0 - _949) * _945)) * _942;
    float _966;
    float _968;
    float _969;
    if ((_947 == 0u) || (_947 == 6u))
    {
        _966 = _942;
        _968 = _958;
        _969 = _951;
    }
    else
    {
        float frontier_phi_42_43_ladder;
        float frontier_phi_42_43_ladder_1;
        float frontier_phi_42_43_ladder_2;
        if (_947 == 1u)
        {
            frontier_phi_42_43_ladder = _951;
            frontier_phi_42_43_ladder_1 = _954;
            frontier_phi_42_43_ladder_2 = _942;
        }
        else
        {
            float frontier_phi_42_43_ladder_47_ladder;
            float frontier_phi_42_43_ladder_47_ladder_1;
            float frontier_phi_42_43_ladder_47_ladder_2;
            if (_947 == 2u)
            {
                frontier_phi_42_43_ladder_47_ladder = _958;
                frontier_phi_42_43_ladder_47_ladder_1 = _951;
                frontier_phi_42_43_ladder_47_ladder_2 = _942;
            }
            else
            {
                float frontier_phi_42_43_ladder_47_ladder_51_ladder;
                float frontier_phi_42_43_ladder_47_ladder_51_ladder_1;
                float frontier_phi_42_43_ladder_47_ladder_51_ladder_2;
                if (_947 == 3u)
                {
                    frontier_phi_42_43_ladder_47_ladder_51_ladder = _942;
                    frontier_phi_42_43_ladder_47_ladder_51_ladder_1 = _951;
                    frontier_phi_42_43_ladder_47_ladder_51_ladder_2 = _954;
                }
                else
                {
                    bool _1284 = _947 == 4u;
                    frontier_phi_42_43_ladder_47_ladder_51_ladder = _1284 ? _942 : _954;
                    frontier_phi_42_43_ladder_47_ladder_51_ladder_1 = _1284 ? _958 : _942;
                    frontier_phi_42_43_ladder_47_ladder_51_ladder_2 = _951;
                }
                frontier_phi_42_43_ladder_47_ladder = frontier_phi_42_43_ladder_47_ladder_51_ladder;
                frontier_phi_42_43_ladder_47_ladder_1 = frontier_phi_42_43_ladder_47_ladder_51_ladder_1;
                frontier_phi_42_43_ladder_47_ladder_2 = frontier_phi_42_43_ladder_47_ladder_51_ladder_2;
            }
            frontier_phi_42_43_ladder = frontier_phi_42_43_ladder_47_ladder;
            frontier_phi_42_43_ladder_1 = frontier_phi_42_43_ladder_47_ladder_1;
            frontier_phi_42_43_ladder_2 = frontier_phi_42_43_ladder_47_ladder_2;
        }
        _966 = frontier_phi_42_43_ladder_1;
        _968 = frontier_phi_42_43_ladder_2;
        _969 = frontier_phi_42_43_ladder;
    }
    float _978 = exp2(log2(_966) * cbMtdParam._m0[17u].w);
    float _979 = exp2(log2(_968) * cbMtdParam._m0[17u].w);
    float _980 = exp2(log2(_969) * cbMtdParam._m0[17u].w);
    float _990 = inversesqrt(dot(vec3(cbMtdParam._m0[21u].yzw), vec3(cbMtdParam._m0[21u].yzw)));
    float _998 = (dot(vec4(_783, _784, _785, 0.0), vec4(_990 * cbMtdParam._m0[21u].y, _990 * cbMtdParam._m0[21u].z, _990 * cbMtdParam._m0[21u].w, 0.0)) + 1.0) * 0.5;
    float _1569 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1005 = cbMtdParam._m0[14u].x * exp2(log2(isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0))) * cbMtdParam._m0[14u].z);
    float _1580 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1006 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    float _1013 = (cbMtdParam._m0[16u].x * exp2(log2(isnan(64.0) ? _853 : (isnan(_853) ? 64.0 : min(_853, 64.0))) * 2.599999904632568359375)) + (cbMtdParam._m0[16u].y * exp2(log2(isnan(64.0) ? _829 : (isnan(_829) ? 64.0 : min(_829, 64.0))) * 1.64999997615814208984375));
    float _1016 = ((_1006 * ((_978 * cbMtdParam._m0[9u].z) - _978)) + _978) + (_1013 * cbMtdParam._m0[10u].z);
    float _1019 = ((_1006 * ((_979 * cbMtdParam._m0[9u].w) - _979)) + _979) + (_1013 * cbMtdParam._m0[10u].w);
    float _1022 = ((_1006 * ((_980 * cbMtdParam._m0[10u].x) - _980)) + _980) + (_1013 * cbMtdParam._m0[11u].x);
    float _1030 = inversesqrt(dot(vec3(_587, _589, _590), vec3(_587, _589, _590)));
    float _1031 = _1030 * _587;
    float _1032 = _1030 * _589;
    float _1033 = _1030 * _590;
    float _1045 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1046 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1047 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1051 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1052 = _1051 * gl_WorldRayDirectionEXT.x;
    float _1053 = _1051 * gl_WorldRayDirectionEXT.y;
    float _1054 = _1051 * gl_WorldRayDirectionEXT.z;
    float _1055 = (-0.0) - _1052;
    float _1056 = (-0.0) - _1053;
    float _1057 = (-0.0) - _1054;
    float _1063 = float(gl_LaunchIDEXT.x);
    float _1064 = float(gl_LaunchIDEXT.y);
    float _1067 = float(gl_LaunchSizeEXT.x);
    float _1081 = fract(fract(sin(dot(vec2(_1063 / _1067, _1064 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1094 = fract(fract(sin(dot(vec2((_1063 + 128.0) / _1067, (_1064 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _65._m0 = 1u;
    uvec4 _1099 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1100 = _1099.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1100, _1099.w, _1100, vec3(_1045, _1046, _1047), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1168;
    float _1169;
    float _1170;
    if (_65._m0 == 0u)
    {
        float _1123 = g_sceneCB._m0[4u].x - _1052;
        float _1124 = g_sceneCB._m0[4u].y - _1053;
        float _1125 = g_sceneCB._m0[4u].z - _1054;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1133 = dot(vec3(_1031, _1032, _1033), vec3(g_sceneCB._m0[4u].xyz));
        float _1606 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1136 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        float _1137 = dot(vec3(_1031, _1032, _1033), vec3(_1055, _1056, _1057));
        float _1617 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1123 * _1129, _1124 * _1129, _1125 * _1129));
        float _1628 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1152 = (exp2(log2(1.0 - (isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1158 = (0.5 / ((_1136 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0))))) * _1136;
        float _1639 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1160 = (isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0))) * 0.31831014156341552734375;
        _1168 = (_1152 * g_sceneCB._m0[5u].x) * _1160;
        _1169 = (_1152 * g_sceneCB._m0[5u].y) * _1160;
        _1170 = (_1152 * g_sceneCB._m0[5u].z) * _1160;
    }
    else
    {
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    bool _1172 = abs(_1032) < 0.89999997615814208984375;
    float _1174 = float(_1172);
    float _1175 = _1172 ? 0.0 : 1.0;
    float _1178 = (_1174 * _1033) - (_1175 * _1032);
    float _1179 = _1175 * _1031;
    float _1181 = (-0.0) - (_1031 * _1174);
    float _1185 = inversesqrt(dot(vec3(_1178, _1179, _1181), vec3(_1178, _1179, _1181)));
    float _1186 = _1178 * _1185;
    float _1187 = _1179 * _1185;
    float _1188 = _1185 * _1181;
    float _1191 = (_1187 * _1033) - (_1188 * _1032);
    float _1194 = (_1188 * _1031) - (_1186 * _1033);
    float _1197 = (_1186 * _1032) - (_1187 * _1031);
    float _1205;
    float _1231;
    float _1204 = 0.0;
    uint _1206 = 0u;
    float _1210;
    bool _1212;
    for (;;)
    {
        _1210 = (float(_1206) + _1081) * 0.03125;
        _1212 = _1206 == 0u;
        float frontier_phi_55_pred;
        if (_1212)
        {
            frontier_phi_55_pred = 0.0;
        }
        else
        {
            float _1352;
            float _1353;
            uint _1355;
            _1352 = 0.0;
            _1353 = 0.5;
            _1355 = _1206;
            float _1232;
            for (;;)
            {
                _1232 = ((_1355 & 1u) != 0u) ? (_1353 + _1352) : _1352;
                uint _1356 = _1355 >> 1u;
                if (_1356 == 0u)
                {
                    break;
                }
                else
                {
                    _1352 = _1232;
                    _1353 *= 0.5;
                    _1355 = _1356;
                }
            }
            frontier_phi_55_pred = _1232;
        }
        _1231 = frontier_phi_55_pred;
        float _1233 = _1231 + _1094;
        float _1238 = sqrt(_1210);
        float _1239 = ((_1233 > 1.0) ? (_1233 + (-1.0)) : _1233) * 6.283185482025146484375;
        float _1242 = cos(_1239) * _1238;
        float _1244 = sin(_1239) * _1238;
        float _1246 = sqrt(1.0 - _1210);
        float _1259 = ((_1246 * _1031) + (_1242 * _1191)) + (_1244 * _1186);
        float _1260 = ((_1246 * _1032) + (_1242 * _1194)) + (_1244 * _1187);
        float _1261 = ((_1246 * _1033) + (_1242 * _1197)) + (_1244 * _1188);
        _64._m0 = 1u;
        uvec4 _1265 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1266 = _1265.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1266, _1265.w, _1266, vec3(_1045, _1046, _1047), 9.9999997473787516355514526367188e-05, vec3(_1259, _1260, _1261), 10000.0, 1);
        float _1272 = dot(vec3(_1031, _1032, _1033), vec3(_1259, _1260, _1261));
        float _1650 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1275 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1205 = ((float(_64._m0 == 0u) * _1275) / (_1275 * 0.3183098733425140380859375)) + _1204;
        uint _1207 = _1206 + 1u;
        if (_1207 == 32u)
        {
            break;
        }
        else
        {
            _1204 = _1205;
            _1206 = _1207;
            continue;
        }
    }
    float _1285 = _1205 * 0.009947183541953563690185546875;
    float _1290 = dot(vec3(_1052, _1053, _1054), vec3(_1031, _1032, _1033)) * 2.0;
    vec4 _1301 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1052 - (_1290 * _1031), _1053 - (_1290 * _1032), _1054 - (_1290 * _1033)), 4.0);
    float _1306 = dot(vec3(_1055, _1056, _1057), vec3(_1031, _1032, _1033));
    float _1661 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1315 = (exp2(log2(1.0 - (isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1323 = (_1168 + (isnan(4.0) ? _1016 : (isnan(_1016) ? 4.0 : min(_1016, 4.0)))) + ((_1301.x * _1285) * _1315);
    float _1325 = (_1169 + (isnan(4.0) ? _1019 : (isnan(_1019) ? 4.0 : min(_1019, 4.0)))) + ((_1301.y * _1285) * _1315);
    float _1327 = (_1170 + (isnan(4.0) ? _1022 : (isnan(_1022) ? 4.0 : min(_1022, 4.0)))) + ((_1301.z * _1285) * _1315);
    float _1672 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _1683 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1694 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    bool _1335 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1346;
    _1346.x = _1335 ? ((_580 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0)));
    _1346.y = _1335 ? ((_583 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0)));
    _1346.z = _1335 ? ((_586 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0)));
    payload._m0 = _1346;
}


