#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _59
{
    vec3 _m0;
};

struct _63
{
    vec2 _m0;
};

struct _66
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _59 payload;
hitAttributeEXT _63 hit;
layout(location = 1) rayPayloadEXT _66 _68;
layout(location = 2) rayPayloadEXT _66 _69;

vec3 _1895;

void main()
{
    float _83 = float(gl_LaunchSizeEXT.y);
    float _111 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _113 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _120 = sqrt(((_112 * _112) + (_111 * _111)) + (_113 * _113)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _83)))));
    uvec4 _131 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _132 = _131.y;
    uint _172;
    uint _174;
    uint _175;
    if (_131.x == 0u)
    {
        uint _140 = (_132 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _149 = uvec3(texelFetch(l_geomIndexBuffer, int(_140)).x, texelFetch(l_geomIndexBuffer, int(_140 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_140 + 2u)).x);
        _172 = _149.x;
        _174 = _149.y;
        _175 = _149.z;
    }
    else
    {
        uint _153 = uint(gl_PrimitiveID) * 6u;
        uint _155 = _153 & 4294967292u;
        uint _158 = (_132 + _155) >> 2u;
        uvec2 _165 = uvec2(texelFetch(l_geomIndexBuffer, int(_158)).x, texelFetch(l_geomIndexBuffer, int(_158 + 1u)).x);
        uint _166 = _165.x;
        uint _167 = _165.y;
        uint _169 = _166 >> 16u;
        uint _170 = _167 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_155 == _153)
        {
            frontier_phi_3_2_ladder = _170;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _166 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _167 >> 16u;
            frontier_phi_3_2_ladder_1 = _170;
            frontier_phi_3_2_ladder_2 = _169;
        }
        _172 = frontier_phi_3_2_ladder_2;
        _174 = frontier_phi_3_2_ladder_1;
        _175 = frontier_phi_3_2_ladder;
    }
    uvec4 _179 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _180 = _179.x;
    uint _181 = _179.z;
    bool _182 = _181 != 0u;
    bool _184 = _131.w == 0u;
    bool _185 = _182 || _184;
    uint _186 = _180 * _172;
    uint _187 = _186 + 12u;
    uint _211;
    uint _212;
    uint _213;
    uint _214;
    if (_185)
    {
        uvec4 _190 = texelFetch(l_geomAttrib_0, int(_187 >> 2u));
        uint _191 = _190.x;
        _211 = _191 & 255u;
        _212 = (_191 >> 8u) & 255u;
        _213 = (_191 >> 16u) & 255u;
        _214 = 16u;
    }
    else
    {
        uint _199 = _187 >> 2u;
        uvec2 _205 = uvec2(texelFetch(l_geomAttrib_0, int(_199)).x, texelFetch(l_geomAttrib_0, int(_199 + 1u)).x);
        uint _206 = _205.x;
        _211 = _206 & 65535u;
        _212 = _206 >> 16u;
        _213 = _205.y & 65535u;
        _214 = 20u;
    }
    uvec4 _222 = texelFetch(l_geomAttrib_0, int((_214 + _186) >> 2u));
    uint _223 = _222.x;
    bool _237 = _181 == 0u;
    uint _238;
    if (_237)
    {
        _238 = _214 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_184)
        {
            frontier_phi_9_10_ladder = _214 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _214 + 12u;
        }
        _238 = frontier_phi_9_10_ladder;
    }
    uint _242 = _182 ? (_238 + 4u) : _238;
    uvec4 _245 = texelFetch(l_geomAttrib_0, int((_242 + _186) >> 2u));
    uint _246 = _245.x;
    uvec4 _258 = texelFetch(l_geomAttrib_0, int(((_186 + 8u) + _242) >> 2u));
    uint _259 = _258.x;
    float _263 = float(int(uint(int(_259 << 16u) >> int(16u))));
    float _264 = float(int(uint(int(_259) >> int(16u))));
    uvec4 _268 = texelFetch(l_geomAttrib_0, int(((_186 + 12u) + _242) >> 2u));
    uint _269 = _268.x;
    uint _275 = _180 * _174;
    uint _276 = _275 + 12u;
    uint _297;
    uint _298;
    uint _299;
    uint _300;
    if (_185)
    {
        uvec4 _278 = texelFetch(l_geomAttrib_0, int(_276 >> 2u));
        uint _279 = _278.x;
        _297 = _279 & 255u;
        _298 = (_279 >> 8u) & 255u;
        _299 = (_279 >> 16u) & 255u;
        _300 = 16u;
    }
    else
    {
        uint _285 = _276 >> 2u;
        uvec2 _291 = uvec2(texelFetch(l_geomAttrib_0, int(_285)).x, texelFetch(l_geomAttrib_0, int(_285 + 1u)).x);
        uint _292 = _291.x;
        _297 = _292 & 65535u;
        _298 = _292 >> 16u;
        _299 = _291.y & 65535u;
        _300 = 20u;
    }
    uvec4 _306 = texelFetch(l_geomAttrib_0, int((_300 + _275) >> 2u));
    uint _307 = _306.x;
    uint _319;
    if (_237)
    {
        _319 = _300 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_184)
        {
            frontier_phi_16_17_ladder = _300 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _300 + 12u;
        }
        _319 = frontier_phi_16_17_ladder;
    }
    uint _323 = _182 ? (_319 + 4u) : _319;
    uvec4 _326 = texelFetch(l_geomAttrib_0, int((_323 + _275) >> 2u));
    uint _327 = _326.x;
    uvec4 _339 = texelFetch(l_geomAttrib_0, int(((_275 + 8u) + _323) >> 2u));
    uint _340 = _339.x;
    float _344 = float(int(uint(int(_340 << 16u) >> int(16u))));
    float _345 = float(int(uint(int(_340) >> int(16u))));
    uvec4 _349 = texelFetch(l_geomAttrib_0, int(((_275 + 12u) + _323) >> 2u));
    uint _350 = _349.x;
    uint _356 = _180 * _175;
    uint _357 = _356 + 12u;
    uint _378;
    uint _379;
    uint _380;
    uint _381;
    if (_185)
    {
        uvec4 _359 = texelFetch(l_geomAttrib_0, int(_357 >> 2u));
        uint _360 = _359.x;
        _378 = _360 & 255u;
        _379 = (_360 >> 8u) & 255u;
        _380 = (_360 >> 16u) & 255u;
        _381 = 16u;
    }
    else
    {
        uint _366 = _357 >> 2u;
        uvec2 _372 = uvec2(texelFetch(l_geomAttrib_0, int(_366)).x, texelFetch(l_geomAttrib_0, int(_366 + 1u)).x);
        uint _373 = _372.x;
        _378 = _373 & 65535u;
        _379 = _373 >> 16u;
        _380 = _372.y & 65535u;
        _381 = 20u;
    }
    uvec4 _387 = texelFetch(l_geomAttrib_0, int((_381 + _356) >> 2u));
    uint _388 = _387.x;
    uint _400;
    if (_237)
    {
        _400 = _381 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_184)
        {
            frontier_phi_23_24_ladder = _381 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _381 + 12u;
        }
        _400 = frontier_phi_23_24_ladder;
    }
    uint _404 = _182 ? (_400 + 4u) : _400;
    uvec4 _407 = texelFetch(l_geomAttrib_0, int((_404 + _356) >> 2u));
    uint _408 = _407.x;
    uvec4 _420 = texelFetch(l_geomAttrib_0, int(((_356 + 8u) + _404) >> 2u));
    uint _421 = _420.x;
    float _425 = float(int(uint(int(_421 << 16u) >> int(16u))));
    float _426 = float(int(uint(int(_421) >> int(16u))));
    uvec4 _430 = texelFetch(l_geomAttrib_0, int(((_356 + 12u) + _404) >> 2u));
    uint _431 = _430.x;
    bool _438 = _131.z == 0u;
    float _474;
    float _475;
    float _476;
    if (_438)
    {
        uint _441 = _172 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _172 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _512;
    float _513;
    float _514;
    if (_438)
    {
        uint _479 = _174 * 3u;
        uvec3 _488 = uvec3(texelFetch(l_geomPositionBuffer, int(_479)).x, texelFetch(l_geomPositionBuffer, int(_479 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_479 + 2u)).x);
        _512 = uintBitsToFloat(_488.x);
        _513 = uintBitsToFloat(_488.y);
        _514 = uintBitsToFloat(_488.z);
    }
    else
    {
        uint _496 = _174 * 2u;
        uvec2 _502 = uvec2(texelFetch(l_geomPositionBuffer, int(_496)).x, texelFetch(l_geomPositionBuffer, int(_496 + 1u)).x);
        uint _503 = _502.x;
        _512 = unpackHalf2x16(_503).x;
        _513 = unpackHalf2x16(_503 >> 16u).x;
        _514 = unpackHalf2x16(_502.y).x;
    }
    float _550;
    float _551;
    float _552;
    if (_438)
    {
        uint _517 = _175 * 3u;
        uvec3 _526 = uvec3(texelFetch(l_geomPositionBuffer, int(_517)).x, texelFetch(l_geomPositionBuffer, int(_517 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_517 + 2u)).x);
        _550 = uintBitsToFloat(_526.x);
        _551 = uintBitsToFloat(_526.y);
        _552 = uintBitsToFloat(_526.z);
    }
    else
    {
        uint _534 = _175 * 2u;
        uvec2 _540 = uvec2(texelFetch(l_geomPositionBuffer, int(_534)).x, texelFetch(l_geomPositionBuffer, int(_534 + 1u)).x);
        uint _541 = _540.x;
        _550 = unpackHalf2x16(_541).x;
        _551 = unpackHalf2x16(_541 >> 16u).x;
        _552 = unpackHalf2x16(_540.y).x;
    }
    float _555 = (1.0 - hit._m0.x) - hit._m0.y;
    float _611 = (_344 - _263) * 0.00048828125;
    float _613 = (_345 - _264) * 0.00048828125;
    float _616 = (_425 - _263) * 0.00048828125;
    float _617 = (_426 - _264) * 0.00048828125;
    float _639 = _512 - _474;
    float _640 = _513 - _475;
    float _641 = _514 - _476;
    float _644 = fma(_641, gl_ObjectToWorldEXT[2u].x, fma(_640, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _639));
    float _647 = fma(_641, gl_ObjectToWorldEXT[2u].y, fma(_640, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _639));
    float _650 = fma(_641, gl_ObjectToWorldEXT[2u].z, fma(_640, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _639));
    float _651 = _550 - _474;
    float _652 = _551 - _475;
    float _653 = _552 - _476;
    float _656 = fma(_653, gl_ObjectToWorldEXT[2u].x, fma(_652, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _651));
    float _659 = fma(_653, gl_ObjectToWorldEXT[2u].y, fma(_652, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _651));
    float _662 = fma(_653, gl_ObjectToWorldEXT[2u].z, fma(_652, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _651));
    float _663 = (((_344 * hit._m0.x) + (_263 * _555)) + (_425 * hit._m0.y)) * 0.00048828125;
    float _664 = (((_345 * hit._m0.x) + (_264 * _555)) + (_426 * hit._m0.y)) * 0.00048828125;
    float _668 = (((float(_211) * _555) + (-127.0)) + (float(_297) * hit._m0.x)) + (float(_378) * hit._m0.y);
    float _671 = (((float(_212) * _555) + (-127.0)) + (float(_298) * hit._m0.x)) + (float(_379) * hit._m0.y);
    float _674 = (((float(_213) * _555) + (-127.0)) + (float(_299) * hit._m0.x)) + (float(_380) * hit._m0.y);
    float _675 = _668 * 0.0078740157186985015869140625;
    float _677 = _671 * 0.0078740157186985015869140625;
    float _678 = _674 * 0.0078740157186985015869140625;
    float _691 = ((((float(_223 & 255u) * _555) + (-127.0)) + (float(_307 & 255u) * hit._m0.x)) + (float(_388 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _692 = ((((float((_223 >> 8u) & 255u) * _555) + (-127.0)) + (float((_307 >> 8u) & 255u) * hit._m0.x)) + (float((_388 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _693 = ((((float((_223 >> 16u) & 255u) * _555) + (-127.0)) + (float((_307 >> 16u) & 255u) * hit._m0.x)) + (float((_388 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _694 = ((((float(_223 >> 24u) * _555) + (-127.0)) + (float(_307 >> 24u) * hit._m0.x)) + (float(_388 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _704 = ((_692 * _678) - (_693 * _677)) * _694;
    float _705 = ((_693 * _675) - (_691 * _678)) * _694;
    float _706 = ((_691 * _677) - (_692 * _675)) * _694;
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _710 * _704;
    float _712 = _710 * _705;
    float _713 = _710 * _706;
    float _734 = cbMtdParam._m0[15u].w + cbPerFrame._m0[22u].x;
    float _737 = ((cbMtdParam._m0[19u].z * cbMtdParam._m0[16u].x) * _734) + _663;
    float _738 = ((cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].x) * _734) + _664;
    float _745 = _734 * cbMtdParam._m0[16u].x;
    float _762 = (cbTextureTilingScale._m0[3u].x * (((cbMtdParam._m0[20u].x * cbMtdParam._m0[16u].x) * _734) + _663)) + cbTextureTilingScale._m0[3u].z;
    float _763 = (((_745 * cbMtdParam._m0[20u].y) + _664) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w;
    uvec2 _765 = uvec2(textureSize(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    bool _770 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _823;
    if (_770)
    {
        float _781 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _787 = (_662 * _647) - (_659 * _650);
        float _790 = (_656 * _650) - (_662 * _644);
        float _793 = (_659 * _644) - (_656 * _647);
        float _820 = ((log2((((float(_765.y) * 0.5) * float(_765.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_790 * _790) + (_793 * _793)) + (_787 * _787)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_781 * gl_WorldRayDirectionEXT.x, _781 * gl_WorldRayDirectionEXT.y, _781 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    }
    else
    {
        _823 = 0.0;
    }
    vec4 _827 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_762, _763), _823);
    float _833 = (_827.x * 2.0) + (-1.0);
    float _835 = (_827.y * 2.0) + (-1.0);
    float _839 = 1.0 - dot(vec2(_833, _835), vec2(_833, _835));
    float _1982 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _841 = sqrt(isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0)));
    float _844 = fma(_841, _675, fma(_835, _691, _833 * _711));
    float _847 = fma(_841, _677, fma(_835, _692, _833 * _712));
    float _850 = fma(_841, _678, fma(_835, _693, _833 * _713));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = cbPerFrame._m0[22u].x * 2.0;
    float _856 = _855 * cbMtdParam._m0[15u].x;
    float _864 = (((_847 * 0.5) * _854) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _866 = (-0.0) - (cbMtdParam._m0[14u].w * (((_844 * 0.5) * _854) + (-0.25)));
    float _868 = fract(_856);
    float _870 = fract(_856 + 0.5);
    float _881 = abs((_868 * 2.0) + (-1.0));
    vec4 _899 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_868 * _866) + _737) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_864 * _868) + _738) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0);
    float _901 = _899.x;
    float _902 = _899.y;
    float _903 = _899.z;
    vec4 _904 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_870 * _866) + _737) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_864 * _870) + _738) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w), 0.0);
    float _925 = cbMtdParam._m0[17u].w * ((((float((_350 >> 8u) & 255u) * hit._m0.x) + (float((_269 >> 8u) & 255u) * _555)) + (float((_431 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _939 = (_745 * cbMtdParam._m0[21u].x) + _663;
    float _940 = (_745 * cbMtdParam._m0[21u].y) + _664;
    float _993;
    if (_770)
    {
        float _953 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _959 = (_662 * _647) - (_659 * _650);
        float _962 = (_656 * _650) - (_662 * _644);
        float _965 = (_659 * _644) - (_656 * _647);
        float _991 = ((log2((((float(_765.y) * 0.5) * float(_765.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_962 * _962) + (_965 * _965)) + (_959 * _959)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_953 * gl_WorldRayDirectionEXT.x, _953 * gl_WorldRayDirectionEXT.y, _953 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _993 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    }
    else
    {
        _993 = 0.0;
    }
    vec4 _995 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_762, _763), _993);
    float _1001 = (_995.x * 2.0) + (-1.0);
    float _1002 = (_995.y * 2.0) + (-1.0);
    float _1006 = 1.0 - dot(vec2(_1001, _1002), vec2(_1001, _1002));
    float _1998 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0)));
    float _1011 = fma(_1008, _675, fma(_1002, _691, _1001 * _711));
    float _1014 = fma(_1008, _677, fma(_1002, _692, _1001 * _712));
    float _1017 = fma(_1008, _678, fma(_1002, _693, _1001 * _713));
    float _1021 = inversesqrt(dot(vec3(_1011, _1014, _1017), vec3(_1011, _1014, _1017)));
    float _1022 = _855 * cbMtdParam._m0[16u].x;
    float _1023 = _1022 * cbMtdParam._m0[14u].y;
    float _1030 = (((_1014 * 0.5) * _1021) + (-0.25)) * cbMtdParam._m0[16u].w;
    float _1032 = (-0.0) - (cbMtdParam._m0[16u].w * (((_1011 * 0.5) * _1021) + (-0.25)));
    float _1033 = fract(_1023);
    float _1035 = fract(_1023 + 0.5);
    float _1046 = abs((_1033 * 2.0) + (-1.0));
    vec4 _1063 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1033 * _1032) + _939) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1030 * _1033) + _940) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1065 = _1063.x;
    float _1066 = _1063.y;
    float _1067 = _1063.z;
    vec4 _1068 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1035 * _1032) + _939) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1030 * _1035) + _940) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1098 = (_745 * cbMtdParam._m0[18u].x) + _663;
    float _1099 = (_745 * cbMtdParam._m0[18u].y) + _664;
    float _1153;
    if (_770)
    {
        float _1113 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1119 = (_662 * _647) - (_659 * _650);
        float _1122 = (_656 * _650) - (_662 * _644);
        float _1125 = (_659 * _644) - (_656 * _647);
        float _1151 = ((log2((((float(_765.y) * 0.5) * float(_765.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1122 * _1122) + (_1125 * _1125)) + (_1119 * _1119)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1113 * gl_WorldRayDirectionEXT.x, _1113 * gl_WorldRayDirectionEXT.y, _1113 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1153 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    }
    else
    {
        _1153 = 0.0;
    }
    vec4 _1155 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_762, _763), _1153);
    float _1161 = (_1155.x * 2.0) + (-1.0);
    float _1162 = (_1155.y * 2.0) + (-1.0);
    float _1166 = 1.0 - dot(vec2(_1161, _1162), vec2(_1161, _1162));
    float _2014 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1168 = sqrt(isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0)));
    float _1171 = fma(_1168, _675, fma(_1162, _691, _1161 * _711));
    float _1174 = fma(_1168, _677, fma(_1162, _692, _1161 * _712));
    float _1177 = fma(_1168, _678, fma(_1162, _693, _1161 * _713));
    float _1181 = inversesqrt(dot(vec3(_1171, _1174, _1177), vec3(_1171, _1174, _1177)));
    float _1182 = _855 * (cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x);
    float _1189 = (((_1174 * 0.5) * _1181) + (-0.25)) * cbMtdParam._m0[16u].z;
    float _1191 = (-0.0) - (cbMtdParam._m0[16u].z * (((_1171 * 0.5) * _1181) + (-0.25)));
    float _1192 = fract(_1182);
    float _1194 = fract(_1182 + 0.5);
    float _1205 = abs((_1192 * 2.0) + (-1.0));
    vec4 _1222 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1192 * _1191) + _1098) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1189 * _1192) + _1099) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1224 = _1222.x;
    float _1225 = _1222.y;
    float _1226 = _1222.z;
    vec4 _1227 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1194 * _1191) + _1098) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1189 * _1194) + _1099) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1256 = (_745 * cbMtdParam._m0[19u].x) + _663;
    float _1257 = (_745 * cbMtdParam._m0[19u].y) + _664;
    float _1308;
    if (_770)
    {
        float _1268 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1274 = (_662 * _647) - (_659 * _650);
        float _1277 = (_656 * _650) - (_662 * _644);
        float _1280 = (_659 * _644) - (_656 * _647);
        float _1306 = ((log2((((float(_765.y) * 0.5) * float(_765.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1277 * _1277) + (_1280 * _1280)) + (_1274 * _1274)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1268 * gl_WorldRayDirectionEXT.x, _1268 * gl_WorldRayDirectionEXT.y, _1268 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1308 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    }
    else
    {
        _1308 = 0.0;
    }
    vec4 _1310 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_762, _763), _1308);
    float _1316 = (_1310.x * 2.0) + (-1.0);
    float _1317 = (_1310.y * 2.0) + (-1.0);
    float _1321 = 1.0 - dot(vec2(_1316, _1317), vec2(_1316, _1317));
    float _2030 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1323 = sqrt(isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0)));
    float _1326 = fma(_1323, _675, fma(_1317, _691, _1316 * _711));
    float _1329 = fma(_1323, _677, fma(_1317, _692, _1316 * _712));
    float _1332 = fma(_1323, _678, fma(_1317, _693, _1316 * _713));
    float _1336 = inversesqrt(dot(vec3(_1326, _1329, _1332), vec3(_1326, _1329, _1332)));
    float _1343 = (((_1329 * 0.5) * _1336) + (-0.25)) * cbMtdParam._m0[16u].z;
    float _1345 = (-0.0) - (cbMtdParam._m0[16u].z * (((_1326 * 0.5) * _1336) + (-0.25)));
    vec4 _1371 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1192 * _1345) + _1256) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1343 * _1192) + _1257) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1373 = _1371.x;
    float _1374 = _1371.y;
    float _1375 = _1371.z;
    vec4 _1376 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1194 * _1345) + _1256) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1343 * _1194) + _1257) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1397 = ((((((_1227.x - _1224) * _1205) + _1224) * cbMtdParam._m0[10u].x) + ((((_1068.x - _1065) * _1046) + _1065) * cbMtdParam._m0[9u].x)) + ((((_1376.x - _1373) * _1205) + _1373) * cbMtdParam._m0[12u].x)) * cbMtdParam._m0[14u].x;
    float _1398 = ((((((_1227.y - _1225) * _1205) + _1225) * cbMtdParam._m0[10u].y) + ((((_1068.y - _1066) * _1046) + _1066) * cbMtdParam._m0[9u].y)) + ((((_1376.y - _1374) * _1205) + _1374) * cbMtdParam._m0[12u].y)) * cbMtdParam._m0[14u].x;
    float _1399 = ((((((_1227.z - _1226) * _1205) + _1226) * cbMtdParam._m0[10u].z) + ((((_1068.z - _1067) * _1046) + _1067) * cbMtdParam._m0[9u].z)) + ((((_1376.z - _1375) * _1205) + _1375) * cbMtdParam._m0[12u].z)) * cbMtdParam._m0[14u].x;
    float _1410 = (_745 * cbMtdParam._m0[20u].z) + _663;
    float _1411 = (_745 * cbMtdParam._m0[20u].w) + _664;
    uvec2 _1431 = uvec2(textureSize(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_5, int(0u)));
    float _1435 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1436 = _1435 * gl_WorldRayDirectionEXT.x;
    float _1437 = _1435 * gl_WorldRayDirectionEXT.y;
    float _1438 = _1435 * gl_WorldRayDirectionEXT.z;
    float _1482;
    if (_770)
    {
        float _1448 = (_662 * _647) - (_659 * _650);
        float _1451 = (_656 * _650) - (_662 * _644);
        float _1454 = (_659 * _644) - (_656 * _647);
        float _1480 = ((log2((((float(_1431.y) * 0.5) * float(_1431.x)) * abs((_617 * _611) - (_616 * _613))) / (sqrt(((_1451 * _1451) + (_1454 * _1454)) + (_1448 * _1448)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_120) / abs(dot(vec3(_1436, _1437, _1438), vec3(_675, _677, _678))));
        _1482 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    }
    else
    {
        _1482 = 0.0;
    }
    vec4 _1484 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * ((_745 * cbMtdParam._m0[21u].z) + _663)) + cbTextureTilingScale._m0[4u].z, (((_745 * cbMtdParam._m0[21u].w) + _664) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), _1482);
    float _1490 = (_1484.x * 2.0) + (-1.0);
    float _1491 = (_1484.y * 2.0) + (-1.0);
    float _1495 = 1.0 - dot(vec2(_1490, _1491), vec2(_1490, _1491));
    float _2046 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _1497 = sqrt(isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0)));
    float _1500 = fma(_1497, _675, fma(_1491, _691, _1490 * _711));
    float _1503 = fma(_1497, _677, fma(_1491, _692, _1490 * _712));
    float _1506 = fma(_1497, _678, fma(_1491, _693, _1490 * _713));
    float _1510 = inversesqrt(dot(vec3(_1500, _1503, _1506), vec3(_1500, _1503, _1506)));
    float _1511 = _1022 * cbMtdParam._m0[17u].y;
    float _1518 = (((_1503 * 0.5) * _1510) + (-0.25)) * cbMtdParam._m0[17u].x;
    float _1520 = (-0.0) - (cbMtdParam._m0[17u].x * (((_1500 * 0.5) * _1510) + (-0.25)));
    float _1521 = fract(_1511);
    float _1523 = fract(_1511 + 0.5);
    float _1534 = abs((_1521 * 2.0) + (-1.0));
    vec4 _1551 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1521 * _1520) + _1410) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1518 * _1521) + _1411) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1553 = _1551.x;
    float _1554 = _1551.y;
    float _1555 = _1551.z;
    vec4 _1556 = textureLod(sampler2D(M_Flow_Blend_ABlend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1523 * _1520) + _1410) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1518 * _1523) + _1411) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1574 = cbMtdParam._m0[14u].z * ((((float(_350 & 255u) * hit._m0.x) + (float(_269 & 255u) * _555)) + (float(_431 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _1581 = (_1574 * (((((_1556.x - _1553) * _1534) + _1553) * cbMtdParam._m0[11u].x) - _1397)) + _1397;
    float _1582 = (_1574 * (((((_1556.y - _1554) * _1534) + _1554) * cbMtdParam._m0[11u].y) - _1398)) + _1398;
    float _1583 = (_1574 * (((((_1556.z - _1555) * _1534) + _1555) * cbMtdParam._m0[11u].z) - _1399)) + _1399;
    float _1593 = inversesqrt(dot(vec3(_675, _677, _678), vec3(_675, _677, _678)));
    float _1594 = _1593 * _675;
    float _1595 = _1593 * _677;
    float _1596 = _1593 * _678;
    float _1608 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1609 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1610 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1611 = (-0.0) - _1436;
    float _1612 = (-0.0) - _1437;
    float _1613 = (-0.0) - _1438;
    float _1619 = float(gl_LaunchIDEXT.x);
    float _1620 = float(gl_LaunchIDEXT.y);
    float _1623 = float(gl_LaunchSizeEXT.x);
    float _1637 = fract(fract(sin(dot(vec2(_1619 / _1623, _1620 / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1650 = fract(fract(sin(dot(vec2((_1619 + 128.0) / _1623, (_1620 + 128.0) / _83), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _69._m0 = 1u;
    uvec4 _1660 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1661 = _1660.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1661, _1660.w, _1661, vec3(_1608, _1609, _1610), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1726;
    float _1727;
    float _1728;
    if (_69._m0 == 0u)
    {
        float _1681 = g_sceneCB._m0[4u].x - _1436;
        float _1682 = g_sceneCB._m0[4u].y - _1437;
        float _1683 = g_sceneCB._m0[4u].z - _1438;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1691 = dot(vec3(_1594, _1595, _1596), vec3(g_sceneCB._m0[4u].xyz));
        float _2057 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1694 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        float _1695 = dot(vec3(_1594, _1595, _1596), vec3(_1611, _1612, _1613));
        float _2068 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1681 * _1687, _1682 * _1687, _1683 * _1687));
        float _2079 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1716 = (0.5 / ((_1694 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0))))) * _1694;
        float _2090 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1718 = (isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0))) * 0.31831014156341552734375;
        _1726 = (_1710 * g_sceneCB._m0[5u].x) * _1718;
        _1727 = (_1710 * g_sceneCB._m0[5u].y) * _1718;
        _1728 = (_1710 * g_sceneCB._m0[5u].z) * _1718;
    }
    else
    {
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    bool _1730 = abs(_1595) < 0.89999997615814208984375;
    float _1732 = float(_1730);
    float _1733 = _1730 ? 0.0 : 1.0;
    float _1736 = (_1732 * _1596) - (_1733 * _1595);
    float _1737 = _1733 * _1594;
    float _1739 = (-0.0) - (_1594 * _1732);
    float _1743 = inversesqrt(dot(vec3(_1736, _1737, _1739), vec3(_1736, _1737, _1739)));
    float _1744 = _1736 * _1743;
    float _1745 = _1737 * _1743;
    float _1746 = _1743 * _1739;
    float _1749 = (_1745 * _1596) - (_1746 * _1595);
    float _1752 = (_1746 * _1594) - (_1744 * _1596);
    float _1755 = (_1744 * _1595) - (_1745 * _1594);
    float _1757;
    float _1765;
    float _1756 = 0.0;
    uint _1758 = 0u;
    float _1762;
    bool _1764;
    for (;;)
    {
        _1762 = (float(_1758) + _1637) * 0.03125;
        _1764 = _1758 == 0u;
        float frontier_phi_49_pred;
        if (_1764)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1900;
            float _1901;
            uint _1903;
            _1900 = 0.0;
            _1901 = 0.5;
            _1903 = _1758;
            float _1766;
            for (;;)
            {
                _1766 = ((_1903 & 1u) != 0u) ? (_1901 + _1900) : _1900;
                uint _1904 = _1903 >> 1u;
                if (_1904 == 0u)
                {
                    break;
                }
                else
                {
                    _1900 = _1766;
                    _1901 *= 0.5;
                    _1903 = _1904;
                }
            }
            frontier_phi_49_pred = _1766;
        }
        _1765 = frontier_phi_49_pred;
        float _1767 = _1765 + _1650;
        float _1771 = sqrt(_1762);
        float _1772 = ((_1767 > 1.0) ? (_1767 + (-1.0)) : _1767) * 6.283185482025146484375;
        float _1775 = cos(_1772) * _1771;
        float _1777 = sin(_1772) * _1771;
        float _1779 = sqrt(1.0 - _1762);
        float _1792 = ((_1779 * _1594) + (_1775 * _1749)) + (_1777 * _1744);
        float _1793 = ((_1779 * _1595) + (_1775 * _1752)) + (_1777 * _1745);
        float _1794 = ((_1779 * _1596) + (_1775 * _1755)) + (_1777 * _1746);
        _68._m0 = 1u;
        uvec4 _1798 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1799 = _1798.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1799, _1798.w, _1799, vec3(_1608, _1609, _1610), 9.9999997473787516355514526367188e-05, vec3(_1792, _1793, _1794), 10000.0, 1);
        float _1805 = dot(vec3(_1594, _1595, _1596), vec3(_1792, _1793, _1794));
        float _2101 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1808 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _1757 = ((float(_68._m0 == 0u) * _1808) / (_1808 * 0.3183098733425140380859375)) + _1756;
        uint _1759 = _1758 + 1u;
        if (_1759 == 32u)
        {
            break;
        }
        else
        {
            _1756 = _1757;
            _1758 = _1759;
            continue;
        }
    }
    float _1817 = _1757 * 0.009947183541953563690185546875;
    float _1822 = dot(vec3(_1436, _1437, _1438), vec3(_1594, _1595, _1596)) * 2.0;
    vec4 _1834 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1436 - (_1822 * _1594), _1437 - (_1822 * _1595), _1438 - (_1822 * _1596)), 4.0);
    float _1839 = dot(vec3(_1611, _1612, _1613), vec3(_1594, _1595, _1596));
    float _2112 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1848 = (exp2(log2(1.0 - (isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1861 = ((((_925 * (((((_904.x - _901) * _881) + _901) * cbMtdParam._m0[13u].x) - _1581)) + _1581) + _1726) + ((_1834.x * _1817) * _1848)) + ((((float(_327 & 255u) * hit._m0.x) + (float(_246 & 255u) * _555)) + (float(_408 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _1868 = ((((_925 * (((((_904.y - _902) * _881) + _902) * cbMtdParam._m0[13u].y) - _1582)) + _1582) + _1727) + ((_1834.y * _1817) * _1848)) + ((((float((_327 >> 8u) & 255u) * hit._m0.x) + (float((_246 >> 8u) & 255u) * _555)) + (float((_408 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _1875 = ((((_925 * (((((_904.z - _903) * _881) + _903) * cbMtdParam._m0[13u].z) - _1583)) + _1583) + _1728) + ((_1834.z * _1817) * _1848)) + ((((float((_327 >> 16u) & 255u) * hit._m0.x) + (float((_246 >> 16u) & 255u) * _555)) + (float((_408 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _2123 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _2134 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _2145 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    bool _1883 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1894;
    _1894.x = _1883 ? ((_668 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0)));
    _1894.y = _1883 ? ((_671 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0)));
    _1894.z = _1883 ? ((_674 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0)));
    payload._m0 = _1894;
}


