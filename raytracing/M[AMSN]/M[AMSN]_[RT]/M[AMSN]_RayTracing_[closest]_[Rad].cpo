#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1246;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _156 & 65535u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _157 >> 16u;
        }
        _162 = frontier_phi_3_2_ladder_1;
        _164 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    uvec2 _633 = uvec2(textureSize(M_AMSN_snp_0_Texture2D_0, int(0u)));
    bool _638 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _691;
    if (_638)
    {
        float _649 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _655 = (_564 * _549) - (_561 * _552);
        float _658 = (_558 * _552) - (_564 * _546);
        float _661 = (_561 * _546) - (_558 * _549);
        float _688 = ((log2((((float(_633.y) * 0.5) * float(_633.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_658 * _658) + (_661 * _661)) + (_655 * _655)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_649 * gl_WorldRayDirectionEXT.x, _649 * gl_WorldRayDirectionEXT.y, _649 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    }
    else
    {
        _691 = 0.0;
    }
    vec4 _695 = textureLod(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _565) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _566) + cbTextureTilingScale._m0[0u].w), _691);
    float _700 = _695.x * cbMtdParam._m0[9u].x;
    float _701 = _695.y * cbMtdParam._m0[9u].y;
    float _702 = _695.z * cbMtdParam._m0[9u].z;
    uvec2 _718 = uvec2(textureSize(M_AMSN_snp_0_Texture2D_2, int(0u)));
    float _769;
    if (_638)
    {
        float _729 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _735 = (_564 * _549) - (_561 * _552);
        float _738 = (_558 * _552) - (_564 * _546);
        float _741 = (_561 * _546) - (_558 * _549);
        float _767 = ((log2((((float(_718.y) * 0.5) * float(_718.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_738 * _738) + (_741 * _741)) + (_735 * _735)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_729 * gl_WorldRayDirectionEXT.x, _729 * gl_WorldRayDirectionEXT.y, _729 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _769 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    }
    else
    {
        _769 = 0.0;
    }
    float _775 = textureLod(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _565) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _566) + cbTextureTilingScale._m0[2u].w), _769).x + cbMtdParam._m0[10u].x;
    uvec2 _787 = uvec2(textureSize(M_AMSN_snp_0_Texture2D_1, int(0u)));
    float _791 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _792 = _791 * gl_WorldRayDirectionEXT.x;
    float _793 = _791 * gl_WorldRayDirectionEXT.y;
    float _794 = _791 * gl_WorldRayDirectionEXT.z;
    float _838;
    if (_638)
    {
        float _804 = (_564 * _549) - (_561 * _552);
        float _807 = (_558 * _552) - (_564 * _546);
        float _810 = (_561 * _546) - (_558 * _549);
        float _836 = ((log2((((float(_787.y) * 0.5) * float(_787.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_807 * _807) + (_810 * _810)) + (_804 * _804)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_792, _793, _794), vec3(_577, _579, _580))));
        _838 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    }
    else
    {
        _838 = 0.0;
    }
    vec4 _841 = textureLod(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _565) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _566) + cbTextureTilingScale._m0[1u].w), _838);
    float _845 = _841.z;
    float _848 = (_841.x * 2.0) + (-1.0);
    float _850 = (_841.y * 2.0) + (-1.0);
    float _851 = dot(vec2(_848, _850), vec2(_848, _850));
    float _1339 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _856 = sqrt(1.0 - (isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0))));
    float _859 = fma(_856, _577, fma(_850, _593, (_612 * _606) * _848));
    float _862 = fma(_856, _579, fma(_850, _594, (_612 * _607) * _848));
    float _865 = fma(_856, _580, fma(_850, _595, (_612 * _608) * _848));
    float _869 = inversesqrt(dot(vec3(_859, _862, _865), vec3(_859, _862, _865)));
    float _870 = _869 * _859;
    float _871 = _869 * _862;
    float _872 = _869 * _865;
    float _884 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _885 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _886 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _887 = (-0.0) - _792;
    float _889 = (-0.0) - _793;
    float _890 = (-0.0) - _794;
    float _896 = float(gl_LaunchIDEXT.x);
    float _897 = float(gl_LaunchIDEXT.y);
    float _900 = float(gl_LaunchSizeEXT.x);
    float _914 = fract(fract(sin(dot(vec2(_896 / _900, _897 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _927 = fract(fract(sin(dot(vec2((_896 + 128.0) / _900, (_897 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _928 = 1.0 - _775;
    float _929 = _928 * _700;
    float _930 = _928 * _701;
    float _931 = _928 * _702;
    float _936 = _775 * (_700 + (-0.039999999105930328369140625));
    float _937 = _775 * (_701 + (-0.039999999105930328369140625));
    float _938 = _775 * (_702 + (-0.039999999105930328369140625));
    float _939 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    _63._m0 = 1u;
    uvec4 _952 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _953 = _952.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _953, _952.w, _953, vec3(_884, _885, _886), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (_63._m0 == 0u)
    {
        float _974 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_870, _871, _872));
        float _1350 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _977 = isnan(1.0) ? _1350 : (isnan(_1350) ? 1.0 : min(_1350, 1.0));
        float _996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _845) * 0.949999988079071044921875);
        float _997 = _996 * _996;
        float _998 = g_sceneCB._m0[4u].x - _792;
        float _999 = g_sceneCB._m0[4u].y - _793;
        float _1000 = g_sceneCB._m0[4u].z - _794;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1005 = _1004 * _998;
        float _1006 = _1004 * _999;
        float _1007 = _1004 * _1000;
        float _1008 = dot(vec3(_870, _871, _872), vec3(g_sceneCB._m0[4u].xyz));
        float _1361 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1011 = isnan(1.0) ? _1361 : (isnan(_1361) ? 1.0 : min(_1361, 1.0));
        float _1012 = dot(vec3(_870, _871, _872), vec3(_887, _889, _890));
        float _1372 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1015 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
        float _1016 = dot(vec3(_870, _871, _872), vec3(_1005, _1006, _1007));
        float _1383 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1019 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
        float _1020 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1005, _1006, _1007));
        float _1394 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _997 * _997;
        float _1028 = ((_1019 * _1019) * (_1024 + (-1.0))) + 1.0;
        float _1037 = exp2(log2(1.0 - (isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0)))) * 5.0);
        float _1048 = 1.0 - _997;
        float _1059 = (0.5 / (((_1015 * ((_1011 * _1048) + _997)) + 9.9999999392252902907785028219223e-09) + (((_1015 * _1048) + _997) * _1011))) * _1011;
        float _1405 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1061 = (isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0))) * (_1024 / ((_1028 * _1028) * 3.141590118408203125));
        _1068 = ((_929 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _977;
        _1069 = ((_930 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _977;
        _1070 = ((_931 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _977;
        _1071 = (((_1037 * (0.959999978542327880859375 - _936)) + _939) * g_sceneCB._m0[5u].x) * _1061;
        _1072 = (((_1037 * (0.959999978542327880859375 - _937)) + _941) * g_sceneCB._m0[5u].y) * _1061;
        _1073 = (((_1037 * (0.959999978542327880859375 - _938)) + _942) * g_sceneCB._m0[5u].z) * _1061;
    }
    else
    {
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    bool _1075 = abs(_871) < 0.89999997615814208984375;
    float _1077 = float(_1075);
    float _1078 = _1075 ? 0.0 : 1.0;
    float _1081 = (_1077 * _872) - (_1078 * _871);
    float _1082 = _1078 * _870;
    float _1084 = (-0.0) - (_870 * _1077);
    float _1088 = inversesqrt(dot(vec3(_1081, _1082, _1084), vec3(_1081, _1082, _1084)));
    float _1089 = _1081 * _1088;
    float _1090 = _1082 * _1088;
    float _1091 = _1088 * _1084;
    float _1094 = (_1090 * _872) - (_1091 * _871);
    float _1097 = (_1091 * _870) - (_1089 * _872);
    float _1100 = (_1089 * _871) - (_1090 * _870);
    float _1102;
    float _1110;
    float _1101 = 0.0;
    uint _1103 = 0u;
    float _1107;
    bool _1109;
    for (;;)
    {
        _1107 = (float(_1103) + _914) * 0.03125;
        _1109 = _1103 == 0u;
        float frontier_phi_45_pred;
        if (_1109)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1251;
            float _1252;
            uint _1254;
            _1251 = 0.0;
            _1252 = 0.5;
            _1254 = _1103;
            float _1111;
            for (;;)
            {
                _1111 = ((_1254 & 1u) != 0u) ? (_1252 + _1251) : _1251;
                uint _1255 = _1254 >> 1u;
                if (_1255 == 0u)
                {
                    break;
                }
                else
                {
                    _1251 = _1111;
                    _1252 *= 0.5;
                    _1254 = _1255;
                }
            }
            frontier_phi_45_pred = _1111;
        }
        _1110 = frontier_phi_45_pred;
        float _1112 = _1110 + _927;
        float _1116 = sqrt(_1107);
        float _1117 = ((_1112 > 1.0) ? (_1112 + (-1.0)) : _1112) * 6.283185482025146484375;
        float _1120 = cos(_1117) * _1116;
        float _1122 = sin(_1117) * _1116;
        float _1124 = sqrt(1.0 - _1107);
        float _1137 = ((_1124 * _870) + (_1120 * _1094)) + (_1122 * _1089);
        float _1138 = ((_1124 * _871) + (_1120 * _1097)) + (_1122 * _1090);
        float _1139 = ((_1124 * _872) + (_1120 * _1100)) + (_1122 * _1091);
        _62._m0 = 1u;
        uvec4 _1143 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1144 = _1143.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1144, _1143.w, _1144, vec3(_884, _885, _886), 9.9999997473787516355514526367188e-05, vec3(_1137, _1138, _1139), 10000.0, 1);
        float _1150 = dot(vec3(_870, _871, _872), vec3(_1137, _1138, _1139));
        float _1416 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1153 = isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0));
        _1102 = ((float(_62._m0 == 0u) * _1153) / (_1153 * 0.3183098733425140380859375)) + _1101;
        uint _1104 = _1103 + 1u;
        if (_1104 == 32u)
        {
            break;
        }
        else
        {
            _1101 = _1102;
            _1103 = _1104;
            continue;
        }
    }
    float _1161 = _1102 * 0.009947183541953563690185546875;
    float _1166 = dot(vec3(_792, _793, _794), vec3(_870, _871, _872)) * 2.0;
    vec4 _1180 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_792 - (_1166 * _870), _793 - (_1166 * _871), _794 - (_1166 * _872)), 4.0 - (_845 * 4.0));
    float _1185 = dot(vec3(_887, _889, _890), vec3(_870, _871, _872));
    float _1427 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1195 = exp2(log2(1.0 - (isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0)))) * 5.0);
    vec4 _1207 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_870, _871, _872), 0.0);
    float _1218 = (_1071 + _1068) + (((_1207.x * _929) + (((_1195 * (0.959999978542327880859375 - _936)) + _939) * _1180.x)) * _1161);
    float _1222 = (_1072 + _1069) + (((_1207.y * _930) + (((_1195 * (0.959999978542327880859375 - _937)) + _941) * _1180.y)) * _1161);
    float _1226 = (_1073 + _1070) + (((_1207.z * _931) + (((_1195 * (0.959999978542327880859375 - _938)) + _942) * _1180.z)) * _1161);
    float _1438 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1449 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1460 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    bool _1234 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1245;
    _1245.x = _1234 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0)));
    _1245.y = _1234 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0)));
    _1245.z = _1234 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0)));
    payload._m0 = _1245;
}


