#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _52
{
    vec3 _m0;
};

struct _56
{
    vec2 _m0;
};

struct _59
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _52 payload;
hitAttributeEXT _56 hit;
layout(location = 1) rayPayloadEXT _59 _61;
layout(location = 2) rayPayloadEXT _59 _62;

vec3 _1178;

void main()
{
    float _70 = float(gl_LaunchSizeEXT.y);
    float _100 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _109 = sqrt(((_101 * _101) + (_100 * _100)) + (_102 * _102)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _70)))));
    uvec4 _120 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _121 = _120.y;
    uint _161;
    uint _163;
    uint _164;
    if (_120.x == 0u)
    {
        uint _129 = (_121 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_121 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _155 & 65535u;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _156 >> 16u;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _161 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    uint _172 = _120.w;
    bool _174 = _171 || (_172 == 0u);
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    uint _224 = _168.y;
    bool _225 = _170 == 0u;
    uint _228 = _225 ? 4u : ((_172 != 0u) ? 12u : 8u);
    uvec4 _237 = texelFetch(l_geomAttrib_1, int((((_224 * _161) + 4u) + (_171 ? (_228 + 4u) : _228)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _169 * _163;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_174)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _289 = _225 ? 4u : ((_172 != 0u) ? 12u : 8u);
    uvec4 _296 = texelFetch(l_geomAttrib_1, int((((_224 * _163) + 4u) + (_171 ? (_289 + 4u) : _289)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _169 * _164;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_174)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _348 = _225 ? 4u : ((_172 != 0u) ? 12u : 8u);
    uvec4 _355 = texelFetch(l_geomAttrib_1, int((((_224 * _164) + 4u) + (_171 ? (_348 + 4u) : _348)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _120.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _161 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _161 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _163 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _163 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _164 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _164 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_200) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_201) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_202) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_212 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_212 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_212 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_212 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    uvec2 _634 = uvec2(textureSize(C_AMSN_snp_0_Texture2D_0, int(0u)));
    bool _639 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _692;
    if (_639)
    {
        float _650 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _656 = (_565 * _550) - (_562 * _553);
        float _659 = (_559 * _553) - (_565 * _547);
        float _662 = (_562 * _547) - (_559 * _550);
        float _689 = ((log2((((float(_634.y) * 0.5) * float(_634.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_659 * _659) + (_662 * _662)) + (_656 * _656)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_650 * gl_WorldRayDirectionEXT.x, _650 * gl_WorldRayDirectionEXT.y, _650 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    }
    else
    {
        _692 = 0.0;
    }
    vec4 _696 = textureLod(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _566) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _567) + cbTextureTilingScale._m0[0u].w), _692);
    float _701 = _696.x * cbMtdParam._m0[9u].x;
    float _702 = _696.y * cbMtdParam._m0[9u].y;
    float _703 = _696.z * cbMtdParam._m0[9u].z;
    uvec2 _719 = uvec2(textureSize(C_AMSN_snp_0_Texture2D_1, int(0u)));
    float _723 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _724 = _723 * gl_WorldRayDirectionEXT.x;
    float _725 = _723 * gl_WorldRayDirectionEXT.y;
    float _726 = _723 * gl_WorldRayDirectionEXT.z;
    float _770;
    if (_639)
    {
        float _736 = (_565 * _550) - (_562 * _553);
        float _739 = (_559 * _553) - (_565 * _547);
        float _742 = (_562 * _547) - (_559 * _550);
        float _768 = ((log2((((float(_719.y) * 0.5) * float(_719.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_739 * _739) + (_742 * _742)) + (_736 * _736)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_724, _725, _726), vec3(_578, _580, _581))));
        _770 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    }
    else
    {
        _770 = 0.0;
    }
    vec4 _773 = textureLod(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _770);
    float _777 = _773.z;
    float _780 = (_773.x * 2.0) + (-1.0);
    float _782 = (_773.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_780, _782), vec2(_780, _782));
    float _1246 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _788 = sqrt(1.0 - (isnan(1.0) ? _1246 : (isnan(_1246) ? 1.0 : min(_1246, 1.0))));
    float _791 = fma(_788, _578, fma(_782, _594, (_613 * _607) * _780));
    float _794 = fma(_788, _580, fma(_782, _595, (_613 * _608) * _780));
    float _797 = fma(_788, _581, fma(_782, _596, (_613 * _609) * _780));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _816 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _817 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _818 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _819 = (-0.0) - _724;
    float _821 = (-0.0) - _725;
    float _822 = (-0.0) - _726;
    float _828 = float(gl_LaunchIDEXT.x);
    float _829 = float(gl_LaunchIDEXT.y);
    float _832 = float(gl_LaunchSizeEXT.x);
    float _846 = fract(fract(sin(dot(vec2(_828 / _832, _829 / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _859 = fract(fract(sin(dot(vec2((_828 + 128.0) / _832, (_829 + 128.0) / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _860 = 1.0 - cbMtdParam._m0[10u].x;
    float _861 = _860 * _701;
    float _862 = _860 * _702;
    float _863 = _860 * _703;
    float _868 = (_701 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _869 = (_702 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _870 = (_703 + (-0.039999999105930328369140625)) * cbMtdParam._m0[10u].x;
    float _871 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    _62._m0 = 1u;
    uvec4 _884 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _885 = _884.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _885, _884.w, _885, vec3(_816, _817, _818), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (_62._m0 == 0u)
    {
        float _906 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_802, _803, _804));
        float _1257 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _909 = isnan(1.0) ? _1257 : (isnan(_1257) ? 1.0 : min(_1257, 1.0));
        float _928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _777) * 0.949999988079071044921875);
        float _929 = _928 * _928;
        float _930 = g_sceneCB._m0[4u].x - _724;
        float _931 = g_sceneCB._m0[4u].y - _725;
        float _932 = g_sceneCB._m0[4u].z - _726;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _937 = _936 * _930;
        float _938 = _936 * _931;
        float _939 = _936 * _932;
        float _940 = dot(vec3(_802, _803, _804), vec3(g_sceneCB._m0[4u].xyz));
        float _1268 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _943 = isnan(1.0) ? _1268 : (isnan(_1268) ? 1.0 : min(_1268, 1.0));
        float _944 = dot(vec3(_802, _803, _804), vec3(_819, _821, _822));
        float _1279 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _947 = isnan(1.0) ? _1279 : (isnan(_1279) ? 1.0 : min(_1279, 1.0));
        float _948 = dot(vec3(_802, _803, _804), vec3(_937, _938, _939));
        float _1290 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _951 = isnan(1.0) ? _1290 : (isnan(_1290) ? 1.0 : min(_1290, 1.0));
        float _952 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_937, _938, _939));
        float _1301 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _929 * _929;
        float _960 = ((_951 * _951) * (_956 + (-1.0))) + 1.0;
        float _969 = exp2(log2(1.0 - (isnan(1.0) ? _1301 : (isnan(_1301) ? 1.0 : min(_1301, 1.0)))) * 5.0);
        float _980 = 1.0 - _929;
        float _991 = (0.5 / (((_947 * ((_943 * _980) + _929)) + 9.9999999392252902907785028219223e-09) + (((_947 * _980) + _929) * _943))) * _943;
        float _1312 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _993 = (isnan(1.0) ? _1312 : (isnan(_1312) ? 1.0 : min(_1312, 1.0))) * (_956 / ((_960 * _960) * 3.141590118408203125));
        _1000 = ((_861 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _909;
        _1001 = ((_862 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _909;
        _1002 = ((_863 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _909;
        _1003 = (((_969 * (0.959999978542327880859375 - _868)) + _871) * g_sceneCB._m0[5u].x) * _993;
        _1004 = (((_969 * (0.959999978542327880859375 - _869)) + _873) * g_sceneCB._m0[5u].y) * _993;
        _1005 = (((_969 * (0.959999978542327880859375 - _870)) + _874) * g_sceneCB._m0[5u].z) * _993;
    }
    else
    {
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    bool _1007 = abs(_803) < 0.89999997615814208984375;
    float _1009 = float(_1007);
    float _1010 = _1007 ? 0.0 : 1.0;
    float _1013 = (_1009 * _804) - (_1010 * _803);
    float _1014 = _1010 * _802;
    float _1016 = (-0.0) - (_802 * _1009);
    float _1020 = inversesqrt(dot(vec3(_1013, _1014, _1016), vec3(_1013, _1014, _1016)));
    float _1021 = _1013 * _1020;
    float _1022 = _1014 * _1020;
    float _1023 = _1020 * _1016;
    float _1026 = (_1022 * _804) - (_1023 * _803);
    float _1029 = (_1023 * _802) - (_1021 * _804);
    float _1032 = (_1021 * _803) - (_1022 * _802);
    float _1034;
    float _1042;
    float _1033 = 0.0;
    uint _1035 = 0u;
    float _1039;
    bool _1041;
    for (;;)
    {
        _1039 = (float(_1035) + _846) * 0.03125;
        _1041 = _1035 == 0u;
        float frontier_phi_31_pred;
        if (_1041)
        {
            frontier_phi_31_pred = 0.0;
        }
        else
        {
            float _1183;
            float _1184;
            uint _1186;
            _1183 = 0.0;
            _1184 = 0.5;
            _1186 = _1035;
            float _1043;
            for (;;)
            {
                _1043 = ((_1186 & 1u) != 0u) ? (_1184 + _1183) : _1183;
                uint _1187 = _1186 >> 1u;
                if (_1187 == 0u)
                {
                    break;
                }
                else
                {
                    _1183 = _1043;
                    _1184 *= 0.5;
                    _1186 = _1187;
                }
            }
            frontier_phi_31_pred = _1043;
        }
        _1042 = frontier_phi_31_pred;
        float _1044 = _1042 + _859;
        float _1048 = sqrt(_1039);
        float _1049 = ((_1044 > 1.0) ? (_1044 + (-1.0)) : _1044) * 6.283185482025146484375;
        float _1052 = cos(_1049) * _1048;
        float _1054 = sin(_1049) * _1048;
        float _1056 = sqrt(1.0 - _1039);
        float _1069 = ((_1056 * _802) + (_1052 * _1026)) + (_1054 * _1021);
        float _1070 = ((_1056 * _803) + (_1052 * _1029)) + (_1054 * _1022);
        float _1071 = ((_1056 * _804) + (_1052 * _1032)) + (_1054 * _1023);
        _61._m0 = 1u;
        uvec4 _1075 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1076 = _1075.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1076, _1075.w, _1076, vec3(_816, _817, _818), 9.9999997473787516355514526367188e-05, vec3(_1069, _1070, _1071), 10000.0, 1);
        float _1082 = dot(vec3(_802, _803, _804), vec3(_1069, _1070, _1071));
        float _1323 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1085 = isnan(1.0) ? _1323 : (isnan(_1323) ? 1.0 : min(_1323, 1.0));
        _1034 = ((float(_61._m0 == 0u) * _1085) / (_1085 * 0.3183098733425140380859375)) + _1033;
        uint _1036 = _1035 + 1u;
        if (_1036 == 32u)
        {
            break;
        }
        else
        {
            _1033 = _1034;
            _1035 = _1036;
            continue;
        }
    }
    float _1093 = _1034 * 0.009947183541953563690185546875;
    float _1098 = dot(vec3(_724, _725, _726), vec3(_802, _803, _804)) * 2.0;
    vec4 _1112 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_724 - (_1098 * _802), _725 - (_1098 * _803), _726 - (_1098 * _804)), 4.0 - (_777 * 4.0));
    float _1117 = dot(vec3(_819, _821, _822), vec3(_802, _803, _804));
    float _1334 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1127 = exp2(log2(1.0 - (isnan(1.0) ? _1334 : (isnan(_1334) ? 1.0 : min(_1334, 1.0)))) * 5.0);
    vec4 _1139 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_802, _803, _804), 0.0);
    float _1150 = (_1003 + _1000) + (((_1139.x * _861) + (((_1127 * (0.959999978542327880859375 - _868)) + _871) * _1112.x)) * _1093);
    float _1154 = (_1004 + _1001) + (((_1139.y * _862) + (((_1127 * (0.959999978542327880859375 - _869)) + _873) * _1112.y)) * _1093);
    float _1158 = (_1005 + _1002) + (((_1139.z * _863) + (((_1127 * (0.959999978542327880859375 - _870)) + _874) * _1112.z)) * _1093);
    float _1345 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1356 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1367 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    bool _1166 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1177;
    _1177.x = _1166 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1345 : (isnan(_1345) ? 1.0 : min(_1345, 1.0)));
    _1177.y = _1166 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1356 : (isnan(_1356) ? 1.0 : min(_1356, 1.0)));
    _1177.z = _1166 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1367 : (isnan(_1367) ? 1.0 : min(_1367, 1.0)));
    payload._m0 = _1177;
}


