#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _42
{
    vec3 _m0;
};

struct _46
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _42 payload;
hitAttributeEXT _46 hit;

void main()
{
    vec3 _52 = payload._m0;
    float _89 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _90 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _91 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _98 = sqrt(((_90 * _90) + (_89 * _89)) + (_91 * _91)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _109 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _110 = _109.y;
    uint _150;
    uint _152;
    uint _153;
    if (_109.x == 0u)
    {
        uint _118 = (_110 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _127 = uvec3(texelFetch(l_geomIndexBuffer, int(_118)).x, texelFetch(l_geomIndexBuffer, int(_118 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_118 + 2u)).x);
        _150 = _127.x;
        _152 = _127.y;
        _153 = _127.z;
    }
    else
    {
        uint _131 = uint(gl_PrimitiveID) * 6u;
        uint _133 = _131 & 4294967292u;
        uint _136 = (_110 + _133) >> 2u;
        uvec2 _143 = uvec2(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x);
        uint _144 = _143.x;
        uint _145 = _143.y;
        uint _147 = _144 >> 16u;
        uint _148 = _145 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_133 == _131)
        {
            frontier_phi_3_2_ladder = _144 & 65535u;
            frontier_phi_3_2_ladder_1 = _147;
            frontier_phi_3_2_ladder_2 = _148;
        }
        else
        {
            frontier_phi_3_2_ladder = _147;
            frontier_phi_3_2_ladder_1 = _148;
            frontier_phi_3_2_ladder_2 = _145 >> 16u;
        }
        _150 = frontier_phi_3_2_ladder;
        _152 = frontier_phi_3_2_ladder_1;
        _153 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _157 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _158 = _157.x;
    uint _159 = _157.z;
    bool _160 = _159 != 0u;
    uint _161 = _109.w;
    bool _163 = _160 || (_161 == 0u);
    uint _165 = (_158 * _150) + 12u;
    uint _189;
    uint _190;
    uint _191;
    if (_163)
    {
        uvec4 _168 = texelFetch(l_geomAttrib_0, int(_165 >> 2u));
        uint _169 = _168.x;
        _189 = _169 & 255u;
        _190 = (_169 >> 8u) & 255u;
        _191 = (_169 >> 16u) & 255u;
    }
    else
    {
        uint _177 = _165 >> 2u;
        uvec2 _183 = uvec2(texelFetch(l_geomAttrib_0, int(_177)).x, texelFetch(l_geomAttrib_0, int(_177 + 1u)).x);
        uint _184 = _183.x;
        _189 = _184 & 65535u;
        _190 = _184 >> 16u;
        _191 = _183.y & 65535u;
    }
    uint _195 = _157.y;
    bool _196 = _159 == 0u;
    uint _199 = _196 ? 4u : ((_161 != 0u) ? 12u : 8u);
    uvec4 _208 = texelFetch(l_geomAttrib_1, int((((_195 * _150) + 4u) + (_160 ? (_199 + 4u) : _199)) >> 2u));
    uint _209 = _208.x;
    float _213 = float(int(uint(int(_209 << 16u) >> int(16u))));
    float _214 = float(int(uint(int(_209) >> int(16u))));
    uint _216 = (_158 * _152) + 12u;
    uint _238;
    uint _239;
    uint _240;
    if (_163)
    {
        uvec4 _219 = texelFetch(l_geomAttrib_0, int(_216 >> 2u));
        uint _220 = _219.x;
        _238 = _220 & 255u;
        _239 = (_220 >> 8u) & 255u;
        _240 = (_220 >> 16u) & 255u;
    }
    else
    {
        uint _226 = _216 >> 2u;
        uvec2 _232 = uvec2(texelFetch(l_geomAttrib_0, int(_226)).x, texelFetch(l_geomAttrib_0, int(_226 + 1u)).x);
        uint _233 = _232.x;
        _238 = _233 & 65535u;
        _239 = _233 >> 16u;
        _240 = _232.y & 65535u;
    }
    uint _246 = _196 ? 4u : ((_161 != 0u) ? 12u : 8u);
    uvec4 _253 = texelFetch(l_geomAttrib_1, int((((_195 * _152) + 4u) + (_160 ? (_246 + 4u) : _246)) >> 2u));
    uint _254 = _253.x;
    float _258 = float(int(uint(int(_254 << 16u) >> int(16u))));
    float _259 = float(int(uint(int(_254) >> int(16u))));
    uint _261 = (_158 * _153) + 12u;
    uint _283;
    uint _284;
    uint _285;
    if (_163)
    {
        uvec4 _264 = texelFetch(l_geomAttrib_0, int(_261 >> 2u));
        uint _265 = _264.x;
        _283 = _265 & 255u;
        _284 = (_265 >> 8u) & 255u;
        _285 = (_265 >> 16u) & 255u;
    }
    else
    {
        uint _271 = _261 >> 2u;
        uvec2 _277 = uvec2(texelFetch(l_geomAttrib_0, int(_271)).x, texelFetch(l_geomAttrib_0, int(_271 + 1u)).x);
        uint _278 = _277.x;
        _283 = _278 & 65535u;
        _284 = _278 >> 16u;
        _285 = _277.y & 65535u;
    }
    uint _291 = _196 ? 4u : ((_161 != 0u) ? 12u : 8u);
    uvec4 _298 = texelFetch(l_geomAttrib_1, int((((_195 * _153) + 4u) + (_160 ? (_291 + 4u) : _291)) >> 2u));
    uint _299 = _298.x;
    float _303 = float(int(uint(int(_299 << 16u) >> int(16u))));
    float _304 = float(int(uint(int(_299) >> int(16u))));
    bool _306 = _109.z == 0u;
    float _342;
    float _343;
    float _344;
    if (_306)
    {
        uint _309 = _150 * 3u;
        uvec3 _318 = uvec3(texelFetch(l_geomPositionBuffer, int(_309)).x, texelFetch(l_geomPositionBuffer, int(_309 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_309 + 2u)).x);
        _342 = uintBitsToFloat(_318.x);
        _343 = uintBitsToFloat(_318.y);
        _344 = uintBitsToFloat(_318.z);
    }
    else
    {
        uint _326 = _150 * 2u;
        uvec2 _332 = uvec2(texelFetch(l_geomPositionBuffer, int(_326)).x, texelFetch(l_geomPositionBuffer, int(_326 + 1u)).x);
        uint _333 = _332.x;
        _342 = unpackHalf2x16(_333).x;
        _343 = unpackHalf2x16(_333 >> 16u).x;
        _344 = unpackHalf2x16(_332.y).x;
    }
    float _380;
    float _381;
    float _382;
    if (_306)
    {
        uint _347 = _152 * 3u;
        uvec3 _356 = uvec3(texelFetch(l_geomPositionBuffer, int(_347)).x, texelFetch(l_geomPositionBuffer, int(_347 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_347 + 2u)).x);
        _380 = uintBitsToFloat(_356.x);
        _381 = uintBitsToFloat(_356.y);
        _382 = uintBitsToFloat(_356.z);
    }
    else
    {
        uint _364 = _152 * 2u;
        uvec2 _370 = uvec2(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x);
        uint _371 = _370.x;
        _380 = unpackHalf2x16(_371).x;
        _381 = unpackHalf2x16(_371 >> 16u).x;
        _382 = unpackHalf2x16(_370.y).x;
    }
    float _418;
    float _419;
    float _420;
    if (_306)
    {
        uint _385 = _153 * 3u;
        uvec3 _394 = uvec3(texelFetch(l_geomPositionBuffer, int(_385)).x, texelFetch(l_geomPositionBuffer, int(_385 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_385 + 2u)).x);
        _418 = uintBitsToFloat(_394.x);
        _419 = uintBitsToFloat(_394.y);
        _420 = uintBitsToFloat(_394.z);
    }
    else
    {
        uint _402 = _153 * 2u;
        uvec2 _408 = uvec2(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x);
        uint _409 = _408.x;
        _418 = unpackHalf2x16(_409).x;
        _419 = unpackHalf2x16(_409 >> 16u).x;
        _420 = unpackHalf2x16(_408.y).x;
    }
    float _423 = (1.0 - hit._m0.x) - hit._m0.y;
    float _445 = (_258 - _213) * 0.00048828125;
    float _447 = (_259 - _214) * 0.00048828125;
    float _450 = (_303 - _213) * 0.00048828125;
    float _451 = (_304 - _214) * 0.00048828125;
    float _473 = _380 - _342;
    float _474 = _381 - _343;
    float _475 = _382 - _344;
    float _478 = fma(_475, gl_ObjectToWorldEXT[2u].x, fma(_474, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _473));
    float _481 = fma(_475, gl_ObjectToWorldEXT[2u].y, fma(_474, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _473));
    float _484 = fma(_475, gl_ObjectToWorldEXT[2u].z, fma(_474, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _473));
    float _485 = _418 - _342;
    float _486 = _419 - _343;
    float _487 = _420 - _344;
    float _490 = fma(_487, gl_ObjectToWorldEXT[2u].x, fma(_486, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _485));
    float _493 = fma(_487, gl_ObjectToWorldEXT[2u].y, fma(_486, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _485));
    float _496 = fma(_487, gl_ObjectToWorldEXT[2u].z, fma(_486, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _485));
    float _497 = (((_258 * hit._m0.x) + (_213 * _423)) + (_303 * hit._m0.y)) * 0.00048828125;
    float _498 = (((_259 * hit._m0.x) + (_214 * _423)) + (_304 * hit._m0.y)) * 0.00048828125;
    float _509 = ((((float(_189) * _423) + (-127.0)) + (float(_238) * hit._m0.x)) + (float(_283) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _511 = ((((float(_190) * _423) + (-127.0)) + (float(_239) * hit._m0.x)) + (float(_284) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _512 = ((((float(_191) * _423) + (-127.0)) + (float(_240) * hit._m0.x)) + (float(_285) * hit._m0.y)) * 0.0078740157186985015869140625;
    uvec2 _524 = uvec2(textureSize(P_ACParts_snp_0_Texture2D_3, int(0u)));
    bool _529 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _582;
    if (_529)
    {
        float _540 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _546 = (_496 * _481) - (_493 * _484);
        float _549 = (_490 * _484) - (_496 * _478);
        float _552 = (_493 * _478) - (_490 * _481);
        float _579 = ((log2((((float(_524.y) * 0.5) * float(_524.x)) * abs((_451 * _445) - (_450 * _447))) / (sqrt(((_549 * _549) + (_552 * _552)) + (_546 * _546)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_540 * gl_WorldRayDirectionEXT.x, _540 * gl_WorldRayDirectionEXT.y, _540 * gl_WorldRayDirectionEXT.z), vec3(_509, _511, _512))));
        _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    }
    else
    {
        _582 = 0.0;
    }
    uvec2 _600 = uvec2(textureSize(P_ACParts_snp_0_Texture2D_7, int(0u)));
    float _651;
    if (_529)
    {
        float _611 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _617 = (_496 * _481) - (_493 * _484);
        float _620 = (_490 * _484) - (_496 * _478);
        float _623 = (_493 * _478) - (_490 * _481);
        float _649 = ((log2((((float(_600.y) * 0.5) * float(_600.x)) * abs((_451 * _445) - (_450 * _447))) / (sqrt(((_620 * _620) + (_623 * _623)) + (_617 * _617)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_98) / abs(dot(vec3(_611 * gl_WorldRayDirectionEXT.x, _611 * gl_WorldRayDirectionEXT.y, _611 * gl_WorldRayDirectionEXT.z), vec3(_509, _511, _512))));
        _651 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    }
    else
    {
        _651 = 0.0;
    }
    if ((textureLod(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _497) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _498) + cbTextureTilingScale._m0[1u].w), _651).w * textureLod(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _497) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _498) + cbTextureTilingScale._m0[0u].w), _582).w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _52;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _52;
        return;
    }
}


