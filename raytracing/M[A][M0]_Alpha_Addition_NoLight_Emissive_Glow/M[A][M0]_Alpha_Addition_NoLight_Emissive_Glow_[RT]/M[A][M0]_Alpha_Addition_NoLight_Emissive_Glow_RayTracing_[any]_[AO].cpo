#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _39
{
    uint _m0;
};

struct _43
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_Addition_NoLight_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _39 payload;
hitAttributeEXT _43 hit;

void main()
{
    uint _49 = payload._m0;
    float _87 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _107 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _108 = _107.y;
    uint _147;
    uint _149;
    uint _150;
    if (_107.x == 0u)
    {
        uint _115 = (_108 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _124 = uvec3(texelFetch(l_geomIndexBuffer, int(_115)).x, texelFetch(l_geomIndexBuffer, int(_115 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_115 + 2u)).x);
        _147 = _124.x;
        _149 = _124.y;
        _150 = _124.z;
    }
    else
    {
        uint _128 = uint(gl_PrimitiveID) * 6u;
        uint _130 = _128 & 4294967292u;
        uint _133 = (_108 + _130) >> 2u;
        uvec2 _140 = uvec2(texelFetch(l_geomIndexBuffer, int(_133)).x, texelFetch(l_geomIndexBuffer, int(_133 + 1u)).x);
        uint _141 = _140.x;
        uint _142 = _140.y;
        uint _144 = _141 >> 16u;
        uint _145 = _142 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_130 == _128)
        {
            frontier_phi_3_2_ladder = _141 & 65535u;
            frontier_phi_3_2_ladder_1 = _144;
            frontier_phi_3_2_ladder_2 = _145;
        }
        else
        {
            frontier_phi_3_2_ladder = _144;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _142 >> 16u;
        }
        _147 = frontier_phi_3_2_ladder;
        _149 = frontier_phi_3_2_ladder_1;
        _150 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _154 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _155 = _154.x;
    uint _156 = _154.z;
    bool _157 = _156 != 0u;
    bool _159 = _107.w == 0u;
    bool _160 = _157 || _159;
    uint _162 = (_155 * _147) + 12u;
    uint _186;
    uint _187;
    uint _188;
    uint _189;
    if (_160)
    {
        uvec4 _165 = texelFetch(l_geomAttrib_0, int(_162 >> 2u));
        uint _166 = _165.x;
        _186 = _166 & 255u;
        _187 = (_166 >> 8u) & 255u;
        _188 = (_166 >> 16u) & 255u;
        _189 = 20u;
    }
    else
    {
        uint _174 = _162 >> 2u;
        uvec2 _180 = uvec2(texelFetch(l_geomAttrib_0, int(_174)).x, texelFetch(l_geomAttrib_0, int(_174 + 1u)).x);
        uint _181 = _180.x;
        _186 = _181 & 65535u;
        _187 = _181 >> 16u;
        _188 = _180.y & 65535u;
        _189 = 24u;
    }
    bool _195 = _156 == 0u;
    uint _196;
    if (_195)
    {
        _196 = _189;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_159)
        {
            frontier_phi_9_10_ladder = _189 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _189 + 8u;
        }
        _196 = frontier_phi_9_10_ladder;
    }
    uvec4 _207 = texelFetch(l_geomAttrib_0, int((((_155 * _147) + 4u) + (_157 ? (_196 + 4u) : _196)) >> 2u));
    uint _208 = _207.x;
    float _212 = float(int(uint(int(_208 << 16u) >> int(16u))));
    float _213 = float(int(uint(int(_208) >> int(16u))));
    uint _215 = (_155 * _149) + 12u;
    uint _236;
    uint _237;
    uint _238;
    uint _239;
    if (_160)
    {
        uvec4 _217 = texelFetch(l_geomAttrib_0, int(_215 >> 2u));
        uint _218 = _217.x;
        _236 = _218 & 255u;
        _237 = (_218 >> 8u) & 255u;
        _238 = (_218 >> 16u) & 255u;
        _239 = 20u;
    }
    else
    {
        uint _224 = _215 >> 2u;
        uvec2 _230 = uvec2(texelFetch(l_geomAttrib_0, int(_224)).x, texelFetch(l_geomAttrib_0, int(_224 + 1u)).x);
        uint _231 = _230.x;
        _236 = _231 & 65535u;
        _237 = _231 >> 16u;
        _238 = _230.y & 65535u;
        _239 = 24u;
    }
    uint _243;
    if (_195)
    {
        _243 = _239;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_159)
        {
            frontier_phi_16_17_ladder = _239 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _239 + 8u;
        }
        _243 = frontier_phi_16_17_ladder;
    }
    uvec4 _252 = texelFetch(l_geomAttrib_0, int((((_155 * _149) + 4u) + (_157 ? (_243 + 4u) : _243)) >> 2u));
    uint _253 = _252.x;
    float _257 = float(int(uint(int(_253 << 16u) >> int(16u))));
    float _258 = float(int(uint(int(_253) >> int(16u))));
    uint _260 = (_155 * _150) + 12u;
    uint _281;
    uint _282;
    uint _283;
    uint _284;
    if (_160)
    {
        uvec4 _262 = texelFetch(l_geomAttrib_0, int(_260 >> 2u));
        uint _263 = _262.x;
        _281 = _263 & 255u;
        _282 = (_263 >> 8u) & 255u;
        _283 = (_263 >> 16u) & 255u;
        _284 = 20u;
    }
    else
    {
        uint _269 = _260 >> 2u;
        uvec2 _275 = uvec2(texelFetch(l_geomAttrib_0, int(_269)).x, texelFetch(l_geomAttrib_0, int(_269 + 1u)).x);
        uint _276 = _275.x;
        _281 = _276 & 65535u;
        _282 = _276 >> 16u;
        _283 = _275.y & 65535u;
        _284 = 24u;
    }
    uint _288;
    if (_195)
    {
        _288 = _284;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_159)
        {
            frontier_phi_23_24_ladder = _284 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _284 + 8u;
        }
        _288 = frontier_phi_23_24_ladder;
    }
    uvec4 _297 = texelFetch(l_geomAttrib_0, int((((_155 * _150) + 4u) + (_157 ? (_288 + 4u) : _288)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    bool _305 = _107.z == 0u;
    float _341;
    float _342;
    float _343;
    if (_305)
    {
        uint _308 = _147 * 3u;
        uvec3 _317 = uvec3(texelFetch(l_geomPositionBuffer, int(_308)).x, texelFetch(l_geomPositionBuffer, int(_308 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_308 + 2u)).x);
        _341 = uintBitsToFloat(_317.x);
        _342 = uintBitsToFloat(_317.y);
        _343 = uintBitsToFloat(_317.z);
    }
    else
    {
        uint _325 = _147 * 2u;
        uvec2 _331 = uvec2(texelFetch(l_geomPositionBuffer, int(_325)).x, texelFetch(l_geomPositionBuffer, int(_325 + 1u)).x);
        uint _332 = _331.x;
        _341 = unpackHalf2x16(_332).x;
        _342 = unpackHalf2x16(_332 >> 16u).x;
        _343 = unpackHalf2x16(_331.y).x;
    }
    float _379;
    float _380;
    float _381;
    if (_305)
    {
        uint _346 = _149 * 3u;
        uvec3 _355 = uvec3(texelFetch(l_geomPositionBuffer, int(_346)).x, texelFetch(l_geomPositionBuffer, int(_346 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_346 + 2u)).x);
        _379 = uintBitsToFloat(_355.x);
        _380 = uintBitsToFloat(_355.y);
        _381 = uintBitsToFloat(_355.z);
    }
    else
    {
        uint _363 = _149 * 2u;
        uvec2 _369 = uvec2(texelFetch(l_geomPositionBuffer, int(_363)).x, texelFetch(l_geomPositionBuffer, int(_363 + 1u)).x);
        uint _370 = _369.x;
        _379 = unpackHalf2x16(_370).x;
        _380 = unpackHalf2x16(_370 >> 16u).x;
        _381 = unpackHalf2x16(_369.y).x;
    }
    float _417;
    float _418;
    float _419;
    if (_305)
    {
        uint _384 = _150 * 3u;
        uvec3 _393 = uvec3(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_384 + 2u)).x);
        _417 = uintBitsToFloat(_393.x);
        _418 = uintBitsToFloat(_393.y);
        _419 = uintBitsToFloat(_393.z);
    }
    else
    {
        uint _401 = _150 * 2u;
        uvec2 _407 = uvec2(texelFetch(l_geomPositionBuffer, int(_401)).x, texelFetch(l_geomPositionBuffer, int(_401 + 1u)).x);
        uint _408 = _407.x;
        _417 = unpackHalf2x16(_408).x;
        _418 = unpackHalf2x16(_408 >> 16u).x;
        _419 = unpackHalf2x16(_407.y).x;
    }
    float _422 = (1.0 - hit._m0.x) - hit._m0.y;
    float _454 = _379 - _341;
    float _455 = _380 - _342;
    float _456 = _381 - _343;
    float _459 = fma(_456, gl_ObjectToWorldEXT[2u].x, fma(_455, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _454));
    float _462 = fma(_456, gl_ObjectToWorldEXT[2u].y, fma(_455, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _454));
    float _465 = fma(_456, gl_ObjectToWorldEXT[2u].z, fma(_455, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _454));
    float _466 = _417 - _341;
    float _467 = _418 - _342;
    float _468 = _419 - _343;
    float _471 = fma(_468, gl_ObjectToWorldEXT[2u].x, fma(_467, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _466));
    float _474 = fma(_468, gl_ObjectToWorldEXT[2u].y, fma(_467, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _466));
    float _477 = fma(_468, gl_ObjectToWorldEXT[2u].z, fma(_467, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _466));
    uvec2 _496 = uvec2(textureSize(M_A_M0_Alpha_Addition_NoLight_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    float _583;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _539 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _545 = (_477 * _462) - (_474 * _465);
        float _548 = (_471 * _465) - (_477 * _459);
        float _551 = (_474 * _459) - (_471 * _462);
        float _578 = log2(abs(sqrt(((_88 * _88) + (_87 * _87)) + (_89 * _89)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_539 * gl_WorldRayDirectionEXT.x, _539 * gl_WorldRayDirectionEXT.y, _539 * gl_WorldRayDirectionEXT.z), vec3(((((float(_186) * _422) + (-127.0)) + (float(_236) * hit._m0.x)) + (float(_281) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_187) * _422) + (-127.0)) + (float(_237) * hit._m0.x)) + (float(_282) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _422) + (-127.0)) + (float(_238) * hit._m0.x)) + (float(_283) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _580 = ((log2((((float(_496.y) * 0.5) * float(_496.x)) * abs((((_303 - _213) * (_257 - _212)) - ((_302 - _212) * (_258 - _213))) * 2.384185791015625e-07)) / (sqrt(((_548 * _548) + (_551 * _551)) + (_545 * _545)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _578;
        _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    }
    else
    {
        _583 = 0.0;
    }
    if ((textureLod(sampler2D(M_A_M0_Alpha_Addition_NoLight_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((((_257 * hit._m0.x) + (_212 * _422)) + (_302 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_258 * hit._m0.x) + (_213 * _422)) + (_303 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _583).w * cbMtdParam._m0[9u].w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _49;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _49;
        return;
    }
}


