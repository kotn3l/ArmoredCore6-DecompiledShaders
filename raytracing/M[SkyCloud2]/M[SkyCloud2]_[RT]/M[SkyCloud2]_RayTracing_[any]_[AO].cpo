#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _44
{
    uint _m0;
};

struct _48
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _44 payload;
hitAttributeEXT _48 hit;

void main()
{
    uint _54 = payload._m0;
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _105 = sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _157;
    uint _159;
    uint _160;
    if (_116.x == 0u)
    {
        uint _125 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_117 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _151 & 65535u;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _155;
        }
        else
        {
            frontier_phi_3_2_ladder = _154;
            frontier_phi_3_2_ladder_1 = _155;
            frontier_phi_3_2_ladder_2 = _152 >> 16u;
        }
        _157 = frontier_phi_3_2_ladder;
        _159 = frontier_phi_3_2_ladder_1;
        _160 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    bool _169 = _116.w == 0u;
    bool _170 = _167 || _169;
    uint _172 = (_165 * _157) + 12u;
    uint _196;
    uint _197;
    uint _198;
    uint _199;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
        _199 = 20u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
        _199 = 24u;
    }
    bool _205 = _166 == 0u;
    uint _206;
    if (_205)
    {
        _206 = _199;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_169)
        {
            frontier_phi_9_10_ladder = _199 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _199 + 8u;
        }
        _206 = frontier_phi_9_10_ladder;
    }
    uint _211 = _167 ? (_206 + 4u) : _206;
    uint _212 = _165 * _157;
    uvec4 _223 = texelFetch(l_geomAttrib_0, int(((_212 + 4u) + _211) >> 2u));
    uint _224 = _223.x;
    float _228 = float(int(uint(int(_224 << 16u) >> int(16u))));
    float _229 = float(int(uint(int(_224) >> int(16u))));
    uint _231 = (_165 * _159) + 12u;
    uint _252;
    uint _253;
    uint _254;
    uint _255;
    if (_170)
    {
        uvec4 _233 = texelFetch(l_geomAttrib_0, int(_231 >> 2u));
        uint _234 = _233.x;
        _252 = _234 & 255u;
        _253 = (_234 >> 8u) & 255u;
        _254 = (_234 >> 16u) & 255u;
        _255 = 20u;
    }
    else
    {
        uint _240 = _231 >> 2u;
        uvec2 _246 = uvec2(texelFetch(l_geomAttrib_0, int(_240)).x, texelFetch(l_geomAttrib_0, int(_240 + 1u)).x);
        uint _247 = _246.x;
        _252 = _247 & 65535u;
        _253 = _247 >> 16u;
        _254 = _246.y & 65535u;
        _255 = 24u;
    }
    uint _259;
    if (_205)
    {
        _259 = _255;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_169)
        {
            frontier_phi_16_17_ladder = _255 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _255 + 8u;
        }
        _259 = frontier_phi_16_17_ladder;
    }
    uint _263 = _167 ? (_259 + 4u) : _259;
    uint _264 = _165 * _159;
    uvec4 _274 = texelFetch(l_geomAttrib_0, int(((_264 + 4u) + _263) >> 2u));
    uint _275 = _274.x;
    float _279 = float(int(uint(int(_275 << 16u) >> int(16u))));
    float _280 = float(int(uint(int(_275) >> int(16u))));
    uint _282 = (_165 * _160) + 12u;
    uint _303;
    uint _304;
    uint _305;
    uint _306;
    if (_170)
    {
        uvec4 _284 = texelFetch(l_geomAttrib_0, int(_282 >> 2u));
        uint _285 = _284.x;
        _303 = _285 & 255u;
        _304 = (_285 >> 8u) & 255u;
        _305 = (_285 >> 16u) & 255u;
        _306 = 20u;
    }
    else
    {
        uint _291 = _282 >> 2u;
        uvec2 _297 = uvec2(texelFetch(l_geomAttrib_0, int(_291)).x, texelFetch(l_geomAttrib_0, int(_291 + 1u)).x);
        uint _298 = _297.x;
        _303 = _298 & 65535u;
        _304 = _298 >> 16u;
        _305 = _297.y & 65535u;
        _306 = 24u;
    }
    uint _310;
    if (_205)
    {
        _310 = _306;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_169)
        {
            frontier_phi_23_24_ladder = _306 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _306 + 8u;
        }
        _310 = frontier_phi_23_24_ladder;
    }
    uint _314 = _167 ? (_310 + 4u) : _310;
    uint _315 = _165 * _160;
    uvec4 _325 = texelFetch(l_geomAttrib_0, int(((_315 + 4u) + _314) >> 2u));
    uint _326 = _325.x;
    float _330 = float(int(uint(int(_326 << 16u) >> int(16u))));
    float _331 = float(int(uint(int(_326) >> int(16u))));
    bool _333 = _116.z == 0u;
    float _369;
    float _370;
    float _371;
    if (_333)
    {
        uint _336 = _157 * 3u;
        uvec3 _345 = uvec3(texelFetch(l_geomPositionBuffer, int(_336)).x, texelFetch(l_geomPositionBuffer, int(_336 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_336 + 2u)).x);
        _369 = uintBitsToFloat(_345.x);
        _370 = uintBitsToFloat(_345.y);
        _371 = uintBitsToFloat(_345.z);
    }
    else
    {
        uint _353 = _157 * 2u;
        uvec2 _359 = uvec2(texelFetch(l_geomPositionBuffer, int(_353)).x, texelFetch(l_geomPositionBuffer, int(_353 + 1u)).x);
        uint _360 = _359.x;
        _369 = unpackHalf2x16(_360).x;
        _370 = unpackHalf2x16(_360 >> 16u).x;
        _371 = unpackHalf2x16(_359.y).x;
    }
    float _407;
    float _408;
    float _409;
    if (_333)
    {
        uint _374 = _159 * 3u;
        uvec3 _383 = uvec3(texelFetch(l_geomPositionBuffer, int(_374)).x, texelFetch(l_geomPositionBuffer, int(_374 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_374 + 2u)).x);
        _407 = uintBitsToFloat(_383.x);
        _408 = uintBitsToFloat(_383.y);
        _409 = uintBitsToFloat(_383.z);
    }
    else
    {
        uint _391 = _159 * 2u;
        uvec2 _397 = uvec2(texelFetch(l_geomPositionBuffer, int(_391)).x, texelFetch(l_geomPositionBuffer, int(_391 + 1u)).x);
        uint _398 = _397.x;
        _407 = unpackHalf2x16(_398).x;
        _408 = unpackHalf2x16(_398 >> 16u).x;
        _409 = unpackHalf2x16(_397.y).x;
    }
    float _445;
    float _446;
    float _447;
    if (_333)
    {
        uint _412 = _160 * 3u;
        uvec3 _421 = uvec3(texelFetch(l_geomPositionBuffer, int(_412)).x, texelFetch(l_geomPositionBuffer, int(_412 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_412 + 2u)).x);
        _445 = uintBitsToFloat(_421.x);
        _446 = uintBitsToFloat(_421.y);
        _447 = uintBitsToFloat(_421.z);
    }
    else
    {
        uint _429 = _160 * 2u;
        uvec2 _435 = uvec2(texelFetch(l_geomPositionBuffer, int(_429)).x, texelFetch(l_geomPositionBuffer, int(_429 + 1u)).x);
        uint _436 = _435.x;
        _445 = unpackHalf2x16(_436).x;
        _446 = unpackHalf2x16(_436 >> 16u).x;
        _447 = unpackHalf2x16(_435.y).x;
    }
    float _450 = (1.0 - hit._m0.x) - hit._m0.y;
    float _479 = (_279 - _228) * 0.00048828125;
    float _481 = (_280 - _229) * 0.00048828125;
    float _484 = (_330 - _228) * 0.00048828125;
    float _485 = (_331 - _229) * 0.00048828125;
    float _507 = _407 - _369;
    float _508 = _408 - _370;
    float _509 = _409 - _371;
    float _512 = fma(_509, gl_ObjectToWorldEXT[2u].x, fma(_508, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _507));
    float _515 = fma(_509, gl_ObjectToWorldEXT[2u].y, fma(_508, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _507));
    float _518 = fma(_509, gl_ObjectToWorldEXT[2u].z, fma(_508, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _507));
    float _519 = _445 - _369;
    float _520 = _446 - _370;
    float _521 = _447 - _371;
    float _524 = fma(_521, gl_ObjectToWorldEXT[2u].x, fma(_520, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _519));
    float _527 = fma(_521, gl_ObjectToWorldEXT[2u].y, fma(_520, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _519));
    float _530 = fma(_521, gl_ObjectToWorldEXT[2u].z, fma(_520, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _519));
    float _531 = (((_279 * hit._m0.x) + (_228 * _450)) + (_330 * hit._m0.y)) * 0.00048828125;
    float _532 = (((_280 * hit._m0.x) + (_229 * _450)) + (_331 * hit._m0.y)) * 0.00048828125;
    float _543 = ((((float(_196) * _450) + (-127.0)) + (float(_252) * hit._m0.x)) + (float(_303) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _545 = ((((float(_197) * _450) + (-127.0)) + (float(_253) * hit._m0.x)) + (float(_304) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _546 = ((((float(_198) * _450) + (-127.0)) + (float(_254) * hit._m0.x)) + (float(_305) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _555 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _562 = _532 - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    uvec2 _576 = uvec2(textureSize(M_SkyCloud2_snp_0_Texture2D_0, int(0u)));
    bool _581 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _634;
    if (_581)
    {
        float _592 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _598 = (_530 * _515) - (_527 * _518);
        float _601 = (_524 * _518) - (_530 * _512);
        float _604 = (_527 * _512) - (_524 * _515);
        float _631 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_485 * _479) - (_484 * _481))) / (sqrt(((_601 * _601) + (_604 * _604)) + (_598 * _598)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_592 * gl_WorldRayDirectionEXT.x, _592 * gl_WorldRayDirectionEXT.y, _592 * gl_WorldRayDirectionEXT.z), vec3(_543, _545, _546))));
        _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    }
    else
    {
        _634 = 0.0;
    }
    float _703;
    if (_581)
    {
        float _663 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _669 = (_530 * _515) - (_527 * _518);
        float _672 = (_524 * _518) - (_530 * _512);
        float _675 = (_527 * _512) - (_524 * _515);
        float _701 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_485 * _479) - (_484 * _481))) / (sqrt(((_672 * _672) + (_675 * _675)) + (_669 * _669)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_663 * gl_WorldRayDirectionEXT.x, _663 * gl_WorldRayDirectionEXT.y, _663 * gl_WorldRayDirectionEXT.z), vec3(_543, _545, _546))));
        _703 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    }
    else
    {
        _703 = 0.0;
    }
    float _717 = ((_562 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _768;
    if (_581)
    {
        float _728 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _734 = (_530 * _515) - (_527 * _518);
        float _737 = (_524 * _518) - (_530 * _512);
        float _740 = (_527 * _512) - (_524 * _515);
        float _766 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_485 * _479) - (_484 * _481))) / (sqrt(((_737 * _737) + (_740 * _740)) + (_734 * _734)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_728 * gl_WorldRayDirectionEXT.x, _728 * gl_WorldRayDirectionEXT.y, _728 * gl_WorldRayDirectionEXT.z), vec3(_543, _545, _546))));
        _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    }
    else
    {
        _768 = 0.0;
    }
    float _832;
    if (_581)
    {
        float _792 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _798 = (_530 * _515) - (_527 * _518);
        float _801 = (_524 * _518) - (_530 * _512);
        float _804 = (_527 * _512) - (_524 * _515);
        float _830 = ((log2((((float(_576.y) * 0.5) * float(_576.x)) * abs((_485 * _479) - (_484 * _481))) / (sqrt(((_801 * _801) + (_804 * _804)) + (_798 * _798)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_105) / abs(dot(vec3(_792 * gl_WorldRayDirectionEXT.x, _792 * gl_WorldRayDirectionEXT.y, _792 * gl_WorldRayDirectionEXT.z), vec3(_543, _545, _546))));
        _832 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    }
    else
    {
        _832 = 0.0;
    }
    float _840 = ((((float(texelFetch(l_geomAttrib_0, int((_263 + _264) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_211 + _212) >> 2u)).x >> 24u) * _450)) + (float(texelFetch(l_geomAttrib_0, int((_314 + _315) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (((textureLod(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + _531) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + _532) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _703).z - (textureLod(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_555 * 3.2999999523162841796875) + _531)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _562) + cbTextureTilingScale._m0[0u].w), _634).y * 0.20000000298023223876953125)) + (textureLod(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_555 * 6.900000095367431640625) + _531) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _717), _768).x * 0.0500000007450580596923828125)) + (textureLod(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_555 * 16.0) + _531) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _717), _832).x * 0.100000001490116119384765625));
    if (_840 < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _54;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _54;
        return;
    }
}


