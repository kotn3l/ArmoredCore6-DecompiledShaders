#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1358;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _161;
    uint _163;
    uint _164;
    if (_121.x == 0u)
    {
        uint _129 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_122 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _155 & 65535u;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _158;
        }
        else
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _156 >> 16u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        _161 = frontier_phi_3_2_ladder;
        _163 = frontier_phi_3_2_ladder_2;
        _164 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _121.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uvec4 _235 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + (_171 ? (_227 + 4u) : _227)) >> 2u));
    uint _236 = _235.x;
    float _240 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _241 = float(int(uint(int(_236) >> int(16u))));
    uint _242 = _169 * _163;
    uint _243 = _242 + 12u;
    uint _264;
    uint _265;
    uint _266;
    uint _267;
    if (_174)
    {
        uvec4 _245 = texelFetch(l_geomAttrib_0, int(_243 >> 2u));
        uint _246 = _245.x;
        _264 = _246 & 255u;
        _265 = (_246 >> 8u) & 255u;
        _266 = (_246 >> 16u) & 255u;
        _267 = 16u;
    }
    else
    {
        uint _252 = _243 >> 2u;
        uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
        uint _259 = _258.x;
        _264 = _259 & 65535u;
        _265 = _259 >> 16u;
        _266 = _258.y & 65535u;
        _267 = 20u;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((_267 + _242) >> 2u));
    uint _274 = _273.x;
    uint _286;
    if (_226)
    {
        _286 = _267 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _267 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _267 + 12u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_242 + 4u) + (_171 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _169 * _164;
    uint _302 = _301 + 12u;
    uint _323;
    uint _324;
    uint _325;
    uint _326;
    if (_174)
    {
        uvec4 _304 = texelFetch(l_geomAttrib_0, int(_302 >> 2u));
        uint _305 = _304.x;
        _323 = _305 & 255u;
        _324 = (_305 >> 8u) & 255u;
        _325 = (_305 >> 16u) & 255u;
        _326 = 16u;
    }
    else
    {
        uint _311 = _302 >> 2u;
        uvec2 _317 = uvec2(texelFetch(l_geomAttrib_0, int(_311)).x, texelFetch(l_geomAttrib_0, int(_311 + 1u)).x);
        uint _318 = _317.x;
        _323 = _318 & 65535u;
        _324 = _318 >> 16u;
        _325 = _317.y & 65535u;
        _326 = 20u;
    }
    uvec4 _332 = texelFetch(l_geomAttrib_0, int((_326 + _301) >> 2u));
    uint _333 = _332.x;
    uint _345;
    if (_226)
    {
        _345 = _326 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _326 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _326 + 12u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uvec4 _353 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_171 ? (_345 + 4u) : _345)) >> 2u));
    uint _354 = _353.x;
    float _358 = float(int(uint(int(_354 << 16u) >> int(16u))));
    float _359 = float(int(uint(int(_354) >> int(16u))));
    bool _361 = _121.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _161 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _161 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _163 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _163 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _164 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _164 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _240) * 0.00048828125;
    float _514 = (_300 - _241) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _564 = (((_299 * hit._m0.x) + (_240 * _478)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _565 = (((_300 * hit._m0.x) + (_241 * _478)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _569 = (((float(_200) * _478) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _572 = (((float(_201) * _478) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = (((float(_202) * _478) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _592 = ((((float(_212 & 255u) * _478) + (-127.0)) + (float(_274 & 255u) * hit._m0.x)) + (float(_333 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_212 >> 8u) & 255u) * _478) + (-127.0)) + (float((_274 >> 8u) & 255u) * hit._m0.x)) + (float((_333 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_212 >> 16u) & 255u) * _478) + (-127.0)) + (float((_274 >> 16u) & 255u) * hit._m0.x)) + (float((_333 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float(_212 >> 24u) * _478) + (-127.0)) + (float(_274 >> 24u) * hit._m0.x)) + (float(_333 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((_593 * _579) - (_594 * _578)) * _595;
    float _606 = ((_594 * _576) - (_592 * _579)) * _595;
    float _607 = ((_592 * _578) - (_593 * _576)) * _595;
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    float _612 = _611 * _605;
    float _613 = _611 * _606;
    float _614 = _611 * _607;
    uvec2 _635 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, int(0u)));
    bool _640 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _693;
    if (_640)
    {
        float _651 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _657 = (_563 * _548) - (_560 * _551);
        float _660 = (_557 * _551) - (_563 * _545);
        float _663 = (_560 * _545) - (_557 * _548);
        float _690 = ((log2((((float(_635.y) * 0.5) * float(_635.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_660 * _660) + (_663 * _663)) + (_657 * _657)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_651 * gl_WorldRayDirectionEXT.x, _651 * gl_WorldRayDirectionEXT.y, _651 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    }
    else
    {
        _693 = 0.0;
    }
    vec4 _697 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _564) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _565) + cbTextureTilingScale._m0[1u].w), _693);
    float _701 = _697.z;
    float _704 = (_697.x * 2.0) + (-1.0);
    float _706 = (_697.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _1443 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0))));
    float _715 = fma(_712, _576, fma(_706, _592, _704 * _612));
    float _718 = fma(_712, _578, fma(_706, _593, _704 * _613));
    float _721 = fma(_712, _579, fma(_706, _594, _704 * _614));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _733 = cbMtdParam._m0[10u].x + dot(vec4(_726, _727, _728, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _1454 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = dot(vec4(_726, _727, _728, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _1465 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = (isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0))) + (isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0)));
    uvec2 _761 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, int(0u)));
    float _812;
    if (_640)
    {
        float _772 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _778 = (_563 * _548) - (_560 * _551);
        float _781 = (_557 * _551) - (_563 * _545);
        float _784 = (_560 * _545) - (_557 * _548);
        float _810 = ((log2((((float(_761.y) * 0.5) * float(_761.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_781 * _781) + (_784 * _784)) + (_778 * _778)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_772 * gl_WorldRayDirectionEXT.x, _772 * gl_WorldRayDirectionEXT.y, _772 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _812 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    }
    else
    {
        _812 = 0.0;
    }
    vec4 _815 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _564) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _565) + cbTextureTilingScale._m0[0u].w), _812);
    float _820 = _815.x * cbMtdParam._m0[9u].x;
    float _821 = _815.y * cbMtdParam._m0[9u].y;
    float _822 = _815.z * cbMtdParam._m0[9u].z;
    uvec2 _834 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, int(0u)));
    float _885;
    if (_640)
    {
        float _845 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _851 = (_563 * _548) - (_560 * _551);
        float _854 = (_557 * _551) - (_563 * _545);
        float _857 = (_560 * _545) - (_557 * _548);
        float _883 = ((log2((((float(_834.y) * 0.5) * float(_834.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_854 * _854) + (_857 * _857)) + (_851 * _851)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_845 * gl_WorldRayDirectionEXT.x, _845 * gl_WorldRayDirectionEXT.y, _845 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _885 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    }
    else
    {
        _885 = 0.0;
    }
    vec4 _887 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _564) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _565) + cbTextureTilingScale._m0[3u].w), _885);
    float _898 = ((_887.x - _820) * _743) + _820;
    float _899 = ((_887.y - _821) * _743) + _821;
    float _900 = ((_887.z - _822) * _743) + _822;
    uvec2 _912 = uvec2(textureSize(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, int(0u)));
    float _916 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _917 = _916 * gl_WorldRayDirectionEXT.x;
    float _918 = _916 * gl_WorldRayDirectionEXT.y;
    float _919 = _916 * gl_WorldRayDirectionEXT.z;
    float _963;
    if (_640)
    {
        float _929 = (_563 * _548) - (_560 * _551);
        float _932 = (_557 * _551) - (_563 * _545);
        float _935 = (_560 * _545) - (_557 * _548);
        float _961 = ((log2((((float(_912.y) * 0.5) * float(_912.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_932 * _932) + (_935 * _935)) + (_929 * _929)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_917, _918, _919), vec3(_576, _578, _579))));
        _963 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    }
    else
    {
        _963 = 0.0;
    }
    vec4 _965 = textureLod(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _564) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _565) + cbTextureTilingScale._m0[4u].w), _963);
    float _972 = (_965.x * 2.0) + (-1.0);
    float _973 = (_965.y * 2.0) + (-1.0);
    float _974 = dot(vec2(_972, _973), vec2(_972, _973));
    float _1491 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _982 = ((_965.z - _701) * _743) + _701;
    float _991 = ((sqrt(1.0 - (isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0)))) - _712) * _743) + _712;
    float _995 = (((_972 - _704) * _743) + _704) + (cbMtdParam._m0[10u].y * _704);
    float _996 = (((_973 - _706) * _743) + _706) + (cbMtdParam._m0[10u].y * _706);
    float _999 = fma(_991, _576, fma(_996, _592, _995 * _612));
    float _1002 = fma(_991, _578, fma(_996, _593, _995 * _613));
    float _1005 = fma(_991, _579, fma(_996, _594, _995 * _614));
    float _1009 = inversesqrt(dot(vec3(_999, _1002, _1005), vec3(_999, _1002, _1005)));
    float _1010 = _1009 * _999;
    float _1011 = _1009 * _1002;
    float _1012 = _1009 * _1005;
    float _1024 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1025 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1026 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1027 = (-0.0) - _917;
    float _1029 = (-0.0) - _918;
    float _1030 = (-0.0) - _919;
    float _1036 = float(gl_LaunchIDEXT.x);
    float _1037 = float(gl_LaunchIDEXT.y);
    float _1040 = float(gl_LaunchSizeEXT.x);
    float _1054 = fract(fract(sin(dot(vec2(_1036 / _1040, _1037 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1067 = fract(fract(sin(dot(vec2((_1036 + 128.0) / _1040, (_1037 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _1077 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1078 = _1077.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1078, _1077.w, _1078, vec3(_1024, _1025, _1026), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (_63._m0 == 0u)
    {
        float _1099 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1010, _1011, _1012));
        float _1502 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1102 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        float _1121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _982) * 0.949999988079071044921875);
        float _1122 = _1121 * _1121;
        float _1123 = g_sceneCB._m0[4u].x - _917;
        float _1124 = g_sceneCB._m0[4u].y - _918;
        float _1125 = g_sceneCB._m0[4u].z - _919;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1130 = _1129 * _1123;
        float _1131 = _1129 * _1124;
        float _1132 = _1129 * _1125;
        float _1133 = dot(vec3(_1010, _1011, _1012), vec3(g_sceneCB._m0[4u].xyz));
        float _1513 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1136 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        float _1137 = dot(vec3(_1010, _1011, _1012), vec3(_1027, _1029, _1030));
        float _1524 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1140 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
        float _1141 = dot(vec3(_1010, _1011, _1012), vec3(_1130, _1131, _1132));
        float _1535 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1144 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        float _1145 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1130, _1131, _1132));
        float _1546 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1122 * _1122;
        float _1153 = ((_1144 * _1144) * (_1149 + (-1.0))) + 1.0;
        float _1165 = (exp2(log2(1.0 - (isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1167 = 1.0 - _1122;
        float _1178 = (0.5 / (((_1140 * ((_1136 * _1167) + _1122)) + 9.9999999392252902907785028219223e-09) + (((_1140 * _1167) + _1122) * _1136))) * _1136;
        float _1557 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1180 = (isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0))) * (_1149 / ((_1153 * _1153) * 3.141590118408203125));
        _1187 = ((_898 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1102;
        _1188 = ((_899 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1102;
        _1189 = ((_900 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1102;
        _1190 = (_1165 * g_sceneCB._m0[5u].x) * _1180;
        _1191 = (_1165 * g_sceneCB._m0[5u].y) * _1180;
        _1192 = (_1165 * g_sceneCB._m0[5u].z) * _1180;
    }
    else
    {
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    bool _1194 = abs(_1011) < 0.89999997615814208984375;
    float _1196 = float(_1194);
    float _1197 = _1194 ? 0.0 : 1.0;
    float _1200 = (_1196 * _1012) - (_1197 * _1011);
    float _1201 = _1197 * _1010;
    float _1203 = (-0.0) - (_1010 * _1196);
    float _1207 = inversesqrt(dot(vec3(_1200, _1201, _1203), vec3(_1200, _1201, _1203)));
    float _1208 = _1200 * _1207;
    float _1209 = _1201 * _1207;
    float _1210 = _1207 * _1203;
    float _1213 = (_1209 * _1012) - (_1210 * _1011);
    float _1216 = (_1210 * _1010) - (_1208 * _1012);
    float _1219 = (_1208 * _1011) - (_1209 * _1010);
    float _1221;
    float _1229;
    float _1220 = 0.0;
    uint _1222 = 0u;
    float _1226;
    bool _1228;
    for (;;)
    {
        _1226 = (float(_1222) + _1054) * 0.03125;
        _1228 = _1222 == 0u;
        float frontier_phi_47_pred;
        if (_1228)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1363;
            float _1364;
            uint _1366;
            _1363 = 0.0;
            _1364 = 0.5;
            _1366 = _1222;
            float _1230;
            for (;;)
            {
                _1230 = ((_1366 & 1u) != 0u) ? (_1364 + _1363) : _1363;
                uint _1367 = _1366 >> 1u;
                if (_1367 == 0u)
                {
                    break;
                }
                else
                {
                    _1363 = _1230;
                    _1364 *= 0.5;
                    _1366 = _1367;
                }
            }
            frontier_phi_47_pred = _1230;
        }
        _1229 = frontier_phi_47_pred;
        float _1231 = _1229 + _1067;
        float _1235 = sqrt(_1226);
        float _1236 = ((_1231 > 1.0) ? (_1231 + (-1.0)) : _1231) * 6.283185482025146484375;
        float _1239 = cos(_1236) * _1235;
        float _1241 = sin(_1236) * _1235;
        float _1243 = sqrt(1.0 - _1226);
        float _1256 = ((_1243 * _1010) + (_1239 * _1213)) + (_1241 * _1208);
        float _1257 = ((_1243 * _1011) + (_1239 * _1216)) + (_1241 * _1209);
        float _1258 = ((_1243 * _1012) + (_1239 * _1219)) + (_1241 * _1210);
        _62._m0 = 1u;
        uvec4 _1262 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1263 = _1262.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1263, _1262.w, _1263, vec3(_1024, _1025, _1026), 9.9999997473787516355514526367188e-05, vec3(_1256, _1257, _1258), 10000.0, 1);
        float _1269 = dot(vec3(_1010, _1011, _1012), vec3(_1256, _1257, _1258));
        float _1568 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1272 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1221 = ((float(_62._m0 == 0u) * _1272) / (_1272 * 0.3183098733425140380859375)) + _1220;
        uint _1223 = _1222 + 1u;
        if (_1223 == 32u)
        {
            break;
        }
        else
        {
            _1220 = _1221;
            _1222 = _1223;
            continue;
        }
    }
    float _1280 = _1221 * 0.009947183541953563690185546875;
    float _1285 = dot(vec3(_917, _918, _919), vec3(_1010, _1011, _1012)) * 2.0;
    vec4 _1299 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_917 - (_1285 * _1010), _918 - (_1285 * _1011), _919 - (_1285 * _1012)), 4.0 - (_982 * 4.0));
    float _1304 = dot(vec3(_1027, _1029, _1030), vec3(_1010, _1011, _1012));
    float _1579 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _1313 = (exp2(log2(1.0 - (isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1319 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1010, _1011, _1012), 0.0);
    float _1330 = (_1190 + _1187) + (((_1319.x * _898) + (_1313 * _1299.x)) * _1280);
    float _1334 = (_1191 + _1188) + (((_1319.y * _899) + (_1313 * _1299.y)) * _1280);
    float _1338 = (_1192 + _1189) + (((_1319.z * _900) + (_1313 * _1299.z)) * _1280);
    float _1590 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1601 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1612 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    bool _1346 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1357;
    _1357.x = _1346 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0)));
    _1357.y = _1346 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0)));
    _1357.z = _1346 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0)));
    payload._m0 = _1357;
}


