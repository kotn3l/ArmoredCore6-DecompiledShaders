#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _40
{
    vec3 _m0;
};

struct _44
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _40 payload;
hitAttributeEXT _44 hit;

void main()
{
    vec3 _50 = payload._m0;
    float _87 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _107 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _108 = _107.y;
    uint _148;
    uint _150;
    uint _151;
    if (_107.x == 0u)
    {
        uint _116 = (_108 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _125 = uvec3(texelFetch(l_geomIndexBuffer, int(_116)).x, texelFetch(l_geomIndexBuffer, int(_116 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_116 + 2u)).x);
        _148 = _125.x;
        _150 = _125.y;
        _151 = _125.z;
    }
    else
    {
        uint _129 = uint(gl_PrimitiveID) * 6u;
        uint _131 = _129 & 4294967292u;
        uint _134 = (_108 + _131) >> 2u;
        uvec2 _141 = uvec2(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x);
        uint _142 = _141.x;
        uint _143 = _141.y;
        uint _145 = _142 >> 16u;
        uint _146 = _143 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_131 == _129)
        {
            frontier_phi_3_2_ladder = _142 & 65535u;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _146;
        }
        else
        {
            frontier_phi_3_2_ladder = _145;
            frontier_phi_3_2_ladder_1 = _146;
            frontier_phi_3_2_ladder_2 = _143 >> 16u;
        }
        _148 = frontier_phi_3_2_ladder;
        _150 = frontier_phi_3_2_ladder_1;
        _151 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _155 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _156 = _155.x;
    uint _157 = _155.z;
    bool _158 = _157 != 0u;
    bool _160 = _107.w == 0u;
    bool _161 = _158 || _160;
    uint _163 = (_156 * _148) + 12u;
    uint _187;
    uint _188;
    uint _189;
    uint _190;
    if (_161)
    {
        uvec4 _166 = texelFetch(l_geomAttrib_0, int(_163 >> 2u));
        uint _167 = _166.x;
        _187 = _167 & 255u;
        _188 = (_167 >> 8u) & 255u;
        _189 = (_167 >> 16u) & 255u;
        _190 = 20u;
    }
    else
    {
        uint _175 = _163 >> 2u;
        uvec2 _181 = uvec2(texelFetch(l_geomAttrib_0, int(_175)).x, texelFetch(l_geomAttrib_0, int(_175 + 1u)).x);
        uint _182 = _181.x;
        _187 = _182 & 65535u;
        _188 = _182 >> 16u;
        _189 = _181.y & 65535u;
        _190 = 24u;
    }
    bool _196 = _157 == 0u;
    uint _197;
    if (_196)
    {
        _197 = _190;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_160)
        {
            frontier_phi_9_10_ladder = _190 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _190 + 8u;
        }
        _197 = frontier_phi_9_10_ladder;
    }
    uint _202 = _158 ? (_197 + 4u) : _197;
    uint _203 = _156 * _148;
    uvec4 _214 = texelFetch(l_geomAttrib_0, int(((_203 + 4u) + _202) >> 2u));
    uint _215 = _214.x;
    float _219 = float(int(uint(int(_215 << 16u) >> int(16u))));
    float _220 = float(int(uint(int(_215) >> int(16u))));
    uint _222 = (_156 * _150) + 12u;
    uint _243;
    uint _244;
    uint _245;
    uint _246;
    if (_161)
    {
        uvec4 _224 = texelFetch(l_geomAttrib_0, int(_222 >> 2u));
        uint _225 = _224.x;
        _243 = _225 & 255u;
        _244 = (_225 >> 8u) & 255u;
        _245 = (_225 >> 16u) & 255u;
        _246 = 20u;
    }
    else
    {
        uint _231 = _222 >> 2u;
        uvec2 _237 = uvec2(texelFetch(l_geomAttrib_0, int(_231)).x, texelFetch(l_geomAttrib_0, int(_231 + 1u)).x);
        uint _238 = _237.x;
        _243 = _238 & 65535u;
        _244 = _238 >> 16u;
        _245 = _237.y & 65535u;
        _246 = 24u;
    }
    uint _250;
    if (_196)
    {
        _250 = _246;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_160)
        {
            frontier_phi_16_17_ladder = _246 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _246 + 8u;
        }
        _250 = frontier_phi_16_17_ladder;
    }
    uint _254 = _158 ? (_250 + 4u) : _250;
    uint _255 = _156 * _150;
    uvec4 _265 = texelFetch(l_geomAttrib_0, int(((_255 + 4u) + _254) >> 2u));
    uint _266 = _265.x;
    float _270 = float(int(uint(int(_266 << 16u) >> int(16u))));
    float _271 = float(int(uint(int(_266) >> int(16u))));
    uint _273 = (_156 * _151) + 12u;
    uint _294;
    uint _295;
    uint _296;
    uint _297;
    if (_161)
    {
        uvec4 _275 = texelFetch(l_geomAttrib_0, int(_273 >> 2u));
        uint _276 = _275.x;
        _294 = _276 & 255u;
        _295 = (_276 >> 8u) & 255u;
        _296 = (_276 >> 16u) & 255u;
        _297 = 20u;
    }
    else
    {
        uint _282 = _273 >> 2u;
        uvec2 _288 = uvec2(texelFetch(l_geomAttrib_0, int(_282)).x, texelFetch(l_geomAttrib_0, int(_282 + 1u)).x);
        uint _289 = _288.x;
        _294 = _289 & 65535u;
        _295 = _289 >> 16u;
        _296 = _288.y & 65535u;
        _297 = 24u;
    }
    uint _301;
    if (_196)
    {
        _301 = _297;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_160)
        {
            frontier_phi_23_24_ladder = _297 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _297 + 8u;
        }
        _301 = frontier_phi_23_24_ladder;
    }
    uint _305 = _158 ? (_301 + 4u) : _301;
    uint _306 = _156 * _151;
    uvec4 _316 = texelFetch(l_geomAttrib_0, int(((_306 + 4u) + _305) >> 2u));
    uint _317 = _316.x;
    float _321 = float(int(uint(int(_317 << 16u) >> int(16u))));
    float _322 = float(int(uint(int(_317) >> int(16u))));
    bool _324 = _107.z == 0u;
    float _360;
    float _361;
    float _362;
    if (_324)
    {
        uint _327 = _148 * 3u;
        uvec3 _336 = uvec3(texelFetch(l_geomPositionBuffer, int(_327)).x, texelFetch(l_geomPositionBuffer, int(_327 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_327 + 2u)).x);
        _360 = uintBitsToFloat(_336.x);
        _361 = uintBitsToFloat(_336.y);
        _362 = uintBitsToFloat(_336.z);
    }
    else
    {
        uint _344 = _148 * 2u;
        uvec2 _350 = uvec2(texelFetch(l_geomPositionBuffer, int(_344)).x, texelFetch(l_geomPositionBuffer, int(_344 + 1u)).x);
        uint _351 = _350.x;
        _360 = unpackHalf2x16(_351).x;
        _361 = unpackHalf2x16(_351 >> 16u).x;
        _362 = unpackHalf2x16(_350.y).x;
    }
    float _398;
    float _399;
    float _400;
    if (_324)
    {
        uint _365 = _150 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _150 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_324)
    {
        uint _403 = _151 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _151 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _441 = (1.0 - hit._m0.x) - hit._m0.y;
    float _480 = _398 - _360;
    float _481 = _399 - _361;
    float _482 = _400 - _362;
    float _485 = fma(_482, gl_ObjectToWorldEXT[2u].x, fma(_481, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _480));
    float _488 = fma(_482, gl_ObjectToWorldEXT[2u].y, fma(_481, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _480));
    float _491 = fma(_482, gl_ObjectToWorldEXT[2u].z, fma(_481, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _480));
    float _492 = _436 - _360;
    float _493 = _437 - _361;
    float _494 = _438 - _362;
    float _497 = fma(_494, gl_ObjectToWorldEXT[2u].x, fma(_493, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _492));
    float _500 = fma(_494, gl_ObjectToWorldEXT[2u].y, fma(_493, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _492));
    float _503 = fma(_494, gl_ObjectToWorldEXT[2u].z, fma(_493, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _492));
    uvec2 _522 = uvec2(textureSize(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, int(0u)));
    float _609;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _565 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _571 = (_503 * _488) - (_500 * _491);
        float _574 = (_497 * _491) - (_503 * _485);
        float _577 = (_500 * _485) - (_497 * _488);
        float _604 = log2(abs(sqrt(((_88 * _88) + (_87 * _87)) + (_89 * _89)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_565 * gl_WorldRayDirectionEXT.x, _565 * gl_WorldRayDirectionEXT.y, _565 * gl_WorldRayDirectionEXT.z), vec3(((((float(_187) * _441) + (-127.0)) + (float(_243) * hit._m0.x)) + (float(_294) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _441) + (-127.0)) + (float(_244) * hit._m0.x)) + (float(_295) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_189) * _441) + (-127.0)) + (float(_245) * hit._m0.x)) + (float(_296) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _606 = ((log2((((float(_522.y) * 0.5) * float(_522.x)) * abs((((_322 - _220) * (_270 - _219)) - ((_321 - _219) * (_271 - _220))) * 2.384185791015625e-07)) / (sqrt(((_574 * _574) + (_577 * _577)) + (_571 * _571)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + _604;
        _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    }
    else
    {
        _609 = 0.0;
    }
    bool _621 = ((((((float(texelFetch(l_geomAttrib_0, int((_254 + _255) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int((_202 + _203) >> 2u)).x >> 24u) * _441)) + (float(texelFetch(l_geomAttrib_0, int((_305 + _306) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125) * cbMtdParam._m0[10u].x) * textureLod(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((((((_270 * hit._m0.x) + (_219 * _441)) + (_321 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_271 * hit._m0.x) + (_220 * _441)) + (_322 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _609).x) < cbMtdParam._m0[1u].x;
    if (_621)
    {
        payload._m0 = _50;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _50;
        return;
    }
}


