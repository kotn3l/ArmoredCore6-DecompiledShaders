#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_PC_PA_c6250_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_PC_PA_c6250_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D S_PC_PA_c6250_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D S_PC_PA_c6250_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D S_PC_PA_c6250_snp_0_Texture2D_8;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _1468;

void main()
{
    float _82 = float(gl_LaunchSizeEXT.y);
    float _110 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _119 = sqrt(((_111 * _111) + (_110 * _110)) + (_112 * _112)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _82)))));
    uvec4 _130 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _131 = _130.y;
    uint _171;
    uint _173;
    uint _174;
    if (_130.x == 0u)
    {
        uint _139 = (_131 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _148 = uvec3(texelFetch(l_geomIndexBuffer, int(_139)).x, texelFetch(l_geomIndexBuffer, int(_139 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_139 + 2u)).x);
        _171 = _148.x;
        _173 = _148.y;
        _174 = _148.z;
    }
    else
    {
        uint _152 = uint(gl_PrimitiveID) * 6u;
        uint _154 = _152 & 4294967292u;
        uint _157 = (_131 + _154) >> 2u;
        uvec2 _164 = uvec2(texelFetch(l_geomIndexBuffer, int(_157)).x, texelFetch(l_geomIndexBuffer, int(_157 + 1u)).x);
        uint _165 = _164.x;
        uint _166 = _164.y;
        uint _168 = _165 >> 16u;
        uint _169 = _166 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_154 == _152)
        {
            frontier_phi_3_2_ladder = _169;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _165 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _166 >> 16u;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _171 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder_1;
        _174 = frontier_phi_3_2_ladder;
    }
    uvec4 _178 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _179 = _178.x;
    uint _180 = _178.z;
    bool _181 = _180 != 0u;
    bool _183 = _130.w == 0u;
    bool _184 = _181 || _183;
    uint _186 = (_179 * _171) + 12u;
    uint _210;
    uint _211;
    uint _212;
    uint _213;
    if (_184)
    {
        uvec4 _189 = texelFetch(l_geomAttrib_0, int(_186 >> 2u));
        uint _190 = _189.x;
        _210 = _190 & 255u;
        _211 = (_190 >> 8u) & 255u;
        _212 = (_190 >> 16u) & 255u;
        _213 = 20u;
    }
    else
    {
        uint _198 = _186 >> 2u;
        uvec2 _204 = uvec2(texelFetch(l_geomAttrib_0, int(_198)).x, texelFetch(l_geomAttrib_0, int(_198 + 1u)).x);
        uint _205 = _204.x;
        _210 = _205 & 65535u;
        _211 = _205 >> 16u;
        _212 = _204.y & 65535u;
        _213 = 24u;
    }
    bool _218 = _180 == 0u;
    uint _219;
    if (_218)
    {
        _219 = _213;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_183)
        {
            frontier_phi_9_10_ladder = _213 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _213 + 8u;
        }
        _219 = frontier_phi_9_10_ladder;
    }
    uint _224 = _181 ? (_219 + 4u) : _219;
    uint _225 = _179 * _171;
    uvec4 _230 = texelFetch(l_geomAttrib_0, int(((_225 + 4u) + _224) >> 2u));
    uint _231 = _230.x;
    float _235 = float(int(uint(int(_231 << 16u) >> int(16u))));
    float _236 = float(int(uint(int(_231) >> int(16u))));
    uint _245 = (_179 * _173) + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_184)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 20u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 24u;
    }
    uint _273;
    if (_218)
    {
        _273 = _269;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_183)
        {
            frontier_phi_16_17_ladder = _269 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 8u;
        }
        _273 = frontier_phi_16_17_ladder;
    }
    uint _277 = _181 ? (_273 + 4u) : _273;
    uint _278 = _179 * _173;
    uvec4 _282 = texelFetch(l_geomAttrib_0, int(((_278 + 4u) + _277) >> 2u));
    uint _283 = _282.x;
    float _287 = float(int(uint(int(_283 << 16u) >> int(16u))));
    float _288 = float(int(uint(int(_283) >> int(16u))));
    uint _297 = (_179 * _174) + 12u;
    uint _318;
    uint _319;
    uint _320;
    uint _321;
    if (_184)
    {
        uvec4 _299 = texelFetch(l_geomAttrib_0, int(_297 >> 2u));
        uint _300 = _299.x;
        _318 = _300 & 255u;
        _319 = (_300 >> 8u) & 255u;
        _320 = (_300 >> 16u) & 255u;
        _321 = 20u;
    }
    else
    {
        uint _306 = _297 >> 2u;
        uvec2 _312 = uvec2(texelFetch(l_geomAttrib_0, int(_306)).x, texelFetch(l_geomAttrib_0, int(_306 + 1u)).x);
        uint _313 = _312.x;
        _318 = _313 & 65535u;
        _319 = _313 >> 16u;
        _320 = _312.y & 65535u;
        _321 = 24u;
    }
    uint _325;
    if (_218)
    {
        _325 = _321;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_183)
        {
            frontier_phi_23_24_ladder = _321 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _321 + 8u;
        }
        _325 = frontier_phi_23_24_ladder;
    }
    uint _329 = _181 ? (_325 + 4u) : _325;
    uint _330 = _179 * _174;
    uvec4 _334 = texelFetch(l_geomAttrib_0, int(((_330 + 4u) + _329) >> 2u));
    uint _335 = _334.x;
    float _339 = float(int(uint(int(_335 << 16u) >> int(16u))));
    float _340 = float(int(uint(int(_335) >> int(16u))));
    bool _349 = _130.z == 0u;
    float _385;
    float _386;
    float _387;
    if (_349)
    {
        uint _352 = _171 * 3u;
        uvec3 _361 = uvec3(texelFetch(l_geomPositionBuffer, int(_352)).x, texelFetch(l_geomPositionBuffer, int(_352 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_352 + 2u)).x);
        _385 = uintBitsToFloat(_361.x);
        _386 = uintBitsToFloat(_361.y);
        _387 = uintBitsToFloat(_361.z);
    }
    else
    {
        uint _369 = _171 * 2u;
        uvec2 _375 = uvec2(texelFetch(l_geomPositionBuffer, int(_369)).x, texelFetch(l_geomPositionBuffer, int(_369 + 1u)).x);
        uint _376 = _375.x;
        _385 = unpackHalf2x16(_376).x;
        _386 = unpackHalf2x16(_376 >> 16u).x;
        _387 = unpackHalf2x16(_375.y).x;
    }
    float _423;
    float _424;
    float _425;
    if (_349)
    {
        uint _390 = _173 * 3u;
        uvec3 _399 = uvec3(texelFetch(l_geomPositionBuffer, int(_390)).x, texelFetch(l_geomPositionBuffer, int(_390 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_390 + 2u)).x);
        _423 = uintBitsToFloat(_399.x);
        _424 = uintBitsToFloat(_399.y);
        _425 = uintBitsToFloat(_399.z);
    }
    else
    {
        uint _407 = _173 * 2u;
        uvec2 _413 = uvec2(texelFetch(l_geomPositionBuffer, int(_407)).x, texelFetch(l_geomPositionBuffer, int(_407 + 1u)).x);
        uint _414 = _413.x;
        _423 = unpackHalf2x16(_414).x;
        _424 = unpackHalf2x16(_414 >> 16u).x;
        _425 = unpackHalf2x16(_413.y).x;
    }
    float _461;
    float _462;
    float _463;
    if (_349)
    {
        uint _428 = _174 * 3u;
        uvec3 _437 = uvec3(texelFetch(l_geomPositionBuffer, int(_428)).x, texelFetch(l_geomPositionBuffer, int(_428 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_428 + 2u)).x);
        _461 = uintBitsToFloat(_437.x);
        _462 = uintBitsToFloat(_437.y);
        _463 = uintBitsToFloat(_437.z);
    }
    else
    {
        uint _445 = _174 * 2u;
        uvec2 _451 = uvec2(texelFetch(l_geomPositionBuffer, int(_445)).x, texelFetch(l_geomPositionBuffer, int(_445 + 1u)).x);
        uint _452 = _451.x;
        _461 = unpackHalf2x16(_452).x;
        _462 = unpackHalf2x16(_452 >> 16u).x;
        _463 = unpackHalf2x16(_451.y).x;
    }
    float _466 = (1.0 - hit._m0.x) - hit._m0.y;
    float _495 = (_287 - _235) * 0.00048828125;
    float _497 = (_288 - _236) * 0.00048828125;
    float _500 = (_339 - _235) * 0.00048828125;
    float _501 = (_340 - _236) * 0.00048828125;
    float _523 = _423 - _385;
    float _524 = _424 - _386;
    float _525 = _425 - _387;
    float _528 = fma(_525, gl_ObjectToWorldEXT[2u].x, fma(_524, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _523));
    float _531 = fma(_525, gl_ObjectToWorldEXT[2u].y, fma(_524, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _523));
    float _534 = fma(_525, gl_ObjectToWorldEXT[2u].z, fma(_524, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _523));
    float _535 = _461 - _385;
    float _536 = _462 - _386;
    float _537 = _463 - _387;
    float _540 = fma(_537, gl_ObjectToWorldEXT[2u].x, fma(_536, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _535));
    float _543 = fma(_537, gl_ObjectToWorldEXT[2u].y, fma(_536, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _535));
    float _546 = fma(_537, gl_ObjectToWorldEXT[2u].z, fma(_536, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _535));
    float _547 = (((_287 * hit._m0.x) + (_235 * _466)) + (_339 * hit._m0.y)) * 0.00048828125;
    float _548 = (((_288 * hit._m0.x) + (_236 * _466)) + (_340 * hit._m0.y)) * 0.00048828125;
    float _552 = (((float(_210) * _466) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_318) * hit._m0.y);
    float _555 = (((float(_211) * _466) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_319) * hit._m0.y);
    float _558 = (((float(_212) * _466) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_320) * hit._m0.y);
    float _559 = _552 * 0.0078740157186985015869140625;
    float _561 = _555 * 0.0078740157186985015869140625;
    float _562 = _558 * 0.0078740157186985015869140625;
    uvec2 _585 = uvec2(textureSize(S_PC_PA_c6250_snp_0_Texture2D_8, int(0u)));
    bool _590 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _643;
    if (_590)
    {
        float _601 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _607 = (_546 * _531) - (_543 * _534);
        float _610 = (_540 * _534) - (_546 * _528);
        float _613 = (_543 * _528) - (_540 * _531);
        float _640 = ((log2((((float(_585.y) * 0.5) * float(_585.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_610 * _610) + (_613 * _613)) + (_607 * _607)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_601 * gl_WorldRayDirectionEXT.x, _601 * gl_WorldRayDirectionEXT.y, _601 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    }
    else
    {
        _643 = 0.0;
    }
    vec4 _647 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_8, SS_WrapLinear), vec2((((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + _547) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].x * cbPerFrame._m0[22u].x) + _548) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), _643);
    float _649 = _647.x;
    float _658 = cbMtdParam._m0[18u].w * 0.16666667163372039794921875;
    float _664 = fract(abs(_658));
    float _671 = (((((float(texelFetch(l_geomAttrib_0, int(((_278 + 12u) + _277) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_225 + 12u) + _224) >> 2u)).x & 255u) * _466)) + (float(texelFetch(l_geomAttrib_0, int(((_330 + 12u) + _329) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) + 0.5) - ((((_658 >= ((-0.0) - _658)) ? _664 : ((-0.0) - _664)) * 3.0) - _649);
    float _674 = abs(_671 * cbMtdParam._m0[19u].z);
    float _678 = (((_674 * cbMtdParam._m0[19u].y) - _649) * _674) + _649;
    float _1553 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    float _692 = (cbMtdParam._m0[9u].x * _649) * cbMtdParam._m0[20u].y;
    float _693 = (cbMtdParam._m0[9u].y * _649) * cbMtdParam._m0[20u].y;
    float _694 = (cbMtdParam._m0[9u].z * _649) * cbMtdParam._m0[20u].y;
    float _713 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    float _716 = (_713 * cbMtdParam._m0[21u].y) + _547;
    float _717 = (_713 * cbMtdParam._m0[21u].z) + _548;
    float _739 = (cbTextureTilingScale._m0[1u].x * ((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + _547)) + cbTextureTilingScale._m0[1u].z;
    float _740 = (cbTextureTilingScale._m0[1u].y * ((cbMtdParam._m0[22u].x * cbPerFrame._m0[22u].x) + _548)) + cbTextureTilingScale._m0[1u].w;
    uvec2 _742 = uvec2(textureSize(S_PC_PA_c6250_snp_0_Texture2D_4, int(0u)));
    float _793;
    if (_590)
    {
        float _753 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _759 = (_546 * _531) - (_543 * _534);
        float _762 = (_540 * _534) - (_546 * _528);
        float _765 = (_543 * _528) - (_540 * _531);
        float _791 = ((log2((((float(_742.y) * 0.5) * float(_742.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_762 * _762) + (_765 * _765)) + (_759 * _759)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_753 * gl_WorldRayDirectionEXT.x, _753 * gl_WorldRayDirectionEXT.y, _753 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _793 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    }
    else
    {
        _793 = 0.0;
    }
    vec4 _795 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_4, SS_WrapLinear), vec2(_739, _740), _793);
    float _800 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[16u].y;
    float _806 = ((_795.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].w;
    float _808 = (-0.0) - (cbMtdParam._m0[15u].w * ((_795.x * 0.5) + (-0.25)));
    float _809 = fract(_800);
    float _811 = fract(_800 + 0.5);
    float _823 = abs((_809 * 2.0) + (-1.0));
    vec4 _841 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_809 * _808) + _716) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_806 * _809) + _717) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _843 = _841.x;
    float _844 = _841.y;
    float _845 = _841.z;
    vec4 _846 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_811 * _808) + _716) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_806 * _811) + _717) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _860 = (((_846.x - _843) * _823) + _843) * cbMtdParam._m0[12u].x;
    float _861 = (((_846.y - _844) * _823) + _844) * cbMtdParam._m0[12u].y;
    float _862 = (((_846.z - _845) * _823) + _845) * cbMtdParam._m0[12u].z;
    float _867 = (cbMtdParam._m0[20u].w * _713) + _547;
    float _868 = (cbMtdParam._m0[21u].x * _713) + _548;
    float _919;
    if (_590)
    {
        float _879 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _885 = (_546 * _531) - (_543 * _534);
        float _888 = (_540 * _534) - (_546 * _528);
        float _891 = (_543 * _528) - (_540 * _531);
        float _917 = ((log2((((float(_742.y) * 0.5) * float(_742.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_888 * _888) + (_891 * _891)) + (_885 * _885)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_879 * gl_WorldRayDirectionEXT.x, _879 * gl_WorldRayDirectionEXT.y, _879 * gl_WorldRayDirectionEXT.z), vec3(_559, _561, _562))));
        _919 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    }
    else
    {
        _919 = 0.0;
    }
    vec4 _921 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_4, SS_WrapLinear), vec2(_739, _740), _919);
    float _929 = ((_921.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].w;
    float _931 = (-0.0) - (cbMtdParam._m0[15u].w * ((_921.x * 0.5) + (-0.25)));
    vec4 _956 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_809 * _931) + _867) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_929 * _809) + _868) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _958 = _956.x;
    float _969 = (((textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_811 * _931) + _867) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_929 * _811) + _868) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0).x - _958) * _823) + _958) * cbMtdParam._m0[14u].y;
    float _980 = (cbMtdParam._m0[22u].y * _713) + _547;
    float _981 = (cbMtdParam._m0[22u].z * _713) + _548;
    float _985 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _986 = _985 * gl_WorldRayDirectionEXT.x;
    float _987 = _985 * gl_WorldRayDirectionEXT.y;
    float _988 = _985 * gl_WorldRayDirectionEXT.z;
    float _1032;
    if (_590)
    {
        float _998 = (_546 * _531) - (_543 * _534);
        float _1001 = (_540 * _534) - (_546 * _528);
        float _1004 = (_543 * _528) - (_540 * _531);
        float _1030 = ((log2((((float(_742.y) * 0.5) * float(_742.x)) * abs((_501 * _495) - (_500 * _497))) / (sqrt(((_1001 * _1001) + (_1004 * _1004)) + (_998 * _998)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_986, _987, _988), vec3(_559, _561, _562))));
        _1032 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    }
    else
    {
        _1032 = 0.0;
    }
    vec4 _1034 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_4, SS_WrapLinear), vec2(_739, _740), _1032);
    float _1042 = ((_1034.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].w;
    float _1044 = (-0.0) - (cbMtdParam._m0[15u].w * ((_1034.x * 0.5) + (-0.25)));
    vec4 _1069 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_809 * _1044) + _980) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1042 * _809) + _981) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1071 = _1069.x;
    float _1072 = _1069.y;
    float _1073 = _1069.z;
    vec4 _1074 = textureLod(sampler2D(S_PC_PA_c6250_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_811 * _1044) + _980) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_1042 * _811) + _981) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _1096 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1579 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1097 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    float _1104 = 1.0 - cbMtdParam._m0[20u].x;
    float _1107 = (((_1097 * _1097) * (3.0 - (_1097 * 2.0))) - cbMtdParam._m0[20u].x) / (isnan(0.001000000047497451305389404296875) ? _1104 : (isnan(_1104) ? 0.001000000047497451305389404296875 : max(_1104, 0.001000000047497451305389404296875)));
    float _1595 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1115 = abs((fract(cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1606 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1116 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    float _1123 = 1.0 - cbMtdParam._m0[14u].z;
    float _1125 = (((_1116 * _1116) * (3.0 - (_1116 * 2.0))) - cbMtdParam._m0[14u].z) / (isnan(0.001000000047497451305389404296875) ? _1123 : (isnan(_1123) ? 0.001000000047497451305389404296875 : max(_1123, 0.001000000047497451305389404296875)));
    float _1622 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = ((isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0))) - cbMtdParam._m0[16u].z) + (isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0)));
    float _1141 = ((_969 * ((((((_1074.x - _1071) * _823) + _1071) * cbMtdParam._m0[10u].x) * _1128) - _860)) + _860) * cbMtdParam._m0[19u].w;
    float _1142 = ((_969 * ((((((_1074.y - _1072) * _823) + _1072) * cbMtdParam._m0[10u].y) * _1128) - _861)) + _861) * cbMtdParam._m0[19u].w;
    float _1143 = ((_969 * ((((((_1074.z - _1073) * _823) + _1073) * cbMtdParam._m0[10u].z) * _1128) - _862)) + _862) * cbMtdParam._m0[19u].w;
    float _1144 = ceil(_671);
    float _1633 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1145 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    float _1152 = cbMtdParam._m0[20u].y * _649;
    float _1162 = (((_1152 * cbMtdParam._m0[13u].x) - _1141) * _1145) + _1141;
    float _1163 = (((_1152 * cbMtdParam._m0[13u].y) - _1142) * _1145) + _1142;
    float _1164 = (((_1152 * cbMtdParam._m0[13u].z) - _1143) * _1145) + _1143;
    float _1168 = exp2(log2(_679) * cbMtdParam._m0[19u].x);
    float _1178 = inversesqrt(dot(vec3(_559, _561, _562), vec3(_559, _561, _562)));
    float _1179 = _1178 * _559;
    float _1180 = _1178 * _561;
    float _1181 = _1178 * _562;
    float _1193 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1194 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1195 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1196 = (-0.0) - _986;
    float _1197 = (-0.0) - _987;
    float _1198 = (-0.0) - _988;
    float _1204 = float(gl_LaunchIDEXT.x);
    float _1205 = float(gl_LaunchIDEXT.y);
    float _1208 = float(gl_LaunchSizeEXT.x);
    float _1222 = fract(fract(sin(dot(vec2(_1204 / _1208, _1205 / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1235 = fract(fract(sin(dot(vec2((_1204 + 128.0) / _1208, (_1205 + 128.0) / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _68._m0 = 1u;
    uvec4 _1245 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1246 = _1245.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1246, _1245.w, _1246, vec3(_1193, _1194, _1195), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1311;
    float _1312;
    float _1313;
    if (_68._m0 == 0u)
    {
        float _1266 = g_sceneCB._m0[4u].x - _986;
        float _1267 = g_sceneCB._m0[4u].y - _987;
        float _1268 = g_sceneCB._m0[4u].z - _988;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1276 = dot(vec3(_1179, _1180, _1181), vec3(g_sceneCB._m0[4u].xyz));
        float _1644 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1279 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        float _1280 = dot(vec3(_1179, _1180, _1181), vec3(_1196, _1197, _1198));
        float _1655 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1266 * _1272, _1267 * _1272, _1268 * _1272));
        float _1666 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1295 = (exp2(log2(1.0 - (isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1301 = (0.5 / ((_1279 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0))))) * _1279;
        float _1677 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1303 = (isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0))) * 0.31831014156341552734375;
        _1311 = (_1295 * g_sceneCB._m0[5u].x) * _1303;
        _1312 = (_1295 * g_sceneCB._m0[5u].y) * _1303;
        _1313 = (_1295 * g_sceneCB._m0[5u].z) * _1303;
    }
    else
    {
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    bool _1315 = abs(_1180) < 0.89999997615814208984375;
    float _1317 = float(_1315);
    float _1318 = _1315 ? 0.0 : 1.0;
    float _1321 = (_1317 * _1181) - (_1318 * _1180);
    float _1322 = _1318 * _1179;
    float _1324 = (-0.0) - (_1179 * _1317);
    float _1328 = inversesqrt(dot(vec3(_1321, _1322, _1324), vec3(_1321, _1322, _1324)));
    float _1329 = _1321 * _1328;
    float _1330 = _1322 * _1328;
    float _1331 = _1328 * _1324;
    float _1334 = (_1330 * _1181) - (_1331 * _1180);
    float _1337 = (_1331 * _1179) - (_1329 * _1181);
    float _1340 = (_1329 * _1180) - (_1330 * _1179);
    float _1342;
    float _1350;
    float _1341 = 0.0;
    uint _1343 = 0u;
    float _1347;
    bool _1349;
    for (;;)
    {
        _1347 = (float(_1343) + _1222) * 0.03125;
        _1349 = _1343 == 0u;
        float frontier_phi_47_pred;
        if (_1349)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1473;
            float _1474;
            uint _1476;
            _1473 = 0.0;
            _1474 = 0.5;
            _1476 = _1343;
            float _1351;
            for (;;)
            {
                _1351 = ((_1476 & 1u) != 0u) ? (_1474 + _1473) : _1473;
                uint _1477 = _1476 >> 1u;
                if (_1477 == 0u)
                {
                    break;
                }
                else
                {
                    _1473 = _1351;
                    _1474 *= 0.5;
                    _1476 = _1477;
                }
            }
            frontier_phi_47_pred = _1351;
        }
        _1350 = frontier_phi_47_pred;
        float _1352 = _1350 + _1235;
        float _1356 = sqrt(_1347);
        float _1357 = ((_1352 > 1.0) ? (_1352 + (-1.0)) : _1352) * 6.283185482025146484375;
        float _1360 = cos(_1357) * _1356;
        float _1362 = sin(_1357) * _1356;
        float _1364 = sqrt(1.0 - _1347);
        float _1377 = ((_1364 * _1179) + (_1360 * _1334)) + (_1362 * _1329);
        float _1378 = ((_1364 * _1180) + (_1360 * _1337)) + (_1362 * _1330);
        float _1379 = ((_1364 * _1181) + (_1360 * _1340)) + (_1362 * _1331);
        _67._m0 = 1u;
        uvec4 _1383 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1384 = _1383.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1384, _1383.w, _1384, vec3(_1193, _1194, _1195), 9.9999997473787516355514526367188e-05, vec3(_1377, _1378, _1379), 10000.0, 1);
        float _1390 = dot(vec3(_1179, _1180, _1181), vec3(_1377, _1378, _1379));
        float _1688 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1393 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _1342 = ((float(_67._m0 == 0u) * _1393) / (_1393 * 0.3183098733425140380859375)) + _1341;
        uint _1344 = _1343 + 1u;
        if (_1344 == 32u)
        {
            break;
        }
        else
        {
            _1341 = _1342;
            _1343 = _1344;
            continue;
        }
    }
    float _1402 = _1342 * 0.009947183541953563690185546875;
    float _1407 = dot(vec3(_986, _987, _988), vec3(_1179, _1180, _1181)) * 2.0;
    vec4 _1419 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_986 - (_1407 * _1179), _987 - (_1407 * _1180), _988 - (_1407 * _1181)), 4.0);
    float _1424 = dot(vec3(_1196, _1197, _1198), vec3(_1179, _1180, _1181));
    float _1699 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1433 = (exp2(log2(1.0 - (isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1442 = (((_1168 * ((_692 - (_692 * _679)) - _1162)) + _1162) + _1311) + ((_1419.x * _1402) * _1433);
    float _1445 = (((_1168 * ((_693 - (_693 * _679)) - _1163)) + _1163) + _1312) + ((_1419.y * _1402) * _1433);
    float _1448 = (((_1168 * ((_694 - (_694 * _679)) - _1164)) + _1164) + _1313) + ((_1419.z * _1402) * _1433);
    float _1710 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _1721 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1732 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
    bool _1456 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1467;
    _1467.x = _1456 ? ((_552 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0)));
    _1467.y = _1456 ? ((_555 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0)));
    _1467.z = _1456 ? ((_558 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0)));
    payload._m0 = _1467;
}


