#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1455;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _164 & 65535u;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _167;
        }
        else
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _165 >> 16u;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _170 = frontier_phi_3_2_ladder;
        _172 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _177.z;
    bool _180 = _179 != 0u;
    bool _182 = _129.w == 0u;
    bool _183 = _180 || _182;
    uint _184 = _178 * _170;
    uint _185 = _184 + 12u;
    uint _209;
    uint _210;
    uint _211;
    uint _212;
    if (_183)
    {
        uvec4 _188 = texelFetch(l_geomAttrib_0, int(_185 >> 2u));
        uint _189 = _188.x;
        _209 = _189 & 255u;
        _210 = (_189 >> 8u) & 255u;
        _211 = (_189 >> 16u) & 255u;
        _212 = 16u;
    }
    else
    {
        uint _197 = _185 >> 2u;
        uvec2 _203 = uvec2(texelFetch(l_geomAttrib_0, int(_197)).x, texelFetch(l_geomAttrib_0, int(_197 + 1u)).x);
        uint _204 = _203.x;
        _209 = _204 & 65535u;
        _210 = _204 >> 16u;
        _211 = _203.y & 65535u;
        _212 = 20u;
    }
    uvec4 _220 = texelFetch(l_geomAttrib_0, int((_212 + _184) >> 2u));
    uint _221 = _220.x;
    bool _235 = _179 == 0u;
    uint _236;
    if (_235)
    {
        _236 = _212 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_182)
        {
            frontier_phi_9_10_ladder = _212 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _212 + 12u;
        }
        _236 = frontier_phi_9_10_ladder;
    }
    uint _240 = _180 ? (_236 + 4u) : _236;
    uvec4 _244 = texelFetch(l_geomAttrib_0, int(((_184 + 4u) + _240) >> 2u));
    uint _245 = _244.x;
    float _249 = float(int(uint(int(_245 << 16u) >> int(16u))));
    float _250 = float(int(uint(int(_245) >> int(16u))));
    uvec4 _254 = texelFetch(l_geomAttrib_0, int(((_184 + 8u) + _240) >> 2u));
    uint _255 = _254.x;
    uint _261 = _178 * _172;
    uint _262 = _261 + 12u;
    uint _283;
    uint _284;
    uint _285;
    uint _286;
    if (_183)
    {
        uvec4 _264 = texelFetch(l_geomAttrib_0, int(_262 >> 2u));
        uint _265 = _264.x;
        _283 = _265 & 255u;
        _284 = (_265 >> 8u) & 255u;
        _285 = (_265 >> 16u) & 255u;
        _286 = 16u;
    }
    else
    {
        uint _271 = _262 >> 2u;
        uvec2 _277 = uvec2(texelFetch(l_geomAttrib_0, int(_271)).x, texelFetch(l_geomAttrib_0, int(_271 + 1u)).x);
        uint _278 = _277.x;
        _283 = _278 & 65535u;
        _284 = _278 >> 16u;
        _285 = _277.y & 65535u;
        _286 = 20u;
    }
    uvec4 _292 = texelFetch(l_geomAttrib_0, int((_286 + _261) >> 2u));
    uint _293 = _292.x;
    uint _305;
    if (_235)
    {
        _305 = _286 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_182)
        {
            frontier_phi_16_17_ladder = _286 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _286 + 12u;
        }
        _305 = frontier_phi_16_17_ladder;
    }
    uint _309 = _180 ? (_305 + 4u) : _305;
    uvec4 _313 = texelFetch(l_geomAttrib_0, int(((_261 + 4u) + _309) >> 2u));
    uint _314 = _313.x;
    float _318 = float(int(uint(int(_314 << 16u) >> int(16u))));
    float _319 = float(int(uint(int(_314) >> int(16u))));
    uvec4 _323 = texelFetch(l_geomAttrib_0, int(((_261 + 8u) + _309) >> 2u));
    uint _324 = _323.x;
    uint _330 = _178 * _173;
    uint _331 = _330 + 12u;
    uint _352;
    uint _353;
    uint _354;
    uint _355;
    if (_183)
    {
        uvec4 _333 = texelFetch(l_geomAttrib_0, int(_331 >> 2u));
        uint _334 = _333.x;
        _352 = _334 & 255u;
        _353 = (_334 >> 8u) & 255u;
        _354 = (_334 >> 16u) & 255u;
        _355 = 16u;
    }
    else
    {
        uint _340 = _331 >> 2u;
        uvec2 _346 = uvec2(texelFetch(l_geomAttrib_0, int(_340)).x, texelFetch(l_geomAttrib_0, int(_340 + 1u)).x);
        uint _347 = _346.x;
        _352 = _347 & 65535u;
        _353 = _347 >> 16u;
        _354 = _346.y & 65535u;
        _355 = 20u;
    }
    uvec4 _361 = texelFetch(l_geomAttrib_0, int((_355 + _330) >> 2u));
    uint _362 = _361.x;
    uint _374;
    if (_235)
    {
        _374 = _355 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_182)
        {
            frontier_phi_23_24_ladder = _355 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _355 + 12u;
        }
        _374 = frontier_phi_23_24_ladder;
    }
    uint _378 = _180 ? (_374 + 4u) : _374;
    uvec4 _382 = texelFetch(l_geomAttrib_0, int(((_330 + 4u) + _378) >> 2u));
    uint _383 = _382.x;
    float _387 = float(int(uint(int(_383 << 16u) >> int(16u))));
    float _388 = float(int(uint(int(_383) >> int(16u))));
    uvec4 _392 = texelFetch(l_geomAttrib_0, int(((_330 + 8u) + _378) >> 2u));
    uint _393 = _392.x;
    bool _400 = _129.z == 0u;
    float _436;
    float _437;
    float _438;
    if (_400)
    {
        uint _403 = _170 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _170 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_400)
    {
        uint _441 = _172 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _172 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _512;
    float _513;
    float _514;
    if (_400)
    {
        uint _479 = _173 * 3u;
        uvec3 _488 = uvec3(texelFetch(l_geomPositionBuffer, int(_479)).x, texelFetch(l_geomPositionBuffer, int(_479 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_479 + 2u)).x);
        _512 = uintBitsToFloat(_488.x);
        _513 = uintBitsToFloat(_488.y);
        _514 = uintBitsToFloat(_488.z);
    }
    else
    {
        uint _496 = _173 * 2u;
        uvec2 _502 = uvec2(texelFetch(l_geomPositionBuffer, int(_496)).x, texelFetch(l_geomPositionBuffer, int(_496 + 1u)).x);
        uint _503 = _502.x;
        _512 = unpackHalf2x16(_503).x;
        _513 = unpackHalf2x16(_503 >> 16u).x;
        _514 = unpackHalf2x16(_502.y).x;
    }
    float _517 = (1.0 - hit._m0.x) - hit._m0.y;
    float _561 = (((float((_324 >> 8u) & 255u) * hit._m0.x) + (float((_255 >> 8u) & 255u) * _517)) + (float((_393 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _564 = (_318 - _249) * 0.00048828125;
    float _566 = (_319 - _250) * 0.00048828125;
    float _569 = (_387 - _249) * 0.00048828125;
    float _570 = (_388 - _250) * 0.00048828125;
    float _592 = _474 - _436;
    float _593 = _475 - _437;
    float _594 = _476 - _438;
    float _597 = fma(_594, gl_ObjectToWorldEXT[2u].x, fma(_593, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _592));
    float _600 = fma(_594, gl_ObjectToWorldEXT[2u].y, fma(_593, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _592));
    float _603 = fma(_594, gl_ObjectToWorldEXT[2u].z, fma(_593, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _592));
    float _604 = _512 - _436;
    float _605 = _513 - _437;
    float _606 = _514 - _438;
    float _609 = fma(_606, gl_ObjectToWorldEXT[2u].x, fma(_605, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _604));
    float _612 = fma(_606, gl_ObjectToWorldEXT[2u].y, fma(_605, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _604));
    float _615 = fma(_606, gl_ObjectToWorldEXT[2u].z, fma(_605, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _604));
    float _616 = (((_318 * hit._m0.x) + (_249 * _517)) + (_387 * hit._m0.y)) * 0.00048828125;
    float _617 = (((_319 * hit._m0.x) + (_250 * _517)) + (_388 * hit._m0.y)) * 0.00048828125;
    float _621 = (((float(_209) * _517) + (-127.0)) + (float(_283) * hit._m0.x)) + (float(_352) * hit._m0.y);
    float _624 = (((float(_210) * _517) + (-127.0)) + (float(_284) * hit._m0.x)) + (float(_353) * hit._m0.y);
    float _627 = (((float(_211) * _517) + (-127.0)) + (float(_285) * hit._m0.x)) + (float(_354) * hit._m0.y);
    float _628 = _621 * 0.0078740157186985015869140625;
    float _630 = _624 * 0.0078740157186985015869140625;
    float _631 = _627 * 0.0078740157186985015869140625;
    float _644 = ((((float(_221 & 255u) * _517) + (-127.0)) + (float(_293 & 255u) * hit._m0.x)) + (float(_362 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _645 = ((((float((_221 >> 8u) & 255u) * _517) + (-127.0)) + (float((_293 >> 8u) & 255u) * hit._m0.x)) + (float((_362 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _646 = ((((float((_221 >> 16u) & 255u) * _517) + (-127.0)) + (float((_293 >> 16u) & 255u) * hit._m0.x)) + (float((_362 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _647 = ((((float(_221 >> 24u) * _517) + (-127.0)) + (float(_293 >> 24u) * hit._m0.x)) + (float(_362 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _657 = ((_645 * _631) - (_646 * _630)) * _647;
    float _658 = ((_646 * _628) - (_644 * _631)) * _647;
    float _659 = ((_644 * _630) - (_645 * _628)) * _647;
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _682 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _692 = (cbMtdParam._m0[12u].w * _682) + _616;
    float _693 = (cbMtdParam._m0[13u].x * _682) + _617;
    float _702 = (_692 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z;
    float _703 = (_693 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w;
    uvec2 _705 = uvec2(textureSize(M_Water_river_snp_0_Texture2D_3, int(0u)));
    bool _710 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _763;
    if (_710)
    {
        float _721 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _727 = (_615 * _600) - (_612 * _603);
        float _730 = (_609 * _603) - (_615 * _597);
        float _733 = (_612 * _597) - (_609 * _600);
        float _760 = ((log2((((float(_705.y) * 0.5) * float(_705.x)) * abs((_570 * _564) - (_569 * _566))) / (sqrt(((_730 * _730) + (_733 * _733)) + (_727 * _727)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_721 * gl_WorldRayDirectionEXT.x, _721 * gl_WorldRayDirectionEXT.y, _721 * gl_WorldRayDirectionEXT.z), vec3(_628, _630, _631))));
        _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    }
    else
    {
        _763 = 0.0;
    }
    vec4 _767 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2(_702, _703), _763);
    float _772 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _777 = (_767.y * 0.5) + (-0.25);
    float _778 = (-0.0) - ((_767.x * 0.5) + (-0.25));
    float _780 = fract(_772);
    float _782 = fract(_772 + 0.5);
    float _794 = abs((_780 * 2.0) + (-1.0));
    vec4 _803 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_780 * _778) + _692) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_777 * _780) + _693) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _805 = _803.z;
    uvec2 _831 = uvec2(textureSize(M_Water_river_snp_0_Texture2D_0, int(0u)));
    float _882;
    if (_710)
    {
        float _842 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _848 = (_615 * _600) - (_612 * _603);
        float _851 = (_609 * _603) - (_615 * _597);
        float _854 = (_612 * _597) - (_609 * _600);
        float _880 = ((log2((((float(_831.y) * 0.5) * float(_831.x)) * abs((_570 * _564) - (_569 * _566))) / (sqrt(((_851 * _851) + (_854 * _854)) + (_848 * _848)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_842 * gl_WorldRayDirectionEXT.x, _842 * gl_WorldRayDirectionEXT.y, _842 * gl_WorldRayDirectionEXT.z), vec3(_628, _630, _631))));
        _882 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    }
    else
    {
        _882 = 0.0;
    }
    vec4 _885 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _682) + _616) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _682) + _617) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _882);
    float _889 = _885.z;
    float _902 = ((((textureLod(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_782 * _778) + _692) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_777 * _782) + _693) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0).z - _805) * _794) + _805) * (1.0 - _561)) * ((((((float(_324 & 255u) * hit._m0.x) + (float(_255 & 255u) * _517)) + (float(_393 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) + 1.0) + (exp2(log2(((0.502016007900238037109375 - _889) * _561) + _889) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w));
    float _903 = _902 + cbMtdParam._m0[9u].x;
    float _904 = _902 + cbMtdParam._m0[9u].y;
    float _905 = _902 + cbMtdParam._m0[9u].z;
    uvec2 _923 = uvec2(textureSize(M_Water_river_snp_0_Texture2D_1, int(0u)));
    float _974;
    if (_710)
    {
        float _934 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _940 = (_615 * _600) - (_612 * _603);
        float _943 = (_609 * _603) - (_615 * _597);
        float _946 = (_612 * _597) - (_609 * _600);
        float _972 = ((log2((((float(_923.y) * 0.5) * float(_923.x)) * abs((_570 * _564) - (_569 * _566))) / (sqrt(((_943 * _943) + (_946 * _946)) + (_940 * _940)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_934 * gl_WorldRayDirectionEXT.x, _934 * gl_WorldRayDirectionEXT.y, _934 * gl_WorldRayDirectionEXT.z), vec3(_628, _630, _631))));
        _974 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    }
    else
    {
        _974 = 0.0;
    }
    vec4 _976 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _682) + _616) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _682) + _617) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _974);
    float _980 = _976.x * 2.0;
    float _981 = _976.y * 2.0;
    float _982 = _980 + (-1.0);
    float _983 = _981 + (-1.0);
    float _984 = dot(vec2(_982, _983), vec2(_982, _983));
    float _1550 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _989 = sqrt(1.0 - (isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0))));
    float _993 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _994 = _993 * gl_WorldRayDirectionEXT.x;
    float _995 = _993 * gl_WorldRayDirectionEXT.y;
    float _996 = _993 * gl_WorldRayDirectionEXT.z;
    float _1040;
    if (_710)
    {
        float _1006 = (_615 * _600) - (_612 * _603);
        float _1009 = (_609 * _603) - (_615 * _597);
        float _1012 = (_612 * _597) - (_609 * _600);
        float _1038 = ((log2((((float(_705.y) * 0.5) * float(_705.x)) * abs((_570 * _564) - (_569 * _566))) / (sqrt(((_1009 * _1009) + (_1012 * _1012)) + (_1006 * _1006)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_994, _995, _996), vec3(_628, _630, _631))));
        _1040 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    }
    else
    {
        _1040 = 0.0;
    }
    vec4 _1042 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2(_702, _703), _1040);
    float _1049 = (_1042.y * 0.5) + (-0.25);
    float _1050 = (-0.0) - ((_1042.x * 0.5) + (-0.25));
    vec4 _1068 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_780 * _1050) + _692) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1049 * _780) + _693) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1070 = _1068.x;
    float _1071 = _1068.y;
    vec4 _1072 = textureLod(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_782 * _1050) + _692) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1049 * _782) + _693) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1082 = (((_1072.x - _1070) * _794) + _1070) + _885.x;
    float _1091 = (_980 + (-1.60000002384185791015625)) + ((_1082 + ((1.00403201580047607421875 - _1082) * _561)) * 0.60000002384185791015625);
    float _1092 = (((_1072.y - _1071) * _794) + _1071) + _885.y;
    float _1098 = (_981 + (-1.60000002384185791015625)) + ((_1092 + ((1.00403201580047607421875 - _1092) * _561)) * 0.60000002384185791015625);
    float _1101 = fma(_989, _628, fma(_1098, _644, (_663 * _657) * _1091));
    float _1104 = fma(_989, _630, fma(_1098, _645, (_663 * _658) * _1091));
    float _1107 = fma(_989, _631, fma(_1098, _646, (_663 * _659) * _1091));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _1126 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1127 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1128 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1129 = (-0.0) - _994;
    float _1130 = (-0.0) - _995;
    float _1131 = (-0.0) - _996;
    float _1137 = float(gl_LaunchIDEXT.x);
    float _1138 = float(gl_LaunchIDEXT.y);
    float _1141 = float(gl_LaunchSizeEXT.x);
    float _1155 = fract(fract(sin(dot(vec2(_1137 / _1141, _1138 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1168 = fract(fract(sin(dot(vec2((_1137 + 128.0) / _1141, (_1138 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _67._m0 = 1u;
    uvec4 _1178 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1179 = _1178.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1179, _1178.w, _1179, vec3(_1126, _1127, _1128), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (_67._m0 == 0u)
    {
        float _1200 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1112, _1113, _1114));
        float _1566 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1203 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        float _1221 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * 0.949999988079071044921875);
        float _1222 = _1221 * _1221;
        float _1223 = g_sceneCB._m0[4u].x - _994;
        float _1224 = g_sceneCB._m0[4u].y - _995;
        float _1225 = g_sceneCB._m0[4u].z - _996;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1230 = _1229 * _1223;
        float _1231 = _1229 * _1224;
        float _1232 = _1229 * _1225;
        float _1233 = dot(vec3(_1112, _1113, _1114), vec3(g_sceneCB._m0[4u].xyz));
        float _1577 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1236 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        float _1237 = dot(vec3(_1112, _1113, _1114), vec3(_1129, _1130, _1131));
        float _1588 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1240 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        float _1241 = dot(vec3(_1112, _1113, _1114), vec3(_1230, _1231, _1232));
        float _1599 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1244 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        float _1245 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1230, _1231, _1232));
        float _1610 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1222 * _1222;
        float _1253 = ((_1244 * _1244) * (_1249 + (-1.0))) + 1.0;
        float _1265 = (exp2(log2(1.0 - (isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1267 = 1.0 - _1222;
        float _1278 = (0.5 / (((_1240 * ((_1236 * _1267) + _1222)) + 9.9999999392252902907785028219223e-09) + (((_1240 * _1267) + _1222) * _1236))) * _1236;
        float _1621 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1280 = (isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0))) * (_1249 / ((_1253 * _1253) * 3.141590118408203125));
        _1287 = ((_903 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1203;
        _1288 = ((_904 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1203;
        _1289 = ((_905 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1203;
        _1290 = (_1265 * g_sceneCB._m0[5u].x) * _1280;
        _1291 = (_1265 * g_sceneCB._m0[5u].y) * _1280;
        _1292 = (_1265 * g_sceneCB._m0[5u].z) * _1280;
    }
    else
    {
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    bool _1294 = abs(_1113) < 0.89999997615814208984375;
    float _1296 = float(_1294);
    float _1297 = _1294 ? 0.0 : 1.0;
    float _1300 = (_1296 * _1114) - (_1297 * _1113);
    float _1301 = _1297 * _1112;
    float _1303 = (-0.0) - (_1112 * _1296);
    float _1307 = inversesqrt(dot(vec3(_1300, _1301, _1303), vec3(_1300, _1301, _1303)));
    float _1308 = _1300 * _1307;
    float _1309 = _1301 * _1307;
    float _1310 = _1307 * _1303;
    float _1313 = (_1309 * _1114) - (_1310 * _1113);
    float _1316 = (_1310 * _1112) - (_1308 * _1114);
    float _1319 = (_1308 * _1113) - (_1309 * _1112);
    float _1321;
    float _1329;
    float _1320 = 0.0;
    uint _1322 = 0u;
    float _1326;
    bool _1328;
    for (;;)
    {
        _1326 = (float(_1322) + _1155) * 0.03125;
        _1328 = _1322 == 0u;
        float frontier_phi_47_pred;
        if (_1328)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1460;
            float _1461;
            uint _1463;
            _1460 = 0.0;
            _1461 = 0.5;
            _1463 = _1322;
            float _1330;
            for (;;)
            {
                _1330 = ((_1463 & 1u) != 0u) ? (_1461 + _1460) : _1460;
                uint _1464 = _1463 >> 1u;
                if (_1464 == 0u)
                {
                    break;
                }
                else
                {
                    _1460 = _1330;
                    _1461 *= 0.5;
                    _1463 = _1464;
                }
            }
            frontier_phi_47_pred = _1330;
        }
        _1329 = frontier_phi_47_pred;
        float _1331 = _1329 + _1168;
        float _1335 = sqrt(_1326);
        float _1336 = ((_1331 > 1.0) ? (_1331 + (-1.0)) : _1331) * 6.283185482025146484375;
        float _1339 = cos(_1336) * _1335;
        float _1341 = sin(_1336) * _1335;
        float _1343 = sqrt(1.0 - _1326);
        float _1356 = ((_1343 * _1112) + (_1339 * _1313)) + (_1341 * _1308);
        float _1357 = ((_1343 * _1113) + (_1339 * _1316)) + (_1341 * _1309);
        float _1358 = ((_1343 * _1114) + (_1339 * _1319)) + (_1341 * _1310);
        _66._m0 = 1u;
        uvec4 _1362 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1363 = _1362.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1363, _1362.w, _1363, vec3(_1126, _1127, _1128), 9.9999997473787516355514526367188e-05, vec3(_1356, _1357, _1358), 10000.0, 1);
        float _1369 = dot(vec3(_1112, _1113, _1114), vec3(_1356, _1357, _1358));
        float _1632 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1372 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1321 = ((float(_66._m0 == 0u) * _1372) / (_1372 * 0.3183098733425140380859375)) + _1320;
        uint _1323 = _1322 + 1u;
        if (_1323 == 32u)
        {
            break;
        }
        else
        {
            _1320 = _1321;
            _1322 = _1323;
            continue;
        }
    }
    float _1380 = _1321 * 0.009947183541953563690185546875;
    float _1385 = dot(vec3(_994, _995, _996), vec3(_1112, _1113, _1114)) * 2.0;
    vec4 _1396 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_994 - (_1385 * _1112), _995 - (_1385 * _1113), _996 - (_1385 * _1114)), 0.0);
    float _1401 = dot(vec3(_1129, _1130, _1131), vec3(_1112, _1113, _1114));
    float _1643 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1410 = (exp2(log2(1.0 - (isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1416 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1112, _1113, _1114), 0.0);
    float _1427 = (_1290 + _1287) + (((_1416.x * _903) + (_1410 * _1396.x)) * _1380);
    float _1431 = (_1291 + _1288) + (((_1416.y * _904) + (_1410 * _1396.y)) * _1380);
    float _1435 = (_1292 + _1289) + (((_1416.z * _905) + (_1410 * _1396.z)) * _1380);
    float _1654 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
    float _1665 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1676 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    bool _1443 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1454;
    _1454.x = _1443 ? ((_621 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0)));
    _1454.y = _1443 ? ((_624 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0)));
    _1454.z = _1443 ? ((_627 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0)));
    payload._m0 = _1454;
}


