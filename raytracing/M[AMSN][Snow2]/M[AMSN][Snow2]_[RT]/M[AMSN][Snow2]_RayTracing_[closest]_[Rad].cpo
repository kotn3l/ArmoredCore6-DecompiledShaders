#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1433;

void main()
{
    float _73 = float(gl_LaunchSizeEXT.y);
    float _103 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _105 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _112 = sqrt(((_104 * _104) + (_103 * _103)) + (_105 * _105)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _73)))));
    uvec4 _123 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _124 = _123.y;
    uint _164;
    uint _166;
    uint _167;
    if (_123.x == 0u)
    {
        uint _132 = (_124 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _141 = uvec3(texelFetch(l_geomIndexBuffer, int(_132)).x, texelFetch(l_geomIndexBuffer, int(_132 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_132 + 2u)).x);
        _164 = _141.x;
        _166 = _141.y;
        _167 = _141.z;
    }
    else
    {
        uint _145 = uint(gl_PrimitiveID) * 6u;
        uint _147 = _145 & 4294967292u;
        uint _150 = (_124 + _147) >> 2u;
        uvec2 _157 = uvec2(texelFetch(l_geomIndexBuffer, int(_150)).x, texelFetch(l_geomIndexBuffer, int(_150 + 1u)).x);
        uint _158 = _157.x;
        uint _159 = _157.y;
        uint _161 = _158 >> 16u;
        uint _162 = _159 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_147 == _145)
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _158 & 65535u;
            frontier_phi_3_2_ladder_2 = _162;
        }
        else
        {
            frontier_phi_3_2_ladder = _162;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _159 >> 16u;
        }
        _164 = frontier_phi_3_2_ladder_1;
        _166 = frontier_phi_3_2_ladder;
        _167 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _171 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _172 = _171.x;
    uint _173 = _171.z;
    bool _174 = _173 != 0u;
    bool _176 = _123.w == 0u;
    bool _177 = _174 || _176;
    uint _178 = _172 * _164;
    uint _179 = _178 + 12u;
    uint _203;
    uint _204;
    uint _205;
    uint _206;
    if (_177)
    {
        uvec4 _182 = texelFetch(l_geomAttrib_0, int(_179 >> 2u));
        uint _183 = _182.x;
        _203 = _183 & 255u;
        _204 = (_183 >> 8u) & 255u;
        _205 = (_183 >> 16u) & 255u;
        _206 = 16u;
    }
    else
    {
        uint _191 = _179 >> 2u;
        uvec2 _197 = uvec2(texelFetch(l_geomAttrib_0, int(_191)).x, texelFetch(l_geomAttrib_0, int(_191 + 1u)).x);
        uint _198 = _197.x;
        _203 = _198 & 65535u;
        _204 = _198 >> 16u;
        _205 = _197.y & 65535u;
        _206 = 20u;
    }
    uvec4 _214 = texelFetch(l_geomAttrib_0, int((_206 + _178) >> 2u));
    uint _215 = _214.x;
    bool _229 = _173 == 0u;
    uint _230;
    if (_229)
    {
        _230 = _206 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_176)
        {
            frontier_phi_9_10_ladder = _206 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _206 + 12u;
        }
        _230 = frontier_phi_9_10_ladder;
    }
    uvec4 _238 = texelFetch(l_geomAttrib_0, int(((_178 + 4u) + (_174 ? (_230 + 4u) : _230)) >> 2u));
    uint _239 = _238.x;
    float _243 = float(int(uint(int(_239 << 16u) >> int(16u))));
    float _244 = float(int(uint(int(_239) >> int(16u))));
    uint _245 = _172 * _166;
    uint _246 = _245 + 12u;
    uint _267;
    uint _268;
    uint _269;
    uint _270;
    if (_177)
    {
        uvec4 _248 = texelFetch(l_geomAttrib_0, int(_246 >> 2u));
        uint _249 = _248.x;
        _267 = _249 & 255u;
        _268 = (_249 >> 8u) & 255u;
        _269 = (_249 >> 16u) & 255u;
        _270 = 16u;
    }
    else
    {
        uint _255 = _246 >> 2u;
        uvec2 _261 = uvec2(texelFetch(l_geomAttrib_0, int(_255)).x, texelFetch(l_geomAttrib_0, int(_255 + 1u)).x);
        uint _262 = _261.x;
        _267 = _262 & 65535u;
        _268 = _262 >> 16u;
        _269 = _261.y & 65535u;
        _270 = 20u;
    }
    uvec4 _276 = texelFetch(l_geomAttrib_0, int((_270 + _245) >> 2u));
    uint _277 = _276.x;
    uint _289;
    if (_229)
    {
        _289 = _270 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_176)
        {
            frontier_phi_16_17_ladder = _270 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _270 + 12u;
        }
        _289 = frontier_phi_16_17_ladder;
    }
    uvec4 _297 = texelFetch(l_geomAttrib_0, int(((_245 + 4u) + (_174 ? (_289 + 4u) : _289)) >> 2u));
    uint _298 = _297.x;
    float _302 = float(int(uint(int(_298 << 16u) >> int(16u))));
    float _303 = float(int(uint(int(_298) >> int(16u))));
    uint _304 = _172 * _167;
    uint _305 = _304 + 12u;
    uint _326;
    uint _327;
    uint _328;
    uint _329;
    if (_177)
    {
        uvec4 _307 = texelFetch(l_geomAttrib_0, int(_305 >> 2u));
        uint _308 = _307.x;
        _326 = _308 & 255u;
        _327 = (_308 >> 8u) & 255u;
        _328 = (_308 >> 16u) & 255u;
        _329 = 16u;
    }
    else
    {
        uint _314 = _305 >> 2u;
        uvec2 _320 = uvec2(texelFetch(l_geomAttrib_0, int(_314)).x, texelFetch(l_geomAttrib_0, int(_314 + 1u)).x);
        uint _321 = _320.x;
        _326 = _321 & 65535u;
        _327 = _321 >> 16u;
        _328 = _320.y & 65535u;
        _329 = 20u;
    }
    uvec4 _335 = texelFetch(l_geomAttrib_0, int((_329 + _304) >> 2u));
    uint _336 = _335.x;
    uint _348;
    if (_229)
    {
        _348 = _329 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_176)
        {
            frontier_phi_23_24_ladder = _329 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _329 + 12u;
        }
        _348 = frontier_phi_23_24_ladder;
    }
    uvec4 _356 = texelFetch(l_geomAttrib_0, int(((_304 + 4u) + (_174 ? (_348 + 4u) : _348)) >> 2u));
    uint _357 = _356.x;
    float _361 = float(int(uint(int(_357 << 16u) >> int(16u))));
    float _362 = float(int(uint(int(_357) >> int(16u))));
    bool _364 = _123.z == 0u;
    float _400;
    float _401;
    float _402;
    if (_364)
    {
        uint _367 = _164 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _164 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_364)
    {
        uint _405 = _166 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _166 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _476;
    float _477;
    float _478;
    if (_364)
    {
        uint _443 = _167 * 3u;
        uvec3 _452 = uvec3(texelFetch(l_geomPositionBuffer, int(_443)).x, texelFetch(l_geomPositionBuffer, int(_443 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_443 + 2u)).x);
        _476 = uintBitsToFloat(_452.x);
        _477 = uintBitsToFloat(_452.y);
        _478 = uintBitsToFloat(_452.z);
    }
    else
    {
        uint _460 = _167 * 2u;
        uvec2 _466 = uvec2(texelFetch(l_geomPositionBuffer, int(_460)).x, texelFetch(l_geomPositionBuffer, int(_460 + 1u)).x);
        uint _467 = _466.x;
        _476 = unpackHalf2x16(_467).x;
        _477 = unpackHalf2x16(_467 >> 16u).x;
        _478 = unpackHalf2x16(_466.y).x;
    }
    float _481 = (1.0 - hit._m0.x) - hit._m0.y;
    float _515 = (_302 - _243) * 0.00048828125;
    float _517 = (_303 - _244) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _548 = fma(_545, gl_ObjectToWorldEXT[2u].x, fma(_544, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _543));
    float _551 = fma(_545, gl_ObjectToWorldEXT[2u].y, fma(_544, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _543));
    float _554 = fma(_545, gl_ObjectToWorldEXT[2u].z, fma(_544, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _543));
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _560 = fma(_557, gl_ObjectToWorldEXT[2u].x, fma(_556, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _555));
    float _563 = fma(_557, gl_ObjectToWorldEXT[2u].y, fma(_556, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _555));
    float _566 = fma(_557, gl_ObjectToWorldEXT[2u].z, fma(_556, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _555));
    float _567 = (((_302 * hit._m0.x) + (_243 * _481)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _568 = (((_303 * hit._m0.x) + (_244 * _481)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _572 = (((float(_203) * _481) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _575 = (((float(_204) * _481) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = (((float(_205) * _481) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = _572 * 0.0078740157186985015869140625;
    float _581 = _575 * 0.0078740157186985015869140625;
    float _582 = _578 * 0.0078740157186985015869140625;
    float _595 = ((((float(_215 & 255u) * _481) + (-127.0)) + (float(_277 & 255u) * hit._m0.x)) + (float(_336 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_215 >> 8u) & 255u) * _481) + (-127.0)) + (float((_277 >> 8u) & 255u) * hit._m0.x)) + (float((_336 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_215 >> 16u) & 255u) * _481) + (-127.0)) + (float((_277 >> 16u) & 255u) * hit._m0.x)) + (float((_336 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float(_215 >> 24u) * _481) + (-127.0)) + (float(_277 >> 24u) * hit._m0.x)) + (float(_336 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _608 = ((_596 * _582) - (_597 * _581)) * _598;
    float _609 = ((_597 * _579) - (_595 * _582)) * _598;
    float _610 = ((_595 * _581) - (_596 * _579)) * _598;
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _614 * _608;
    float _616 = _614 * _609;
    float _617 = _614 * _610;
    uvec2 _635 = uvec2(textureSize(M_AMSN_Snow2_snp_0_Texture2D_1, int(0u)));
    bool _640 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _693;
    if (_640)
    {
        float _651 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _657 = (_566 * _551) - (_563 * _554);
        float _660 = (_560 * _554) - (_566 * _548);
        float _663 = (_563 * _548) - (_560 * _551);
        float _690 = ((log2((((float(_635.y) * 0.5) * float(_635.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_660 * _660) + (_663 * _663)) + (_657 * _657)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_651 * gl_WorldRayDirectionEXT.x, _651 * gl_WorldRayDirectionEXT.y, _651 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    }
    else
    {
        _693 = 0.0;
    }
    vec4 _697 = textureLod(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _567) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _568) + cbTextureTilingScale._m0[1u].w), _693);
    float _701 = _697.z;
    float _704 = (_697.x * 2.0) + (-1.0);
    float _706 = (_697.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _1520 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0))));
    float _715 = fma(_712, _579, fma(_706, _595, _704 * _615));
    float _718 = fma(_712, _581, fma(_706, _596, _704 * _616));
    float _721 = fma(_712, _582, fma(_706, _597, _704 * _617));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _733 = cbMtdParam._m0[9u].x + dot(vec4(_725 * _715, _725 * _718, _725 * _721, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _1531 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uvec2 _746 = uvec2(textureSize(M_AMSN_Snow2_snp_0_Texture2D_0, int(0u)));
    float _797;
    if (_640)
    {
        float _757 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _763 = (_566 * _551) - (_563 * _554);
        float _766 = (_560 * _554) - (_566 * _548);
        float _769 = (_563 * _548) - (_560 * _551);
        float _795 = ((log2((((float(_746.y) * 0.5) * float(_746.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_766 * _766) + (_769 * _769)) + (_763 * _763)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_757 * gl_WorldRayDirectionEXT.x, _757 * gl_WorldRayDirectionEXT.y, _757 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _797 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    }
    else
    {
        _797 = 0.0;
    }
    vec4 _800 = textureLod(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _567) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _568) + cbTextureTilingScale._m0[0u].w), _797);
    uvec2 _816 = uvec2(textureSize(M_AMSN_Snow2_snp_0_Texture2D_2, int(0u)));
    float _867;
    if (_640)
    {
        float _827 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _833 = (_566 * _551) - (_563 * _554);
        float _836 = (_560 * _554) - (_566 * _548);
        float _839 = (_563 * _548) - (_560 * _551);
        float _865 = ((log2((((float(_816.y) * 0.5) * float(_816.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_836 * _836) + (_839 * _839)) + (_833 * _833)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_827 * gl_WorldRayDirectionEXT.x, _827 * gl_WorldRayDirectionEXT.y, _827 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _867 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    }
    else
    {
        _867 = 0.0;
    }
    vec4 _869 = textureLod(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _567) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _568) + cbTextureTilingScale._m0[2u].w), _867);
    float _871 = _869.x;
    float _872 = _869.y;
    float _873 = _869.z;
    float _880 = ((_800.x - _871) * _734) + _871;
    float _881 = ((_800.y - _872) * _734) + _872;
    float _882 = ((_800.z - _873) * _734) + _873;
    uvec2 _894 = uvec2(textureSize(M_AMSN_Snow2_snp_0_Texture2D_4, int(0u)));
    float _945;
    if (_640)
    {
        float _905 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _911 = (_566 * _551) - (_563 * _554);
        float _914 = (_560 * _554) - (_566 * _548);
        float _917 = (_563 * _548) - (_560 * _551);
        float _943 = ((log2((((float(_894.y) * 0.5) * float(_894.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_914 * _914) + (_917 * _917)) + (_911 * _911)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_905 * gl_WorldRayDirectionEXT.x, _905 * gl_WorldRayDirectionEXT.y, _905 * gl_WorldRayDirectionEXT.z), vec3(_579, _581, _582))));
        _945 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    }
    else
    {
        _945 = 0.0;
    }
    vec4 _948 = textureLod(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _567) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _568) + cbTextureTilingScale._m0[4u].w), _945);
    float _950 = _948.x;
    float _952 = _950 - (_950 * _734);
    uvec2 _964 = uvec2(textureSize(M_AMSN_Snow2_snp_0_Texture2D_3, int(0u)));
    float _968 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _969 = _968 * gl_WorldRayDirectionEXT.x;
    float _970 = _968 * gl_WorldRayDirectionEXT.y;
    float _971 = _968 * gl_WorldRayDirectionEXT.z;
    float _1015;
    if (_640)
    {
        float _981 = (_566 * _551) - (_563 * _554);
        float _984 = (_560 * _554) - (_566 * _548);
        float _987 = (_563 * _548) - (_560 * _551);
        float _1013 = ((log2((((float(_964.y) * 0.5) * float(_964.x)) * abs((_521 * _515) - (_520 * _517))) / (sqrt(((_984 * _984) + (_987 * _987)) + (_981 * _981)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_112) / abs(dot(vec3(_969, _970, _971), vec3(_579, _581, _582))));
        _1015 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    }
    else
    {
        _1015 = 0.0;
    }
    vec4 _1017 = textureLod(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _567) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _568) + cbTextureTilingScale._m0[3u].w), _1015);
    float _1024 = (_1017.x * 2.0) + (-1.0);
    float _1025 = (_1017.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _1562 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1034 = ((_1017.z - _701) * _734) + _701;
    float _1041 = ((_1024 - _704) * _734) + _704;
    float _1042 = ((_1025 - _706) * _734) + _706;
    float _1043 = ((sqrt(1.0 - (isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0)))) - _712) * _734) + _712;
    float _1046 = fma(_1043, _579, fma(_1042, _595, _1041 * _615));
    float _1049 = fma(_1043, _581, fma(_1042, _596, _1041 * _616));
    float _1052 = fma(_1043, _582, fma(_1042, _597, _1041 * _617));
    float _1056 = inversesqrt(dot(vec3(_1046, _1049, _1052), vec3(_1046, _1049, _1052)));
    float _1057 = _1056 * _1046;
    float _1058 = _1056 * _1049;
    float _1059 = _1056 * _1052;
    float _1071 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1072 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1073 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1074 = (-0.0) - _969;
    float _1076 = (-0.0) - _970;
    float _1077 = (-0.0) - _971;
    float _1083 = float(gl_LaunchIDEXT.x);
    float _1084 = float(gl_LaunchIDEXT.y);
    float _1087 = float(gl_LaunchSizeEXT.x);
    float _1101 = fract(fract(sin(dot(vec2(_1083 / _1087, _1084 / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1114 = fract(fract(sin(dot(vec2((_1083 + 128.0) / _1087, (_1084 + 128.0) / _73), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1115 = 1.0 - _952;
    float _1116 = _1115 * _880;
    float _1117 = _1115 * _881;
    float _1118 = _1115 * _882;
    float _1123 = _952 * (_880 + (-0.039999999105930328369140625));
    float _1124 = _952 * (_881 + (-0.039999999105930328369140625));
    float _1125 = _952 * (_882 + (-0.039999999105930328369140625));
    float _1126 = _1123 + 0.039999999105930328369140625;
    float _1128 = _1124 + 0.039999999105930328369140625;
    float _1129 = _1125 + 0.039999999105930328369140625;
    _65._m0 = 1u;
    uvec4 _1139 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1140 = _1139.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1140, _1139.w, _1140, vec3(_1071, _1072, _1073), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (_65._m0 == 0u)
    {
        float _1161 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1057, _1058, _1059));
        float _1573 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1164 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        float _1183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1034) * 0.949999988079071044921875);
        float _1184 = _1183 * _1183;
        float _1185 = g_sceneCB._m0[4u].x - _969;
        float _1186 = g_sceneCB._m0[4u].y - _970;
        float _1187 = g_sceneCB._m0[4u].z - _971;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1192 = _1191 * _1185;
        float _1193 = _1191 * _1186;
        float _1194 = _1191 * _1187;
        float _1195 = dot(vec3(_1057, _1058, _1059), vec3(g_sceneCB._m0[4u].xyz));
        float _1584 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1198 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        float _1199 = dot(vec3(_1057, _1058, _1059), vec3(_1074, _1076, _1077));
        float _1595 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1202 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        float _1203 = dot(vec3(_1057, _1058, _1059), vec3(_1192, _1193, _1194));
        float _1606 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1206 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        float _1207 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1192, _1193, _1194));
        float _1617 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1184 * _1184;
        float _1215 = ((_1206 * _1206) * (_1211 + (-1.0))) + 1.0;
        float _1224 = exp2(log2(1.0 - (isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0)))) * 5.0);
        float _1235 = 1.0 - _1184;
        float _1246 = (0.5 / (((_1202 * ((_1198 * _1235) + _1184)) + 9.9999999392252902907785028219223e-09) + (((_1202 * _1235) + _1184) * _1198))) * _1198;
        float _1628 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1248 = (isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0))) * (_1211 / ((_1215 * _1215) * 3.141590118408203125));
        _1255 = ((_1116 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1164;
        _1256 = ((_1117 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1164;
        _1257 = ((_1118 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1164;
        _1258 = (((_1224 * (0.959999978542327880859375 - _1123)) + _1126) * g_sceneCB._m0[5u].x) * _1248;
        _1259 = (((_1224 * (0.959999978542327880859375 - _1124)) + _1128) * g_sceneCB._m0[5u].y) * _1248;
        _1260 = (((_1224 * (0.959999978542327880859375 - _1125)) + _1129) * g_sceneCB._m0[5u].z) * _1248;
    }
    else
    {
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    bool _1262 = abs(_1058) < 0.89999997615814208984375;
    float _1264 = float(_1262);
    float _1265 = _1262 ? 0.0 : 1.0;
    float _1268 = (_1264 * _1059) - (_1265 * _1058);
    float _1269 = _1265 * _1057;
    float _1271 = (-0.0) - (_1057 * _1264);
    float _1275 = inversesqrt(dot(vec3(_1268, _1269, _1271), vec3(_1268, _1269, _1271)));
    float _1276 = _1268 * _1275;
    float _1277 = _1269 * _1275;
    float _1278 = _1275 * _1271;
    float _1281 = (_1277 * _1059) - (_1278 * _1058);
    float _1284 = (_1278 * _1057) - (_1276 * _1059);
    float _1287 = (_1276 * _1058) - (_1277 * _1057);
    float _1289;
    float _1297;
    float _1288 = 0.0;
    uint _1290 = 0u;
    float _1294;
    bool _1296;
    for (;;)
    {
        _1294 = (float(_1290) + _1101) * 0.03125;
        _1296 = _1290 == 0u;
        float frontier_phi_49_pred;
        if (_1296)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1438;
            float _1439;
            uint _1441;
            _1438 = 0.0;
            _1439 = 0.5;
            _1441 = _1290;
            float _1298;
            for (;;)
            {
                _1298 = ((_1441 & 1u) != 0u) ? (_1439 + _1438) : _1438;
                uint _1442 = _1441 >> 1u;
                if (_1442 == 0u)
                {
                    break;
                }
                else
                {
                    _1438 = _1298;
                    _1439 *= 0.5;
                    _1441 = _1442;
                }
            }
            frontier_phi_49_pred = _1298;
        }
        _1297 = frontier_phi_49_pred;
        float _1299 = _1297 + _1114;
        float _1303 = sqrt(_1294);
        float _1304 = ((_1299 > 1.0) ? (_1299 + (-1.0)) : _1299) * 6.283185482025146484375;
        float _1307 = cos(_1304) * _1303;
        float _1309 = sin(_1304) * _1303;
        float _1311 = sqrt(1.0 - _1294);
        float _1324 = ((_1311 * _1057) + (_1307 * _1281)) + (_1309 * _1276);
        float _1325 = ((_1311 * _1058) + (_1307 * _1284)) + (_1309 * _1277);
        float _1326 = ((_1311 * _1059) + (_1307 * _1287)) + (_1309 * _1278);
        _64._m0 = 1u;
        uvec4 _1330 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1331 = _1330.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1331, _1330.w, _1331, vec3(_1071, _1072, _1073), 9.9999997473787516355514526367188e-05, vec3(_1324, _1325, _1326), 10000.0, 1);
        float _1337 = dot(vec3(_1057, _1058, _1059), vec3(_1324, _1325, _1326));
        float _1639 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1340 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1289 = ((float(_64._m0 == 0u) * _1340) / (_1340 * 0.3183098733425140380859375)) + _1288;
        uint _1291 = _1290 + 1u;
        if (_1291 == 32u)
        {
            break;
        }
        else
        {
            _1288 = _1289;
            _1290 = _1291;
            continue;
        }
    }
    float _1348 = _1289 * 0.009947183541953563690185546875;
    float _1353 = dot(vec3(_969, _970, _971), vec3(_1057, _1058, _1059)) * 2.0;
    vec4 _1367 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_969 - (_1353 * _1057), _970 - (_1353 * _1058), _971 - (_1353 * _1059)), 4.0 - (_1034 * 4.0));
    float _1372 = dot(vec3(_1074, _1076, _1077), vec3(_1057, _1058, _1059));
    float _1650 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
    float _1382 = exp2(log2(1.0 - (isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0)))) * 5.0);
    vec4 _1394 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1057, _1058, _1059), 0.0);
    float _1405 = (_1258 + _1255) + (((_1394.x * _1116) + (((_1382 * (0.959999978542327880859375 - _1123)) + _1126) * _1367.x)) * _1348);
    float _1409 = (_1259 + _1256) + (((_1394.y * _1117) + (((_1382 * (0.959999978542327880859375 - _1124)) + _1128) * _1367.y)) * _1348);
    float _1413 = (_1260 + _1257) + (((_1394.z * _1118) + (((_1382 * (0.959999978542327880859375 - _1125)) + _1129) * _1367.z)) * _1348);
    float _1661 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1672 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1683 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    bool _1421 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1432;
    _1432.x = _1421 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0)));
    _1432.y = _1421 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0)));
    _1432.z = _1421 ? ((_578 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0)));
    payload._m0 = _1432;
}


