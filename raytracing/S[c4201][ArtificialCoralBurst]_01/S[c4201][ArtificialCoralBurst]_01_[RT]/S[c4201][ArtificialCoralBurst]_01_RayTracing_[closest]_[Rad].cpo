#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _1504;

void main()
{
    float _82 = float(gl_LaunchSizeEXT.y);
    float _110 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _119 = sqrt(((_111 * _111) + (_110 * _110)) + (_112 * _112)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _82)))));
    uvec4 _130 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _131 = _130.y;
    uint _171;
    uint _173;
    uint _174;
    if (_130.x == 0u)
    {
        uint _139 = (_131 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _148 = uvec3(texelFetch(l_geomIndexBuffer, int(_139)).x, texelFetch(l_geomIndexBuffer, int(_139 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_139 + 2u)).x);
        _171 = _148.x;
        _173 = _148.y;
        _174 = _148.z;
    }
    else
    {
        uint _152 = uint(gl_PrimitiveID) * 6u;
        uint _154 = _152 & 4294967292u;
        uint _157 = (_131 + _154) >> 2u;
        uvec2 _164 = uvec2(texelFetch(l_geomIndexBuffer, int(_157)).x, texelFetch(l_geomIndexBuffer, int(_157 + 1u)).x);
        uint _165 = _164.x;
        uint _166 = _164.y;
        uint _168 = _165 >> 16u;
        uint _169 = _166 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_154 == _152)
        {
            frontier_phi_3_2_ladder = _169;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _165 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _166 >> 16u;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _171 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder_1;
        _174 = frontier_phi_3_2_ladder;
    }
    uvec4 _178 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _179 = _178.x;
    uint _180 = _178.z;
    bool _181 = _180 != 0u;
    bool _183 = _130.w == 0u;
    bool _184 = _181 || _183;
    uint _186 = (_179 * _171) + 12u;
    uint _210;
    uint _211;
    uint _212;
    uint _213;
    if (_184)
    {
        uvec4 _189 = texelFetch(l_geomAttrib_0, int(_186 >> 2u));
        uint _190 = _189.x;
        _210 = _190 & 255u;
        _211 = (_190 >> 8u) & 255u;
        _212 = (_190 >> 16u) & 255u;
        _213 = 20u;
    }
    else
    {
        uint _198 = _186 >> 2u;
        uvec2 _204 = uvec2(texelFetch(l_geomAttrib_0, int(_198)).x, texelFetch(l_geomAttrib_0, int(_198 + 1u)).x);
        uint _205 = _204.x;
        _210 = _205 & 65535u;
        _211 = _205 >> 16u;
        _212 = _204.y & 65535u;
        _213 = 24u;
    }
    bool _218 = _180 == 0u;
    uint _219;
    if (_218)
    {
        _219 = _213;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_183)
        {
            frontier_phi_9_10_ladder = _213 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _213 + 8u;
        }
        _219 = frontier_phi_9_10_ladder;
    }
    uint _224 = _181 ? (_219 + 4u) : _219;
    uint _225 = _179 * _171;
    uvec4 _230 = texelFetch(l_geomAttrib_0, int(((_225 + 4u) + _224) >> 2u));
    uint _231 = _230.x;
    float _235 = float(int(uint(int(_231 << 16u) >> int(16u))));
    float _236 = float(int(uint(int(_231) >> int(16u))));
    uvec4 _240 = texelFetch(l_geomAttrib_0, int(((_225 + 8u) + _224) >> 2u));
    uint _241 = _240.x;
    uint _251 = (_179 * _173) + 12u;
    uint _272;
    uint _273;
    uint _274;
    uint _275;
    if (_184)
    {
        uvec4 _253 = texelFetch(l_geomAttrib_0, int(_251 >> 2u));
        uint _254 = _253.x;
        _272 = _254 & 255u;
        _273 = (_254 >> 8u) & 255u;
        _274 = (_254 >> 16u) & 255u;
        _275 = 20u;
    }
    else
    {
        uint _260 = _251 >> 2u;
        uvec2 _266 = uvec2(texelFetch(l_geomAttrib_0, int(_260)).x, texelFetch(l_geomAttrib_0, int(_260 + 1u)).x);
        uint _267 = _266.x;
        _272 = _267 & 65535u;
        _273 = _267 >> 16u;
        _274 = _266.y & 65535u;
        _275 = 24u;
    }
    uint _279;
    if (_218)
    {
        _279 = _275;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_183)
        {
            frontier_phi_16_17_ladder = _275 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _275 + 8u;
        }
        _279 = frontier_phi_16_17_ladder;
    }
    uint _283 = _181 ? (_279 + 4u) : _279;
    uint _284 = _179 * _173;
    uvec4 _288 = texelFetch(l_geomAttrib_0, int(((_284 + 4u) + _283) >> 2u));
    uint _289 = _288.x;
    float _293 = float(int(uint(int(_289 << 16u) >> int(16u))));
    float _294 = float(int(uint(int(_289) >> int(16u))));
    uvec4 _298 = texelFetch(l_geomAttrib_0, int(((_284 + 8u) + _283) >> 2u));
    uint _299 = _298.x;
    uint _309 = (_179 * _174) + 12u;
    uint _330;
    uint _331;
    uint _332;
    uint _333;
    if (_184)
    {
        uvec4 _311 = texelFetch(l_geomAttrib_0, int(_309 >> 2u));
        uint _312 = _311.x;
        _330 = _312 & 255u;
        _331 = (_312 >> 8u) & 255u;
        _332 = (_312 >> 16u) & 255u;
        _333 = 20u;
    }
    else
    {
        uint _318 = _309 >> 2u;
        uvec2 _324 = uvec2(texelFetch(l_geomAttrib_0, int(_318)).x, texelFetch(l_geomAttrib_0, int(_318 + 1u)).x);
        uint _325 = _324.x;
        _330 = _325 & 65535u;
        _331 = _325 >> 16u;
        _332 = _324.y & 65535u;
        _333 = 24u;
    }
    uint _337;
    if (_218)
    {
        _337 = _333;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_183)
        {
            frontier_phi_23_24_ladder = _333 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _333 + 8u;
        }
        _337 = frontier_phi_23_24_ladder;
    }
    uint _341 = _181 ? (_337 + 4u) : _337;
    uint _342 = _179 * _174;
    uvec4 _346 = texelFetch(l_geomAttrib_0, int(((_342 + 4u) + _341) >> 2u));
    uint _347 = _346.x;
    float _351 = float(int(uint(int(_347 << 16u) >> int(16u))));
    float _352 = float(int(uint(int(_347) >> int(16u))));
    uvec4 _356 = texelFetch(l_geomAttrib_0, int(((_342 + 8u) + _341) >> 2u));
    uint _357 = _356.x;
    bool _367 = _130.z == 0u;
    float _403;
    float _404;
    float _405;
    if (_367)
    {
        uint _370 = _171 * 3u;
        uvec3 _379 = uvec3(texelFetch(l_geomPositionBuffer, int(_370)).x, texelFetch(l_geomPositionBuffer, int(_370 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_370 + 2u)).x);
        _403 = uintBitsToFloat(_379.x);
        _404 = uintBitsToFloat(_379.y);
        _405 = uintBitsToFloat(_379.z);
    }
    else
    {
        uint _387 = _171 * 2u;
        uvec2 _393 = uvec2(texelFetch(l_geomPositionBuffer, int(_387)).x, texelFetch(l_geomPositionBuffer, int(_387 + 1u)).x);
        uint _394 = _393.x;
        _403 = unpackHalf2x16(_394).x;
        _404 = unpackHalf2x16(_394 >> 16u).x;
        _405 = unpackHalf2x16(_393.y).x;
    }
    float _441;
    float _442;
    float _443;
    if (_367)
    {
        uint _408 = _173 * 3u;
        uvec3 _417 = uvec3(texelFetch(l_geomPositionBuffer, int(_408)).x, texelFetch(l_geomPositionBuffer, int(_408 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_408 + 2u)).x);
        _441 = uintBitsToFloat(_417.x);
        _442 = uintBitsToFloat(_417.y);
        _443 = uintBitsToFloat(_417.z);
    }
    else
    {
        uint _425 = _173 * 2u;
        uvec2 _431 = uvec2(texelFetch(l_geomPositionBuffer, int(_425)).x, texelFetch(l_geomPositionBuffer, int(_425 + 1u)).x);
        uint _432 = _431.x;
        _441 = unpackHalf2x16(_432).x;
        _442 = unpackHalf2x16(_432 >> 16u).x;
        _443 = unpackHalf2x16(_431.y).x;
    }
    float _479;
    float _480;
    float _481;
    if (_367)
    {
        uint _446 = _174 * 3u;
        uvec3 _455 = uvec3(texelFetch(l_geomPositionBuffer, int(_446)).x, texelFetch(l_geomPositionBuffer, int(_446 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_446 + 2u)).x);
        _479 = uintBitsToFloat(_455.x);
        _480 = uintBitsToFloat(_455.y);
        _481 = uintBitsToFloat(_455.z);
    }
    else
    {
        uint _463 = _174 * 2u;
        uvec2 _469 = uvec2(texelFetch(l_geomPositionBuffer, int(_463)).x, texelFetch(l_geomPositionBuffer, int(_463 + 1u)).x);
        uint _470 = _469.x;
        _479 = unpackHalf2x16(_470).x;
        _480 = unpackHalf2x16(_470 >> 16u).x;
        _481 = unpackHalf2x16(_469.y).x;
    }
    float _484 = (1.0 - hit._m0.x) - hit._m0.y;
    float _525 = (_293 - _235) * 0.00048828125;
    float _527 = (_294 - _236) * 0.00048828125;
    float _530 = (_351 - _235) * 0.00048828125;
    float _531 = (_352 - _236) * 0.00048828125;
    float _553 = _441 - _403;
    float _554 = _442 - _404;
    float _555 = _443 - _405;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = _479 - _403;
    float _566 = _480 - _404;
    float _567 = _481 - _405;
    float _570 = fma(_567, gl_ObjectToWorldEXT[2u].x, fma(_566, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _565));
    float _573 = fma(_567, gl_ObjectToWorldEXT[2u].y, fma(_566, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _565));
    float _576 = fma(_567, gl_ObjectToWorldEXT[2u].z, fma(_566, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _565));
    float _577 = (((_293 * hit._m0.x) + (_235 * _484)) + (_351 * hit._m0.y)) * 0.00048828125;
    float _578 = (((_294 * hit._m0.x) + (_236 * _484)) + (_352 * hit._m0.y)) * 0.00048828125;
    float _582 = (((float(_210) * _484) + (-127.0)) + (float(_272) * hit._m0.x)) + (float(_330) * hit._m0.y);
    float _585 = (((float(_211) * _484) + (-127.0)) + (float(_273) * hit._m0.x)) + (float(_331) * hit._m0.y);
    float _588 = (((float(_212) * _484) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_332) * hit._m0.y);
    float _589 = _582 * 0.0078740157186985015869140625;
    float _591 = _585 * 0.0078740157186985015869140625;
    float _592 = _588 * 0.0078740157186985015869140625;
    float _602 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _605 = (_602 * cbMtdParam._m0[21u].x) + _577;
    float _606 = (_602 * cbMtdParam._m0[21u].y) + _578;
    float _626 = (cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[21u].z * cbPerFrame._m0[22u].x) + _577)) + cbTextureTilingScale._m0[4u].z;
    float _627 = (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + _578)) + cbTextureTilingScale._m0[4u].w;
    uvec2 _629 = uvec2(textureSize(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4, int(0u)));
    bool _634 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _687;
    if (_634)
    {
        float _645 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _651 = (_576 * _561) - (_573 * _564);
        float _654 = (_570 * _564) - (_576 * _558);
        float _657 = (_573 * _558) - (_570 * _561);
        float _684 = ((log2((((float(_629.y) * 0.5) * float(_629.x)) * abs((_531 * _525) - (_530 * _527))) / (sqrt(((_654 * _654) + (_657 * _657)) + (_651 * _651)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_645 * gl_WorldRayDirectionEXT.x, _645 * gl_WorldRayDirectionEXT.y, _645 * gl_WorldRayDirectionEXT.z), vec3(_589, _591, _592))));
        _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    }
    else
    {
        _687 = 0.0;
    }
    vec4 _691 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4, SS_WrapLinear), vec2(_626, _627), _687);
    float _695 = cbPerFrame._m0[22u].x * 2.0;
    float _696 = _695 * cbMtdParam._m0[17u].w;
    float _702 = ((_691.y * 0.5) + (-0.25)) * cbMtdParam._m0[17u].z;
    float _704 = (-0.0) - (cbMtdParam._m0[17u].z * ((_691.x * 0.5) + (-0.25)));
    float _706 = fract(_696);
    float _708 = fract(_696 + 0.5);
    float _720 = abs((_706 * 2.0) + (-1.0));
    vec4 _738 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_706 * _704) + _605) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_702 * _706) + _606) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _740 = _738.x;
    float _741 = _738.y;
    float _742 = _738.z;
    vec4 _743 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_708 * _704) + _605) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_702 * _708) + _606) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), 0.0);
    float _763 = (cbMtdParam._m0[20u].x * _602) + _577;
    float _764 = (cbMtdParam._m0[20u].y * _602) + _578;
    float _817;
    if (_634)
    {
        float _777 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _783 = (_576 * _561) - (_573 * _564);
        float _786 = (_570 * _564) - (_576 * _558);
        float _789 = (_573 * _558) - (_570 * _561);
        float _815 = ((log2((((float(_629.y) * 0.5) * float(_629.x)) * abs((_531 * _525) - (_530 * _527))) / (sqrt(((_786 * _786) + (_789 * _789)) + (_783 * _783)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_777 * gl_WorldRayDirectionEXT.x, _777 * gl_WorldRayDirectionEXT.y, _777 * gl_WorldRayDirectionEXT.z), vec3(_589, _591, _592))));
        _817 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    }
    else
    {
        _817 = 0.0;
    }
    vec4 _819 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4, SS_WrapLinear), vec2(_626, _627), _817);
    float _823 = _695 * cbMtdParam._m0[18u].y;
    float _828 = ((_819.y * 0.5) + (-0.25)) * cbMtdParam._m0[18u].x;
    float _830 = (-0.0) - (cbMtdParam._m0[18u].x * ((_819.x * 0.5) + (-0.25)));
    float _831 = fract(_823);
    float _833 = fract(_823 + 0.5);
    float _844 = abs((_831 * 2.0) + (-1.0));
    vec4 _861 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_831 * _830) + _763) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_828 * _831) + _764) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _863 = _861.x;
    float _864 = _861.y;
    float _865 = _861.z;
    vec4 _866 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_833 * _830) + _763) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_828 * _833) + _764) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), 0.0);
    float _921 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1594 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _922 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    float _929 = ((_922 * _922) * (3.0 - (_922 * 2.0))) - cbMtdParam._m0[15u].x;
    float _942 = (cbMtdParam._m0[22u].x * _602) + _577;
    float _943 = (cbMtdParam._m0[22u].y * _602) + _578;
    float _994;
    if (_634)
    {
        float _954 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _960 = (_576 * _561) - (_573 * _564);
        float _963 = (_570 * _564) - (_576 * _558);
        float _966 = (_573 * _558) - (_570 * _561);
        float _992 = ((log2((((float(_629.y) * 0.5) * float(_629.x)) * abs((_531 * _525) - (_530 * _527))) / (sqrt(((_963 * _963) + (_966 * _966)) + (_960 * _960)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_954 * gl_WorldRayDirectionEXT.x, _954 * gl_WorldRayDirectionEXT.y, _954 * gl_WorldRayDirectionEXT.z), vec3(_589, _591, _592))));
        _994 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    }
    else
    {
        _994 = 0.0;
    }
    vec4 _996 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4, SS_WrapLinear), vec2(_626, _627), _994);
    float _1000 = _695 * cbMtdParam._m0[14u].w;
    float _1005 = ((_996.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _1007 = (-0.0) - (cbMtdParam._m0[14u].z * ((_996.x * 0.5) + (-0.25)));
    float _1008 = fract(_1000);
    float _1010 = fract(_1000 + 0.5);
    float _1021 = abs((_1008 * 2.0) + (-1.0));
    vec4 _1039 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_1008 * _1007) + _942) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1005 * _1008) + _943) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1041 = _1039.x;
    float _1042 = _1039.y;
    float _1043 = _1039.z;
    vec4 _1044 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_1010 * _1007) + _942) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_1005 * _1010) + _943) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w), 0.0);
    float _1070 = (cbMtdParam._m0[20u].z * _602) + _577;
    float _1071 = (cbMtdParam._m0[20u].w * _602) + _578;
    float _1080 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1081 = _1080 * gl_WorldRayDirectionEXT.x;
    float _1082 = _1080 * gl_WorldRayDirectionEXT.y;
    float _1083 = _1080 * gl_WorldRayDirectionEXT.z;
    float _1127;
    if (_634)
    {
        float _1093 = (_576 * _561) - (_573 * _564);
        float _1096 = (_570 * _564) - (_576 * _558);
        float _1099 = (_573 * _558) - (_570 * _561);
        float _1125 = ((log2((((float(_629.y) * 0.5) * float(_629.x)) * abs((_531 * _525) - (_530 * _527))) / (sqrt(((_1096 * _1096) + (_1099 * _1099)) + (_1093 * _1093)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_1081, _1082, _1083), vec3(_589, _591, _592))));
        _1127 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    }
    else
    {
        _1127 = 0.0;
    }
    vec4 _1129 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_4, SS_WrapLinear), vec2(_626, _627), _1127);
    float _1133 = _695 * cbMtdParam._m0[19u].y;
    float _1138 = ((_1129.y * 0.5) + (-0.25)) * cbMtdParam._m0[19u].x;
    float _1140 = (-0.0) - (cbMtdParam._m0[19u].x * ((_1129.x * 0.5) + (-0.25)));
    float _1141 = fract(_1133);
    float _1143 = fract(_1133 + 0.5);
    float _1154 = abs((_1141 * 2.0) + (-1.0));
    vec4 _1171 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1141 * _1140) + _1070) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1138 * _1141) + _1071) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1173 = _1171.x;
    float _1174 = _1171.y;
    float _1175 = _1171.z;
    vec4 _1176 = textureLod(sampler2D(S_c4201_ArtificialCoralBurst_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1143 * _1140) + _1070) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1138 * _1143) + _1071) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1199 = ((cbMtdParam._m0[13u].x * (((_743.x - _740) * _720) + _740)) + (cbMtdParam._m0[11u].x * (((_866.x - _863) * _844) + _863))) + ((((((_1176.x - _1173) * _1154) + _1173) * cbMtdParam._m0[12u].x) + ((((_1044.x - _1041) * _1021) + _1041) * cbMtdParam._m0[9u].x)) * _929);
    float _1200 = ((cbMtdParam._m0[13u].y * (((_743.y - _741) * _720) + _741)) + (cbMtdParam._m0[11u].y * (((_866.y - _864) * _844) + _864))) + ((((((_1176.y - _1174) * _1154) + _1174) * cbMtdParam._m0[12u].y) + ((((_1044.y - _1042) * _1021) + _1042) * cbMtdParam._m0[9u].y)) * _929);
    float _1201 = ((cbMtdParam._m0[13u].z * (((_743.z - _742) * _720) + _742)) + (cbMtdParam._m0[11u].z * (((_866.z - _865) * _844) + _865))) + ((((((_1176.z - _1175) * _1154) + _1175) * cbMtdParam._m0[12u].z) + ((((_1044.z - _1043) * _1021) + _1043) * cbMtdParam._m0[9u].z)) * _929);
    float _1217 = inversesqrt(dot(vec3(_589, _591, _592), vec3(_589, _591, _592)));
    float _1218 = _1217 * _589;
    float _1219 = _1217 * _591;
    float _1220 = _1217 * _592;
    float _1232 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1233 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1234 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1235 = (-0.0) - _1081;
    float _1236 = (-0.0) - _1082;
    float _1237 = (-0.0) - _1083;
    float _1243 = float(gl_LaunchIDEXT.x);
    float _1244 = float(gl_LaunchIDEXT.y);
    float _1247 = float(gl_LaunchSizeEXT.x);
    float _1261 = fract(fract(sin(dot(vec2(_1243 / _1247, _1244 / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1274 = fract(fract(sin(dot(vec2((_1243 + 128.0) / _1247, (_1244 + 128.0) / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _68._m0 = 1u;
    uvec4 _1284 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1285 = _1284.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1285, _1284.w, _1285, vec3(_1232, _1233, _1234), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1350;
    float _1351;
    float _1352;
    if (_68._m0 == 0u)
    {
        float _1305 = g_sceneCB._m0[4u].x - _1081;
        float _1306 = g_sceneCB._m0[4u].y - _1082;
        float _1307 = g_sceneCB._m0[4u].z - _1083;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1315 = dot(vec3(_1218, _1219, _1220), vec3(g_sceneCB._m0[4u].xyz));
        float _1615 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1318 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        float _1319 = dot(vec3(_1218, _1219, _1220), vec3(_1235, _1236, _1237));
        float _1626 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1305 * _1311, _1306 * _1311, _1307 * _1311));
        float _1637 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1334 = (exp2(log2(1.0 - (isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1340 = (0.5 / ((_1318 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0))))) * _1318;
        float _1648 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1342 = (isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0))) * 0.31831014156341552734375;
        _1350 = (_1334 * g_sceneCB._m0[5u].x) * _1342;
        _1351 = (_1334 * g_sceneCB._m0[5u].y) * _1342;
        _1352 = (_1334 * g_sceneCB._m0[5u].z) * _1342;
    }
    else
    {
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    bool _1354 = abs(_1219) < 0.89999997615814208984375;
    float _1356 = float(_1354);
    float _1357 = _1354 ? 0.0 : 1.0;
    float _1360 = (_1356 * _1220) - (_1357 * _1219);
    float _1361 = _1357 * _1218;
    float _1363 = (-0.0) - (_1218 * _1356);
    float _1367 = inversesqrt(dot(vec3(_1360, _1361, _1363), vec3(_1360, _1361, _1363)));
    float _1368 = _1360 * _1367;
    float _1369 = _1361 * _1367;
    float _1370 = _1367 * _1363;
    float _1373 = (_1369 * _1220) - (_1370 * _1219);
    float _1376 = (_1370 * _1218) - (_1368 * _1220);
    float _1379 = (_1368 * _1219) - (_1369 * _1218);
    float _1381;
    float _1389;
    float _1380 = 0.0;
    uint _1382 = 0u;
    float _1386;
    bool _1388;
    for (;;)
    {
        _1386 = (float(_1382) + _1261) * 0.03125;
        _1388 = _1382 == 0u;
        float frontier_phi_47_pred;
        if (_1388)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1509;
            float _1510;
            uint _1512;
            _1509 = 0.0;
            _1510 = 0.5;
            _1512 = _1382;
            float _1390;
            for (;;)
            {
                _1390 = ((_1512 & 1u) != 0u) ? (_1510 + _1509) : _1509;
                uint _1513 = _1512 >> 1u;
                if (_1513 == 0u)
                {
                    break;
                }
                else
                {
                    _1509 = _1390;
                    _1510 *= 0.5;
                    _1512 = _1513;
                }
            }
            frontier_phi_47_pred = _1390;
        }
        _1389 = frontier_phi_47_pred;
        float _1391 = _1389 + _1274;
        float _1395 = sqrt(_1386);
        float _1396 = ((_1391 > 1.0) ? (_1391 + (-1.0)) : _1391) * 6.283185482025146484375;
        float _1399 = cos(_1396) * _1395;
        float _1401 = sin(_1396) * _1395;
        float _1403 = sqrt(1.0 - _1386);
        float _1416 = ((_1403 * _1218) + (_1399 * _1373)) + (_1401 * _1368);
        float _1417 = ((_1403 * _1219) + (_1399 * _1376)) + (_1401 * _1369);
        float _1418 = ((_1403 * _1220) + (_1399 * _1379)) + (_1401 * _1370);
        _67._m0 = 1u;
        uvec4 _1422 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1423 = _1422.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1423, _1422.w, _1423, vec3(_1232, _1233, _1234), 9.9999997473787516355514526367188e-05, vec3(_1416, _1417, _1418), 10000.0, 1);
        float _1429 = dot(vec3(_1218, _1219, _1220), vec3(_1416, _1417, _1418));
        float _1659 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1432 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1381 = ((float(_67._m0 == 0u) * _1432) / (_1432 * 0.3183098733425140380859375)) + _1380;
        uint _1383 = _1382 + 1u;
        if (_1383 == 32u)
        {
            break;
        }
        else
        {
            _1380 = _1381;
            _1382 = _1383;
            continue;
        }
    }
    float _1441 = _1381 * 0.009947183541953563690185546875;
    float _1446 = dot(vec3(_1081, _1082, _1083), vec3(_1218, _1219, _1220)) * 2.0;
    vec4 _1458 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1081 - (_1446 * _1218), _1082 - (_1446 * _1219), _1083 - (_1446 * _1220)), 4.0);
    float _1463 = dot(vec3(_1235, _1236, _1237), vec3(_1218, _1219, _1220));
    float _1670 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1472 = (exp2(log2(1.0 - (isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1480 = (_1350 + (((((((float(_299 & 255u) * hit._m0.x) + (float(_241 & 255u) * _484)) + (float(_357 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[10u].x - _1199)) + _1199) * cbMtdParam._m0[18u].z)) + ((_1458.x * _1441) * _1472);
    float _1482 = (_1351 + (((((((float((_299 >> 8u) & 255u) * hit._m0.x) + (float((_241 >> 8u) & 255u) * _484)) + (float((_357 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[10u].y - _1200)) + _1200) * cbMtdParam._m0[18u].z)) + ((_1458.y * _1441) * _1472);
    float _1484 = (_1352 + (((((((float((_299 >> 16u) & 255u) * hit._m0.x) + (float((_241 >> 16u) & 255u) * _484)) + (float((_357 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) * (cbMtdParam._m0[10u].z - _1201)) + _1201) * cbMtdParam._m0[18u].z)) + ((_1458.z * _1441) * _1472);
    float _1681 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    float _1692 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _1703 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    bool _1492 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1503;
    _1503.x = _1492 ? ((_582 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0)));
    _1503.y = _1492 ? ((_585 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0)));
    _1503.z = _1492 ? ((_588 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0)));
    payload._m0 = _1503;
}


