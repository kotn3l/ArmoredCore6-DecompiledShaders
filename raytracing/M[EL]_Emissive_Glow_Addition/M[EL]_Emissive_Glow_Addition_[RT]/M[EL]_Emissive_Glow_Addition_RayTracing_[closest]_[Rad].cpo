#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_EL_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_EL_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1007;

void main()
{
    float _78 = float(gl_LaunchSizeEXT.y);
    float _106 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _107 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _115 = sqrt(((_107 * _107) + (_106 * _106)) + (_108 * _108)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _78)))));
    uvec4 _126 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _127 = _126.y;
    uint _166;
    uint _168;
    uint _169;
    if (_126.x == 0u)
    {
        uint _134 = (_127 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _143 = uvec3(texelFetch(l_geomIndexBuffer, int(_134)).x, texelFetch(l_geomIndexBuffer, int(_134 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_134 + 2u)).x);
        _166 = _143.x;
        _168 = _143.y;
        _169 = _143.z;
    }
    else
    {
        uint _147 = uint(gl_PrimitiveID) * 6u;
        uint _149 = _147 & 4294967292u;
        uint _152 = (_127 + _149) >> 2u;
        uvec2 _159 = uvec2(texelFetch(l_geomIndexBuffer, int(_152)).x, texelFetch(l_geomIndexBuffer, int(_152 + 1u)).x);
        uint _160 = _159.x;
        uint _161 = _159.y;
        uint _163 = _160 >> 16u;
        uint _164 = _161 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_149 == _147)
        {
            frontier_phi_3_2_ladder = _164;
            frontier_phi_3_2_ladder_1 = _160 & 65535u;
            frontier_phi_3_2_ladder_2 = _163;
        }
        else
        {
            frontier_phi_3_2_ladder = _161 >> 16u;
            frontier_phi_3_2_ladder_1 = _163;
            frontier_phi_3_2_ladder_2 = _164;
        }
        _166 = frontier_phi_3_2_ladder_1;
        _168 = frontier_phi_3_2_ladder_2;
        _169 = frontier_phi_3_2_ladder;
    }
    uvec4 _173 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _174 = _173.x;
    uint _175 = _173.z;
    bool _176 = _175 != 0u;
    bool _178 = _126.w == 0u;
    bool _179 = _176 || _178;
    uint _181 = (_174 * _166) + 12u;
    uint _205;
    uint _206;
    uint _207;
    uint _208;
    if (_179)
    {
        uvec4 _184 = texelFetch(l_geomAttrib_0, int(_181 >> 2u));
        uint _185 = _184.x;
        _205 = _185 & 255u;
        _206 = (_185 >> 8u) & 255u;
        _207 = (_185 >> 16u) & 255u;
        _208 = 20u;
    }
    else
    {
        uint _193 = _181 >> 2u;
        uvec2 _199 = uvec2(texelFetch(l_geomAttrib_0, int(_193)).x, texelFetch(l_geomAttrib_0, int(_193 + 1u)).x);
        uint _200 = _199.x;
        _205 = _200 & 65535u;
        _206 = _200 >> 16u;
        _207 = _199.y & 65535u;
        _208 = 24u;
    }
    bool _214 = _175 == 0u;
    uint _215;
    if (_214)
    {
        _215 = _208;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_178)
        {
            frontier_phi_9_10_ladder = _208 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _208 + 8u;
        }
        _215 = frontier_phi_9_10_ladder;
    }
    uvec4 _226 = texelFetch(l_geomAttrib_0, int((((_174 * _166) + 4u) + (_176 ? (_215 + 4u) : _215)) >> 2u));
    uint _227 = _226.x;
    float _231 = float(int(uint(int(_227 << 16u) >> int(16u))));
    float _232 = float(int(uint(int(_227) >> int(16u))));
    uint _234 = (_174 * _168) + 12u;
    uint _255;
    uint _256;
    uint _257;
    uint _258;
    if (_179)
    {
        uvec4 _236 = texelFetch(l_geomAttrib_0, int(_234 >> 2u));
        uint _237 = _236.x;
        _255 = _237 & 255u;
        _256 = (_237 >> 8u) & 255u;
        _257 = (_237 >> 16u) & 255u;
        _258 = 20u;
    }
    else
    {
        uint _243 = _234 >> 2u;
        uvec2 _249 = uvec2(texelFetch(l_geomAttrib_0, int(_243)).x, texelFetch(l_geomAttrib_0, int(_243 + 1u)).x);
        uint _250 = _249.x;
        _255 = _250 & 65535u;
        _256 = _250 >> 16u;
        _257 = _249.y & 65535u;
        _258 = 24u;
    }
    uint _262;
    if (_214)
    {
        _262 = _258;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_178)
        {
            frontier_phi_16_17_ladder = _258 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _258 + 8u;
        }
        _262 = frontier_phi_16_17_ladder;
    }
    uvec4 _271 = texelFetch(l_geomAttrib_0, int((((_174 * _168) + 4u) + (_176 ? (_262 + 4u) : _262)) >> 2u));
    uint _272 = _271.x;
    float _276 = float(int(uint(int(_272 << 16u) >> int(16u))));
    float _277 = float(int(uint(int(_272) >> int(16u))));
    uint _279 = (_174 * _169) + 12u;
    uint _300;
    uint _301;
    uint _302;
    uint _303;
    if (_179)
    {
        uvec4 _281 = texelFetch(l_geomAttrib_0, int(_279 >> 2u));
        uint _282 = _281.x;
        _300 = _282 & 255u;
        _301 = (_282 >> 8u) & 255u;
        _302 = (_282 >> 16u) & 255u;
        _303 = 20u;
    }
    else
    {
        uint _288 = _279 >> 2u;
        uvec2 _294 = uvec2(texelFetch(l_geomAttrib_0, int(_288)).x, texelFetch(l_geomAttrib_0, int(_288 + 1u)).x);
        uint _295 = _294.x;
        _300 = _295 & 65535u;
        _301 = _295 >> 16u;
        _302 = _294.y & 65535u;
        _303 = 24u;
    }
    uint _307;
    if (_214)
    {
        _307 = _303;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_178)
        {
            frontier_phi_23_24_ladder = _303 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _303 + 8u;
        }
        _307 = frontier_phi_23_24_ladder;
    }
    uvec4 _316 = texelFetch(l_geomAttrib_0, int((((_174 * _169) + 4u) + (_176 ? (_307 + 4u) : _307)) >> 2u));
    uint _317 = _316.x;
    float _321 = float(int(uint(int(_317 << 16u) >> int(16u))));
    float _322 = float(int(uint(int(_317) >> int(16u))));
    bool _324 = _126.z == 0u;
    float _360;
    float _361;
    float _362;
    if (_324)
    {
        uint _327 = _166 * 3u;
        uvec3 _336 = uvec3(texelFetch(l_geomPositionBuffer, int(_327)).x, texelFetch(l_geomPositionBuffer, int(_327 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_327 + 2u)).x);
        _360 = uintBitsToFloat(_336.x);
        _361 = uintBitsToFloat(_336.y);
        _362 = uintBitsToFloat(_336.z);
    }
    else
    {
        uint _344 = _166 * 2u;
        uvec2 _350 = uvec2(texelFetch(l_geomPositionBuffer, int(_344)).x, texelFetch(l_geomPositionBuffer, int(_344 + 1u)).x);
        uint _351 = _350.x;
        _360 = unpackHalf2x16(_351).x;
        _361 = unpackHalf2x16(_351 >> 16u).x;
        _362 = unpackHalf2x16(_350.y).x;
    }
    float _398;
    float _399;
    float _400;
    if (_324)
    {
        uint _365 = _168 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _168 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_324)
    {
        uint _403 = _169 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _169 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _441 = (1.0 - hit._m0.x) - hit._m0.y;
    float _463 = (_276 - _231) * 0.00048828125;
    float _465 = (_277 - _232) * 0.00048828125;
    float _468 = (_321 - _231) * 0.00048828125;
    float _469 = (_322 - _232) * 0.00048828125;
    float _491 = _398 - _360;
    float _492 = _399 - _361;
    float _493 = _400 - _362;
    float _496 = fma(_493, gl_ObjectToWorldEXT[2u].x, fma(_492, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _491));
    float _499 = fma(_493, gl_ObjectToWorldEXT[2u].y, fma(_492, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _491));
    float _502 = fma(_493, gl_ObjectToWorldEXT[2u].z, fma(_492, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _491));
    float _503 = _436 - _360;
    float _504 = _437 - _361;
    float _505 = _438 - _362;
    float _508 = fma(_505, gl_ObjectToWorldEXT[2u].x, fma(_504, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _503));
    float _511 = fma(_505, gl_ObjectToWorldEXT[2u].y, fma(_504, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _503));
    float _514 = fma(_505, gl_ObjectToWorldEXT[2u].z, fma(_504, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _503));
    float _515 = (((_276 * hit._m0.x) + (_231 * _441)) + (_321 * hit._m0.y)) * 0.00048828125;
    float _516 = (((_277 * hit._m0.x) + (_232 * _441)) + (_322 * hit._m0.y)) * 0.00048828125;
    float _520 = (((float(_205) * _441) + (-127.0)) + (float(_255) * hit._m0.x)) + (float(_300) * hit._m0.y);
    float _523 = (((float(_206) * _441) + (-127.0)) + (float(_256) * hit._m0.x)) + (float(_301) * hit._m0.y);
    float _526 = (((float(_207) * _441) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_302) * hit._m0.y);
    float _527 = _520 * 0.0078740157186985015869140625;
    float _529 = _523 * 0.0078740157186985015869140625;
    float _530 = _526 * 0.0078740157186985015869140625;
    uvec2 _557 = uvec2(textureSize(M_EL_Emissive_Glow_Addition_snp_0_Texture2D_2, int(0u)));
    bool _562 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _615;
    if (_562)
    {
        float _573 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _579 = (_514 * _499) - (_511 * _502);
        float _582 = (_508 * _502) - (_514 * _496);
        float _585 = (_511 * _496) - (_508 * _499);
        float _612 = ((log2((((float(_557.y) * 0.5) * float(_557.x)) * abs((_469 * _463) - (_468 * _465))) / (sqrt(((_582 * _582) + (_585 * _585)) + (_579 * _579)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_573 * gl_WorldRayDirectionEXT.x, _573 * gl_WorldRayDirectionEXT.y, _573 * gl_WorldRayDirectionEXT.z), vec3(_527, _529, _530))));
        _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    }
    else
    {
        _615 = 0.0;
    }
    vec4 _619 = textureLod(sampler2D(M_EL_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) + _515) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + _516) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _615);
    uvec2 _650 = uvec2(textureSize(M_EL_Emissive_Glow_Addition_snp_0_Texture2D_1, int(0u)));
    float _654 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _655 = _654 * gl_WorldRayDirectionEXT.x;
    float _656 = _654 * gl_WorldRayDirectionEXT.y;
    float _657 = _654 * gl_WorldRayDirectionEXT.z;
    float _701;
    if (_562)
    {
        float _667 = (_514 * _499) - (_511 * _502);
        float _670 = (_508 * _502) - (_514 * _496);
        float _673 = (_511 * _496) - (_508 * _499);
        float _699 = ((log2((((float(_650.y) * 0.5) * float(_650.x)) * abs((_469 * _463) - (_468 * _465))) / (sqrt(((_670 * _670) + (_673 * _673)) + (_667 * _667)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_115) / abs(dot(vec3(_655, _656, _657), vec3(_527, _529, _530))));
        _701 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    }
    else
    {
        _701 = 0.0;
    }
    vec4 _703 = textureLod(sampler2D(M_EL_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + _515) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + _516) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _701);
    float _714 = inversesqrt(dot(vec3(_527, _529, _530), vec3(_527, _529, _530)));
    float _715 = _714 * _527;
    float _716 = _714 * _529;
    float _717 = _714 * _530;
    float _729 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _730 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _731 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _732 = (-0.0) - _655;
    float _734 = (-0.0) - _656;
    float _735 = (-0.0) - _657;
    float _741 = float(gl_LaunchIDEXT.x);
    float _742 = float(gl_LaunchIDEXT.y);
    float _745 = float(gl_LaunchSizeEXT.x);
    float _759 = fract(fract(sin(dot(vec2(_741 / _745, _742 / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _772 = fract(fract(sin(dot(vec2((_741 + 128.0) / _745, (_742 + 128.0) / _78), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _782 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _783 = _782.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _783, _782.w, _783, vec3(_729, _730, _731), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _849;
    float _850;
    float _851;
    if (_64._m0 == 0u)
    {
        float _804 = g_sceneCB._m0[4u].x - _655;
        float _805 = g_sceneCB._m0[4u].y - _656;
        float _806 = g_sceneCB._m0[4u].z - _657;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _814 = dot(vec3(_715, _716, _717), vec3(g_sceneCB._m0[4u].xyz));
        float _1093 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _817 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        float _818 = dot(vec3(_715, _716, _717), vec3(_732, _734, _735));
        float _1104 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_804 * _810, _805 * _810, _806 * _810));
        float _1115 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _833 = (exp2(log2(1.0 - (isnan(1.0) ? _1115 : (isnan(_1115) ? 1.0 : min(_1115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _839 = (0.5 / ((_817 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0))))) * _817;
        float _1126 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _841 = (isnan(1.0) ? _1126 : (isnan(_1126) ? 1.0 : min(_1126, 1.0))) * 0.31831014156341552734375;
        _849 = (_833 * g_sceneCB._m0[5u].x) * _841;
        _850 = (_833 * g_sceneCB._m0[5u].y) * _841;
        _851 = (_833 * g_sceneCB._m0[5u].z) * _841;
    }
    else
    {
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
    }
    bool _853 = abs(_716) < 0.89999997615814208984375;
    float _855 = float(_853);
    float _856 = _853 ? 0.0 : 1.0;
    float _859 = (_855 * _717) - (_856 * _716);
    float _860 = _856 * _715;
    float _862 = (-0.0) - (_715 * _855);
    float _866 = inversesqrt(dot(vec3(_859, _860, _862), vec3(_859, _860, _862)));
    float _867 = _859 * _866;
    float _868 = _860 * _866;
    float _869 = _866 * _862;
    float _872 = (_868 * _717) - (_869 * _716);
    float _875 = (_869 * _715) - (_867 * _717);
    float _878 = (_867 * _716) - (_868 * _715);
    float _880;
    float _888;
    float _879 = 0.0;
    uint _881 = 0u;
    float _885;
    bool _887;
    for (;;)
    {
        _885 = (float(_881) + _759) * 0.03125;
        _887 = _881 == 0u;
        float frontier_phi_43_pred;
        if (_887)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1012;
            float _1013;
            uint _1015;
            _1012 = 0.0;
            _1013 = 0.5;
            _1015 = _881;
            float _889;
            for (;;)
            {
                _889 = ((_1015 & 1u) != 0u) ? (_1013 + _1012) : _1012;
                uint _1016 = _1015 >> 1u;
                if (_1016 == 0u)
                {
                    break;
                }
                else
                {
                    _1012 = _889;
                    _1013 *= 0.5;
                    _1015 = _1016;
                }
            }
            frontier_phi_43_pred = _889;
        }
        _888 = frontier_phi_43_pred;
        float _890 = _888 + _772;
        float _895 = sqrt(_885);
        float _896 = ((_890 > 1.0) ? (_890 + (-1.0)) : _890) * 6.283185482025146484375;
        float _899 = cos(_896) * _895;
        float _901 = sin(_896) * _895;
        float _903 = sqrt(1.0 - _885);
        float _916 = ((_903 * _715) + (_899 * _872)) + (_901 * _867);
        float _917 = ((_903 * _716) + (_899 * _875)) + (_901 * _868);
        float _918 = ((_903 * _717) + (_899 * _878)) + (_901 * _869);
        _63._m0 = 1u;
        uvec4 _922 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _923 = _922.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _923, _922.w, _923, vec3(_729, _730, _731), 9.9999997473787516355514526367188e-05, vec3(_916, _917, _918), 10000.0, 1);
        float _929 = dot(vec3(_715, _716, _717), vec3(_916, _917, _918));
        float _1137 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _932 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _880 = ((float(_63._m0 == 0u) * _932) / (_932 * 0.3183098733425140380859375)) + _879;
        uint _882 = _881 + 1u;
        if (_882 == 32u)
        {
            break;
        }
        else
        {
            _879 = _880;
            _881 = _882;
            continue;
        }
    }
    float _941 = _880 * 0.009947183541953563690185546875;
    float _946 = dot(vec3(_655, _656, _657), vec3(_715, _716, _717)) * 2.0;
    vec4 _958 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_655 - (_946 * _715), _656 - (_946 * _716), _657 - (_946 * _717)), 4.0);
    float _963 = dot(vec3(_732, _734, _735), vec3(_715, _716, _717));
    float _1148 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _972 = (exp2(log2(1.0 - (isnan(1.0) ? _1148 : (isnan(_1148) ? 1.0 : min(_1148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _981 = (((_703.x * cbMtdParam._m0[10u].x) + (_619.x * cbMtdParam._m0[9u].x)) + _849) + ((_958.x * _941) * _972);
    float _984 = (((_703.y * cbMtdParam._m0[10u].y) + (_619.y * cbMtdParam._m0[9u].y)) + _850) + ((_958.y * _941) * _972);
    float _987 = (((_703.z * cbMtdParam._m0[10u].z) + (_619.z * cbMtdParam._m0[9u].z)) + _851) + ((_958.z * _941) * _972);
    float _1159 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1170 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _1181 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    bool _995 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1006;
    _1006.x = _995 ? ((_520 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1159 : (isnan(_1159) ? 1.0 : min(_1159, 1.0)));
    _1006.y = _995 ? ((_523 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1170 : (isnan(_1170) ? 1.0 : min(_1170, 1.0)));
    _1006.z = _995 ? ((_526 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1181 : (isnan(_1181) ? 1.0 : min(_1181, 1.0)));
    payload._m0 = _1006;
}


