#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

struct _39
{
    vec3 _m0;
};

struct _43
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _39 payload;
hitAttributeEXT _43 hit;

void main()
{
    vec3 _49 = payload._m0;
    float _86 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _87 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _88 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _106 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _107 = _106.y;
    uint _147;
    uint _149;
    uint _150;
    if (_106.x == 0u)
    {
        uint _115 = (_107 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _124 = uvec3(texelFetch(l_geomIndexBuffer, int(_115)).x, texelFetch(l_geomIndexBuffer, int(_115 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_115 + 2u)).x);
        _147 = _124.x;
        _149 = _124.y;
        _150 = _124.z;
    }
    else
    {
        uint _128 = uint(gl_PrimitiveID) * 6u;
        uint _130 = _128 & 4294967292u;
        uint _133 = (_107 + _130) >> 2u;
        uvec2 _140 = uvec2(texelFetch(l_geomIndexBuffer, int(_133)).x, texelFetch(l_geomIndexBuffer, int(_133 + 1u)).x);
        uint _141 = _140.x;
        uint _142 = _140.y;
        uint _144 = _141 >> 16u;
        uint _145 = _142 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_130 == _128)
        {
            frontier_phi_3_2_ladder = _141 & 65535u;
            frontier_phi_3_2_ladder_1 = _144;
            frontier_phi_3_2_ladder_2 = _145;
        }
        else
        {
            frontier_phi_3_2_ladder = _144;
            frontier_phi_3_2_ladder_1 = _145;
            frontier_phi_3_2_ladder_2 = _142 >> 16u;
        }
        _147 = frontier_phi_3_2_ladder;
        _149 = frontier_phi_3_2_ladder_1;
        _150 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _154 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _155 = _154.x;
    uint _156 = _154.z;
    bool _157 = _156 != 0u;
    bool _159 = _106.w == 0u;
    bool _160 = _157 || _159;
    uint _162 = (_155 * _147) + 12u;
    uint _186;
    uint _187;
    uint _188;
    uint _189;
    if (_160)
    {
        uvec4 _165 = texelFetch(l_geomAttrib_0, int(_162 >> 2u));
        uint _166 = _165.x;
        _186 = _166 & 255u;
        _187 = (_166 >> 8u) & 255u;
        _188 = (_166 >> 16u) & 255u;
        _189 = 20u;
    }
    else
    {
        uint _174 = _162 >> 2u;
        uvec2 _180 = uvec2(texelFetch(l_geomAttrib_0, int(_174)).x, texelFetch(l_geomAttrib_0, int(_174 + 1u)).x);
        uint _181 = _180.x;
        _186 = _181 & 65535u;
        _187 = _181 >> 16u;
        _188 = _180.y & 65535u;
        _189 = 24u;
    }
    bool _195 = _156 == 0u;
    uint _196;
    if (_195)
    {
        _196 = _189;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_159)
        {
            frontier_phi_9_10_ladder = _189 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _189 + 8u;
        }
        _196 = frontier_phi_9_10_ladder;
    }
    uvec4 _207 = texelFetch(l_geomAttrib_0, int((((_155 * _147) + 4u) + (_157 ? (_196 + 4u) : _196)) >> 2u));
    uint _208 = _207.x;
    uint _215 = (_155 * _149) + 12u;
    uint _236;
    uint _237;
    uint _238;
    uint _239;
    if (_160)
    {
        uvec4 _217 = texelFetch(l_geomAttrib_0, int(_215 >> 2u));
        uint _218 = _217.x;
        _236 = _218 & 255u;
        _237 = (_218 >> 8u) & 255u;
        _238 = (_218 >> 16u) & 255u;
        _239 = 20u;
    }
    else
    {
        uint _224 = _215 >> 2u;
        uvec2 _230 = uvec2(texelFetch(l_geomAttrib_0, int(_224)).x, texelFetch(l_geomAttrib_0, int(_224 + 1u)).x);
        uint _231 = _230.x;
        _236 = _231 & 65535u;
        _237 = _231 >> 16u;
        _238 = _230.y & 65535u;
        _239 = 24u;
    }
    uint _243;
    if (_195)
    {
        _243 = _239;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_159)
        {
            frontier_phi_16_17_ladder = _239 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _239 + 8u;
        }
        _243 = frontier_phi_16_17_ladder;
    }
    uvec4 _252 = texelFetch(l_geomAttrib_0, int((((_155 * _149) + 4u) + (_157 ? (_243 + 4u) : _243)) >> 2u));
    uint _253 = _252.x;
    uint _260 = (_155 * _150) + 12u;
    uint _281;
    uint _282;
    uint _283;
    uint _284;
    if (_160)
    {
        uvec4 _262 = texelFetch(l_geomAttrib_0, int(_260 >> 2u));
        uint _263 = _262.x;
        _281 = _263 & 255u;
        _282 = (_263 >> 8u) & 255u;
        _283 = (_263 >> 16u) & 255u;
        _284 = 20u;
    }
    else
    {
        uint _269 = _260 >> 2u;
        uvec2 _275 = uvec2(texelFetch(l_geomAttrib_0, int(_269)).x, texelFetch(l_geomAttrib_0, int(_269 + 1u)).x);
        uint _276 = _275.x;
        _281 = _276 & 65535u;
        _282 = _276 >> 16u;
        _283 = _275.y & 65535u;
        _284 = 24u;
    }
    uint _288;
    if (_195)
    {
        _288 = _284;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_159)
        {
            frontier_phi_23_24_ladder = _284 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _284 + 8u;
        }
        _288 = frontier_phi_23_24_ladder;
    }
    uvec4 _297 = texelFetch(l_geomAttrib_0, int((((_155 * _150) + 4u) + (_157 ? (_288 + 4u) : _288)) >> 2u));
    uint _298 = _297.x;
    float _306 = (1.0 - hit._m0.x) - hit._m0.y;
    float _388;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _370 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _378 = log2(0.0);
        float _384 = log2(abs(sqrt(((_87 * _87) + (_86 * _86)) + (_88 * _88)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))))) / abs(dot(vec3(_370 * gl_WorldRayDirectionEXT.x, _370 * gl_WorldRayDirectionEXT.y, _370 * gl_WorldRayDirectionEXT.z), vec3(((((float(_186) * _306) + (-127.0)) + (float(_236) * hit._m0.x)) + (float(_281) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_187) * _306) + (-127.0)) + (float(_237) * hit._m0.x)) + (float(_282) * hit._m0.y)) * 0.0078740157186985015869140625, ((((float(_188) * _306) + (-127.0)) + (float(_238) * hit._m0.x)) + (float(_283) * hit._m0.y)) * 0.0078740157186985015869140625))));
        float _386 = ((_378 * 0.5) + g_sceneCB._m0[7u].y) + _384;
        _388 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    }
    else
    {
        _388 = 0.0;
    }
    vec4 _393 = textureLod(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * (((((float(int(uint(int(_253 << 16u) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_208 << 16u) >> int(16u)))) * _306)) + (float(int(uint(int(_298 << 16u) >> int(16u)))) * hit._m0.y)) * 0.00048828125) / cbMtdParam._m0[9u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((float(int(uint(int(_253) >> int(16u)))) * hit._m0.x) + (float(int(uint(int(_208) >> int(16u)))) * _306)) + (float(int(uint(int(_298) >> int(16u)))) * hit._m0.y)) * 0.00048828125) / cbMtdParam._m0[9u].x)) + cbTextureTilingScale._m0[0u].w), _388);
    if ((_393.x + _393.y) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _49;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _49;
        return;
    }
}


