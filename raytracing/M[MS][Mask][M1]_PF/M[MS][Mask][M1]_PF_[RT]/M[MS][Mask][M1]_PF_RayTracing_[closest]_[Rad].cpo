#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1316;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _157 & 65535u;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _158 >> 16u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        _163 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
        _166 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    uint _226 = _205 | 8u;
    bool _227 = _172 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _226;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _226 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _226 + 8u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + (_173 ? (_228 + 4u) : _228)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _171 * _165;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_176)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _287 = _269 | 8u;
    uint _288;
    if (_227)
    {
        _288 = _287;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _287 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _287 + 8u;
        }
        _288 = frontier_phi_16_17_ladder;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int(((_244 + 4u) + (_173 ? (_288 + 4u) : _288)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _171 * _166;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_176)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _346 = _328 | 8u;
    uint _347;
    if (_227)
    {
        _347 = _346;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _346 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _346 + 8u;
        }
        _347 = frontier_phi_23_24_ladder;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_303 + 4u) + (_173 ? (_347 + 4u) : _347)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _122.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _163 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _163 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _165 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _165 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _166 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _166 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_202) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_203) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_204) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_214 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_214 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_214 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_214 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    uvec2 _634 = uvec2(textureSize(M_MS_Mask_M1_PF_snp_0_Texture2D_15, int(0u)));
    bool _639 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _692;
    if (_639)
    {
        float _650 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _656 = (_565 * _550) - (_562 * _553);
        float _659 = (_559 * _553) - (_565 * _547);
        float _662 = (_562 * _547) - (_559 * _550);
        float _689 = ((log2((((float(_634.y) * 0.5) * float(_634.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_659 * _659) + (_662 * _662)) + (_656 * _656)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_650 * gl_WorldRayDirectionEXT.x, _650 * gl_WorldRayDirectionEXT.y, _650 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    }
    else
    {
        _692 = 0.0;
    }
    vec4 _696 = textureLod(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _566) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _567) + cbTextureTilingScale._m0[7u].w), _692);
    float _701 = _696.x * cbMtdParam._m0[11u].x;
    float _702 = _696.y * cbMtdParam._m0[11u].y;
    float _703 = _696.z * cbMtdParam._m0[11u].z;
    uvec2 _715 = uvec2(textureSize(M_MS_Mask_M1_PF_snp_0_Texture2D_14, int(0u)));
    float _766;
    if (_639)
    {
        float _726 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _732 = (_565 * _550) - (_562 * _553);
        float _735 = (_559 * _553) - (_565 * _547);
        float _738 = (_562 * _547) - (_559 * _550);
        float _764 = ((log2((((float(_715.y) * 0.5) * float(_715.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_735 * _735) + (_738 * _738)) + (_732 * _732)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_726 * gl_WorldRayDirectionEXT.x, _726 * gl_WorldRayDirectionEXT.y, _726 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _766 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    }
    else
    {
        _766 = 0.0;
    }
    vec4 _769 = textureLod(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _566) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _567) + cbTextureTilingScale._m0[6u].w), _766);
    float _773 = _769.z;
    float _776 = (_769.x * 2.0) + (-1.0);
    float _778 = (_769.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_776, _778), vec2(_776, _778));
    float _1406 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _784 = sqrt(1.0 - (isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0))));
    uvec2 _796 = uvec2(textureSize(M_MS_Mask_M1_PF_snp_0_Texture2D_2, int(0u)));
    float _847;
    if (_639)
    {
        float _807 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _813 = (_565 * _550) - (_562 * _553);
        float _816 = (_559 * _553) - (_565 * _547);
        float _819 = (_562 * _547) - (_559 * _550);
        float _845 = ((log2((((float(_796.y) * 0.5) * float(_796.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_816 * _816) + (_819 * _819)) + (_813 * _813)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_807 * gl_WorldRayDirectionEXT.x, _807 * gl_WorldRayDirectionEXT.y, _807 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _847 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    }
    else
    {
        _847 = 0.0;
    }
    uvec2 _864 = uvec2(textureSize(M_MS_Mask_M1_PF_snp_0_Texture2D_1, int(0u)));
    float _868 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _869 = _868 * gl_WorldRayDirectionEXT.x;
    float _870 = _868 * gl_WorldRayDirectionEXT.y;
    float _871 = _868 * gl_WorldRayDirectionEXT.z;
    float _915;
    if (_639)
    {
        float _881 = (_565 * _550) - (_562 * _553);
        float _884 = (_559 * _553) - (_565 * _547);
        float _887 = (_562 * _547) - (_559 * _550);
        float _913 = ((log2((((float(_864.y) * 0.5) * float(_864.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_884 * _884) + (_887 * _887)) + (_881 * _881)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_869, _870, _871), vec3(_578, _580, _581))));
        _915 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    }
    else
    {
        _915 = 0.0;
    }
    vec4 _917 = textureLod(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _915);
    float _919 = _917.x;
    float _926 = (cbMtdParam._m0[19u].z * (textureLod(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * _566) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _567) + cbTextureTilingScale._m0[12u].w), _847).x - _919)) + _919;
    float _929 = fma(_784, _578, fma(_778, _594, (_613 * _607) * _776));
    float _932 = fma(_784, _580, fma(_778, _595, (_613 * _608) * _776));
    float _935 = fma(_784, _581, fma(_778, _596, (_613 * _609) * _776));
    float _939 = inversesqrt(dot(vec3(_929, _932, _935), vec3(_929, _932, _935)));
    float _940 = _939 * _929;
    float _941 = _939 * _932;
    float _942 = _939 * _935;
    float _954 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _955 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _956 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _957 = (-0.0) - _869;
    float _959 = (-0.0) - _870;
    float _960 = (-0.0) - _871;
    float _966 = float(gl_LaunchIDEXT.x);
    float _967 = float(gl_LaunchIDEXT.y);
    float _970 = float(gl_LaunchSizeEXT.x);
    float _984 = fract(fract(sin(dot(vec2(_966 / _970, _967 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _997 = fract(fract(sin(dot(vec2((_966 + 128.0) / _970, (_967 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _998 = 1.0 - _926;
    float _999 = _998 * _701;
    float _1000 = _998 * _702;
    float _1001 = _998 * _703;
    float _1006 = _926 * (_701 + (-0.039999999105930328369140625));
    float _1007 = _926 * (_702 + (-0.039999999105930328369140625));
    float _1008 = _926 * (_703 + (-0.039999999105930328369140625));
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _1022 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1023 = _1022.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1023, _1022.w, _1023, vec3(_954, _955, _956), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (_64._m0 == 0u)
    {
        float _1044 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_940, _941, _942));
        float _1427 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1047 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        float _1066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _773) * 0.949999988079071044921875);
        float _1067 = _1066 * _1066;
        float _1068 = g_sceneCB._m0[4u].x - _869;
        float _1069 = g_sceneCB._m0[4u].y - _870;
        float _1070 = g_sceneCB._m0[4u].z - _871;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1075 = _1074 * _1068;
        float _1076 = _1074 * _1069;
        float _1077 = _1074 * _1070;
        float _1078 = dot(vec3(_940, _941, _942), vec3(g_sceneCB._m0[4u].xyz));
        float _1438 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1081 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        float _1082 = dot(vec3(_940, _941, _942), vec3(_957, _959, _960));
        float _1449 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1085 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
        float _1086 = dot(vec3(_940, _941, _942), vec3(_1075, _1076, _1077));
        float _1460 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1089 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
        float _1090 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1075, _1076, _1077));
        float _1471 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1067 * _1067;
        float _1098 = ((_1089 * _1089) * (_1094 + (-1.0))) + 1.0;
        float _1107 = exp2(log2(1.0 - (isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0)))) * 5.0);
        float _1118 = 1.0 - _1067;
        float _1129 = (0.5 / (((_1085 * ((_1081 * _1118) + _1067)) + 9.9999999392252902907785028219223e-09) + (((_1085 * _1118) + _1067) * _1081))) * _1081;
        float _1482 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1131 = (isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0))) * (_1094 / ((_1098 * _1098) * 3.141590118408203125));
        _1138 = ((_999 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1047;
        _1139 = ((_1000 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1047;
        _1140 = ((_1001 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1047;
        _1141 = (((_1107 * (0.959999978542327880859375 - _1006)) + _1009) * g_sceneCB._m0[5u].x) * _1131;
        _1142 = (((_1107 * (0.959999978542327880859375 - _1007)) + _1011) * g_sceneCB._m0[5u].y) * _1131;
        _1143 = (((_1107 * (0.959999978542327880859375 - _1008)) + _1012) * g_sceneCB._m0[5u].z) * _1131;
    }
    else
    {
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    bool _1145 = abs(_941) < 0.89999997615814208984375;
    float _1147 = float(_1145);
    float _1148 = _1145 ? 0.0 : 1.0;
    float _1151 = (_1147 * _942) - (_1148 * _941);
    float _1152 = _1148 * _940;
    float _1154 = (-0.0) - (_940 * _1147);
    float _1158 = inversesqrt(dot(vec3(_1151, _1152, _1154), vec3(_1151, _1152, _1154)));
    float _1159 = _1151 * _1158;
    float _1160 = _1152 * _1158;
    float _1161 = _1158 * _1154;
    float _1164 = (_1160 * _942) - (_1161 * _941);
    float _1167 = (_1161 * _940) - (_1159 * _942);
    float _1170 = (_1159 * _941) - (_1160 * _940);
    float _1172;
    float _1180;
    float _1171 = 0.0;
    uint _1173 = 0u;
    float _1177;
    bool _1179;
    for (;;)
    {
        _1177 = (float(_1173) + _984) * 0.03125;
        _1179 = _1173 == 0u;
        float frontier_phi_47_pred;
        if (_1179)
        {
            frontier_phi_47_pred = 0.0;
        }
        else
        {
            float _1321;
            float _1322;
            uint _1324;
            _1321 = 0.0;
            _1322 = 0.5;
            _1324 = _1173;
            float _1181;
            for (;;)
            {
                _1181 = ((_1324 & 1u) != 0u) ? (_1322 + _1321) : _1321;
                uint _1325 = _1324 >> 1u;
                if (_1325 == 0u)
                {
                    break;
                }
                else
                {
                    _1321 = _1181;
                    _1322 *= 0.5;
                    _1324 = _1325;
                }
            }
            frontier_phi_47_pred = _1181;
        }
        _1180 = frontier_phi_47_pred;
        float _1182 = _1180 + _997;
        float _1186 = sqrt(_1177);
        float _1187 = ((_1182 > 1.0) ? (_1182 + (-1.0)) : _1182) * 6.283185482025146484375;
        float _1190 = cos(_1187) * _1186;
        float _1192 = sin(_1187) * _1186;
        float _1194 = sqrt(1.0 - _1177);
        float _1207 = ((_1194 * _940) + (_1190 * _1164)) + (_1192 * _1159);
        float _1208 = ((_1194 * _941) + (_1190 * _1167)) + (_1192 * _1160);
        float _1209 = ((_1194 * _942) + (_1190 * _1170)) + (_1192 * _1161);
        _63._m0 = 1u;
        uvec4 _1213 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1214 = _1213.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1214, _1213.w, _1214, vec3(_954, _955, _956), 9.9999997473787516355514526367188e-05, vec3(_1207, _1208, _1209), 10000.0, 1);
        float _1220 = dot(vec3(_940, _941, _942), vec3(_1207, _1208, _1209));
        float _1493 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1223 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        _1172 = ((float(_63._m0 == 0u) * _1223) / (_1223 * 0.3183098733425140380859375)) + _1171;
        uint _1174 = _1173 + 1u;
        if (_1174 == 32u)
        {
            break;
        }
        else
        {
            _1171 = _1172;
            _1173 = _1174;
            continue;
        }
    }
    float _1230 = _1172 * 0.009947183541953563690185546875;
    float _1235 = dot(vec3(_869, _870, _871), vec3(_940, _941, _942)) * 2.0;
    vec4 _1249 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_869 - (_1235 * _940), _870 - (_1235 * _941), _871 - (_1235 * _942)), 4.0 - (_773 * 4.0));
    float _1254 = dot(vec3(_957, _959, _960), vec3(_940, _941, _942));
    float _1504 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _1264 = exp2(log2(1.0 - (isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0)))) * 5.0);
    vec4 _1276 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_940, _941, _942), 0.0);
    float _1287 = (_1141 + _1138) + (((_1276.x * _999) + (((_1264 * (0.959999978542327880859375 - _1006)) + _1009) * _1249.x)) * _1230);
    float _1291 = (_1142 + _1139) + (((_1276.y * _1000) + (((_1264 * (0.959999978542327880859375 - _1007)) + _1011) * _1249.y)) * _1230);
    float _1295 = (_1143 + _1140) + (((_1276.z * _1001) + (((_1264 * (0.959999978542327880859375 - _1008)) + _1012) * _1249.z)) * _1230);
    float _1515 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
    float _1526 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1537 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    bool _1304 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1315;
    _1315.x = _1304 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0)));
    _1315.y = _1304 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0)));
    _1315.z = _1304 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0)));
    payload._m0 = _1315;
}


