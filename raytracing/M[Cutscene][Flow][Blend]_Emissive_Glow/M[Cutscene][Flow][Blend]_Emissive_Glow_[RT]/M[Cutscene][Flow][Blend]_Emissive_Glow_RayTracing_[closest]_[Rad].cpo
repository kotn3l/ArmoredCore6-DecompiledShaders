#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _60
{
    vec3 _m0;
};

struct _64
{
    vec2 _m0;
};

struct _67
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _60 payload;
hitAttributeEXT _64 hit;
layout(location = 1) rayPayloadEXT _67 _69;
layout(location = 2) rayPayloadEXT _67 _70;

vec3 _1902;

void main()
{
    float _84 = float(gl_LaunchSizeEXT.y);
    float _112 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _113 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _114 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _121 = sqrt(((_113 * _113) + (_112 * _112)) + (_114 * _114)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _84)))));
    uvec4 _132 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _133 = _132.y;
    uint _173;
    uint _175;
    uint _176;
    if (_132.x == 0u)
    {
        uint _141 = (_133 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _150 = uvec3(texelFetch(l_geomIndexBuffer, int(_141)).x, texelFetch(l_geomIndexBuffer, int(_141 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_141 + 2u)).x);
        _173 = _150.x;
        _175 = _150.y;
        _176 = _150.z;
    }
    else
    {
        uint _154 = uint(gl_PrimitiveID) * 6u;
        uint _156 = _154 & 4294967292u;
        uint _159 = (_133 + _156) >> 2u;
        uvec2 _166 = uvec2(texelFetch(l_geomIndexBuffer, int(_159)).x, texelFetch(l_geomIndexBuffer, int(_159 + 1u)).x);
        uint _167 = _166.x;
        uint _168 = _166.y;
        uint _170 = _167 >> 16u;
        uint _171 = _168 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_156 == _154)
        {
            frontier_phi_3_2_ladder = _171;
            frontier_phi_3_2_ladder_1 = _170;
            frontier_phi_3_2_ladder_2 = _167 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _168 >> 16u;
            frontier_phi_3_2_ladder_1 = _171;
            frontier_phi_3_2_ladder_2 = _170;
        }
        _173 = frontier_phi_3_2_ladder_2;
        _175 = frontier_phi_3_2_ladder_1;
        _176 = frontier_phi_3_2_ladder;
    }
    uvec4 _180 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _181 = _180.x;
    uint _182 = _180.z;
    bool _183 = _182 != 0u;
    bool _185 = _132.w == 0u;
    bool _186 = _183 || _185;
    uint _187 = _181 * _173;
    uint _188 = _187 + 12u;
    uint _212;
    uint _213;
    uint _214;
    uint _215;
    if (_186)
    {
        uvec4 _191 = texelFetch(l_geomAttrib_0, int(_188 >> 2u));
        uint _192 = _191.x;
        _212 = _192 & 255u;
        _213 = (_192 >> 8u) & 255u;
        _214 = (_192 >> 16u) & 255u;
        _215 = 16u;
    }
    else
    {
        uint _200 = _188 >> 2u;
        uvec2 _206 = uvec2(texelFetch(l_geomAttrib_0, int(_200)).x, texelFetch(l_geomAttrib_0, int(_200 + 1u)).x);
        uint _207 = _206.x;
        _212 = _207 & 65535u;
        _213 = _207 >> 16u;
        _214 = _206.y & 65535u;
        _215 = 20u;
    }
    uvec4 _223 = texelFetch(l_geomAttrib_0, int((_215 + _187) >> 2u));
    uint _224 = _223.x;
    bool _238 = _182 == 0u;
    uint _239;
    if (_238)
    {
        _239 = _215 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_185)
        {
            frontier_phi_9_10_ladder = _215 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _215 + 12u;
        }
        _239 = frontier_phi_9_10_ladder;
    }
    uint _243 = _183 ? (_239 + 4u) : _239;
    uvec4 _246 = texelFetch(l_geomAttrib_0, int((_243 + _187) >> 2u));
    uint _247 = _246.x;
    uvec4 _259 = texelFetch(l_geomAttrib_0, int(((_187 + 8u) + _243) >> 2u));
    uint _260 = _259.x;
    float _264 = float(int(uint(int(_260 << 16u) >> int(16u))));
    float _265 = float(int(uint(int(_260) >> int(16u))));
    uvec4 _269 = texelFetch(l_geomAttrib_0, int(((_187 + 20u) + _243) >> 2u));
    uint _270 = _269.x;
    uint _276 = _181 * _175;
    uint _277 = _276 + 12u;
    uint _298;
    uint _299;
    uint _300;
    uint _301;
    if (_186)
    {
        uvec4 _279 = texelFetch(l_geomAttrib_0, int(_277 >> 2u));
        uint _280 = _279.x;
        _298 = _280 & 255u;
        _299 = (_280 >> 8u) & 255u;
        _300 = (_280 >> 16u) & 255u;
        _301 = 16u;
    }
    else
    {
        uint _286 = _277 >> 2u;
        uvec2 _292 = uvec2(texelFetch(l_geomAttrib_0, int(_286)).x, texelFetch(l_geomAttrib_0, int(_286 + 1u)).x);
        uint _293 = _292.x;
        _298 = _293 & 65535u;
        _299 = _293 >> 16u;
        _300 = _292.y & 65535u;
        _301 = 20u;
    }
    uvec4 _307 = texelFetch(l_geomAttrib_0, int((_301 + _276) >> 2u));
    uint _308 = _307.x;
    uint _320;
    if (_238)
    {
        _320 = _301 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_185)
        {
            frontier_phi_16_17_ladder = _301 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _301 + 12u;
        }
        _320 = frontier_phi_16_17_ladder;
    }
    uint _324 = _183 ? (_320 + 4u) : _320;
    uvec4 _327 = texelFetch(l_geomAttrib_0, int((_324 + _276) >> 2u));
    uint _328 = _327.x;
    uvec4 _340 = texelFetch(l_geomAttrib_0, int(((_276 + 8u) + _324) >> 2u));
    uint _341 = _340.x;
    float _345 = float(int(uint(int(_341 << 16u) >> int(16u))));
    float _346 = float(int(uint(int(_341) >> int(16u))));
    uvec4 _350 = texelFetch(l_geomAttrib_0, int(((_276 + 20u) + _324) >> 2u));
    uint _351 = _350.x;
    uint _357 = _181 * _176;
    uint _358 = _357 + 12u;
    uint _379;
    uint _380;
    uint _381;
    uint _382;
    if (_186)
    {
        uvec4 _360 = texelFetch(l_geomAttrib_0, int(_358 >> 2u));
        uint _361 = _360.x;
        _379 = _361 & 255u;
        _380 = (_361 >> 8u) & 255u;
        _381 = (_361 >> 16u) & 255u;
        _382 = 16u;
    }
    else
    {
        uint _367 = _358 >> 2u;
        uvec2 _373 = uvec2(texelFetch(l_geomAttrib_0, int(_367)).x, texelFetch(l_geomAttrib_0, int(_367 + 1u)).x);
        uint _374 = _373.x;
        _379 = _374 & 65535u;
        _380 = _374 >> 16u;
        _381 = _373.y & 65535u;
        _382 = 20u;
    }
    uvec4 _388 = texelFetch(l_geomAttrib_0, int((_382 + _357) >> 2u));
    uint _389 = _388.x;
    uint _401;
    if (_238)
    {
        _401 = _382 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_185)
        {
            frontier_phi_23_24_ladder = _382 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _382 + 12u;
        }
        _401 = frontier_phi_23_24_ladder;
    }
    uint _405 = _183 ? (_401 + 4u) : _401;
    uvec4 _408 = texelFetch(l_geomAttrib_0, int((_405 + _357) >> 2u));
    uint _409 = _408.x;
    uvec4 _421 = texelFetch(l_geomAttrib_0, int(((_357 + 8u) + _405) >> 2u));
    uint _422 = _421.x;
    float _426 = float(int(uint(int(_422 << 16u) >> int(16u))));
    float _427 = float(int(uint(int(_422) >> int(16u))));
    uvec4 _431 = texelFetch(l_geomAttrib_0, int(((_357 + 20u) + _405) >> 2u));
    uint _432 = _431.x;
    bool _439 = _132.z == 0u;
    float _475;
    float _476;
    float _477;
    if (_439)
    {
        uint _442 = _173 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _173 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _513;
    float _514;
    float _515;
    if (_439)
    {
        uint _480 = _175 * 3u;
        uvec3 _489 = uvec3(texelFetch(l_geomPositionBuffer, int(_480)).x, texelFetch(l_geomPositionBuffer, int(_480 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_480 + 2u)).x);
        _513 = uintBitsToFloat(_489.x);
        _514 = uintBitsToFloat(_489.y);
        _515 = uintBitsToFloat(_489.z);
    }
    else
    {
        uint _497 = _175 * 2u;
        uvec2 _503 = uvec2(texelFetch(l_geomPositionBuffer, int(_497)).x, texelFetch(l_geomPositionBuffer, int(_497 + 1u)).x);
        uint _504 = _503.x;
        _513 = unpackHalf2x16(_504).x;
        _514 = unpackHalf2x16(_504 >> 16u).x;
        _515 = unpackHalf2x16(_503.y).x;
    }
    float _551;
    float _552;
    float _553;
    if (_439)
    {
        uint _518 = _176 * 3u;
        uvec3 _527 = uvec3(texelFetch(l_geomPositionBuffer, int(_518)).x, texelFetch(l_geomPositionBuffer, int(_518 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_518 + 2u)).x);
        _551 = uintBitsToFloat(_527.x);
        _552 = uintBitsToFloat(_527.y);
        _553 = uintBitsToFloat(_527.z);
    }
    else
    {
        uint _535 = _176 * 2u;
        uvec2 _541 = uvec2(texelFetch(l_geomPositionBuffer, int(_535)).x, texelFetch(l_geomPositionBuffer, int(_535 + 1u)).x);
        uint _542 = _541.x;
        _551 = unpackHalf2x16(_542).x;
        _552 = unpackHalf2x16(_542 >> 16u).x;
        _553 = unpackHalf2x16(_541.y).x;
    }
    float _556 = (1.0 - hit._m0.x) - hit._m0.y;
    float _612 = (_345 - _264) * 0.00048828125;
    float _614 = (_346 - _265) * 0.00048828125;
    float _617 = (_426 - _264) * 0.00048828125;
    float _618 = (_427 - _265) * 0.00048828125;
    float _640 = _513 - _475;
    float _641 = _514 - _476;
    float _642 = _515 - _477;
    float _645 = fma(_642, gl_ObjectToWorldEXT[2u].x, fma(_641, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _640));
    float _648 = fma(_642, gl_ObjectToWorldEXT[2u].y, fma(_641, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _640));
    float _651 = fma(_642, gl_ObjectToWorldEXT[2u].z, fma(_641, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _640));
    float _652 = _551 - _475;
    float _653 = _552 - _476;
    float _654 = _553 - _477;
    float _657 = fma(_654, gl_ObjectToWorldEXT[2u].x, fma(_653, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _652));
    float _660 = fma(_654, gl_ObjectToWorldEXT[2u].y, fma(_653, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _652));
    float _663 = fma(_654, gl_ObjectToWorldEXT[2u].z, fma(_653, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _652));
    float _664 = (((_345 * hit._m0.x) + (_264 * _556)) + (_426 * hit._m0.y)) * 0.00048828125;
    float _665 = (((_346 * hit._m0.x) + (_265 * _556)) + (_427 * hit._m0.y)) * 0.00048828125;
    float _669 = (((float(_212) * _556) + (-127.0)) + (float(_298) * hit._m0.x)) + (float(_379) * hit._m0.y);
    float _672 = (((float(_213) * _556) + (-127.0)) + (float(_299) * hit._m0.x)) + (float(_380) * hit._m0.y);
    float _675 = (((float(_214) * _556) + (-127.0)) + (float(_300) * hit._m0.x)) + (float(_381) * hit._m0.y);
    float _676 = _669 * 0.0078740157186985015869140625;
    float _678 = _672 * 0.0078740157186985015869140625;
    float _679 = _675 * 0.0078740157186985015869140625;
    float _692 = ((((float(_224 & 255u) * _556) + (-127.0)) + (float(_308 & 255u) * hit._m0.x)) + (float(_389 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _693 = ((((float((_224 >> 8u) & 255u) * _556) + (-127.0)) + (float((_308 >> 8u) & 255u) * hit._m0.x)) + (float((_389 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _694 = ((((float((_224 >> 16u) & 255u) * _556) + (-127.0)) + (float((_308 >> 16u) & 255u) * hit._m0.x)) + (float((_389 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _695 = ((((float(_224 >> 24u) * _556) + (-127.0)) + (float(_308 >> 24u) * hit._m0.x)) + (float(_389 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _705 = ((_693 * _679) - (_694 * _678)) * _695;
    float _706 = ((_694 * _676) - (_692 * _679)) * _695;
    float _707 = ((_692 * _678) - (_693 * _676)) * _695;
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _711 * _705;
    float _713 = _711 * _706;
    float _714 = _711 * _707;
    float _729 = cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x;
    float _732 = (_729 * cbMtdParam._m0[25u].x) + _664;
    float _733 = (_729 * cbMtdParam._m0[25u].y) + _665;
    float _753 = (cbTextureTilingScale._m0[10u].x * ((_729 * cbMtdParam._m0[25u].z) + _664)) + cbTextureTilingScale._m0[10u].z;
    float _754 = (((_729 * cbMtdParam._m0[25u].w) + _665) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w;
    uvec2 _756 = uvec2(textureSize(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, int(0u)));
    bool _761 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _814;
    if (_761)
    {
        float _772 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _778 = (_663 * _648) - (_660 * _651);
        float _781 = (_657 * _651) - (_663 * _645);
        float _784 = (_660 * _645) - (_657 * _648);
        float _811 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_618 * _612) - (_617 * _614))) / (sqrt(((_781 * _781) + (_784 * _784)) + (_778 * _778)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_772 * gl_WorldRayDirectionEXT.x, _772 * gl_WorldRayDirectionEXT.y, _772 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    }
    else
    {
        _814 = 0.0;
    }
    vec4 _818 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _814);
    float _824 = (_818.x * 2.0) + (-1.0);
    float _826 = (_818.y * 2.0) + (-1.0);
    float _830 = 1.0 - dot(vec2(_824, _826), vec2(_824, _826));
    float _1989 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0)));
    float _835 = fma(_832, _676, fma(_826, _692, _824 * _712));
    float _838 = fma(_832, _678, fma(_826, _693, _824 * _713));
    float _841 = fma(_832, _679, fma(_826, _694, _824 * _714));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _847 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[17u].y;
    float _848 = _847 * cbMtdParam._m0[17u].x;
    float _856 = (((_838 * 0.5) * _845) + (-0.25)) * cbMtdParam._m0[16u].w;
    float _858 = (-0.0) - (cbMtdParam._m0[16u].w * (((_835 * 0.5) * _845) + (-0.25)));
    float _860 = fract(_848);
    float _862 = fract(_848 + 0.5);
    float _873 = abs((_860 * 2.0) + (-1.0));
    vec4 _892 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_860 * _858) + _732) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_856 * _860) + _733) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w), 0.0);
    float _894 = _892.x;
    float _895 = _892.y;
    float _896 = _892.z;
    vec4 _897 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_862 * _858) + _732) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_856 * _862) + _733) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w), 0.0);
    float _917 = cbMtdParam._m0[22u].w * ((((float((_351 >> 8u) & 255u) * hit._m0.x) + (float((_270 >> 8u) & 255u) * _556)) + (float((_432 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _930 = (_729 * cbMtdParam._m0[26u].z) + _664;
    float _931 = (_729 * cbMtdParam._m0[26u].w) + _665;
    float _987;
    if (_761)
    {
        float _947 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _953 = (_663 * _648) - (_660 * _651);
        float _956 = (_657 * _651) - (_663 * _645);
        float _959 = (_660 * _645) - (_657 * _648);
        float _985 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_618 * _612) - (_617 * _614))) / (sqrt(((_956 * _956) + (_959 * _959)) + (_953 * _953)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_947 * gl_WorldRayDirectionEXT.x, _947 * gl_WorldRayDirectionEXT.y, _947 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _987 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    }
    else
    {
        _987 = 0.0;
    }
    vec4 _989 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _987);
    float _995 = (_989.x * 2.0) + (-1.0);
    float _996 = (_989.y * 2.0) + (-1.0);
    float _1000 = 1.0 - dot(vec2(_995, _996), vec2(_995, _996));
    float _2005 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0)));
    float _1005 = fma(_1002, _676, fma(_996, _692, _995 * _712));
    float _1008 = fma(_1002, _678, fma(_996, _693, _995 * _713));
    float _1011 = fma(_1002, _679, fma(_996, _694, _995 * _714));
    float _1015 = inversesqrt(dot(vec3(_1005, _1008, _1011), vec3(_1005, _1008, _1011)));
    float _1016 = _847 * cbMtdParam._m0[16u].y;
    float _1023 = (((_1008 * 0.5) * _1015) + (-0.25)) * cbMtdParam._m0[21u].w;
    float _1025 = (-0.0) - (cbMtdParam._m0[21u].w * (((_1005 * 0.5) * _1015) + (-0.25)));
    float _1026 = fract(_1016);
    float _1028 = fract(_1016 + 0.5);
    float _1039 = abs((_1026 * 2.0) + (-1.0));
    vec4 _1056 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1026 * _1025) + _930) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_1023 * _1026) + _931) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w), 0.0);
    float _1058 = _1056.x;
    float _1059 = _1056.y;
    float _1060 = _1056.z;
    vec4 _1061 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_1028 * _1025) + _930) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_1023 * _1028) + _931) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w), 0.0);
    float _1090 = (_729 * cbMtdParam._m0[23u].x) + _664;
    float _1091 = (_729 * cbMtdParam._m0[23u].y) + _665;
    float _1147;
    if (_761)
    {
        float _1107 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1113 = (_663 * _648) - (_660 * _651);
        float _1116 = (_657 * _651) - (_663 * _645);
        float _1119 = (_660 * _645) - (_657 * _648);
        float _1145 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_618 * _612) - (_617 * _614))) / (sqrt(((_1116 * _1116) + (_1119 * _1119)) + (_1113 * _1113)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_1107 * gl_WorldRayDirectionEXT.x, _1107 * gl_WorldRayDirectionEXT.y, _1107 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _1147 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    }
    else
    {
        _1147 = 0.0;
    }
    vec4 _1149 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _1147);
    float _1155 = (_1149.x * 2.0) + (-1.0);
    float _1156 = (_1149.y * 2.0) + (-1.0);
    float _1160 = 1.0 - dot(vec2(_1155, _1156), vec2(_1155, _1156));
    float _2021 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1162 = sqrt(isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0)));
    float _1165 = fma(_1162, _676, fma(_1156, _692, _1155 * _712));
    float _1168 = fma(_1162, _678, fma(_1156, _693, _1155 * _713));
    float _1171 = fma(_1162, _679, fma(_1156, _694, _1155 * _714));
    float _1175 = inversesqrt(dot(vec3(_1165, _1168, _1171), vec3(_1165, _1168, _1171)));
    float _1176 = _847 * cbMtdParam._m0[18u].w;
    float _1183 = (((_1168 * 0.5) * _1175) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _1185 = (-0.0) - (cbMtdParam._m0[21u].x * (((_1165 * 0.5) * _1175) + (-0.25)));
    float _1186 = fract(_1176);
    float _1188 = fract(_1176 + 0.5);
    float _1199 = abs((_1186 * 2.0) + (-1.0));
    vec4 _1216 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1186 * _1185) + _1090) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1183 * _1186) + _1091) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1218 = _1216.x;
    float _1219 = _1216.y;
    float _1220 = _1216.z;
    vec4 _1221 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((_1188 * _1185) + _1090) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_1183 * _1188) + _1091) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), 0.0);
    float _1252 = (_729 * cbMtdParam._m0[24u].z) + _664;
    float _1253 = (_729 * cbMtdParam._m0[24u].w) + _665;
    float _1306;
    if (_761)
    {
        float _1266 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1272 = (_663 * _648) - (_660 * _651);
        float _1275 = (_657 * _651) - (_663 * _645);
        float _1278 = (_660 * _645) - (_657 * _648);
        float _1304 = ((log2((((float(_756.y) * 0.5) * float(_756.x)) * abs((_618 * _612) - (_617 * _614))) / (sqrt(((_1275 * _1275) + (_1278 * _1278)) + (_1272 * _1272)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_1266 * gl_WorldRayDirectionEXT.x, _1266 * gl_WorldRayDirectionEXT.y, _1266 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _1306 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    }
    else
    {
        _1306 = 0.0;
    }
    vec4 _1308 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2(_753, _754), _1306);
    float _1314 = (_1308.x * 2.0) + (-1.0);
    float _1315 = (_1308.y * 2.0) + (-1.0);
    float _1319 = 1.0 - dot(vec2(_1314, _1315), vec2(_1314, _1315));
    float _2037 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1321 = sqrt(isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0)));
    float _1324 = fma(_1321, _676, fma(_1315, _692, _1314 * _712));
    float _1327 = fma(_1321, _678, fma(_1315, _693, _1314 * _713));
    float _1330 = fma(_1321, _679, fma(_1315, _694, _1314 * _714));
    float _1334 = inversesqrt(dot(vec3(_1324, _1327, _1330), vec3(_1324, _1327, _1330)));
    float _1335 = _847 * cbMtdParam._m0[17u].z;
    float _1342 = (((_1327 * 0.5) * _1334) + (-0.25)) * cbMtdParam._m0[17u].w;
    float _1344 = (-0.0) - (cbMtdParam._m0[17u].w * (((_1324 * 0.5) * _1334) + (-0.25)));
    float _1345 = fract(_1335);
    float _1347 = fract(_1335 + 0.5);
    float _1358 = abs((_1345 * 2.0) + (-1.0));
    vec4 _1375 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1345 * _1344) + _1252) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_1342 * _1345) + _1253) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w), 0.0);
    float _1377 = _1375.x;
    float _1378 = _1375.y;
    float _1379 = _1375.z;
    vec4 _1380 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_1347 * _1344) + _1252) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((_1342 * _1347) + _1253) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w), 0.0);
    float _1397 = (((((_1221.x - _1218) * _1199) + _1218) * cbMtdParam._m0[11u].x) + ((((_1061.x - _1058) * _1039) + _1058) * cbMtdParam._m0[10u].x)) + ((((_1380.x - _1377) * _1358) + _1377) * cbMtdParam._m0[13u].x);
    float _1398 = (((((_1221.y - _1219) * _1199) + _1219) * cbMtdParam._m0[11u].y) + ((((_1061.y - _1059) * _1039) + _1059) * cbMtdParam._m0[10u].y)) + ((((_1380.y - _1378) * _1358) + _1378) * cbMtdParam._m0[13u].y);
    float _1399 = (((((_1221.z - _1220) * _1199) + _1220) * cbMtdParam._m0[11u].z) + ((((_1061.z - _1060) * _1039) + _1060) * cbMtdParam._m0[10u].z)) + ((((_1380.z - _1379) * _1358) + _1379) * cbMtdParam._m0[13u].z);
    float _1409 = (_729 * cbMtdParam._m0[26u].x) + _664;
    float _1410 = (_729 * cbMtdParam._m0[26u].y) + _665;
    uvec2 _1433 = uvec2(textureSize(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5, int(0u)));
    float _1437 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1438 = _1437 * gl_WorldRayDirectionEXT.x;
    float _1439 = _1437 * gl_WorldRayDirectionEXT.y;
    float _1440 = _1437 * gl_WorldRayDirectionEXT.z;
    float _1484;
    if (_761)
    {
        float _1450 = (_663 * _648) - (_660 * _651);
        float _1453 = (_657 * _651) - (_663 * _645);
        float _1456 = (_660 * _645) - (_657 * _648);
        float _1482 = ((log2((((float(_1433.y) * 0.5) * float(_1433.x)) * abs((_618 * _612) - (_617 * _614))) / (sqrt(((_1453 * _1453) + (_1456 * _1456)) + (_1450 * _1450)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_1438, _1439, _1440), vec3(_676, _678, _679))));
        _1484 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    }
    else
    {
        _1484 = 0.0;
    }
    vec4 _1486 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * ((_729 * cbMtdParam._m0[27u].x) + _664)) + cbTextureTilingScale._m0[11u].z, (((_729 * cbMtdParam._m0[27u].y) + _665) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w), _1484);
    float _1492 = (_1486.x * 2.0) + (-1.0);
    float _1493 = (_1486.y * 2.0) + (-1.0);
    float _1497 = 1.0 - dot(vec2(_1492, _1493), vec2(_1492, _1493));
    float _2053 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
    float _1499 = sqrt(isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0)));
    float _1502 = fma(_1499, _676, fma(_1493, _692, _1492 * _712));
    float _1505 = fma(_1499, _678, fma(_1493, _693, _1492 * _713));
    float _1508 = fma(_1499, _679, fma(_1493, _694, _1492 * _714));
    float _1512 = inversesqrt(dot(vec3(_1502, _1505, _1508), vec3(_1502, _1505, _1508)));
    float _1513 = _847 * cbMtdParam._m0[22u].y;
    float _1520 = (((_1505 * 0.5) * _1512) + (-0.25)) * cbMtdParam._m0[22u].x;
    float _1522 = (-0.0) - (cbMtdParam._m0[22u].x * (((_1502 * 0.5) * _1512) + (-0.25)));
    float _1523 = fract(_1513);
    float _1525 = fract(_1513 + 0.5);
    float _1536 = abs((_1523 * 2.0) + (-1.0));
    vec4 _1554 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1523 * _1522) + _1409) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_1520 * _1523) + _1410) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w), 0.0);
    float _1556 = _1554.x;
    float _1557 = _1554.y;
    float _1558 = _1554.z;
    vec4 _1559 = textureLod(sampler2D(M_Cutscene_Flow_Blend_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((_1525 * _1522) + _1409) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_1520 * _1525) + _1410) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w), 0.0);
    float _1577 = cbMtdParam._m0[16u].z * ((((float(_351 & 255u) * hit._m0.x) + (float(_270 & 255u) * _556)) + (float(_432 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125);
    float _1584 = (_1577 * (((((_1559.x - _1556) * _1536) + _1556) * cbMtdParam._m0[12u].x) - _1397)) + _1397;
    float _1585 = (_1577 * (((((_1559.y - _1557) * _1536) + _1557) * cbMtdParam._m0[12u].y) - _1398)) + _1398;
    float _1586 = (_1577 * (((((_1559.z - _1558) * _1536) + _1558) * cbMtdParam._m0[12u].z) - _1399)) + _1399;
    float _1615 = inversesqrt(dot(vec3(_676, _678, _679), vec3(_676, _678, _679)));
    float _1616 = _1615 * _676;
    float _1617 = _1615 * _678;
    float _1618 = _1615 * _679;
    float _1630 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1631 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1632 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1633 = (-0.0) - _1438;
    float _1634 = (-0.0) - _1439;
    float _1635 = (-0.0) - _1440;
    float _1641 = float(gl_LaunchIDEXT.x);
    float _1642 = float(gl_LaunchIDEXT.y);
    float _1645 = float(gl_LaunchSizeEXT.x);
    float _1659 = fract(fract(sin(dot(vec2(_1641 / _1645, _1642 / _84), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1672 = fract(fract(sin(dot(vec2((_1641 + 128.0) / _1645, (_1642 + 128.0) / _84), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _70._m0 = 1u;
    uvec4 _1682 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1683 = _1682.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1683, _1682.w, _1683, vec3(_1630, _1631, _1632), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1748;
    float _1749;
    float _1750;
    if (_70._m0 == 0u)
    {
        float _1703 = g_sceneCB._m0[4u].x - _1438;
        float _1704 = g_sceneCB._m0[4u].y - _1439;
        float _1705 = g_sceneCB._m0[4u].z - _1440;
        float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
        float _1713 = dot(vec3(_1616, _1617, _1618), vec3(g_sceneCB._m0[4u].xyz));
        float _2064 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1716 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        float _1717 = dot(vec3(_1616, _1617, _1618), vec3(_1633, _1634, _1635));
        float _2075 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1703 * _1709, _1704 * _1709, _1705 * _1709));
        float _2086 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1738 = (0.5 / ((_1716 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0))))) * _1716;
        float _2097 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1740 = (isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0))) * 0.31831014156341552734375;
        _1748 = (_1732 * g_sceneCB._m0[5u].x) * _1740;
        _1749 = (_1732 * g_sceneCB._m0[5u].y) * _1740;
        _1750 = (_1732 * g_sceneCB._m0[5u].z) * _1740;
    }
    else
    {
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    bool _1752 = abs(_1617) < 0.89999997615814208984375;
    float _1754 = float(_1752);
    float _1755 = _1752 ? 0.0 : 1.0;
    float _1758 = (_1754 * _1618) - (_1755 * _1617);
    float _1759 = _1755 * _1616;
    float _1761 = (-0.0) - (_1616 * _1754);
    float _1765 = inversesqrt(dot(vec3(_1758, _1759, _1761), vec3(_1758, _1759, _1761)));
    float _1766 = _1758 * _1765;
    float _1767 = _1759 * _1765;
    float _1768 = _1765 * _1761;
    float _1771 = (_1767 * _1618) - (_1768 * _1617);
    float _1774 = (_1768 * _1616) - (_1766 * _1618);
    float _1777 = (_1766 * _1617) - (_1767 * _1616);
    float _1779;
    float _1787;
    float _1778 = 0.0;
    uint _1780 = 0u;
    float _1784;
    bool _1786;
    for (;;)
    {
        _1784 = (float(_1780) + _1659) * 0.03125;
        _1786 = _1780 == 0u;
        float frontier_phi_49_pred;
        if (_1786)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1907;
            float _1908;
            uint _1910;
            _1907 = 0.0;
            _1908 = 0.5;
            _1910 = _1780;
            float _1788;
            for (;;)
            {
                _1788 = ((_1910 & 1u) != 0u) ? (_1908 + _1907) : _1907;
                uint _1911 = _1910 >> 1u;
                if (_1911 == 0u)
                {
                    break;
                }
                else
                {
                    _1907 = _1788;
                    _1908 *= 0.5;
                    _1910 = _1911;
                }
            }
            frontier_phi_49_pred = _1788;
        }
        _1787 = frontier_phi_49_pred;
        float _1789 = _1787 + _1672;
        float _1793 = sqrt(_1784);
        float _1794 = ((_1789 > 1.0) ? (_1789 + (-1.0)) : _1789) * 6.283185482025146484375;
        float _1797 = cos(_1794) * _1793;
        float _1799 = sin(_1794) * _1793;
        float _1801 = sqrt(1.0 - _1784);
        float _1814 = ((_1801 * _1616) + (_1797 * _1771)) + (_1799 * _1766);
        float _1815 = ((_1801 * _1617) + (_1797 * _1774)) + (_1799 * _1767);
        float _1816 = ((_1801 * _1618) + (_1797 * _1777)) + (_1799 * _1768);
        _69._m0 = 1u;
        uvec4 _1820 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1821 = _1820.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1821, _1820.w, _1821, vec3(_1630, _1631, _1632), 9.9999997473787516355514526367188e-05, vec3(_1814, _1815, _1816), 10000.0, 1);
        float _1827 = dot(vec3(_1616, _1617, _1618), vec3(_1814, _1815, _1816));
        float _2108 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1830 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _1779 = ((float(_69._m0 == 0u) * _1830) / (_1830 * 0.3183098733425140380859375)) + _1778;
        uint _1781 = _1780 + 1u;
        if (_1781 == 32u)
        {
            break;
        }
        else
        {
            _1778 = _1779;
            _1780 = _1781;
            continue;
        }
    }
    float _1839 = _1779 * 0.009947183541953563690185546875;
    float _1844 = dot(vec3(_1438, _1439, _1440), vec3(_1616, _1617, _1618)) * 2.0;
    vec4 _1856 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1438 - (_1844 * _1616), _1439 - (_1844 * _1617), _1440 - (_1844 * _1618)), 4.0);
    float _1861 = dot(vec3(_1633, _1634, _1635), vec3(_1616, _1617, _1618));
    float _2119 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1870 = (exp2(log2(1.0 - (isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1878 = (_1748 + (cbMtdParam._m0[16u].x * (((_917 * (((((_897.x - _894) * _873) + _894) * cbMtdParam._m0[14u].x) - _1584)) + _1584) + ((((float(_328 & 255u) * hit._m0.x) + (float(_247 & 255u) * _556)) + (float(_409 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1856.x * _1839) * _1870);
    float _1880 = (_1749 + (cbMtdParam._m0[16u].x * (((_917 * (((((_897.y - _895) * _873) + _895) * cbMtdParam._m0[14u].y) - _1585)) + _1585) + ((((float((_328 >> 8u) & 255u) * hit._m0.x) + (float((_247 >> 8u) & 255u) * _556)) + (float((_409 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1856.y * _1839) * _1870);
    float _1882 = (_1750 + (cbMtdParam._m0[16u].x * (((_917 * (((((_897.z - _896) * _873) + _896) * cbMtdParam._m0[14u].z) - _1586)) + _1586) + ((((float((_328 >> 16u) & 255u) * hit._m0.x) + (float((_247 >> 16u) & 255u) * _556)) + (float((_409 >> 16u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125)))) + ((_1856.z * _1839) * _1870);
    float _2130 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _2141 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _2152 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    bool _1890 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1901;
    _1901.x = _1890 ? ((_669 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0)));
    _1901.y = _1890 ? ((_672 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0)));
    _1901.z = _1890 ? ((_675 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0)));
    payload._m0 = _1901;
}


