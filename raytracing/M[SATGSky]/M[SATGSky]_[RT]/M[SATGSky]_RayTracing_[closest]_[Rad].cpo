#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _55
{
    vec3 _m0;
};

struct _59
{
    vec2 _m0;
};

struct _62
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_SATGSky_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SATGSky_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _55 payload;
hitAttributeEXT _59 hit;
layout(location = 1) rayPayloadEXT _62 _64;
layout(location = 2) rayPayloadEXT _62 _65;

vec3 _1057;

void main()
{
    float _79 = float(gl_LaunchSizeEXT.y);
    float _107 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _116 = sqrt(((_108 * _108) + (_107 * _107)) + (_109 * _109)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _79)))));
    uvec4 _127 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _128 = _127.y;
    uint _168;
    uint _170;
    uint _171;
    if (_127.x == 0u)
    {
        uint _136 = (_128 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _145 = uvec3(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_136 + 2u)).x);
        _168 = _145.x;
        _170 = _145.y;
        _171 = _145.z;
    }
    else
    {
        uint _149 = uint(gl_PrimitiveID) * 6u;
        uint _151 = _149 & 4294967292u;
        uint _154 = (_128 + _151) >> 2u;
        uvec2 _161 = uvec2(texelFetch(l_geomIndexBuffer, int(_154)).x, texelFetch(l_geomIndexBuffer, int(_154 + 1u)).x);
        uint _162 = _161.x;
        uint _163 = _161.y;
        uint _165 = _162 >> 16u;
        uint _166 = _163 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_151 == _149)
        {
            frontier_phi_3_2_ladder = _166;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _162 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _163 >> 16u;
            frontier_phi_3_2_ladder_1 = _166;
            frontier_phi_3_2_ladder_2 = _165;
        }
        _168 = frontier_phi_3_2_ladder_2;
        _170 = frontier_phi_3_2_ladder_1;
        _171 = frontier_phi_3_2_ladder;
    }
    uvec4 _175 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _176 = _175.x;
    uint _177 = _175.z;
    bool _178 = _177 != 0u;
    bool _180 = _127.w == 0u;
    bool _181 = _178 || _180;
    uint _183 = (_176 * _168) + 12u;
    uint _207;
    uint _208;
    uint _209;
    uint _210;
    if (_181)
    {
        uvec4 _186 = texelFetch(l_geomAttrib_0, int(_183 >> 2u));
        uint _187 = _186.x;
        _207 = _187 & 255u;
        _208 = (_187 >> 8u) & 255u;
        _209 = (_187 >> 16u) & 255u;
        _210 = 20u;
    }
    else
    {
        uint _195 = _183 >> 2u;
        uvec2 _201 = uvec2(texelFetch(l_geomAttrib_0, int(_195)).x, texelFetch(l_geomAttrib_0, int(_195 + 1u)).x);
        uint _202 = _201.x;
        _207 = _202 & 65535u;
        _208 = _202 >> 16u;
        _209 = _201.y & 65535u;
        _210 = 24u;
    }
    bool _216 = _177 == 0u;
    uint _217;
    if (_216)
    {
        _217 = _210;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_180)
        {
            frontier_phi_9_10_ladder = _210 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _210 + 8u;
        }
        _217 = frontier_phi_9_10_ladder;
    }
    uvec4 _228 = texelFetch(l_geomAttrib_0, int((((_176 * _168) + 4u) + (_178 ? (_217 + 4u) : _217)) >> 2u));
    uint _229 = _228.x;
    float _233 = float(int(uint(int(_229 << 16u) >> int(16u))));
    float _234 = float(int(uint(int(_229) >> int(16u))));
    uint _236 = (_176 * _170) + 12u;
    uint _257;
    uint _258;
    uint _259;
    uint _260;
    if (_181)
    {
        uvec4 _238 = texelFetch(l_geomAttrib_0, int(_236 >> 2u));
        uint _239 = _238.x;
        _257 = _239 & 255u;
        _258 = (_239 >> 8u) & 255u;
        _259 = (_239 >> 16u) & 255u;
        _260 = 20u;
    }
    else
    {
        uint _245 = _236 >> 2u;
        uvec2 _251 = uvec2(texelFetch(l_geomAttrib_0, int(_245)).x, texelFetch(l_geomAttrib_0, int(_245 + 1u)).x);
        uint _252 = _251.x;
        _257 = _252 & 65535u;
        _258 = _252 >> 16u;
        _259 = _251.y & 65535u;
        _260 = 24u;
    }
    uint _264;
    if (_216)
    {
        _264 = _260;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_180)
        {
            frontier_phi_16_17_ladder = _260 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _260 + 8u;
        }
        _264 = frontier_phi_16_17_ladder;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((((_176 * _170) + 4u) + (_178 ? (_264 + 4u) : _264)) >> 2u));
    uint _274 = _273.x;
    float _278 = float(int(uint(int(_274 << 16u) >> int(16u))));
    float _279 = float(int(uint(int(_274) >> int(16u))));
    uint _281 = (_176 * _171) + 12u;
    uint _302;
    uint _303;
    uint _304;
    uint _305;
    if (_181)
    {
        uvec4 _283 = texelFetch(l_geomAttrib_0, int(_281 >> 2u));
        uint _284 = _283.x;
        _302 = _284 & 255u;
        _303 = (_284 >> 8u) & 255u;
        _304 = (_284 >> 16u) & 255u;
        _305 = 20u;
    }
    else
    {
        uint _290 = _281 >> 2u;
        uvec2 _296 = uvec2(texelFetch(l_geomAttrib_0, int(_290)).x, texelFetch(l_geomAttrib_0, int(_290 + 1u)).x);
        uint _297 = _296.x;
        _302 = _297 & 65535u;
        _303 = _297 >> 16u;
        _304 = _296.y & 65535u;
        _305 = 24u;
    }
    uint _309;
    if (_216)
    {
        _309 = _305;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_180)
        {
            frontier_phi_23_24_ladder = _305 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _305 + 8u;
        }
        _309 = frontier_phi_23_24_ladder;
    }
    uvec4 _318 = texelFetch(l_geomAttrib_0, int((((_176 * _171) + 4u) + (_178 ? (_309 + 4u) : _309)) >> 2u));
    uint _319 = _318.x;
    float _323 = float(int(uint(int(_319 << 16u) >> int(16u))));
    float _324 = float(int(uint(int(_319) >> int(16u))));
    bool _326 = _127.z == 0u;
    float _362;
    float _363;
    float _364;
    if (_326)
    {
        uint _329 = _168 * 3u;
        uvec3 _338 = uvec3(texelFetch(l_geomPositionBuffer, int(_329)).x, texelFetch(l_geomPositionBuffer, int(_329 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_329 + 2u)).x);
        _362 = uintBitsToFloat(_338.x);
        _363 = uintBitsToFloat(_338.y);
        _364 = uintBitsToFloat(_338.z);
    }
    else
    {
        uint _346 = _168 * 2u;
        uvec2 _352 = uvec2(texelFetch(l_geomPositionBuffer, int(_346)).x, texelFetch(l_geomPositionBuffer, int(_346 + 1u)).x);
        uint _353 = _352.x;
        _362 = unpackHalf2x16(_353).x;
        _363 = unpackHalf2x16(_353 >> 16u).x;
        _364 = unpackHalf2x16(_352.y).x;
    }
    float _400;
    float _401;
    float _402;
    if (_326)
    {
        uint _367 = _170 * 3u;
        uvec3 _376 = uvec3(texelFetch(l_geomPositionBuffer, int(_367)).x, texelFetch(l_geomPositionBuffer, int(_367 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_367 + 2u)).x);
        _400 = uintBitsToFloat(_376.x);
        _401 = uintBitsToFloat(_376.y);
        _402 = uintBitsToFloat(_376.z);
    }
    else
    {
        uint _384 = _170 * 2u;
        uvec2 _390 = uvec2(texelFetch(l_geomPositionBuffer, int(_384)).x, texelFetch(l_geomPositionBuffer, int(_384 + 1u)).x);
        uint _391 = _390.x;
        _400 = unpackHalf2x16(_391).x;
        _401 = unpackHalf2x16(_391 >> 16u).x;
        _402 = unpackHalf2x16(_390.y).x;
    }
    float _438;
    float _439;
    float _440;
    if (_326)
    {
        uint _405 = _171 * 3u;
        uvec3 _414 = uvec3(texelFetch(l_geomPositionBuffer, int(_405)).x, texelFetch(l_geomPositionBuffer, int(_405 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_405 + 2u)).x);
        _438 = uintBitsToFloat(_414.x);
        _439 = uintBitsToFloat(_414.y);
        _440 = uintBitsToFloat(_414.z);
    }
    else
    {
        uint _422 = _171 * 2u;
        uvec2 _428 = uvec2(texelFetch(l_geomPositionBuffer, int(_422)).x, texelFetch(l_geomPositionBuffer, int(_422 + 1u)).x);
        uint _429 = _428.x;
        _438 = unpackHalf2x16(_429).x;
        _439 = unpackHalf2x16(_429 >> 16u).x;
        _440 = unpackHalf2x16(_428.y).x;
    }
    float _443 = (1.0 - hit._m0.x) - hit._m0.y;
    float _465 = (_278 - _233) * 0.00048828125;
    float _467 = (_279 - _234) * 0.00048828125;
    float _470 = (_323 - _233) * 0.00048828125;
    float _471 = (_324 - _234) * 0.00048828125;
    float _493 = _400 - _362;
    float _494 = _401 - _363;
    float _495 = _402 - _364;
    float _498 = fma(_495, gl_ObjectToWorldEXT[2u].x, fma(_494, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _493));
    float _501 = fma(_495, gl_ObjectToWorldEXT[2u].y, fma(_494, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _493));
    float _504 = fma(_495, gl_ObjectToWorldEXT[2u].z, fma(_494, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _493));
    float _505 = _438 - _362;
    float _506 = _439 - _363;
    float _507 = _440 - _364;
    float _510 = fma(_507, gl_ObjectToWorldEXT[2u].x, fma(_506, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _505));
    float _513 = fma(_507, gl_ObjectToWorldEXT[2u].y, fma(_506, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _505));
    float _516 = fma(_507, gl_ObjectToWorldEXT[2u].z, fma(_506, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _505));
    float _517 = (((_278 * hit._m0.x) + (_233 * _443)) + (_323 * hit._m0.y)) * 0.00048828125;
    float _518 = (((_279 * hit._m0.x) + (_234 * _443)) + (_324 * hit._m0.y)) * 0.00048828125;
    float _522 = (((float(_207) * _443) + (-127.0)) + (float(_257) * hit._m0.x)) + (float(_302) * hit._m0.y);
    float _525 = (((float(_208) * _443) + (-127.0)) + (float(_258) * hit._m0.x)) + (float(_303) * hit._m0.y);
    float _528 = (((float(_209) * _443) + (-127.0)) + (float(_259) * hit._m0.x)) + (float(_304) * hit._m0.y);
    float _529 = _522 * 0.0078740157186985015869140625;
    float _531 = _525 * 0.0078740157186985015869140625;
    float _532 = _528 * 0.0078740157186985015869140625;
    uvec2 _550 = uvec2(textureSize(M_SATGSky_snp_0_Texture2D_0, int(0u)));
    bool _555 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _608;
    if (_555)
    {
        float _566 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _572 = (_516 * _501) - (_513 * _504);
        float _575 = (_510 * _504) - (_516 * _498);
        float _578 = (_513 * _498) - (_510 * _501);
        float _605 = ((log2((((float(_550.y) * 0.5) * float(_550.x)) * abs((_471 * _465) - (_470 * _467))) / (sqrt(((_575 * _575) + (_578 * _578)) + (_572 * _572)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_566 * gl_WorldRayDirectionEXT.x, _566 * gl_WorldRayDirectionEXT.y, _566 * gl_WorldRayDirectionEXT.z), vec3(_529, _531, _532))));
        _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    }
    else
    {
        _608 = 0.0;
    }
    vec4 _612 = textureLod(sampler2D(M_SATGSky_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (cbMtdParam._m0[12u].y + _517)) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[12u].z + _518) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _608);
    float _623 = cbMtdParam._m0[10u].x * _612.x;
    float _624 = cbMtdParam._m0[10u].y * _612.y;
    float _625 = cbMtdParam._m0[10u].z * _612.z;
    float _642 = abs((fract(cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1138 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0));
    float _648 = (_643 * _643) * (3.0 - (_643 * 2.0));
    uvec2 _666 = uvec2(textureSize(M_SATGSky_snp_0_Texture2D_1, int(0u)));
    float _670 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _671 = _670 * gl_WorldRayDirectionEXT.x;
    float _672 = _670 * gl_WorldRayDirectionEXT.y;
    float _673 = _670 * gl_WorldRayDirectionEXT.z;
    float _717;
    if (_555)
    {
        float _683 = (_516 * _501) - (_513 * _504);
        float _686 = (_510 * _504) - (_516 * _498);
        float _689 = (_513 * _498) - (_510 * _501);
        float _715 = ((log2((((float(_666.y) * 0.5) * float(_666.x)) * abs((_471 * _465) - (_470 * _467))) / (sqrt(((_686 * _686) + (_689 * _689)) + (_683 * _683)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_671, _672, _673), vec3(_529, _531, _532))));
        _717 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    }
    else
    {
        _717 = 0.0;
    }
    vec4 _719 = textureLod(sampler2D(M_SATGSky_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + _517) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + _518) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _717);
    float _736 = inversesqrt(dot(vec3(_529, _531, _532), vec3(_529, _531, _532)));
    float _737 = _736 * _529;
    float _738 = _736 * _531;
    float _739 = _736 * _532;
    float _751 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _752 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _753 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _754 = (-0.0) - _671;
    float _756 = (-0.0) - _672;
    float _757 = (-0.0) - _673;
    float _763 = float(gl_LaunchIDEXT.x);
    float _764 = float(gl_LaunchIDEXT.y);
    float _767 = float(gl_LaunchSizeEXT.x);
    float _781 = fract(fract(sin(dot(vec2(_763 / _767, _764 / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _794 = fract(fract(sin(dot(vec2((_763 + 128.0) / _767, (_764 + 128.0) / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _65._m0 = 1u;
    uvec4 _804 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _805 = _804.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _805, _804.w, _805, vec3(_751, _752, _753), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (_65._m0 == 0u)
    {
        float _826 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_737, _738, _739));
        float _1154 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _829 = isnan(1.0) ? _1154 : (isnan(_1154) ? 1.0 : min(_1154, 1.0));
        float _840 = g_sceneCB._m0[4u].x - _671;
        float _841 = g_sceneCB._m0[4u].y - _672;
        float _842 = g_sceneCB._m0[4u].z - _673;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _850 = dot(vec3(_737, _738, _739), vec3(g_sceneCB._m0[4u].xyz));
        float _1165 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _853 = isnan(1.0) ? _1165 : (isnan(_1165) ? 1.0 : min(_1165, 1.0));
        float _854 = dot(vec3(_737, _738, _739), vec3(_754, _756, _757));
        float _1176 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_840 * _846, _841 * _846, _842 * _846));
        float _1187 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _869 = (exp2(log2(1.0 - (isnan(1.0) ? _1187 : (isnan(_1187) ? 1.0 : min(_1187, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _875 = (0.5 / ((_853 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1176 : (isnan(_1176) ? 1.0 : min(_1176, 1.0))))) * _853;
        float _1198 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _877 = (isnan(1.0) ? _1198 : (isnan(_1198) ? 1.0 : min(_1198, 1.0))) * 0.31831014156341552734375;
        _885 = ((_623 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _829;
        _886 = ((_624 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _829;
        _887 = ((_625 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _829;
        _888 = (_869 * g_sceneCB._m0[5u].x) * _877;
        _889 = (_869 * g_sceneCB._m0[5u].y) * _877;
        _890 = (_869 * g_sceneCB._m0[5u].z) * _877;
    }
    else
    {
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
        _888 = 0.0;
        _889 = 0.0;
        _890 = 0.0;
    }
    bool _892 = abs(_738) < 0.89999997615814208984375;
    float _894 = float(_892);
    float _895 = _892 ? 0.0 : 1.0;
    float _898 = (_894 * _739) - (_895 * _738);
    float _899 = _895 * _737;
    float _901 = (-0.0) - (_737 * _894);
    float _905 = inversesqrt(dot(vec3(_898, _899, _901), vec3(_898, _899, _901)));
    float _906 = _898 * _905;
    float _907 = _899 * _905;
    float _908 = _905 * _901;
    float _911 = (_907 * _739) - (_908 * _738);
    float _914 = (_908 * _737) - (_906 * _739);
    float _917 = (_906 * _738) - (_907 * _737);
    float _919;
    float _927;
    float _918 = 0.0;
    uint _920 = 0u;
    float _924;
    bool _926;
    for (;;)
    {
        _924 = (float(_920) + _781) * 0.03125;
        _926 = _920 == 0u;
        float frontier_phi_43_pred;
        if (_926)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1062;
            float _1063;
            uint _1065;
            _1062 = 0.0;
            _1063 = 0.5;
            _1065 = _920;
            float _928;
            for (;;)
            {
                _928 = ((_1065 & 1u) != 0u) ? (_1063 + _1062) : _1062;
                uint _1066 = _1065 >> 1u;
                if (_1066 == 0u)
                {
                    break;
                }
                else
                {
                    _1062 = _928;
                    _1063 *= 0.5;
                    _1065 = _1066;
                }
            }
            frontier_phi_43_pred = _928;
        }
        _927 = frontier_phi_43_pred;
        float _929 = _927 + _794;
        float _933 = sqrt(_924);
        float _934 = ((_929 > 1.0) ? (_929 + (-1.0)) : _929) * 6.283185482025146484375;
        float _937 = cos(_934) * _933;
        float _939 = sin(_934) * _933;
        float _941 = sqrt(1.0 - _924);
        float _954 = ((_941 * _737) + (_937 * _911)) + (_939 * _906);
        float _955 = ((_941 * _738) + (_937 * _914)) + (_939 * _907);
        float _956 = ((_941 * _739) + (_937 * _917)) + (_939 * _908);
        _64._m0 = 1u;
        uvec4 _960 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _961 = _960.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _961, _960.w, _961, vec3(_751, _752, _753), 9.9999997473787516355514526367188e-05, vec3(_954, _955, _956), 10000.0, 1);
        float _967 = dot(vec3(_737, _738, _739), vec3(_954, _955, _956));
        float _1209 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _970 = isnan(1.0) ? _1209 : (isnan(_1209) ? 1.0 : min(_1209, 1.0));
        _919 = ((float(_64._m0 == 0u) * _970) / (_970 * 0.3183098733425140380859375)) + _918;
        uint _921 = _920 + 1u;
        if (_921 == 32u)
        {
            break;
        }
        else
        {
            _918 = _919;
            _920 = _921;
            continue;
        }
    }
    float _978 = _919 * 0.009947183541953563690185546875;
    float _983 = dot(vec3(_671, _672, _673), vec3(_737, _738, _739)) * 2.0;
    vec4 _995 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_671 - (_983 * _737), _672 - (_983 * _738), _673 - (_983 * _739)), 4.0);
    float _1000 = dot(vec3(_754, _756, _757), vec3(_737, _738, _739));
    float _1220 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1009 = (exp2(log2(1.0 - (isnan(1.0) ? _1220 : (isnan(_1220) ? 1.0 : min(_1220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1015 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_737, _738, _739), 0.0);
    float _1027 = ((_885 + (((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].x) * _648) * _719.x)) + _888) + (((_1015.x * _623) + (_1009 * _995.x)) * _978);
    float _1032 = ((_886 + (((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].y) * _648) * _719.y)) + _889) + (((_1015.y * _624) + (_1009 * _995.y)) * _978);
    float _1037 = ((_887 + (((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].z) * _648) * _719.z)) + _890) + (((_1015.z * _625) + (_1009 * _995.z)) * _978);
    float _1231 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1242 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1253 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    bool _1045 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1056;
    _1056.x = _1045 ? ((_522 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1231 : (isnan(_1231) ? 1.0 : min(_1231, 1.0)));
    _1056.y = _1045 ? ((_525 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0)));
    _1056.z = _1045 ? ((_528 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1253 : (isnan(_1253) ? 1.0 : min(_1253, 1.0)));
    payload._m0 = _1056;
}


