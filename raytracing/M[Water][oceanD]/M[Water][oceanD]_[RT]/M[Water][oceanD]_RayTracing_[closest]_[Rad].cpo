#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _56
{
    vec3 _m0;
};

struct _60
{
    vec2 _m0;
};

struct _63
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[22];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanD_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanD_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanD_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _56 payload;
hitAttributeEXT _60 hit;
layout(location = 1) rayPayloadEXT _63 _65;
layout(location = 2) rayPayloadEXT _63 _66;

vec3 _1685;

void main()
{
    float _79 = float(gl_LaunchSizeEXT.y);
    float _107 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _108 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _116 = sqrt(((_108 * _108) + (_107 * _107)) + (_109 * _109)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _79)))));
    uvec4 _127 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _128 = _127.y;
    uint _168;
    uint _170;
    uint _171;
    if (_127.x == 0u)
    {
        uint _136 = (_128 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _145 = uvec3(texelFetch(l_geomIndexBuffer, int(_136)).x, texelFetch(l_geomIndexBuffer, int(_136 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_136 + 2u)).x);
        _168 = _145.x;
        _170 = _145.y;
        _171 = _145.z;
    }
    else
    {
        uint _149 = uint(gl_PrimitiveID) * 6u;
        uint _151 = _149 & 4294967292u;
        uint _154 = (_128 + _151) >> 2u;
        uvec2 _161 = uvec2(texelFetch(l_geomIndexBuffer, int(_154)).x, texelFetch(l_geomIndexBuffer, int(_154 + 1u)).x);
        uint _162 = _161.x;
        uint _163 = _161.y;
        uint _165 = _162 >> 16u;
        uint _166 = _163 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_151 == _149)
        {
            frontier_phi_3_2_ladder = _165;
            frontier_phi_3_2_ladder_1 = _162 & 65535u;
            frontier_phi_3_2_ladder_2 = _166;
        }
        else
        {
            frontier_phi_3_2_ladder = _166;
            frontier_phi_3_2_ladder_1 = _165;
            frontier_phi_3_2_ladder_2 = _163 >> 16u;
        }
        _168 = frontier_phi_3_2_ladder_1;
        _170 = frontier_phi_3_2_ladder;
        _171 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _175 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _176 = _175.x;
    uint _177 = _175.z;
    bool _178 = _177 != 0u;
    bool _180 = _127.w == 0u;
    bool _181 = _178 || _180;
    uint _182 = _176 * _168;
    uint _183 = _182 + 12u;
    uint _207;
    uint _208;
    uint _209;
    uint _210;
    if (_181)
    {
        uvec4 _186 = texelFetch(l_geomAttrib_0, int(_183 >> 2u));
        uint _187 = _186.x;
        _207 = _187 & 255u;
        _208 = (_187 >> 8u) & 255u;
        _209 = (_187 >> 16u) & 255u;
        _210 = 16u;
    }
    else
    {
        uint _195 = _183 >> 2u;
        uvec2 _201 = uvec2(texelFetch(l_geomAttrib_0, int(_195)).x, texelFetch(l_geomAttrib_0, int(_195 + 1u)).x);
        uint _202 = _201.x;
        _207 = _202 & 65535u;
        _208 = _202 >> 16u;
        _209 = _201.y & 65535u;
        _210 = 20u;
    }
    uvec4 _218 = texelFetch(l_geomAttrib_0, int((_210 + _182) >> 2u));
    uint _219 = _218.x;
    bool _233 = _177 == 0u;
    uint _234;
    if (_233)
    {
        _234 = _210 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_180)
        {
            frontier_phi_9_10_ladder = _210 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _210 + 12u;
        }
        _234 = frontier_phi_9_10_ladder;
    }
    uint _238 = _178 ? (_234 + 4u) : _234;
    uint _241 = ((_182 + 4u) + _238) >> 2u;
    uvec2 _247 = uvec2(texelFetch(l_geomAttrib_0, int(_241)).x, texelFetch(l_geomAttrib_0, int(_241 + 1u)).x);
    uint _248 = _247.x;
    uint _249 = _247.y;
    float _253 = float(int(uint(int(_248 << 16u) >> int(16u))));
    float _254 = float(int(uint(int(_248) >> int(16u))));
    float _258 = float(int(uint(int(_249 << 16u) >> int(16u))));
    float _259 = float(int(uint(int(_249) >> int(16u))));
    uvec4 _263 = texelFetch(l_geomAttrib_0, int(((_182 + 12u) + _238) >> 2u));
    uint _264 = _263.x;
    uint _270 = _176 * _170;
    uint _271 = _270 + 12u;
    uint _292;
    uint _293;
    uint _294;
    uint _295;
    if (_181)
    {
        uvec4 _273 = texelFetch(l_geomAttrib_0, int(_271 >> 2u));
        uint _274 = _273.x;
        _292 = _274 & 255u;
        _293 = (_274 >> 8u) & 255u;
        _294 = (_274 >> 16u) & 255u;
        _295 = 16u;
    }
    else
    {
        uint _280 = _271 >> 2u;
        uvec2 _286 = uvec2(texelFetch(l_geomAttrib_0, int(_280)).x, texelFetch(l_geomAttrib_0, int(_280 + 1u)).x);
        uint _287 = _286.x;
        _292 = _287 & 65535u;
        _293 = _287 >> 16u;
        _294 = _286.y & 65535u;
        _295 = 20u;
    }
    uvec4 _301 = texelFetch(l_geomAttrib_0, int((_295 + _270) >> 2u));
    uint _302 = _301.x;
    uint _314;
    if (_233)
    {
        _314 = _295 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_180)
        {
            frontier_phi_16_17_ladder = _295 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _295 + 12u;
        }
        _314 = frontier_phi_16_17_ladder;
    }
    uint _318 = _178 ? (_314 + 4u) : _314;
    uint _321 = ((_270 + 4u) + _318) >> 2u;
    uvec2 _327 = uvec2(texelFetch(l_geomAttrib_0, int(_321)).x, texelFetch(l_geomAttrib_0, int(_321 + 1u)).x);
    uint _328 = _327.x;
    uint _329 = _327.y;
    float _333 = float(int(uint(int(_328 << 16u) >> int(16u))));
    float _334 = float(int(uint(int(_328) >> int(16u))));
    float _338 = float(int(uint(int(_329 << 16u) >> int(16u))));
    float _339 = float(int(uint(int(_329) >> int(16u))));
    uvec4 _343 = texelFetch(l_geomAttrib_0, int(((_270 + 12u) + _318) >> 2u));
    uint _344 = _343.x;
    uint _350 = _176 * _171;
    uint _351 = _350 + 12u;
    uint _372;
    uint _373;
    uint _374;
    uint _375;
    if (_181)
    {
        uvec4 _353 = texelFetch(l_geomAttrib_0, int(_351 >> 2u));
        uint _354 = _353.x;
        _372 = _354 & 255u;
        _373 = (_354 >> 8u) & 255u;
        _374 = (_354 >> 16u) & 255u;
        _375 = 16u;
    }
    else
    {
        uint _360 = _351 >> 2u;
        uvec2 _366 = uvec2(texelFetch(l_geomAttrib_0, int(_360)).x, texelFetch(l_geomAttrib_0, int(_360 + 1u)).x);
        uint _367 = _366.x;
        _372 = _367 & 65535u;
        _373 = _367 >> 16u;
        _374 = _366.y & 65535u;
        _375 = 20u;
    }
    uvec4 _381 = texelFetch(l_geomAttrib_0, int((_375 + _350) >> 2u));
    uint _382 = _381.x;
    uint _394;
    if (_233)
    {
        _394 = _375 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_180)
        {
            frontier_phi_23_24_ladder = _375 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _375 + 12u;
        }
        _394 = frontier_phi_23_24_ladder;
    }
    uint _398 = _178 ? (_394 + 4u) : _394;
    uint _401 = ((_350 + 4u) + _398) >> 2u;
    uvec2 _407 = uvec2(texelFetch(l_geomAttrib_0, int(_401)).x, texelFetch(l_geomAttrib_0, int(_401 + 1u)).x);
    uint _408 = _407.x;
    uint _409 = _407.y;
    float _413 = float(int(uint(int(_408 << 16u) >> int(16u))));
    float _414 = float(int(uint(int(_408) >> int(16u))));
    float _418 = float(int(uint(int(_409 << 16u) >> int(16u))));
    float _419 = float(int(uint(int(_409) >> int(16u))));
    uvec4 _423 = texelFetch(l_geomAttrib_0, int(((_350 + 12u) + _398) >> 2u));
    uint _424 = _423.x;
    bool _431 = _127.z == 0u;
    float _467;
    float _468;
    float _469;
    if (_431)
    {
        uint _434 = _168 * 3u;
        uvec3 _443 = uvec3(texelFetch(l_geomPositionBuffer, int(_434)).x, texelFetch(l_geomPositionBuffer, int(_434 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_434 + 2u)).x);
        _467 = uintBitsToFloat(_443.x);
        _468 = uintBitsToFloat(_443.y);
        _469 = uintBitsToFloat(_443.z);
    }
    else
    {
        uint _451 = _168 * 2u;
        uvec2 _457 = uvec2(texelFetch(l_geomPositionBuffer, int(_451)).x, texelFetch(l_geomPositionBuffer, int(_451 + 1u)).x);
        uint _458 = _457.x;
        _467 = unpackHalf2x16(_458).x;
        _468 = unpackHalf2x16(_458 >> 16u).x;
        _469 = unpackHalf2x16(_457.y).x;
    }
    float _505;
    float _506;
    float _507;
    if (_431)
    {
        uint _472 = _170 * 3u;
        uvec3 _481 = uvec3(texelFetch(l_geomPositionBuffer, int(_472)).x, texelFetch(l_geomPositionBuffer, int(_472 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_472 + 2u)).x);
        _505 = uintBitsToFloat(_481.x);
        _506 = uintBitsToFloat(_481.y);
        _507 = uintBitsToFloat(_481.z);
    }
    else
    {
        uint _489 = _170 * 2u;
        uvec2 _495 = uvec2(texelFetch(l_geomPositionBuffer, int(_489)).x, texelFetch(l_geomPositionBuffer, int(_489 + 1u)).x);
        uint _496 = _495.x;
        _505 = unpackHalf2x16(_496).x;
        _506 = unpackHalf2x16(_496 >> 16u).x;
        _507 = unpackHalf2x16(_495.y).x;
    }
    float _543;
    float _544;
    float _545;
    if (_431)
    {
        uint _510 = _171 * 3u;
        uvec3 _519 = uvec3(texelFetch(l_geomPositionBuffer, int(_510)).x, texelFetch(l_geomPositionBuffer, int(_510 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_510 + 2u)).x);
        _543 = uintBitsToFloat(_519.x);
        _544 = uintBitsToFloat(_519.y);
        _545 = uintBitsToFloat(_519.z);
    }
    else
    {
        uint _527 = _171 * 2u;
        uvec2 _533 = uvec2(texelFetch(l_geomPositionBuffer, int(_527)).x, texelFetch(l_geomPositionBuffer, int(_527 + 1u)).x);
        uint _534 = _533.x;
        _543 = unpackHalf2x16(_534).x;
        _544 = unpackHalf2x16(_534 >> 16u).x;
        _545 = unpackHalf2x16(_533.y).x;
    }
    float _548 = (1.0 - hit._m0.x) - hit._m0.y;
    float _602 = (((float((_344 >> 8u) & 255u) * hit._m0.x) + (float((_264 >> 8u) & 255u) * _548)) + (float((_424 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _605 = (_333 - _253) * 0.00048828125;
    float _607 = (_334 - _254) * 0.00048828125;
    float _610 = (_413 - _253) * 0.00048828125;
    float _611 = (_414 - _254) * 0.00048828125;
    float _637 = _505 - _467;
    float _638 = _506 - _468;
    float _639 = _507 - _469;
    float _642 = fma(_639, gl_ObjectToWorldEXT[2u].x, fma(_638, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _637));
    float _645 = fma(_639, gl_ObjectToWorldEXT[2u].y, fma(_638, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _637));
    float _648 = fma(_639, gl_ObjectToWorldEXT[2u].z, fma(_638, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _637));
    float _649 = _543 - _467;
    float _650 = _544 - _468;
    float _651 = _545 - _469;
    float _654 = fma(_651, gl_ObjectToWorldEXT[2u].x, fma(_650, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _649));
    float _657 = fma(_651, gl_ObjectToWorldEXT[2u].y, fma(_650, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _649));
    float _660 = fma(_651, gl_ObjectToWorldEXT[2u].z, fma(_650, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _649));
    float _661 = (((_333 * hit._m0.x) + (_253 * _548)) + (_413 * hit._m0.y)) * 0.00048828125;
    float _662 = (((_334 * hit._m0.x) + (_254 * _548)) + (_414 * hit._m0.y)) * 0.00048828125;
    float _668 = (((float(_207) * _548) + (-127.0)) + (float(_292) * hit._m0.x)) + (float(_372) * hit._m0.y);
    float _671 = (((float(_208) * _548) + (-127.0)) + (float(_293) * hit._m0.x)) + (float(_373) * hit._m0.y);
    float _674 = (((float(_209) * _548) + (-127.0)) + (float(_294) * hit._m0.x)) + (float(_374) * hit._m0.y);
    float _675 = _668 * 0.0078740157186985015869140625;
    float _677 = _671 * 0.0078740157186985015869140625;
    float _678 = _674 * 0.0078740157186985015869140625;
    float _691 = ((((float(_219 & 255u) * _548) + (-127.0)) + (float(_302 & 255u) * hit._m0.x)) + (float(_382 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _692 = ((((float((_219 >> 8u) & 255u) * _548) + (-127.0)) + (float((_302 >> 8u) & 255u) * hit._m0.x)) + (float((_382 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _693 = ((((float((_219 >> 16u) & 255u) * _548) + (-127.0)) + (float((_302 >> 16u) & 255u) * hit._m0.x)) + (float((_382 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _694 = ((((float(_219 >> 24u) * _548) + (-127.0)) + (float(_302 >> 24u) * hit._m0.x)) + (float(_382 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _704 = ((_692 * _678) - (_693 * _677)) * _694;
    float _705 = ((_693 * _675) - (_691 * _678)) * _694;
    float _706 = ((_691 * _677) - (_692 * _675)) * _694;
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _732 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    uvec2 _748 = uvec2(textureSize(M_Water_oceanD_snp_0_Texture2D_2, int(0u)));
    bool _753 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _806;
    if (_753)
    {
        float _764 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _770 = (_660 * _645) - (_657 * _648);
        float _773 = (_654 * _648) - (_660 * _642);
        float _776 = (_657 * _642) - (_654 * _645);
        float _803 = ((log2((((float(_748.y) * 0.5) * float(_748.x)) * abs((_611 * _605) - (_610 * _607))) / (sqrt(((_773 * _773) + (_776 * _776)) + (_770 * _770)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_764 * gl_WorldRayDirectionEXT.x, _764 * gl_WorldRayDirectionEXT.y, _764 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    }
    else
    {
        _806 = 0.0;
    }
    vec4 _810 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_2, SS_BumpMap), vec2((((_732 * cbMtdParam._m0[17u].w) + _661) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_732 * cbMtdParam._m0[18u].x) + _662) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _806);
    float _812 = _810.x;
    float _813 = _810.y;
    float _825 = cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].w;
    float _827 = ((-0.0) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    float _832 = 1.0 - (isnan(cbMtdParam._m0[16u].y) ? 0.0 : (isnan(0.0) ? cbMtdParam._m0[16u].y : max(0.0, cbMtdParam._m0[16u].y)));
    float _1784 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _833 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    float _834 = _810.z - _833;
    float _1795 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    float _844 = (_835 * 0.004999999888241291046142578125) + _661;
    float _846 = (_835 * (-0.004999999888241291046142578125)) + _662;
    uvec2 _859 = uvec2(textureSize(M_Water_oceanD_snp_0_Texture2D_0, int(0u)));
    float _910;
    if (_753)
    {
        float _870 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _876 = (_660 * _645) - (_657 * _648);
        float _879 = (_654 * _648) - (_660 * _642);
        float _882 = (_657 * _642) - (_654 * _645);
        float _908 = ((log2((((float(_859.y) * 0.5) * float(_859.x)) * abs((_611 * _605) - (_610 * _607))) / (sqrt(((_879 * _879) + (_882 * _882)) + (_876 * _876)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_870 * gl_WorldRayDirectionEXT.x, _870 * gl_WorldRayDirectionEXT.y, _870 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _910 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    }
    else
    {
        _910 = 0.0;
    }
    vec4 _912 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_0, SS_BumpMap), vec2(((_844 + (cbMtdParam._m0[17u].y * _732)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_846 + (cbMtdParam._m0[17u].z * _732)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _910);
    float _916 = _912.z;
    float _977;
    if (_753)
    {
        float _937 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _943 = (_660 * _645) - (_657 * _648);
        float _946 = (_654 * _648) - (_660 * _642);
        float _949 = (_657 * _642) - (_654 * _645);
        float _975 = ((log2((((float(_859.y) * 0.5) * float(_859.x)) * abs((_611 * _605) - (_610 * _607))) / (sqrt(((_946 * _946) + (_949 * _949)) + (_943 * _943)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_937 * gl_WorldRayDirectionEXT.x, _937 * gl_WorldRayDirectionEXT.y, _937 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _977 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    }
    else
    {
        _977 = 0.0;
    }
    vec4 _979 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_0, SS_BumpMap), vec2(((_844 + (cbMtdParam._m0[16u].w * _732)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_846 + (cbMtdParam._m0[17u].x * _732)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _977);
    float _983 = _979.z;
    float _986 = (_832 - _810.w) + (isnan(_983) ? _916 : (isnan(_916) ? _983 : max(_916, _983)));
    float _1821 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _990 = (((((float(_344 & 255u) * hit._m0.x) + (float(_264 & 255u) * _548)) + (float(_424 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) - _832) + cbMtdParam._m0[16u].x;
    float _991 = _990 * (isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0)));
    float _1004 = (_991 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _835);
    float _1005 = (_991 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _835);
    float _1006 = (_991 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _835);
    float _1832 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1008 = 1.0 - (isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0)));
    float _1015 = ((_1008 - _1004) * _833) + _1004;
    float _1016 = ((_1008 - _1005) * _833) + _1005;
    float _1017 = ((_1008 - _1006) * _833) + _1006;
    float _1026 = (cbMtdParam._m0[14u].w + _827) * cbMtdParam._m0[14u].x;
    float _1843 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1030 = ((isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0))) * (cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _1854 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1031 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    float _1039 = _827 / cbMtdParam._m0[14u].z;
    float _1865 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1040 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uvec2 _1058 = uvec2(textureSize(M_Water_oceanD_snp_0_Texture2D_1, int(0u)));
    float _1111;
    if (_753)
    {
        float _1069 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1075 = (_660 * _645) - (_657 * _648);
        float _1078 = (_654 * _648) - (_660 * _642);
        float _1081 = (_657 * _642) - (_654 * _645);
        float _1109 = ((log2((((float(_1058.y) * 0.5) * float(_1058.x)) * abs((((_419 - _259) * (_338 - _258)) - ((_418 - _258) * (_339 - _259))) * 2.384185791015625e-07)) / (sqrt(((_1078 * _1078) + (_1081 * _1081)) + (_1075 * _1075)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1069 * gl_WorldRayDirectionEXT.x, _1069 * gl_WorldRayDirectionEXT.y, _1069 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1111 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    }
    else
    {
        _1111 = 0.0;
    }
    vec4 _1113 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[18u].y * _732) + ((((_338 * hit._m0.x) + (_258 * _548)) + (_418 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[18u].z * _732) + ((((_339 * hit._m0.x) + (_259 * _548)) + (_419 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _1111);
    float _1122 = ((_979.x + (-0.5)) * 0.5) + _912.x;
    float _1123 = ((_979.y + (-0.5)) * 0.5) + _912.y;
    float _1131 = _835 * 0.119999997317790985107421875;
    float _1133 = _835 * (-0.100000001490116119384765625);
    float _1144 = cbMtdParam._m0[19u].y * _661;
    float _1145 = cbMtdParam._m0[19u].z * _662;
    float _1204;
    if (_753)
    {
        float _1164 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1170 = (_660 * _645) - (_657 * _648);
        float _1173 = (_654 * _648) - (_660 * _642);
        float _1176 = (_657 * _642) - (_654 * _645);
        float _1202 = ((log2((((float(_859.y) * 0.5) * float(_859.x)) * abs((_611 * _605) - (_610 * _607))) / (sqrt(((_1173 * _1173) + (_1176 * _1176)) + (_1170 * _1170)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1164 * gl_WorldRayDirectionEXT.x, _1164 * gl_WorldRayDirectionEXT.y, _1164 * gl_WorldRayDirectionEXT.z), vec3(_675, _677, _678))));
        _1204 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    }
    else
    {
        _1204 = 0.0;
    }
    vec4 _1206 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].w * _732) + _1131) + _1144) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[19u].x * _732) + _1133) + _1145) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1204);
    float _1227 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1228 = _1227 * gl_WorldRayDirectionEXT.x;
    float _1229 = _1227 * gl_WorldRayDirectionEXT.y;
    float _1230 = _1227 * gl_WorldRayDirectionEXT.z;
    float _1274;
    if (_753)
    {
        float _1240 = (_660 * _645) - (_657 * _648);
        float _1243 = (_654 * _648) - (_660 * _642);
        float _1246 = (_657 * _642) - (_654 * _645);
        float _1272 = ((log2((((float(_859.y) * 0.5) * float(_859.x)) * abs((_611 * _605) - (_610 * _607))) / (sqrt(((_1243 * _1243) + (_1246 * _1246)) + (_1240 * _1240)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_116) / abs(dot(vec3(_1228, _1229, _1230), vec3(_675, _677, _678))));
        _1274 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    }
    else
    {
        _1274 = 0.0;
    }
    vec4 _1276 = textureLod(sampler2D(M_Water_oceanD_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1144 + _1131) + (cbMtdParam._m0[19u].w * _732)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1145 + _1133) + (cbMtdParam._m0[20u].x * _732)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1274);
    float _1291 = (((0.5 - _1122) * 0.10999999940395355224609375) + _1122) + (((_1206.x + (-1.0)) + _1276.x) * cbMtdParam._m0[15u].w);
    float _1292 = (((0.5 - _1123) * 0.10999999940395355224609375) + _1123) + (((_1206.y + (-1.0)) + _1276.y) * cbMtdParam._m0[15u].w);
    float _1297 = ((_1113.x - _1291) * _1040) + _1291;
    float _1298 = ((_1113.y - _1292) * _1040) + _1292;
    float _1300 = _827 / cbMtdParam._m0[14u].y;
    float _1891 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1301 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    float _1317 = ((((_1031 * (0.5 - _812)) + _812) + (((_1297 + (-0.5)) + ((0.5 - _1297) * _1301)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1318 = ((((_1031 * (0.5 - _813)) + _813) + (((_1298 + (-0.5)) + ((0.5 - _1298) * _1301)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1319 = dot(vec2(_1317, _1318), vec2(_1317, _1318));
    float _1902 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1324 = sqrt(1.0 - (isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0))));
    float _1327 = fma(_1324, _675, fma(_1318, _691, (_710 * _704) * _1317));
    float _1330 = fma(_1324, _677, fma(_1318, _692, (_710 * _705) * _1317));
    float _1333 = fma(_1324, _678, fma(_1318, _693, (_710 * _706) * _1317));
    float _1337 = inversesqrt(dot(vec3(_1327, _1330, _1333), vec3(_1327, _1330, _1333)));
    float _1338 = _1337 * _1327;
    float _1339 = _1337 * _1330;
    float _1340 = _1337 * _1333;
    float _1352 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1353 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1354 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1355 = (-0.0) - _1228;
    float _1356 = (-0.0) - _1229;
    float _1357 = (-0.0) - _1230;
    float _1363 = float(gl_LaunchIDEXT.x);
    float _1364 = float(gl_LaunchIDEXT.y);
    float _1367 = float(gl_LaunchSizeEXT.x);
    float _1381 = fract(fract(sin(dot(vec2(_1363 / _1367, _1364 / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1394 = fract(fract(sin(dot(vec2((_1363 + 128.0) / _1367, (_1364 + 128.0) / _79), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _66._m0 = 1u;
    uvec4 _1404 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1405 = _1404.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1405, _1404.w, _1405, vec3(_1352, _1353, _1354), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (_66._m0 == 0u)
    {
        float _1426 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1338, _1339, _1340));
        float _1913 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1429 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        float _1448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1030) * 0.949999988079071044921875);
        float _1449 = _1448 * _1448;
        float _1450 = g_sceneCB._m0[4u].x - _1228;
        float _1451 = g_sceneCB._m0[4u].y - _1229;
        float _1452 = g_sceneCB._m0[4u].z - _1230;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1457 = _1456 * _1450;
        float _1458 = _1456 * _1451;
        float _1459 = _1456 * _1452;
        float _1460 = dot(vec3(_1338, _1339, _1340), vec3(g_sceneCB._m0[4u].xyz));
        float _1924 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1463 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        float _1464 = dot(vec3(_1338, _1339, _1340), vec3(_1355, _1356, _1357));
        float _1935 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1467 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        float _1468 = dot(vec3(_1338, _1339, _1340), vec3(_1457, _1458, _1459));
        float _1946 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1471 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        float _1472 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1457, _1458, _1459));
        float _1957 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1449 * _1449;
        float _1480 = ((_1471 * _1471) * (_1476 + (-1.0))) + 1.0;
        float _1492 = (exp2(log2(1.0 - (isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1494 = 1.0 - _1449;
        float _1505 = (0.5 / (((_1467 * ((_1463 * _1494) + _1449)) + 9.9999999392252902907785028219223e-09) + (((_1467 * _1494) + _1449) * _1463))) * _1463;
        float _1968 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1507 = (isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0))) * (_1476 / ((_1480 * _1480) * 3.141590118408203125));
        _1514 = ((_1015 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1429;
        _1515 = ((_1016 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1429;
        _1516 = ((_1017 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1429;
        _1517 = (_1492 * g_sceneCB._m0[5u].x) * _1507;
        _1518 = (_1492 * g_sceneCB._m0[5u].y) * _1507;
        _1519 = (_1492 * g_sceneCB._m0[5u].z) * _1507;
    }
    else
    {
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    bool _1521 = abs(_1339) < 0.89999997615814208984375;
    float _1523 = float(_1521);
    float _1524 = _1521 ? 0.0 : 1.0;
    float _1527 = (_1523 * _1340) - (_1524 * _1339);
    float _1528 = _1524 * _1338;
    float _1530 = (-0.0) - (_1338 * _1523);
    float _1534 = inversesqrt(dot(vec3(_1527, _1528, _1530), vec3(_1527, _1528, _1530)));
    float _1535 = _1527 * _1534;
    float _1536 = _1528 * _1534;
    float _1537 = _1534 * _1530;
    float _1540 = (_1536 * _1340) - (_1537 * _1339);
    float _1543 = (_1537 * _1338) - (_1535 * _1340);
    float _1546 = (_1535 * _1339) - (_1536 * _1338);
    float _1548;
    float _1556;
    float _1547 = 0.0;
    uint _1549 = 0u;
    float _1553;
    bool _1555;
    for (;;)
    {
        _1553 = (float(_1549) + _1381) * 0.03125;
        _1555 = _1549 == 0u;
        float frontier_phi_51_pred;
        if (_1555)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1690;
            float _1691;
            uint _1693;
            _1690 = 0.0;
            _1691 = 0.5;
            _1693 = _1549;
            float _1557;
            for (;;)
            {
                _1557 = ((_1693 & 1u) != 0u) ? (_1691 + _1690) : _1690;
                uint _1694 = _1693 >> 1u;
                if (_1694 == 0u)
                {
                    break;
                }
                else
                {
                    _1690 = _1557;
                    _1691 *= 0.5;
                    _1693 = _1694;
                }
            }
            frontier_phi_51_pred = _1557;
        }
        _1556 = frontier_phi_51_pred;
        float _1558 = _1556 + _1394;
        float _1562 = sqrt(_1553);
        float _1563 = ((_1558 > 1.0) ? (_1558 + (-1.0)) : _1558) * 6.283185482025146484375;
        float _1566 = cos(_1563) * _1562;
        float _1568 = sin(_1563) * _1562;
        float _1570 = sqrt(1.0 - _1553);
        float _1583 = ((_1570 * _1338) + (_1566 * _1540)) + (_1568 * _1535);
        float _1584 = ((_1570 * _1339) + (_1566 * _1543)) + (_1568 * _1536);
        float _1585 = ((_1570 * _1340) + (_1566 * _1546)) + (_1568 * _1537);
        _65._m0 = 1u;
        uvec4 _1589 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1590 = _1589.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1590, _1589.w, _1590, vec3(_1352, _1353, _1354), 9.9999997473787516355514526367188e-05, vec3(_1583, _1584, _1585), 10000.0, 1);
        float _1596 = dot(vec3(_1338, _1339, _1340), vec3(_1583, _1584, _1585));
        float _1979 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1599 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _1548 = ((float(_65._m0 == 0u) * _1599) / (_1599 * 0.3183098733425140380859375)) + _1547;
        uint _1550 = _1549 + 1u;
        if (_1550 == 32u)
        {
            break;
        }
        else
        {
            _1547 = _1548;
            _1549 = _1550;
            continue;
        }
    }
    float _1607 = _1548 * 0.009947183541953563690185546875;
    float _1612 = dot(vec3(_1228, _1229, _1230), vec3(_1338, _1339, _1340)) * 2.0;
    vec4 _1626 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1228 - (_1612 * _1338), _1229 - (_1612 * _1339), _1230 - (_1612 * _1340)), 4.0 - (_1030 * 4.0));
    float _1631 = dot(vec3(_1355, _1356, _1357), vec3(_1338, _1339, _1340));
    float _1990 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1640 = (exp2(log2(1.0 - (isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1646 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1338, _1339, _1340), 0.0);
    float _1657 = (_1517 + _1514) + (((_1646.x * _1015) + (_1640 * _1626.x)) * _1607);
    float _1661 = (_1518 + _1515) + (((_1646.y * _1016) + (_1640 * _1626.y)) * _1607);
    float _1665 = (_1519 + _1516) + (((_1646.z * _1017) + (_1640 * _1626.z)) * _1607);
    float _2001 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _2012 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _2023 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    bool _1673 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1684;
    _1684.x = _1673 ? ((_668 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0)));
    _1684.y = _1673 ? ((_671 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0)));
    _1684.z = _1673 ? ((_674 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0)));
    payload._m0 = _1684;
}


