#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1347;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _156 & 65535u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _157 >> 16u;
        }
        _162 = frontier_phi_3_2_ladder_1;
        _164 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _612 * _606;
    float _614 = _612 * _607;
    float _615 = _612 * _608;
    uvec2 _627 = uvec2(textureSize(M_Crystal_M1_snp_0_Texture2D_5, int(0u)));
    bool _632 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _685;
    if (_632)
    {
        float _643 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _649 = (_564 * _549) - (_561 * _552);
        float _652 = (_558 * _552) - (_564 * _546);
        float _655 = (_561 * _546) - (_558 * _549);
        float _682 = ((log2((((float(_627.y) * 0.5) * float(_627.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_652 * _652) + (_655 * _655)) + (_649 * _649)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_643 * gl_WorldRayDirectionEXT.x, _643 * gl_WorldRayDirectionEXT.y, _643 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    }
    else
    {
        _685 = 0.0;
    }
    vec4 _689 = textureLod(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _565) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _566) + cbTextureTilingScale._m0[0u].w), _685);
    float _704 = dot(vec3(0.0), vec3(_613, _614, _615));
    float _707 = dot(vec3(0.0), vec3(_593, _594, _595));
    float _710 = dot(vec3(0.0), vec3(_577, _579, _580));
    float _716 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _739 = dot(vec4(textureLod(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * _565) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _566) + cbTextureTilingScale._m0[3u].w), 0.0)), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    uvec2 _759 = uvec2(textureSize(M_Crystal_M1_snp_0_Texture2D_1, int(0u)));
    float _810;
    if (_632)
    {
        float _770 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _776 = (_564 * _549) - (_561 * _552);
        float _779 = (_558 * _552) - (_564 * _546);
        float _782 = (_561 * _546) - (_558 * _549);
        float _808 = ((log2((((float(_759.y) * 0.5) * float(_759.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_779 * _779) + (_782 * _782)) + (_776 * _776)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_770 * gl_WorldRayDirectionEXT.x, _770 * gl_WorldRayDirectionEXT.y, _770 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _810 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    }
    else
    {
        _810 = 0.0;
    }
    vec4 _812 = textureLod(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_704 * cbMtdParam._m0[12u].x) * _716) * _739) + _565) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_707 * cbMtdParam._m0[12u].x) * _716) * _739) + _566) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _810);
    float _838 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_577, _579, _580, 0.0)) - cbMtdParam._m0[13u].x;
    float _1435 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _845 = exp2(log2(1.0 - (isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _861 = ((((_689.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _812.x) * cbMtdParam._m0[9u].x) * ((_845 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _866 = ((((_689.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _812.y) * cbMtdParam._m0[9u].y) * ((_845 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _871 = ((((_689.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _812.z) * cbMtdParam._m0[9u].z) * ((_845 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    uvec2 _887 = uvec2(textureSize(M_Crystal_M1_snp_0_Texture2D_7, int(0u)));
    float _891 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _892 = _891 * gl_WorldRayDirectionEXT.x;
    float _893 = _891 * gl_WorldRayDirectionEXT.y;
    float _894 = _891 * gl_WorldRayDirectionEXT.z;
    float _938;
    if (_632)
    {
        float _904 = (_564 * _549) - (_561 * _552);
        float _907 = (_558 * _552) - (_564 * _546);
        float _910 = (_561 * _546) - (_558 * _549);
        float _936 = ((log2((((float(_887.y) * 0.5) * float(_887.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_907 * _907) + (_910 * _910)) + (_904 * _904)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_892, _893, _894), vec3(_577, _579, _580))));
        _938 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    }
    else
    {
        _938 = 0.0;
    }
    vec4 _941 = textureLod(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _565) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _566) + cbTextureTilingScale._m0[6u].w), _938);
    float _948 = (_941.x * 2.0) + (-1.0);
    float _949 = (_941.y * 2.0) + (-1.0);
    float _950 = dot(vec2(_948, _949), vec2(_948, _949));
    float _1456 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _955 = sqrt(1.0 - (isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0))));
    float _957 = cbMtdParam._m0[14u].z + _941.z;
    float _960 = fma(_955, _577, fma(_949, _593, _948 * _613));
    float _963 = fma(_955, _579, fma(_949, _594, _948 * _614));
    float _966 = fma(_955, _580, fma(_949, _595, _948 * _615));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _985 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _986 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _987 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _988 = (-0.0) - _892;
    float _990 = (-0.0) - _893;
    float _991 = (-0.0) - _894;
    float _997 = float(gl_LaunchIDEXT.x);
    float _998 = float(gl_LaunchIDEXT.y);
    float _1001 = float(gl_LaunchSizeEXT.x);
    float _1015 = fract(fract(sin(dot(vec2(_997 / _1001, _998 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1028 = fract(fract(sin(dot(vec2((_997 + 128.0) / _1001, (_998 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1029 = 1.0 - cbMtdParam._m0[14u].y;
    float _1030 = _1029 * _861;
    float _1031 = _1029 * _866;
    float _1032 = _871 * _1029;
    float _1037 = cbMtdParam._m0[14u].y * (_861 + (-0.039999999105930328369140625));
    float _1038 = (_866 + (-0.039999999105930328369140625)) * cbMtdParam._m0[14u].y;
    float _1039 = (_871 + (-0.039999999105930328369140625)) * cbMtdParam._m0[14u].y;
    float _1040 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    _63._m0 = 1u;
    uvec4 _1053 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1054 = _1053.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1054, _1053.w, _1054, vec3(_985, _986, _987), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (_63._m0 == 0u)
    {
        float _1075 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_971, _972, _973));
        float _1467 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1078 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        float _1097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _957) * 0.949999988079071044921875);
        float _1098 = _1097 * _1097;
        float _1099 = g_sceneCB._m0[4u].x - _892;
        float _1100 = g_sceneCB._m0[4u].y - _893;
        float _1101 = g_sceneCB._m0[4u].z - _894;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1106 = _1105 * _1099;
        float _1107 = _1105 * _1100;
        float _1108 = _1105 * _1101;
        float _1109 = dot(vec3(_971, _972, _973), vec3(g_sceneCB._m0[4u].xyz));
        float _1478 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1112 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        float _1113 = dot(vec3(_971, _972, _973), vec3(_988, _990, _991));
        float _1489 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1116 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        float _1117 = dot(vec3(_971, _972, _973), vec3(_1106, _1107, _1108));
        float _1500 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1120 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        float _1121 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1106, _1107, _1108));
        float _1511 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1098 * _1098;
        float _1129 = ((_1120 * _1120) * (_1125 + (-1.0))) + 1.0;
        float _1138 = exp2(log2(1.0 - (isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0)))) * 5.0);
        float _1149 = 1.0 - _1098;
        float _1160 = (0.5 / (((_1116 * ((_1112 * _1149) + _1098)) + 9.9999999392252902907785028219223e-09) + (((_1116 * _1149) + _1098) * _1112))) * _1112;
        float _1522 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1162 = (isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0))) * (_1125 / ((_1129 * _1129) * 3.141590118408203125));
        _1169 = ((_1030 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1078;
        _1170 = ((_1031 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1078;
        _1171 = ((_1032 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1078;
        _1172 = (((_1138 * (0.959999978542327880859375 - _1037)) + _1040) * g_sceneCB._m0[5u].x) * _1162;
        _1173 = (((_1138 * (0.959999978542327880859375 - _1038)) + _1042) * g_sceneCB._m0[5u].y) * _1162;
        _1174 = (((_1138 * (0.959999978542327880859375 - _1039)) + _1043) * g_sceneCB._m0[5u].z) * _1162;
    }
    else
    {
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    bool _1176 = abs(_972) < 0.89999997615814208984375;
    float _1178 = float(_1176);
    float _1179 = _1176 ? 0.0 : 1.0;
    float _1182 = (_1178 * _973) - (_1179 * _972);
    float _1183 = _1179 * _971;
    float _1185 = (-0.0) - (_971 * _1178);
    float _1189 = inversesqrt(dot(vec3(_1182, _1183, _1185), vec3(_1182, _1183, _1185)));
    float _1190 = _1182 * _1189;
    float _1191 = _1183 * _1189;
    float _1192 = _1189 * _1185;
    float _1195 = (_1191 * _973) - (_1192 * _972);
    float _1198 = (_1192 * _971) - (_1190 * _973);
    float _1201 = (_1190 * _972) - (_1191 * _971);
    float _1203;
    float _1211;
    float _1202 = 0.0;
    uint _1204 = 0u;
    float _1208;
    bool _1210;
    for (;;)
    {
        _1208 = (float(_1204) + _1015) * 0.03125;
        _1210 = _1204 == 0u;
        float frontier_phi_45_pred;
        if (_1210)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1352;
            float _1353;
            uint _1355;
            _1352 = 0.0;
            _1353 = 0.5;
            _1355 = _1204;
            float _1212;
            for (;;)
            {
                _1212 = ((_1355 & 1u) != 0u) ? (_1353 + _1352) : _1352;
                uint _1356 = _1355 >> 1u;
                if (_1356 == 0u)
                {
                    break;
                }
                else
                {
                    _1352 = _1212;
                    _1353 *= 0.5;
                    _1355 = _1356;
                }
            }
            frontier_phi_45_pred = _1212;
        }
        _1211 = frontier_phi_45_pred;
        float _1213 = _1211 + _1028;
        float _1217 = sqrt(_1208);
        float _1218 = ((_1213 > 1.0) ? (_1213 + (-1.0)) : _1213) * 6.283185482025146484375;
        float _1221 = cos(_1218) * _1217;
        float _1223 = sin(_1218) * _1217;
        float _1225 = sqrt(1.0 - _1208);
        float _1238 = ((_1225 * _971) + (_1221 * _1195)) + (_1223 * _1190);
        float _1239 = ((_1225 * _972) + (_1221 * _1198)) + (_1223 * _1191);
        float _1240 = ((_1225 * _973) + (_1221 * _1201)) + (_1223 * _1192);
        _62._m0 = 1u;
        uvec4 _1244 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1245 = _1244.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1245, _1244.w, _1245, vec3(_985, _986, _987), 9.9999997473787516355514526367188e-05, vec3(_1238, _1239, _1240), 10000.0, 1);
        float _1251 = dot(vec3(_971, _972, _973), vec3(_1238, _1239, _1240));
        float _1533 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1254 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1203 = ((float(_62._m0 == 0u) * _1254) / (_1254 * 0.3183098733425140380859375)) + _1202;
        uint _1205 = _1204 + 1u;
        if (_1205 == 32u)
        {
            break;
        }
        else
        {
            _1202 = _1203;
            _1204 = _1205;
            continue;
        }
    }
    float _1262 = _1203 * 0.009947183541953563690185546875;
    float _1267 = dot(vec3(_892, _893, _894), vec3(_971, _972, _973)) * 2.0;
    vec4 _1281 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_892 - (_1267 * _971), _893 - (_1267 * _972), _894 - (_1267 * _973)), 4.0 - (_957 * 4.0));
    float _1286 = dot(vec3(_988, _990, _991), vec3(_971, _972, _973));
    float _1544 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1296 = exp2(log2(1.0 - (isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0)))) * 5.0);
    vec4 _1308 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_971, _972, _973), 0.0);
    float _1319 = (_1172 + _1169) + (((_1308.x * _1030) + (((_1296 * (0.959999978542327880859375 - _1037)) + _1040) * _1281.x)) * _1262);
    float _1323 = (_1173 + _1170) + (((_1308.y * _1031) + (((_1296 * (0.959999978542327880859375 - _1038)) + _1042) * _1281.y)) * _1262);
    float _1327 = (_1174 + _1171) + (((_1308.z * _1032) + (((_1296 * (0.959999978542327880859375 - _1039)) + _1043) * _1281.z)) * _1262);
    float _1555 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1566 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _1577 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    bool _1335 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1346;
    _1346.x = _1335 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0)));
    _1346.y = _1335 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0)));
    _1346.z = _1335 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0)));
    payload._m0 = _1346;
}


