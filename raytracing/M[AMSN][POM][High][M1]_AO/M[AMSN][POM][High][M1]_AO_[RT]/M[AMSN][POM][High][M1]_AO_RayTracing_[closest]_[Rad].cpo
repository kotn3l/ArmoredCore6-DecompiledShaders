#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1303;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _156 & 65535u;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _157 >> 16u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        _162 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
        _165 = frontier_phi_3_2_ladder_1;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _565 = (((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _566 = (((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _612 * _606;
    float _614 = _612 * _607;
    float _615 = _612 * _608;
    float _626 = dot(vec3(0.0), vec3(_613, _614, _615));
    float _630 = dot(vec3(0.0), vec3(_593, _594, _595));
    float _633 = dot(vec3(0.0), vec3(_577, _579, _580));
    float _636 = (-0.0) - _626;
    float _638 = (-0.0) - _630;
    float _648 = (cbTextureTilingScale._m0[2u].x * _565) + cbTextureTilingScale._m0[2u].z;
    float _649 = (cbTextureTilingScale._m0[2u].y * _566) + cbTextureTilingScale._m0[2u].w;
    float _653 = inversesqrt(dot(vec2(_636, _638), vec2(_636, _638)));
    float _657 = _633 * _633;
    float _659 = sqrt(((_630 * _630) + (_626 * _626)) + _657);
    float _663 = sqrt((_659 * _659) - _657) / ((-0.0) - _633);
    float _666 = ((cbMtdParam._m0[10u].y * _636) * _653) * _663;
    float _669 = ((cbMtdParam._m0[10u].y * _638) * _653) * _663;
    float _673 = inversesqrt(dot(vec3(_577, _579, _580), vec3(_577, _579, _580)));
    float _674 = abs(_648);
    float _675 = abs(_649);
    uvec2 _679 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _683 = float(_679.y) * (_675 + _675);
    float _685 = float(_679.x) * (_674 + _674);
    float _687 = log2(isnan(_683) ? _685 : (isnan(_685) ? _683 : max(_685, _683)));
    float _688 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _691;
    float _694;
    if (!(_688 <= 4.0))
    {
        _691 = _648;
        _694 = _649;
    }
    else
    {
        uint _733 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(uintBitsToFloat(0x7fc00000u /* nan */)), vec3(_673 * _577, _673 * _579, _673 * _580))) * 12.0)))), int(32u)));
        float _736 = 1.0 / float(int(_733));
        float _737 = _736 * _666;
        float _738 = _736 * _669;
        float _822;
        float _824;
        float _826;
        float _828;
        if (int(_733) > int(0u))
        {
            float _823;
            float _825;
            float _827;
            float _829;
            uint _1165;
            float _1001 = 1.0;
            uint _1003 = 0u;
            float _1005 = _648;
            float _1007 = _649;
            float _1009 = 1.0;
            float _1011 = 0.0;
            float _1012 = 0.0;
            float _1013 = 0.0;
            float _1014 = 0.0;
            float _1002;
            float _1006;
            float _1008;
            float _1010;
            bool _1028;
            for (;;)
            {
                _1006 = _1005 - _737;
                _1008 = _1007 - _738;
                _1002 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1006, _1008), vec2(_648, _649), vec2(_648, _649))), vec4(1.0, 0.0, 0.0, 0.0));
                _1010 = _1009 - _736;
                _1028 = _1002 > _1010;
                float frontier_phi_49_pred;
                float frontier_phi_49_pred_1;
                uint frontier_phi_49_pred_2;
                float frontier_phi_49_pred_3;
                float frontier_phi_49_pred_4;
                if (_1028)
                {
                    frontier_phi_49_pred = _1010;
                    frontier_phi_49_pred_1 = _1009;
                    frontier_phi_49_pred_2 = _733;
                    frontier_phi_49_pred_3 = _1001;
                    frontier_phi_49_pred_4 = _1002;
                }
                else
                {
                    frontier_phi_49_pred = _1011;
                    frontier_phi_49_pred_1 = _1013;
                    frontier_phi_49_pred_2 = _1003;
                    frontier_phi_49_pred_3 = _1014;
                    frontier_phi_49_pred_4 = _1012;
                }
                _823 = frontier_phi_49_pred;
                _827 = frontier_phi_49_pred_1;
                _1165 = frontier_phi_49_pred_2;
                _829 = frontier_phi_49_pred_3;
                _825 = frontier_phi_49_pred_4;
                uint _1004 = _1165 + 1u;
                if (int(_1004) < int(_733))
                {
                    _1001 = _1002;
                    _1003 = _1004;
                    _1005 = _1006;
                    _1007 = _1008;
                    _1009 = _1010;
                    _1011 = _823;
                    _1012 = _825;
                    _1013 = _827;
                    _1014 = _829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _822 = _823;
            _824 = _825;
            _826 = _827;
            _828 = _829;
        }
        else
        {
            _822 = 0.0;
            _824 = 0.0;
            _826 = 0.0;
            _828 = 0.0;
        }
        float _830 = _826 - _828;
        float _831 = _822 - _824;
        float _837 = 1.0 - (((_830 * _822) - (_826 * _831)) / (_830 - _831));
        float _838 = _837 * _666;
        float _839 = _837 * _669;
        float _693 = _648 - _838;
        float _696 = _649 - _839;
        float frontier_phi_36_41_ladder;
        float frontier_phi_36_41_ladder_1;
        if (_688 > 3.0)
        {
            float _1030 = _688 - trunc(_688);
            frontier_phi_36_41_ladder = (_1030 * _839) + _696;
            frontier_phi_36_41_ladder_1 = (_1030 * _838) + _693;
        }
        else
        {
            frontier_phi_36_41_ladder = _696;
            frontier_phi_36_41_ladder_1 = _693;
        }
        _691 = frontier_phi_36_41_ladder_1;
        _694 = frontier_phi_36_41_ladder;
    }
    float _701 = ((_691 - _648) / cbTextureTilingScale._m0[2u].x) + _565;
    float _702 = ((_694 - _649) / cbTextureTilingScale._m0[2u].y) + _566;
    uvec2 _714 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, int(0u)));
    bool _719 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _791;
    if (_719)
    {
        float _750 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _756 = (_564 * _549) - (_561 * _552);
        float _759 = (_558 * _552) - (_564 * _546);
        float _762 = (_561 * _546) - (_558 * _549);
        float _789 = ((log2((((float(_714.y) * 0.5) * float(_714.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_759 * _759) + (_762 * _762)) + (_756 * _756)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_750 * gl_WorldRayDirectionEXT.x, _750 * gl_WorldRayDirectionEXT.y, _750 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _791 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    }
    else
    {
        _791 = 0.0;
    }
    vec4 _795 = textureLod(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _701) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _702) + cbTextureTilingScale._m0[3u].w), _791);
    float _800 = _795.x * cbMtdParam._m0[9u].x;
    float _801 = _795.y * cbMtdParam._m0[9u].y;
    float _802 = _795.z * cbMtdParam._m0[9u].z;
    uvec2 _814 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, int(0u)));
    float _818 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _819 = _818 * gl_WorldRayDirectionEXT.x;
    float _820 = _818 * gl_WorldRayDirectionEXT.y;
    float _821 = _818 * gl_WorldRayDirectionEXT.z;
    float _885;
    if (_719)
    {
        float _851 = (_564 * _549) - (_561 * _552);
        float _854 = (_558 * _552) - (_564 * _546);
        float _857 = (_561 * _546) - (_558 * _549);
        float _883 = ((log2((((float(_814.y) * 0.5) * float(_814.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_854 * _854) + (_857 * _857)) + (_851 * _851)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_819, _820, _821), vec3(_577, _579, _580))));
        _885 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    }
    else
    {
        _885 = 0.0;
    }
    vec4 _888 = textureLod(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _701) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _702) + cbTextureTilingScale._m0[1u].w), _885);
    float _892 = _888.z;
    float _895 = (_888.x * 2.0) + (-1.0);
    float _897 = (_888.y * 2.0) + (-1.0);
    float _898 = dot(vec2(_895, _897), vec2(_895, _897));
    float _1418 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _903 = sqrt(1.0 - (isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0))));
    float _906 = fma(_903, _577, fma(_897, _593, _895 * _613));
    float _909 = fma(_903, _579, fma(_897, _594, _895 * _614));
    float _912 = fma(_903, _580, fma(_897, _595, _895 * _615));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _923 * _917;
    float _925 = _923 * _918;
    float _926 = _923 * _919;
    float _938 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _939 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _940 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _941 = (-0.0) - _819;
    float _942 = (-0.0) - _820;
    float _943 = (-0.0) - _821;
    float _949 = float(gl_LaunchIDEXT.x);
    float _950 = float(gl_LaunchIDEXT.y);
    float _953 = float(gl_LaunchSizeEXT.x);
    float _967 = fract(fract(sin(dot(vec2(_949 / _953, _950 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _980 = fract(fract(sin(dot(vec2((_949 + 128.0) / _953, (_950 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _63._m0 = 1u;
    uvec4 _990 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _991 = _990.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _991, _990.w, _991, vec3(_938, _939, _940), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (_63._m0 == 0u)
    {
        float _1044 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_924, _925, _926));
        float _1429 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1047 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        float _1066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _892) * 0.949999988079071044921875);
        float _1067 = _1066 * _1066;
        float _1068 = g_sceneCB._m0[4u].x - _819;
        float _1069 = g_sceneCB._m0[4u].y - _820;
        float _1070 = g_sceneCB._m0[4u].z - _821;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1075 = _1074 * _1068;
        float _1076 = _1074 * _1069;
        float _1077 = _1074 * _1070;
        float _1078 = dot(vec3(_924, _925, _926), vec3(g_sceneCB._m0[4u].xyz));
        float _1440 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1081 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        float _1082 = dot(vec3(_924, _925, _926), vec3(_941, _942, _943));
        float _1451 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1085 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        float _1086 = dot(vec3(_924, _925, _926), vec3(_1075, _1076, _1077));
        float _1462 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1089 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        float _1090 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1075, _1076, _1077));
        float _1473 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1067 * _1067;
        float _1098 = ((_1089 * _1089) * (_1094 + (-1.0))) + 1.0;
        float _1110 = (exp2(log2(1.0 - (isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1112 = 1.0 - _1067;
        float _1123 = (0.5 / (((_1085 * ((_1081 * _1112) + _1067)) + 9.9999999392252902907785028219223e-09) + (((_1085 * _1112) + _1067) * _1081))) * _1081;
        float _1484 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1125 = (isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0))) * (_1094 / ((_1098 * _1098) * 3.141590118408203125));
        _1132 = ((_800 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1047;
        _1133 = ((_801 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1047;
        _1134 = ((_802 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1047;
        _1135 = (_1110 * g_sceneCB._m0[5u].x) * _1125;
        _1136 = (_1110 * g_sceneCB._m0[5u].y) * _1125;
        _1137 = (_1110 * g_sceneCB._m0[5u].z) * _1125;
    }
    else
    {
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    bool _1139 = abs(_925) < 0.89999997615814208984375;
    float _1141 = float(_1139);
    float _1142 = _1139 ? 0.0 : 1.0;
    float _1145 = (_1141 * _926) - (_1142 * _925);
    float _1146 = _1142 * _924;
    float _1148 = (-0.0) - (_924 * _1141);
    float _1152 = inversesqrt(dot(vec3(_1145, _1146, _1148), vec3(_1145, _1146, _1148)));
    float _1153 = _1145 * _1152;
    float _1154 = _1146 * _1152;
    float _1155 = _1152 * _1148;
    float _1158 = (_1154 * _926) - (_1155 * _925);
    float _1161 = (_1155 * _924) - (_1153 * _926);
    float _1164 = (_1153 * _925) - (_1154 * _924);
    float _1168;
    float _1176;
    float _1167 = 0.0;
    uint _1169 = 0u;
    float _1173;
    bool _1175;
    for (;;)
    {
        _1173 = (float(_1169) + _967) * 0.03125;
        _1175 = _1169 == 0u;
        float frontier_phi_52_pred;
        if (_1175)
        {
            frontier_phi_52_pred = 0.0;
        }
        else
        {
            float _1308;
            float _1309;
            uint _1311;
            _1308 = 0.0;
            _1309 = 0.5;
            _1311 = _1169;
            float _1177;
            for (;;)
            {
                _1177 = ((_1311 & 1u) != 0u) ? (_1309 + _1308) : _1308;
                uint _1312 = _1311 >> 1u;
                if (_1312 == 0u)
                {
                    break;
                }
                else
                {
                    _1308 = _1177;
                    _1309 *= 0.5;
                    _1311 = _1312;
                }
            }
            frontier_phi_52_pred = _1177;
        }
        _1176 = frontier_phi_52_pred;
        float _1178 = _1176 + _980;
        float _1182 = sqrt(_1173);
        float _1183 = ((_1178 > 1.0) ? (_1178 + (-1.0)) : _1178) * 6.283185482025146484375;
        float _1186 = cos(_1183) * _1182;
        float _1188 = sin(_1183) * _1182;
        float _1190 = sqrt(1.0 - _1173);
        float _1203 = ((_1190 * _924) + (_1186 * _1158)) + (_1188 * _1153);
        float _1204 = ((_1190 * _925) + (_1186 * _1161)) + (_1188 * _1154);
        float _1205 = ((_1190 * _926) + (_1186 * _1164)) + (_1188 * _1155);
        _62._m0 = 1u;
        uvec4 _1209 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1210 = _1209.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1210, _1209.w, _1210, vec3(_938, _939, _940), 9.9999997473787516355514526367188e-05, vec3(_1203, _1204, _1205), 10000.0, 1);
        float _1216 = dot(vec3(_924, _925, _926), vec3(_1203, _1204, _1205));
        float _1495 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1219 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
        _1168 = ((float(_62._m0 == 0u) * _1219) / (_1219 * 0.3183098733425140380859375)) + _1167;
        uint _1170 = _1169 + 1u;
        if (_1170 == 32u)
        {
            break;
        }
        else
        {
            _1167 = _1168;
            _1169 = _1170;
            continue;
        }
    }
    float _1226 = _1168 * 0.009947183541953563690185546875;
    float _1231 = dot(vec3(_819, _820, _821), vec3(_924, _925, _926)) * 2.0;
    vec4 _1244 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_819 - (_1231 * _924), _820 - (_1231 * _925), _821 - (_1231 * _926)), 4.0 - (_892 * 4.0));
    float _1249 = dot(vec3(_941, _942, _943), vec3(_924, _925, _926));
    float _1506 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1258 = (exp2(log2(1.0 - (isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1264 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_924, _925, _926), 0.0);
    float _1275 = (_1135 + _1132) + (((_1264.x * _800) + (_1258 * _1244.x)) * _1226);
    float _1279 = (_1136 + _1133) + (((_1264.y * _801) + (_1258 * _1244.y)) * _1226);
    float _1283 = (_1137 + _1134) + (((_1264.z * _802) + (_1258 * _1244.z)) * _1226);
    float _1517 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    float _1528 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1539 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
    bool _1291 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1302;
    _1302.x = _1291 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0)));
    _1302.y = _1291 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0)));
    _1302.z = _1291 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0)));
    payload._m0 = _1302;
}


