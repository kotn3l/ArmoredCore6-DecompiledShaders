#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _48
{
    vec3 _m0;
};

struct _52
{
    vec2 _m0;
};

struct _55
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_E_Billboard_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _48 payload;
hitAttributeEXT _52 hit;
layout(location = 1) rayPayloadEXT _55 _57;
layout(location = 2) rayPayloadEXT _55 _58;

vec3 _943;

void main()
{
    float _66 = float(gl_LaunchSizeEXT.y);
    float _96 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _97 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _98 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    uvec4 _116 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _117 = _116.y;
    uint _157;
    uint _159;
    uint _160;
    if (_116.x == 0u)
    {
        uint _125 = (_117 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _134 = uvec3(texelFetch(l_geomIndexBuffer, int(_125)).x, texelFetch(l_geomIndexBuffer, int(_125 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_125 + 2u)).x);
        _157 = _134.x;
        _159 = _134.y;
        _160 = _134.z;
    }
    else
    {
        uint _138 = uint(gl_PrimitiveID) * 6u;
        uint _140 = _138 & 4294967292u;
        uint _143 = (_117 + _140) >> 2u;
        uvec2 _150 = uvec2(texelFetch(l_geomIndexBuffer, int(_143)).x, texelFetch(l_geomIndexBuffer, int(_143 + 1u)).x);
        uint _151 = _150.x;
        uint _152 = _150.y;
        uint _154 = _151 >> 16u;
        uint _155 = _152 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_140 == _138)
        {
            frontier_phi_3_2_ladder = _155;
            frontier_phi_3_2_ladder_1 = _151 & 65535u;
            frontier_phi_3_2_ladder_2 = _154;
        }
        else
        {
            frontier_phi_3_2_ladder = _152 >> 16u;
            frontier_phi_3_2_ladder_1 = _154;
            frontier_phi_3_2_ladder_2 = _155;
        }
        _157 = frontier_phi_3_2_ladder_1;
        _159 = frontier_phi_3_2_ladder_2;
        _160 = frontier_phi_3_2_ladder;
    }
    uvec4 _164 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _165 = _164.x;
    uint _166 = _164.z;
    bool _167 = _166 != 0u;
    bool _169 = _116.w == 0u;
    bool _170 = _167 || _169;
    uint _172 = (_165 * _157) + 12u;
    uint _196;
    uint _197;
    uint _198;
    uint _199;
    if (_170)
    {
        uvec4 _175 = texelFetch(l_geomAttrib_0, int(_172 >> 2u));
        uint _176 = _175.x;
        _196 = _176 & 255u;
        _197 = (_176 >> 8u) & 255u;
        _198 = (_176 >> 16u) & 255u;
        _199 = 20u;
    }
    else
    {
        uint _184 = _172 >> 2u;
        uvec2 _190 = uvec2(texelFetch(l_geomAttrib_0, int(_184)).x, texelFetch(l_geomAttrib_0, int(_184 + 1u)).x);
        uint _191 = _190.x;
        _196 = _191 & 65535u;
        _197 = _191 >> 16u;
        _198 = _190.y & 65535u;
        _199 = 24u;
    }
    bool _205 = _166 == 0u;
    uint _206;
    if (_205)
    {
        _206 = _199;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_169)
        {
            frontier_phi_9_10_ladder = _199 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _199 + 8u;
        }
        _206 = frontier_phi_9_10_ladder;
    }
    uvec4 _217 = texelFetch(l_geomAttrib_0, int((((_165 * _157) + 4u) + (_167 ? (_206 + 4u) : _206)) >> 2u));
    uint _218 = _217.x;
    float _222 = float(int(uint(int(_218 << 16u) >> int(16u))));
    float _223 = float(int(uint(int(_218) >> int(16u))));
    uint _225 = (_165 * _159) + 12u;
    uint _246;
    uint _247;
    uint _248;
    uint _249;
    if (_170)
    {
        uvec4 _227 = texelFetch(l_geomAttrib_0, int(_225 >> 2u));
        uint _228 = _227.x;
        _246 = _228 & 255u;
        _247 = (_228 >> 8u) & 255u;
        _248 = (_228 >> 16u) & 255u;
        _249 = 20u;
    }
    else
    {
        uint _234 = _225 >> 2u;
        uvec2 _240 = uvec2(texelFetch(l_geomAttrib_0, int(_234)).x, texelFetch(l_geomAttrib_0, int(_234 + 1u)).x);
        uint _241 = _240.x;
        _246 = _241 & 65535u;
        _247 = _241 >> 16u;
        _248 = _240.y & 65535u;
        _249 = 24u;
    }
    uint _253;
    if (_205)
    {
        _253 = _249;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_169)
        {
            frontier_phi_16_17_ladder = _249 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _249 + 8u;
        }
        _253 = frontier_phi_16_17_ladder;
    }
    uvec4 _262 = texelFetch(l_geomAttrib_0, int((((_165 * _159) + 4u) + (_167 ? (_253 + 4u) : _253)) >> 2u));
    uint _263 = _262.x;
    float _267 = float(int(uint(int(_263 << 16u) >> int(16u))));
    float _268 = float(int(uint(int(_263) >> int(16u))));
    uint _270 = (_165 * _160) + 12u;
    uint _291;
    uint _292;
    uint _293;
    uint _294;
    if (_170)
    {
        uvec4 _272 = texelFetch(l_geomAttrib_0, int(_270 >> 2u));
        uint _273 = _272.x;
        _291 = _273 & 255u;
        _292 = (_273 >> 8u) & 255u;
        _293 = (_273 >> 16u) & 255u;
        _294 = 20u;
    }
    else
    {
        uint _279 = _270 >> 2u;
        uvec2 _285 = uvec2(texelFetch(l_geomAttrib_0, int(_279)).x, texelFetch(l_geomAttrib_0, int(_279 + 1u)).x);
        uint _286 = _285.x;
        _291 = _286 & 65535u;
        _292 = _286 >> 16u;
        _293 = _285.y & 65535u;
        _294 = 24u;
    }
    uint _298;
    if (_205)
    {
        _298 = _294;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_169)
        {
            frontier_phi_23_24_ladder = _294 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _294 + 8u;
        }
        _298 = frontier_phi_23_24_ladder;
    }
    uvec4 _307 = texelFetch(l_geomAttrib_0, int((((_165 * _160) + 4u) + (_167 ? (_298 + 4u) : _298)) >> 2u));
    uint _308 = _307.x;
    float _312 = float(int(uint(int(_308 << 16u) >> int(16u))));
    float _313 = float(int(uint(int(_308) >> int(16u))));
    bool _315 = _116.z == 0u;
    float _351;
    float _352;
    float _353;
    if (_315)
    {
        uint _318 = _157 * 3u;
        uvec3 _327 = uvec3(texelFetch(l_geomPositionBuffer, int(_318)).x, texelFetch(l_geomPositionBuffer, int(_318 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_318 + 2u)).x);
        _351 = uintBitsToFloat(_327.x);
        _352 = uintBitsToFloat(_327.y);
        _353 = uintBitsToFloat(_327.z);
    }
    else
    {
        uint _335 = _157 * 2u;
        uvec2 _341 = uvec2(texelFetch(l_geomPositionBuffer, int(_335)).x, texelFetch(l_geomPositionBuffer, int(_335 + 1u)).x);
        uint _342 = _341.x;
        _351 = unpackHalf2x16(_342).x;
        _352 = unpackHalf2x16(_342 >> 16u).x;
        _353 = unpackHalf2x16(_341.y).x;
    }
    float _389;
    float _390;
    float _391;
    if (_315)
    {
        uint _356 = _159 * 3u;
        uvec3 _365 = uvec3(texelFetch(l_geomPositionBuffer, int(_356)).x, texelFetch(l_geomPositionBuffer, int(_356 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_356 + 2u)).x);
        _389 = uintBitsToFloat(_365.x);
        _390 = uintBitsToFloat(_365.y);
        _391 = uintBitsToFloat(_365.z);
    }
    else
    {
        uint _373 = _159 * 2u;
        uvec2 _379 = uvec2(texelFetch(l_geomPositionBuffer, int(_373)).x, texelFetch(l_geomPositionBuffer, int(_373 + 1u)).x);
        uint _380 = _379.x;
        _389 = unpackHalf2x16(_380).x;
        _390 = unpackHalf2x16(_380 >> 16u).x;
        _391 = unpackHalf2x16(_379.y).x;
    }
    float _427;
    float _428;
    float _429;
    if (_315)
    {
        uint _394 = _160 * 3u;
        uvec3 _403 = uvec3(texelFetch(l_geomPositionBuffer, int(_394)).x, texelFetch(l_geomPositionBuffer, int(_394 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_394 + 2u)).x);
        _427 = uintBitsToFloat(_403.x);
        _428 = uintBitsToFloat(_403.y);
        _429 = uintBitsToFloat(_403.z);
    }
    else
    {
        uint _411 = _160 * 2u;
        uvec2 _417 = uvec2(texelFetch(l_geomPositionBuffer, int(_411)).x, texelFetch(l_geomPositionBuffer, int(_411 + 1u)).x);
        uint _418 = _417.x;
        _427 = unpackHalf2x16(_418).x;
        _428 = unpackHalf2x16(_418 >> 16u).x;
        _429 = unpackHalf2x16(_417.y).x;
    }
    float _432 = (1.0 - hit._m0.x) - hit._m0.y;
    float _473 = _389 - _351;
    float _474 = _390 - _352;
    float _475 = _391 - _353;
    float _478 = fma(_475, gl_ObjectToWorldEXT[2u].x, fma(_474, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _473));
    float _481 = fma(_475, gl_ObjectToWorldEXT[2u].y, fma(_474, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _473));
    float _484 = fma(_475, gl_ObjectToWorldEXT[2u].z, fma(_474, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _473));
    float _485 = _427 - _351;
    float _486 = _428 - _352;
    float _487 = _429 - _353;
    float _490 = fma(_487, gl_ObjectToWorldEXT[2u].x, fma(_486, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _485));
    float _493 = fma(_487, gl_ObjectToWorldEXT[2u].y, fma(_486, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _485));
    float _496 = fma(_487, gl_ObjectToWorldEXT[2u].z, fma(_486, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _485));
    float _503 = (((float(_196) * _432) + (-127.0)) + (float(_246) * hit._m0.x)) + (float(_291) * hit._m0.y);
    float _506 = (((float(_197) * _432) + (-127.0)) + (float(_247) * hit._m0.x)) + (float(_292) * hit._m0.y);
    float _509 = (((float(_198) * _432) + (-127.0)) + (float(_248) * hit._m0.x)) + (float(_293) * hit._m0.y);
    float _510 = _503 * 0.0078740157186985015869140625;
    float _512 = _506 * 0.0078740157186985015869140625;
    float _513 = _509 * 0.0078740157186985015869140625;
    uvec2 _535 = uvec2(textureSize(M_E_Billboard_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _544 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _545 = _544 * gl_WorldRayDirectionEXT.x;
    float _546 = _544 * gl_WorldRayDirectionEXT.y;
    float _547 = _544 * gl_WorldRayDirectionEXT.z;
    float _599;
    if (floatBitsToUint(g_sceneCB._m0[7u]).x == 1u)
    {
        float _561 = (_496 * _481) - (_493 * _484);
        float _564 = (_490 * _484) - (_496 * _478);
        float _567 = (_493 * _478) - (_490 * _481);
        float _596 = ((log2((((float(_535.y) * 0.5) * float(_535.x)) * abs((((_313 - _223) * (_267 - _222)) - ((_312 - _222) * (_268 - _223))) * 2.384185791015625e-07)) / (sqrt(((_564 * _564) + (_567 * _567)) + (_561 * _561)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(sqrt(((_97 * _97) + (_96 * _96)) + (_98 * _98)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _66)))))) / abs(dot(vec3(_545, _546, _547), vec3(_510, _512, _513))));
        _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    }
    else
    {
        _599 = 0.0;
    }
    vec4 _603 = textureLod(sampler2D(M_E_Billboard_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_267 * hit._m0.x) + (_222 * _432)) + (_312 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_268 * hit._m0.x) + (_223 * _432)) + (_313 * hit._m0.y)) * 0.00048828125) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _599);
    float _609 = (cbMtdParam._m0[9u].x * cbMtdParam._m0[10u].w) * _603.x;
    float _611 = (cbMtdParam._m0[9u].y * cbMtdParam._m0[10u].w) * _603.y;
    float _613 = (cbMtdParam._m0[9u].z * cbMtdParam._m0[10u].w) * _603.z;
    float _624 = (1.0 - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].y);
    float _1022 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
    float _633 = (1.0 - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[11u].w);
    float _1033 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
    float _638 = _609 - (_634 * _609);
    float _639 = _611 - (_634 * _611);
    float _640 = _613 - (_634 * _613);
    float _650 = inversesqrt(dot(vec3(_510, _512, _513), vec3(_510, _512, _513)));
    float _651 = _650 * _510;
    float _652 = _650 * _512;
    float _653 = _650 * _513;
    float _665 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _666 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _667 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _668 = (-0.0) - _545;
    float _670 = (-0.0) - _546;
    float _671 = (-0.0) - _547;
    float _677 = float(gl_LaunchIDEXT.x);
    float _678 = float(gl_LaunchIDEXT.y);
    float _681 = float(gl_LaunchSizeEXT.x);
    float _695 = fract(fract(sin(dot(vec2(_677 / _681, _678 / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _708 = fract(fract(sin(dot(vec2((_677 + 128.0) / _681, (_678 + 128.0) / _66), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _58._m0 = 1u;
    uvec4 _718 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _719 = _718.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _719, _718.w, _719, vec3(_665, _666, _667), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _785;
    float _786;
    float _787;
    if (_58._m0 == 0u)
    {
        float _740 = g_sceneCB._m0[4u].x - _545;
        float _741 = g_sceneCB._m0[4u].y - _546;
        float _742 = g_sceneCB._m0[4u].z - _547;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _750 = dot(vec3(_651, _652, _653), vec3(g_sceneCB._m0[4u].xyz));
        float _1044 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _753 = isnan(1.0) ? _1044 : (isnan(_1044) ? 1.0 : min(_1044, 1.0));
        float _754 = dot(vec3(_651, _652, _653), vec3(_668, _670, _671));
        float _1055 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_740 * _746, _741 * _746, _742 * _746));
        float _1066 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _769 = (exp2(log2(1.0 - (isnan(1.0) ? _1066 : (isnan(_1066) ? 1.0 : min(_1066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _775 = (0.5 / ((_753 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0))))) * _753;
        float _1077 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _777 = (isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0))) * 0.31831014156341552734375;
        _785 = (_769 * g_sceneCB._m0[5u].x) * _777;
        _786 = (_769 * g_sceneCB._m0[5u].y) * _777;
        _787 = (_769 * g_sceneCB._m0[5u].z) * _777;
    }
    else
    {
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    bool _789 = abs(_652) < 0.89999997615814208984375;
    float _791 = float(_789);
    float _792 = _789 ? 0.0 : 1.0;
    float _795 = (_791 * _653) - (_792 * _652);
    float _796 = _792 * _651;
    float _798 = (-0.0) - (_651 * _791);
    float _802 = inversesqrt(dot(vec3(_795, _796, _798), vec3(_795, _796, _798)));
    float _803 = _795 * _802;
    float _804 = _796 * _802;
    float _805 = _802 * _798;
    float _808 = (_804 * _653) - (_805 * _652);
    float _811 = (_805 * _651) - (_803 * _653);
    float _814 = (_803 * _652) - (_804 * _651);
    float _816;
    float _824;
    float _815 = 0.0;
    uint _817 = 0u;
    float _821;
    bool _823;
    for (;;)
    {
        _821 = (float(_817) + _695) * 0.03125;
        _823 = _817 == 0u;
        float frontier_phi_41_pred;
        if (_823)
        {
            frontier_phi_41_pred = 0.0;
        }
        else
        {
            float _948;
            float _949;
            uint _951;
            _948 = 0.0;
            _949 = 0.5;
            _951 = _817;
            float _825;
            for (;;)
            {
                _825 = ((_951 & 1u) != 0u) ? (_949 + _948) : _948;
                uint _952 = _951 >> 1u;
                if (_952 == 0u)
                {
                    break;
                }
                else
                {
                    _948 = _825;
                    _949 *= 0.5;
                    _951 = _952;
                }
            }
            frontier_phi_41_pred = _825;
        }
        _824 = frontier_phi_41_pred;
        float _826 = _824 + _708;
        float _831 = sqrt(_821);
        float _832 = ((_826 > 1.0) ? (_826 + (-1.0)) : _826) * 6.283185482025146484375;
        float _835 = cos(_832) * _831;
        float _837 = sin(_832) * _831;
        float _839 = sqrt(1.0 - _821);
        float _852 = ((_839 * _651) + (_835 * _808)) + (_837 * _803);
        float _853 = ((_839 * _652) + (_835 * _811)) + (_837 * _804);
        float _854 = ((_839 * _653) + (_835 * _814)) + (_837 * _805);
        _57._m0 = 1u;
        uvec4 _858 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _859 = _858.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _859, _858.w, _859, vec3(_665, _666, _667), 9.9999997473787516355514526367188e-05, vec3(_852, _853, _854), 10000.0, 1);
        float _865 = dot(vec3(_651, _652, _653), vec3(_852, _853, _854));
        float _1088 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _868 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _816 = ((float(_57._m0 == 0u) * _868) / (_868 * 0.3183098733425140380859375)) + _815;
        uint _818 = _817 + 1u;
        if (_818 == 32u)
        {
            break;
        }
        else
        {
            _815 = _816;
            _817 = _818;
            continue;
        }
    }
    float _877 = _816 * 0.009947183541953563690185546875;
    float _882 = dot(vec3(_545, _546, _547), vec3(_651, _652, _653)) * 2.0;
    vec4 _894 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_545 - (_882 * _651), _546 - (_882 * _652), _547 - (_882 * _653)), 4.0);
    float _899 = dot(vec3(_668, _670, _671), vec3(_651, _652, _653));
    float _1099 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _908 = (exp2(log2(1.0 - (isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _917 = (((((_609 * cbMtdParam._m0[10u].y) - _638) * _625) + _638) + _785) + ((_894.x * _877) * _908);
    float _920 = (((((_611 * cbMtdParam._m0[10u].y) - _639) * _625) + _639) + _786) + ((_894.y * _877) * _908);
    float _923 = (((((_613 * cbMtdParam._m0[10u].y) - _640) * _625) + _640) + _787) + ((_894.z * _877) * _908);
    float _1110 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _1121 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _1132 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    bool _931 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _942;
    _942.x = _931 ? ((_503 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0)));
    _942.y = _931 ? ((_506 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0)));
    _942.z = _931 ? ((_509 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0)));
    payload._m0 = _942;
}


