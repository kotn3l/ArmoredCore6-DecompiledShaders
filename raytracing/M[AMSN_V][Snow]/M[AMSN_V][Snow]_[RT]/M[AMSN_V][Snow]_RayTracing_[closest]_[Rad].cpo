#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1407;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _157 & 65535u;
            frontier_phi_3_2_ladder_2 = _161;
        }
        else
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _158 >> 16u;
        }
        _163 = frontier_phi_3_2_ladder_1;
        _165 = frontier_phi_3_2_ladder;
        _166 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    bool _175 = _122.w == 0u;
    bool _176 = _173 || _175;
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    bool _228 = _172 == 0u;
    uint _229;
    if (_228)
    {
        _229 = _205 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_175)
        {
            frontier_phi_9_10_ladder = _205 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _205 + 12u;
        }
        _229 = frontier_phi_9_10_ladder;
    }
    uvec4 _237 = texelFetch(l_geomAttrib_0, int(((_177 + 4u) + (_173 ? (_229 + 4u) : _229)) >> 2u));
    uint _238 = _237.x;
    float _242 = float(int(uint(int(_238 << 16u) >> int(16u))));
    float _243 = float(int(uint(int(_238) >> int(16u))));
    uint _244 = _171 * _165;
    uint _245 = _244 + 12u;
    uint _266;
    uint _267;
    uint _268;
    uint _269;
    if (_176)
    {
        uvec4 _247 = texelFetch(l_geomAttrib_0, int(_245 >> 2u));
        uint _248 = _247.x;
        _266 = _248 & 255u;
        _267 = (_248 >> 8u) & 255u;
        _268 = (_248 >> 16u) & 255u;
        _269 = 16u;
    }
    else
    {
        uint _254 = _245 >> 2u;
        uvec2 _260 = uvec2(texelFetch(l_geomAttrib_0, int(_254)).x, texelFetch(l_geomAttrib_0, int(_254 + 1u)).x);
        uint _261 = _260.x;
        _266 = _261 & 65535u;
        _267 = _261 >> 16u;
        _268 = _260.y & 65535u;
        _269 = 20u;
    }
    uvec4 _275 = texelFetch(l_geomAttrib_0, int((_269 + _244) >> 2u));
    uint _276 = _275.x;
    uint _288;
    if (_228)
    {
        _288 = _269 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_175)
        {
            frontier_phi_16_17_ladder = _269 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _269 + 12u;
        }
        _288 = frontier_phi_16_17_ladder;
    }
    uvec4 _296 = texelFetch(l_geomAttrib_0, int(((_244 + 4u) + (_173 ? (_288 + 4u) : _288)) >> 2u));
    uint _297 = _296.x;
    float _301 = float(int(uint(int(_297 << 16u) >> int(16u))));
    float _302 = float(int(uint(int(_297) >> int(16u))));
    uint _303 = _171 * _166;
    uint _304 = _303 + 12u;
    uint _325;
    uint _326;
    uint _327;
    uint _328;
    if (_176)
    {
        uvec4 _306 = texelFetch(l_geomAttrib_0, int(_304 >> 2u));
        uint _307 = _306.x;
        _325 = _307 & 255u;
        _326 = (_307 >> 8u) & 255u;
        _327 = (_307 >> 16u) & 255u;
        _328 = 16u;
    }
    else
    {
        uint _313 = _304 >> 2u;
        uvec2 _319 = uvec2(texelFetch(l_geomAttrib_0, int(_313)).x, texelFetch(l_geomAttrib_0, int(_313 + 1u)).x);
        uint _320 = _319.x;
        _325 = _320 & 65535u;
        _326 = _320 >> 16u;
        _327 = _319.y & 65535u;
        _328 = 20u;
    }
    uvec4 _334 = texelFetch(l_geomAttrib_0, int((_328 + _303) >> 2u));
    uint _335 = _334.x;
    uint _347;
    if (_228)
    {
        _347 = _328 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_175)
        {
            frontier_phi_23_24_ladder = _328 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _328 + 12u;
        }
        _347 = frontier_phi_23_24_ladder;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int(((_303 + 4u) + (_173 ? (_347 + 4u) : _347)) >> 2u));
    uint _356 = _355.x;
    float _360 = float(int(uint(int(_356 << 16u) >> int(16u))));
    float _361 = float(int(uint(int(_356) >> int(16u))));
    bool _363 = _122.z == 0u;
    float _399;
    float _400;
    float _401;
    if (_363)
    {
        uint _366 = _163 * 3u;
        uvec3 _375 = uvec3(texelFetch(l_geomPositionBuffer, int(_366)).x, texelFetch(l_geomPositionBuffer, int(_366 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_366 + 2u)).x);
        _399 = uintBitsToFloat(_375.x);
        _400 = uintBitsToFloat(_375.y);
        _401 = uintBitsToFloat(_375.z);
    }
    else
    {
        uint _383 = _163 * 2u;
        uvec2 _389 = uvec2(texelFetch(l_geomPositionBuffer, int(_383)).x, texelFetch(l_geomPositionBuffer, int(_383 + 1u)).x);
        uint _390 = _389.x;
        _399 = unpackHalf2x16(_390).x;
        _400 = unpackHalf2x16(_390 >> 16u).x;
        _401 = unpackHalf2x16(_389.y).x;
    }
    float _437;
    float _438;
    float _439;
    if (_363)
    {
        uint _404 = _165 * 3u;
        uvec3 _413 = uvec3(texelFetch(l_geomPositionBuffer, int(_404)).x, texelFetch(l_geomPositionBuffer, int(_404 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_404 + 2u)).x);
        _437 = uintBitsToFloat(_413.x);
        _438 = uintBitsToFloat(_413.y);
        _439 = uintBitsToFloat(_413.z);
    }
    else
    {
        uint _421 = _165 * 2u;
        uvec2 _427 = uvec2(texelFetch(l_geomPositionBuffer, int(_421)).x, texelFetch(l_geomPositionBuffer, int(_421 + 1u)).x);
        uint _428 = _427.x;
        _437 = unpackHalf2x16(_428).x;
        _438 = unpackHalf2x16(_428 >> 16u).x;
        _439 = unpackHalf2x16(_427.y).x;
    }
    float _475;
    float _476;
    float _477;
    if (_363)
    {
        uint _442 = _166 * 3u;
        uvec3 _451 = uvec3(texelFetch(l_geomPositionBuffer, int(_442)).x, texelFetch(l_geomPositionBuffer, int(_442 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_442 + 2u)).x);
        _475 = uintBitsToFloat(_451.x);
        _476 = uintBitsToFloat(_451.y);
        _477 = uintBitsToFloat(_451.z);
    }
    else
    {
        uint _459 = _166 * 2u;
        uvec2 _465 = uvec2(texelFetch(l_geomPositionBuffer, int(_459)).x, texelFetch(l_geomPositionBuffer, int(_459 + 1u)).x);
        uint _466 = _465.x;
        _475 = unpackHalf2x16(_466).x;
        _476 = unpackHalf2x16(_466 >> 16u).x;
        _477 = unpackHalf2x16(_465.y).x;
    }
    float _480 = (1.0 - hit._m0.x) - hit._m0.y;
    float _514 = (_301 - _242) * 0.00048828125;
    float _516 = (_302 - _243) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _520 = (_361 - _243) * 0.00048828125;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _544 = _439 - _401;
    float _547 = fma(_544, gl_ObjectToWorldEXT[2u].x, fma(_543, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _542));
    float _550 = fma(_544, gl_ObjectToWorldEXT[2u].y, fma(_543, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _542));
    float _553 = fma(_544, gl_ObjectToWorldEXT[2u].z, fma(_543, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _542));
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _556 = _477 - _401;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = (((_301 * hit._m0.x) + (_242 * _480)) + (_360 * hit._m0.y)) * 0.00048828125;
    float _567 = (((_302 * hit._m0.x) + (_243 * _480)) + (_361 * hit._m0.y)) * 0.00048828125;
    float _571 = (((float(_202) * _480) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _574 = (((float(_203) * _480) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = (((float(_204) * _480) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _578 = _571 * 0.0078740157186985015869140625;
    float _580 = _574 * 0.0078740157186985015869140625;
    float _581 = _577 * 0.0078740157186985015869140625;
    float _594 = ((((float(_214 & 255u) * _480) + (-127.0)) + (float(_276 & 255u) * hit._m0.x)) + (float(_335 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_214 >> 8u) & 255u) * _480) + (-127.0)) + (float((_276 >> 8u) & 255u) * hit._m0.x)) + (float((_335 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float((_214 >> 16u) & 255u) * _480) + (-127.0)) + (float((_276 >> 16u) & 255u) * hit._m0.x)) + (float((_335 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float(_214 >> 24u) * _480) + (-127.0)) + (float(_276 >> 24u) * hit._m0.x)) + (float(_335 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _607 = ((_595 * _581) - (_596 * _580)) * _597;
    float _608 = ((_596 * _578) - (_594 * _581)) * _597;
    float _609 = ((_594 * _580) - (_595 * _578)) * _597;
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    float _614 = _613 * _607;
    float _615 = _613 * _608;
    float _616 = _613 * _609;
    uvec2 _633 = uvec2(textureSize(M_AMSN_V_Snow_snp_0_Texture2D_1, int(0u)));
    bool _638 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _691;
    if (_638)
    {
        float _649 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _655 = (_565 * _550) - (_562 * _553);
        float _658 = (_559 * _553) - (_565 * _547);
        float _661 = (_562 * _547) - (_559 * _550);
        float _688 = ((log2((((float(_633.y) * 0.5) * float(_633.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_658 * _658) + (_661 * _661)) + (_655 * _655)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_649 * gl_WorldRayDirectionEXT.x, _649 * gl_WorldRayDirectionEXT.y, _649 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    }
    else
    {
        _691 = 0.0;
    }
    vec4 _695 = textureLod(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _566) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _567) + cbTextureTilingScale._m0[1u].w), _691);
    float _699 = _695.z;
    float _702 = (_695.x * 2.0) + (-1.0);
    float _704 = (_695.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _1494 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0))));
    float _713 = fma(_710, _578, fma(_704, _594, _702 * _614));
    float _716 = fma(_710, _580, fma(_704, _595, _702 * _615));
    float _719 = fma(_710, _581, fma(_704, _596, _702 * _616));
    float _728 = exp2(log2(inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719))) * _716) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _1505 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
    uvec2 _741 = uvec2(textureSize(M_AMSN_V_Snow_snp_0_Texture2D_0, int(0u)));
    float _792;
    if (_638)
    {
        float _752 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _758 = (_565 * _550) - (_562 * _553);
        float _761 = (_559 * _553) - (_565 * _547);
        float _764 = (_562 * _547) - (_559 * _550);
        float _790 = ((log2((((float(_741.y) * 0.5) * float(_741.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_761 * _761) + (_764 * _764)) + (_758 * _758)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_752 * gl_WorldRayDirectionEXT.x, _752 * gl_WorldRayDirectionEXT.y, _752 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    }
    else
    {
        _792 = 0.0;
    }
    vec4 _795 = textureLod(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _566) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _567) + cbTextureTilingScale._m0[0u].w), _792);
    uvec2 _811 = uvec2(textureSize(M_AMSN_V_Snow_snp_0_Texture2D_2, int(0u)));
    float _862;
    if (_638)
    {
        float _822 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _828 = (_565 * _550) - (_562 * _553);
        float _831 = (_559 * _553) - (_565 * _547);
        float _834 = (_562 * _547) - (_559 * _550);
        float _860 = ((log2((((float(_811.y) * 0.5) * float(_811.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_831 * _831) + (_834 * _834)) + (_828 * _828)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_822 * gl_WorldRayDirectionEXT.x, _822 * gl_WorldRayDirectionEXT.y, _822 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _862 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    }
    else
    {
        _862 = 0.0;
    }
    vec4 _864 = textureLod(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _566) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _567) + cbTextureTilingScale._m0[2u].w), _862);
    float _866 = _864.x;
    float _867 = _864.y;
    float _868 = _864.z;
    float _875 = ((_795.x - _866) * _729) + _866;
    float _876 = ((_795.y - _867) * _729) + _867;
    float _877 = ((_795.z - _868) * _729) + _868;
    uvec2 _889 = uvec2(textureSize(M_AMSN_V_Snow_snp_0_Texture2D_3, int(0u)));
    float _940;
    if (_638)
    {
        float _900 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _906 = (_565 * _550) - (_562 * _553);
        float _909 = (_559 * _553) - (_565 * _547);
        float _912 = (_562 * _547) - (_559 * _550);
        float _938 = ((log2((((float(_889.y) * 0.5) * float(_889.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_909 * _909) + (_912 * _912)) + (_906 * _906)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_900 * gl_WorldRayDirectionEXT.x, _900 * gl_WorldRayDirectionEXT.y, _900 * gl_WorldRayDirectionEXT.z), vec3(_578, _580, _581))));
        _940 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    }
    else
    {
        _940 = 0.0;
    }
    vec4 _942 = textureLod(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _566) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _567) + cbTextureTilingScale._m0[3u].w), _940);
    float _949 = (_942.x * 2.0) + (-1.0);
    float _950 = (_942.y * 2.0) + (-1.0);
    float _951 = dot(vec2(_949, _950), vec2(_949, _950));
    float _1531 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _959 = ((_942.z - _699) * _729) + _699;
    float _968 = ((sqrt(1.0 - (isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0)))) - _710) * _729) + _710;
    uvec2 _981 = uvec2(textureSize(M_AMSN_V_Snow_snp_0_Texture2D_4, int(0u)));
    float _985 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _986 = _985 * gl_WorldRayDirectionEXT.x;
    float _987 = _985 * gl_WorldRayDirectionEXT.y;
    float _988 = _985 * gl_WorldRayDirectionEXT.z;
    float _1032;
    if (_638)
    {
        float _998 = (_565 * _550) - (_562 * _553);
        float _1001 = (_559 * _553) - (_565 * _547);
        float _1004 = (_562 * _547) - (_559 * _550);
        float _1030 = ((log2((((float(_981.y) * 0.5) * float(_981.x)) * abs((_520 * _514) - (_519 * _516))) / (sqrt(((_1001 * _1001) + (_1004 * _1004)) + (_998 * _998)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_986, _987, _988), vec3(_578, _580, _581))));
        _1032 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    }
    else
    {
        _1032 = 0.0;
    }
    vec4 _1034 = textureLod(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _566) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _567) + cbTextureTilingScale._m0[4u].w), _1032);
    float _1044 = (((_949 - _702) * _729) + _702) + (((_1034.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _1045 = (((_950 - _704) * _729) + _704) + (((_1034.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _1048 = fma(_968, _578, fma(_1045, _594, _1044 * _614));
    float _1051 = fma(_968, _580, fma(_1045, _595, _1044 * _615));
    float _1054 = fma(_968, _581, fma(_1045, _596, _1044 * _616));
    float _1058 = inversesqrt(dot(vec3(_1048, _1051, _1054), vec3(_1048, _1051, _1054)));
    float _1059 = _1058 * _1048;
    float _1060 = _1058 * _1051;
    float _1061 = _1058 * _1054;
    float _1073 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1074 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1075 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1076 = (-0.0) - _986;
    float _1078 = (-0.0) - _987;
    float _1079 = (-0.0) - _988;
    float _1085 = float(gl_LaunchIDEXT.x);
    float _1086 = float(gl_LaunchIDEXT.y);
    float _1089 = float(gl_LaunchSizeEXT.x);
    float _1103 = fract(fract(sin(dot(vec2(_1085 / _1089, _1086 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1116 = fract(fract(sin(dot(vec2((_1085 + 128.0) / _1089, (_1086 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _64._m0 = 1u;
    uvec4 _1126 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1127 = _1126.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1127, _1126.w, _1127, vec3(_1073, _1074, _1075), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (_64._m0 == 0u)
    {
        float _1148 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1059, _1060, _1061));
        float _1547 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1151 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        float _1170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _959) * 0.949999988079071044921875);
        float _1171 = _1170 * _1170;
        float _1172 = g_sceneCB._m0[4u].x - _986;
        float _1173 = g_sceneCB._m0[4u].y - _987;
        float _1174 = g_sceneCB._m0[4u].z - _988;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1179 = _1178 * _1172;
        float _1180 = _1178 * _1173;
        float _1181 = _1178 * _1174;
        float _1182 = dot(vec3(_1059, _1060, _1061), vec3(g_sceneCB._m0[4u].xyz));
        float _1558 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1185 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        float _1186 = dot(vec3(_1059, _1060, _1061), vec3(_1076, _1078, _1079));
        float _1569 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1189 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        float _1190 = dot(vec3(_1059, _1060, _1061), vec3(_1179, _1180, _1181));
        float _1580 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1193 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        float _1194 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1179, _1180, _1181));
        float _1591 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1171 * _1171;
        float _1202 = ((_1193 * _1193) * (_1198 + (-1.0))) + 1.0;
        float _1214 = (exp2(log2(1.0 - (isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1216 = 1.0 - _1171;
        float _1227 = (0.5 / (((_1189 * ((_1185 * _1216) + _1171)) + 9.9999999392252902907785028219223e-09) + (((_1189 * _1216) + _1171) * _1185))) * _1185;
        float _1602 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1229 = (isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0))) * (_1198 / ((_1202 * _1202) * 3.141590118408203125));
        _1236 = ((_875 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1151;
        _1237 = ((_876 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1151;
        _1238 = ((_877 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1151;
        _1239 = (_1214 * g_sceneCB._m0[5u].x) * _1229;
        _1240 = (_1214 * g_sceneCB._m0[5u].y) * _1229;
        _1241 = (_1214 * g_sceneCB._m0[5u].z) * _1229;
    }
    else
    {
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    bool _1243 = abs(_1060) < 0.89999997615814208984375;
    float _1245 = float(_1243);
    float _1246 = _1243 ? 0.0 : 1.0;
    float _1249 = (_1245 * _1061) - (_1246 * _1060);
    float _1250 = _1246 * _1059;
    float _1252 = (-0.0) - (_1059 * _1245);
    float _1256 = inversesqrt(dot(vec3(_1249, _1250, _1252), vec3(_1249, _1250, _1252)));
    float _1257 = _1249 * _1256;
    float _1258 = _1250 * _1256;
    float _1259 = _1256 * _1252;
    float _1262 = (_1258 * _1061) - (_1259 * _1060);
    float _1265 = (_1259 * _1059) - (_1257 * _1061);
    float _1268 = (_1257 * _1060) - (_1258 * _1059);
    float _1270;
    float _1278;
    float _1269 = 0.0;
    uint _1271 = 0u;
    float _1275;
    bool _1277;
    for (;;)
    {
        _1275 = (float(_1271) + _1103) * 0.03125;
        _1277 = _1271 == 0u;
        float frontier_phi_49_pred;
        if (_1277)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1412;
            float _1413;
            uint _1415;
            _1412 = 0.0;
            _1413 = 0.5;
            _1415 = _1271;
            float _1279;
            for (;;)
            {
                _1279 = ((_1415 & 1u) != 0u) ? (_1413 + _1412) : _1412;
                uint _1416 = _1415 >> 1u;
                if (_1416 == 0u)
                {
                    break;
                }
                else
                {
                    _1412 = _1279;
                    _1413 *= 0.5;
                    _1415 = _1416;
                }
            }
            frontier_phi_49_pred = _1279;
        }
        _1278 = frontier_phi_49_pred;
        float _1280 = _1278 + _1116;
        float _1284 = sqrt(_1275);
        float _1285 = ((_1280 > 1.0) ? (_1280 + (-1.0)) : _1280) * 6.283185482025146484375;
        float _1288 = cos(_1285) * _1284;
        float _1290 = sin(_1285) * _1284;
        float _1292 = sqrt(1.0 - _1275);
        float _1305 = ((_1292 * _1059) + (_1288 * _1262)) + (_1290 * _1257);
        float _1306 = ((_1292 * _1060) + (_1288 * _1265)) + (_1290 * _1258);
        float _1307 = ((_1292 * _1061) + (_1288 * _1268)) + (_1290 * _1259);
        _63._m0 = 1u;
        uvec4 _1311 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1312 = _1311.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1312, _1311.w, _1312, vec3(_1073, _1074, _1075), 9.9999997473787516355514526367188e-05, vec3(_1305, _1306, _1307), 10000.0, 1);
        float _1318 = dot(vec3(_1059, _1060, _1061), vec3(_1305, _1306, _1307));
        float _1613 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1321 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1270 = ((float(_63._m0 == 0u) * _1321) / (_1321 * 0.3183098733425140380859375)) + _1269;
        uint _1272 = _1271 + 1u;
        if (_1272 == 32u)
        {
            break;
        }
        else
        {
            _1269 = _1270;
            _1271 = _1272;
            continue;
        }
    }
    float _1329 = _1270 * 0.009947183541953563690185546875;
    float _1334 = dot(vec3(_986, _987, _988), vec3(_1059, _1060, _1061)) * 2.0;
    vec4 _1348 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_986 - (_1334 * _1059), _987 - (_1334 * _1060), _988 - (_1334 * _1061)), 4.0 - (_959 * 4.0));
    float _1353 = dot(vec3(_1076, _1078, _1079), vec3(_1059, _1060, _1061));
    float _1624 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1362 = (exp2(log2(1.0 - (isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1368 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1059, _1060, _1061), 0.0);
    float _1379 = (_1239 + _1236) + (((_1368.x * _875) + (_1362 * _1348.x)) * _1329);
    float _1383 = (_1240 + _1237) + (((_1368.y * _876) + (_1362 * _1348.y)) * _1329);
    float _1387 = (_1241 + _1238) + (((_1368.z * _877) + (_1362 * _1348.z)) * _1329);
    float _1635 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
    float _1646 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
    float _1657 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    bool _1395 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1406;
    _1406.x = _1395 ? ((_571 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0)));
    _1406.y = _1395 ? ((_574 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0)));
    _1406.z = _1395 ? ((_577 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0)));
    payload._m0 = _1406;
}


