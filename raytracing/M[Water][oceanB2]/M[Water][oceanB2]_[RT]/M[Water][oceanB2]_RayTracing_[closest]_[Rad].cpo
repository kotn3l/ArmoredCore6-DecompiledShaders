#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _56
{
    vec3 _m0;
};

struct _60
{
    vec2 _m0;
};

struct _63
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB2_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _56 payload;
hitAttributeEXT _60 hit;
layout(location = 1) rayPayloadEXT _63 _65;
layout(location = 2) rayPayloadEXT _63 _66;

vec3 _1702;

void main()
{
    float _80 = float(gl_LaunchSizeEXT.y);
    float _108 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _109 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _117 = sqrt(((_109 * _109) + (_108 * _108)) + (_110 * _110)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _80)))));
    uvec4 _128 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _129 = _128.y;
    uint _169;
    uint _171;
    uint _172;
    if (_128.x == 0u)
    {
        uint _137 = (_129 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _146 = uvec3(texelFetch(l_geomIndexBuffer, int(_137)).x, texelFetch(l_geomIndexBuffer, int(_137 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_137 + 2u)).x);
        _169 = _146.x;
        _171 = _146.y;
        _172 = _146.z;
    }
    else
    {
        uint _150 = uint(gl_PrimitiveID) * 6u;
        uint _152 = _150 & 4294967292u;
        uint _155 = (_129 + _152) >> 2u;
        uvec2 _162 = uvec2(texelFetch(l_geomIndexBuffer, int(_155)).x, texelFetch(l_geomIndexBuffer, int(_155 + 1u)).x);
        uint _163 = _162.x;
        uint _164 = _162.y;
        uint _166 = _163 >> 16u;
        uint _167 = _164 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_152 == _150)
        {
            frontier_phi_3_2_ladder = _166;
            frontier_phi_3_2_ladder_1 = _163 & 65535u;
            frontier_phi_3_2_ladder_2 = _167;
        }
        else
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _166;
            frontier_phi_3_2_ladder_2 = _164 >> 16u;
        }
        _169 = frontier_phi_3_2_ladder_1;
        _171 = frontier_phi_3_2_ladder;
        _172 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _176 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _177 = _176.x;
    uint _178 = _176.z;
    bool _179 = _178 != 0u;
    bool _181 = _128.w == 0u;
    bool _182 = _179 || _181;
    uint _183 = _177 * _169;
    uint _184 = _183 + 12u;
    uint _208;
    uint _209;
    uint _210;
    uint _211;
    if (_182)
    {
        uvec4 _187 = texelFetch(l_geomAttrib_0, int(_184 >> 2u));
        uint _188 = _187.x;
        _208 = _188 & 255u;
        _209 = (_188 >> 8u) & 255u;
        _210 = (_188 >> 16u) & 255u;
        _211 = 16u;
    }
    else
    {
        uint _196 = _184 >> 2u;
        uvec2 _202 = uvec2(texelFetch(l_geomAttrib_0, int(_196)).x, texelFetch(l_geomAttrib_0, int(_196 + 1u)).x);
        uint _203 = _202.x;
        _208 = _203 & 65535u;
        _209 = _203 >> 16u;
        _210 = _202.y & 65535u;
        _211 = 20u;
    }
    uvec4 _219 = texelFetch(l_geomAttrib_0, int((_211 + _183) >> 2u));
    uint _220 = _219.x;
    bool _234 = _178 == 0u;
    uint _235;
    if (_234)
    {
        _235 = _211 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_181)
        {
            frontier_phi_9_10_ladder = _211 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _211 + 12u;
        }
        _235 = frontier_phi_9_10_ladder;
    }
    uint _239 = _179 ? (_235 + 4u) : _235;
    uint _242 = ((_183 + 4u) + _239) >> 2u;
    uvec2 _248 = uvec2(texelFetch(l_geomAttrib_0, int(_242)).x, texelFetch(l_geomAttrib_0, int(_242 + 1u)).x);
    uint _249 = _248.x;
    uint _250 = _248.y;
    float _254 = float(int(uint(int(_249 << 16u) >> int(16u))));
    float _255 = float(int(uint(int(_249) >> int(16u))));
    float _259 = float(int(uint(int(_250 << 16u) >> int(16u))));
    float _260 = float(int(uint(int(_250) >> int(16u))));
    uvec4 _264 = texelFetch(l_geomAttrib_0, int(((_183 + 12u) + _239) >> 2u));
    uint _265 = _264.x;
    uint _271 = _177 * _171;
    uint _272 = _271 + 12u;
    uint _293;
    uint _294;
    uint _295;
    uint _296;
    if (_182)
    {
        uvec4 _274 = texelFetch(l_geomAttrib_0, int(_272 >> 2u));
        uint _275 = _274.x;
        _293 = _275 & 255u;
        _294 = (_275 >> 8u) & 255u;
        _295 = (_275 >> 16u) & 255u;
        _296 = 16u;
    }
    else
    {
        uint _281 = _272 >> 2u;
        uvec2 _287 = uvec2(texelFetch(l_geomAttrib_0, int(_281)).x, texelFetch(l_geomAttrib_0, int(_281 + 1u)).x);
        uint _288 = _287.x;
        _293 = _288 & 65535u;
        _294 = _288 >> 16u;
        _295 = _287.y & 65535u;
        _296 = 20u;
    }
    uvec4 _302 = texelFetch(l_geomAttrib_0, int((_296 + _271) >> 2u));
    uint _303 = _302.x;
    uint _315;
    if (_234)
    {
        _315 = _296 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_181)
        {
            frontier_phi_16_17_ladder = _296 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _296 + 12u;
        }
        _315 = frontier_phi_16_17_ladder;
    }
    uint _319 = _179 ? (_315 + 4u) : _315;
    uint _322 = ((_271 + 4u) + _319) >> 2u;
    uvec2 _328 = uvec2(texelFetch(l_geomAttrib_0, int(_322)).x, texelFetch(l_geomAttrib_0, int(_322 + 1u)).x);
    uint _329 = _328.x;
    uint _330 = _328.y;
    float _334 = float(int(uint(int(_329 << 16u) >> int(16u))));
    float _335 = float(int(uint(int(_329) >> int(16u))));
    float _339 = float(int(uint(int(_330 << 16u) >> int(16u))));
    float _340 = float(int(uint(int(_330) >> int(16u))));
    uvec4 _344 = texelFetch(l_geomAttrib_0, int(((_271 + 12u) + _319) >> 2u));
    uint _345 = _344.x;
    uint _351 = _177 * _172;
    uint _352 = _351 + 12u;
    uint _373;
    uint _374;
    uint _375;
    uint _376;
    if (_182)
    {
        uvec4 _354 = texelFetch(l_geomAttrib_0, int(_352 >> 2u));
        uint _355 = _354.x;
        _373 = _355 & 255u;
        _374 = (_355 >> 8u) & 255u;
        _375 = (_355 >> 16u) & 255u;
        _376 = 16u;
    }
    else
    {
        uint _361 = _352 >> 2u;
        uvec2 _367 = uvec2(texelFetch(l_geomAttrib_0, int(_361)).x, texelFetch(l_geomAttrib_0, int(_361 + 1u)).x);
        uint _368 = _367.x;
        _373 = _368 & 65535u;
        _374 = _368 >> 16u;
        _375 = _367.y & 65535u;
        _376 = 20u;
    }
    uvec4 _382 = texelFetch(l_geomAttrib_0, int((_376 + _351) >> 2u));
    uint _383 = _382.x;
    uint _395;
    if (_234)
    {
        _395 = _376 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_181)
        {
            frontier_phi_23_24_ladder = _376 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _376 + 12u;
        }
        _395 = frontier_phi_23_24_ladder;
    }
    uint _399 = _179 ? (_395 + 4u) : _395;
    uint _402 = ((_351 + 4u) + _399) >> 2u;
    uvec2 _408 = uvec2(texelFetch(l_geomAttrib_0, int(_402)).x, texelFetch(l_geomAttrib_0, int(_402 + 1u)).x);
    uint _409 = _408.x;
    uint _410 = _408.y;
    float _414 = float(int(uint(int(_409 << 16u) >> int(16u))));
    float _415 = float(int(uint(int(_409) >> int(16u))));
    float _419 = float(int(uint(int(_410 << 16u) >> int(16u))));
    float _420 = float(int(uint(int(_410) >> int(16u))));
    uvec4 _424 = texelFetch(l_geomAttrib_0, int(((_351 + 12u) + _399) >> 2u));
    uint _425 = _424.x;
    bool _432 = _128.z == 0u;
    float _468;
    float _469;
    float _470;
    if (_432)
    {
        uint _435 = _169 * 3u;
        uvec3 _444 = uvec3(texelFetch(l_geomPositionBuffer, int(_435)).x, texelFetch(l_geomPositionBuffer, int(_435 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_435 + 2u)).x);
        _468 = uintBitsToFloat(_444.x);
        _469 = uintBitsToFloat(_444.y);
        _470 = uintBitsToFloat(_444.z);
    }
    else
    {
        uint _452 = _169 * 2u;
        uvec2 _458 = uvec2(texelFetch(l_geomPositionBuffer, int(_452)).x, texelFetch(l_geomPositionBuffer, int(_452 + 1u)).x);
        uint _459 = _458.x;
        _468 = unpackHalf2x16(_459).x;
        _469 = unpackHalf2x16(_459 >> 16u).x;
        _470 = unpackHalf2x16(_458.y).x;
    }
    float _506;
    float _507;
    float _508;
    if (_432)
    {
        uint _473 = _171 * 3u;
        uvec3 _482 = uvec3(texelFetch(l_geomPositionBuffer, int(_473)).x, texelFetch(l_geomPositionBuffer, int(_473 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_473 + 2u)).x);
        _506 = uintBitsToFloat(_482.x);
        _507 = uintBitsToFloat(_482.y);
        _508 = uintBitsToFloat(_482.z);
    }
    else
    {
        uint _490 = _171 * 2u;
        uvec2 _496 = uvec2(texelFetch(l_geomPositionBuffer, int(_490)).x, texelFetch(l_geomPositionBuffer, int(_490 + 1u)).x);
        uint _497 = _496.x;
        _506 = unpackHalf2x16(_497).x;
        _507 = unpackHalf2x16(_497 >> 16u).x;
        _508 = unpackHalf2x16(_496.y).x;
    }
    float _544;
    float _545;
    float _546;
    if (_432)
    {
        uint _511 = _172 * 3u;
        uvec3 _520 = uvec3(texelFetch(l_geomPositionBuffer, int(_511)).x, texelFetch(l_geomPositionBuffer, int(_511 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_511 + 2u)).x);
        _544 = uintBitsToFloat(_520.x);
        _545 = uintBitsToFloat(_520.y);
        _546 = uintBitsToFloat(_520.z);
    }
    else
    {
        uint _528 = _172 * 2u;
        uvec2 _534 = uvec2(texelFetch(l_geomPositionBuffer, int(_528)).x, texelFetch(l_geomPositionBuffer, int(_528 + 1u)).x);
        uint _535 = _534.x;
        _544 = unpackHalf2x16(_535).x;
        _545 = unpackHalf2x16(_535 >> 16u).x;
        _546 = unpackHalf2x16(_534.y).x;
    }
    float _549 = (1.0 - hit._m0.x) - hit._m0.y;
    float _603 = (((float((_345 >> 8u) & 255u) * hit._m0.x) + (float((_265 >> 8u) & 255u) * _549)) + (float((_425 >> 8u) & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _606 = (_334 - _254) * 0.00048828125;
    float _608 = (_335 - _255) * 0.00048828125;
    float _611 = (_414 - _254) * 0.00048828125;
    float _612 = (_415 - _255) * 0.00048828125;
    float _638 = _506 - _468;
    float _639 = _507 - _469;
    float _640 = _508 - _470;
    float _643 = fma(_640, gl_ObjectToWorldEXT[2u].x, fma(_639, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _638));
    float _646 = fma(_640, gl_ObjectToWorldEXT[2u].y, fma(_639, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _638));
    float _649 = fma(_640, gl_ObjectToWorldEXT[2u].z, fma(_639, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _638));
    float _650 = _544 - _468;
    float _651 = _545 - _469;
    float _652 = _546 - _470;
    float _655 = fma(_652, gl_ObjectToWorldEXT[2u].x, fma(_651, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _650));
    float _658 = fma(_652, gl_ObjectToWorldEXT[2u].y, fma(_651, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _650));
    float _661 = fma(_652, gl_ObjectToWorldEXT[2u].z, fma(_651, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _650));
    float _662 = (((_334 * hit._m0.x) + (_254 * _549)) + (_414 * hit._m0.y)) * 0.00048828125;
    float _663 = (((_335 * hit._m0.x) + (_255 * _549)) + (_415 * hit._m0.y)) * 0.00048828125;
    float _669 = (((float(_208) * _549) + (-127.0)) + (float(_293) * hit._m0.x)) + (float(_373) * hit._m0.y);
    float _672 = (((float(_209) * _549) + (-127.0)) + (float(_294) * hit._m0.x)) + (float(_374) * hit._m0.y);
    float _675 = (((float(_210) * _549) + (-127.0)) + (float(_295) * hit._m0.x)) + (float(_375) * hit._m0.y);
    float _676 = _669 * 0.0078740157186985015869140625;
    float _678 = _672 * 0.0078740157186985015869140625;
    float _679 = _675 * 0.0078740157186985015869140625;
    float _692 = ((((float(_220 & 255u) * _549) + (-127.0)) + (float(_303 & 255u) * hit._m0.x)) + (float(_383 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _693 = ((((float((_220 >> 8u) & 255u) * _549) + (-127.0)) + (float((_303 >> 8u) & 255u) * hit._m0.x)) + (float((_383 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _694 = ((((float((_220 >> 16u) & 255u) * _549) + (-127.0)) + (float((_303 >> 16u) & 255u) * hit._m0.x)) + (float((_383 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _695 = ((((float(_220 >> 24u) * _549) + (-127.0)) + (float(_303 >> 24u) * hit._m0.x)) + (float(_383 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _705 = ((_693 * _679) - (_694 * _678)) * _695;
    float _706 = ((_694 * _676) - (_692 * _679)) * _695;
    float _707 = ((_692 * _678) - (_693 * _676)) * _695;
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _732 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    uvec2 _748 = uvec2(textureSize(M_Water_oceanB2_snp_0_Texture2D_2, int(0u)));
    bool _753 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _806;
    if (_753)
    {
        float _764 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _770 = (_661 * _646) - (_658 * _649);
        float _773 = (_655 * _649) - (_661 * _643);
        float _776 = (_658 * _643) - (_655 * _646);
        float _803 = ((log2((((float(_748.y) * 0.5) * float(_748.x)) * abs((_612 * _606) - (_611 * _608))) / (sqrt(((_773 * _773) + (_776 * _776)) + (_770 * _770)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_764 * gl_WorldRayDirectionEXT.x, _764 * gl_WorldRayDirectionEXT.y, _764 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    }
    else
    {
        _806 = 0.0;
    }
    vec4 _810 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_2, SS_BumpMap), vec2((((_732 * cbMtdParam._m0[20u].w) + _662) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_732 * cbMtdParam._m0[21u].x) + _663) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _806);
    float _812 = _810.x;
    float _813 = _810.y;
    float _823 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _825 = ((-0.0) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    float _830 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? 0.0 : (isnan(0.0) ? cbMtdParam._m0[16u].z : max(0.0, cbMtdParam._m0[16u].z)));
    float _1801 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _831 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    float _832 = _810.z - _831;
    float _1812 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    float _834 = _833 * 0.004999999888241291046142578125;
    float _836 = _833 * (-0.004999999888241291046142578125);
    uvec2 _867 = uvec2(textureSize(M_Water_oceanB2_snp_0_Texture2D_0, int(0u)));
    float _918;
    if (_753)
    {
        float _878 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _884 = (_661 * _646) - (_658 * _649);
        float _887 = (_655 * _649) - (_661 * _643);
        float _890 = (_658 * _643) - (_655 * _646);
        float _916 = ((log2((((float(_867.y) * 0.5) * float(_867.x)) * abs((_612 * _606) - (_611 * _608))) / (sqrt(((_887 * _887) + (_890 * _890)) + (_884 * _884)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_878 * gl_WorldRayDirectionEXT.x, _878 * gl_WorldRayDirectionEXT.y, _878 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _918 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    }
    else
    {
        _918 = 0.0;
    }
    vec4 _920 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[18u].y * _732) + _834) + (cbMtdParam._m0[19u].w * _662)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].z * _732) + _836) + (cbMtdParam._m0[20u].x * _663)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _918);
    float _924 = _920.z;
    float _994;
    if (_753)
    {
        float _954 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _960 = (_661 * _646) - (_658 * _649);
        float _963 = (_655 * _649) - (_661 * _643);
        float _966 = (_658 * _643) - (_655 * _646);
        float _992 = ((log2((((float(_867.y) * 0.5) * float(_867.x)) * abs((_612 * _606) - (_611 * _608))) / (sqrt(((_963 * _963) + (_966 * _966)) + (_960 * _960)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_954 * gl_WorldRayDirectionEXT.x, _954 * gl_WorldRayDirectionEXT.y, _954 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _994 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    }
    else
    {
        _994 = 0.0;
    }
    vec4 _996 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[17u].w * _732) + _834) + (cbMtdParam._m0[20u].y * _662)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[18u].x * _732) + _836) + (cbMtdParam._m0[20u].z * _663)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _994);
    float _1000 = _996.z;
    float _1003 = (_830 - _810.w) + (isnan(_1000) ? _924 : (isnan(_924) ? _1000 : max(_924, _1000)));
    float _1838 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1007 = (((((float(_345 & 255u) * hit._m0.x) + (float(_265 & 255u) * _549)) + (float(_425 & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125) - _830) + cbMtdParam._m0[16u].y;
    float _1008 = _1007 * (isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0)));
    float _1021 = (_1008 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _833);
    float _1022 = (_1008 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _833);
    float _1023 = (_1008 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _833);
    float _1849 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1025 = 1.0 - (isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0)));
    float _1032 = ((_1025 - _1021) * _831) + _1021;
    float _1033 = ((_1025 - _1022) * _831) + _1022;
    float _1034 = ((_1025 - _1023) * _831) + _1023;
    float _1048 = (cbMtdParam._m0[15u].x + _825) * cbMtdParam._m0[14u].y;
    float _1860 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1052 = ((isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _1871 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1053 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    float _1061 = _825 / cbMtdParam._m0[14u].w;
    float _1882 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1062 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uvec2 _1080 = uvec2(textureSize(M_Water_oceanB2_snp_0_Texture2D_1, int(0u)));
    float _1133;
    if (_753)
    {
        float _1091 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1097 = (_661 * _646) - (_658 * _649);
        float _1100 = (_655 * _649) - (_661 * _643);
        float _1103 = (_658 * _643) - (_655 * _646);
        float _1131 = ((log2((((float(_1080.y) * 0.5) * float(_1080.x)) * abs((((_420 - _260) * (_339 - _259)) - ((_419 - _259) * (_340 - _260))) * 2.384185791015625e-07)) / (sqrt(((_1100 * _1100) + (_1103 * _1103)) + (_1097 * _1097)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_1091 * gl_WorldRayDirectionEXT.x, _1091 * gl_WorldRayDirectionEXT.y, _1091 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _1133 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    }
    else
    {
        _1133 = 0.0;
    }
    vec4 _1135 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _732) + ((((_339 * hit._m0.x) + (_259 * _549)) + (_419 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[21u].z * _732) + ((((_340 * hit._m0.x) + (_260 * _549)) + (_420 * hit._m0.y)) * 0.00048828125)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _1133);
    float _1144 = ((_996.x + (-0.5)) * 0.5) + _920.x;
    float _1145 = ((_996.y + (-0.5)) * 0.5) + _920.y;
    float _1153 = _833 * 0.119999997317790985107421875;
    float _1155 = _833 * (-0.100000001490116119384765625);
    float _1165 = cbMtdParam._m0[22u].y * _662;
    float _1166 = cbMtdParam._m0[22u].z * _663;
    float _1225;
    if (_753)
    {
        float _1185 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1191 = (_661 * _646) - (_658 * _649);
        float _1194 = (_655 * _649) - (_661 * _643);
        float _1197 = (_658 * _643) - (_655 * _646);
        float _1223 = ((log2((((float(_867.y) * 0.5) * float(_867.x)) * abs((_612 * _606) - (_611 * _608))) / (sqrt(((_1194 * _1194) + (_1197 * _1197)) + (_1191 * _1191)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_1185 * gl_WorldRayDirectionEXT.x, _1185 * gl_WorldRayDirectionEXT.y, _1185 * gl_WorldRayDirectionEXT.z), vec3(_676, _678, _679))));
        _1225 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    }
    else
    {
        _1225 = 0.0;
    }
    vec4 _1227 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[21u].w * _732) + _1153) + _1165) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[22u].x * _732) + _1155) + _1166) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1225);
    float _1248 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1249 = _1248 * gl_WorldRayDirectionEXT.x;
    float _1250 = _1248 * gl_WorldRayDirectionEXT.y;
    float _1251 = _1248 * gl_WorldRayDirectionEXT.z;
    float _1295;
    if (_753)
    {
        float _1261 = (_661 * _646) - (_658 * _649);
        float _1264 = (_655 * _649) - (_661 * _643);
        float _1267 = (_658 * _643) - (_655 * _646);
        float _1293 = ((log2((((float(_867.y) * 0.5) * float(_867.x)) * abs((_612 * _606) - (_611 * _608))) / (sqrt(((_1264 * _1264) + (_1267 * _1267)) + (_1261 * _1261)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_117) / abs(dot(vec3(_1249, _1250, _1251), vec3(_676, _678, _679))));
        _1295 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    }
    else
    {
        _1295 = 0.0;
    }
    vec4 _1297 = textureLod(sampler2D(M_Water_oceanB2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1165 + _1153) + (cbMtdParam._m0[22u].w * _732)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1166 + _1155) + (cbMtdParam._m0[23u].x * _732)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _1295);
    float _1309 = (((0.5 - _1144) * 0.10999999940395355224609375) + _1144) + (((_1227.x + (-1.0)) + _1297.x) * cbMtdParam._m0[16u].x);
    float _1310 = (((0.5 - _1145) * 0.10999999940395355224609375) + _1145) + (((_1227.y + (-1.0)) + _1297.y) * cbMtdParam._m0[16u].x);
    float _1315 = ((_1135.x - _1309) * _1062) + _1309;
    float _1316 = ((_1135.y - _1310) * _1062) + _1310;
    float _1318 = _825 / cbMtdParam._m0[14u].z;
    float _1908 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1319 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    float _1335 = ((((_1053 * (0.5 - _812)) + _812) + (((_1315 + (-0.5)) + ((0.5 - _1315) * _1319)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1336 = ((((_1053 * (0.5 - _813)) + _813) + (((_1316 + (-0.5)) + ((0.5 - _1316) * _1319)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1337 = dot(vec2(_1335, _1336), vec2(_1335, _1336));
    float _1919 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1342 = sqrt(1.0 - (isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0))));
    float _1345 = fma(_1342, _676, fma(_1336, _692, (_711 * _705) * _1335));
    float _1348 = fma(_1342, _678, fma(_1336, _693, (_711 * _706) * _1335));
    float _1351 = fma(_1342, _679, fma(_1336, _694, (_711 * _707) * _1335));
    float _1355 = inversesqrt(dot(vec3(_1345, _1348, _1351), vec3(_1345, _1348, _1351)));
    float _1356 = _1355 * _1345;
    float _1357 = _1355 * _1348;
    float _1358 = _1355 * _1351;
    float _1370 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1371 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1372 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1373 = (-0.0) - _1249;
    float _1374 = (-0.0) - _1250;
    float _1375 = (-0.0) - _1251;
    float _1381 = float(gl_LaunchIDEXT.x);
    float _1382 = float(gl_LaunchIDEXT.y);
    float _1385 = float(gl_LaunchSizeEXT.x);
    float _1399 = fract(fract(sin(dot(vec2(_1381 / _1385, _1382 / _80), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1412 = fract(fract(sin(dot(vec2((_1381 + 128.0) / _1385, (_1382 + 128.0) / _80), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _66._m0 = 1u;
    uvec4 _1422 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1423 = _1422.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1423, _1422.w, _1423, vec3(_1370, _1371, _1372), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (_66._m0 == 0u)
    {
        float _1443 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1356, _1357, _1358));
        float _1930 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1446 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        float _1465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _1052) * 0.949999988079071044921875);
        float _1466 = _1465 * _1465;
        float _1467 = g_sceneCB._m0[4u].x - _1249;
        float _1468 = g_sceneCB._m0[4u].y - _1250;
        float _1469 = g_sceneCB._m0[4u].z - _1251;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1474 = _1473 * _1467;
        float _1475 = _1473 * _1468;
        float _1476 = _1473 * _1469;
        float _1477 = dot(vec3(_1356, _1357, _1358), vec3(g_sceneCB._m0[4u].xyz));
        float _1941 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1480 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        float _1481 = dot(vec3(_1356, _1357, _1358), vec3(_1373, _1374, _1375));
        float _1952 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1484 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        float _1485 = dot(vec3(_1356, _1357, _1358), vec3(_1474, _1475, _1476));
        float _1963 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1488 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        float _1489 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1474, _1475, _1476));
        float _1974 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1466 * _1466;
        float _1497 = ((_1488 * _1488) * (_1493 + (-1.0))) + 1.0;
        float _1509 = (exp2(log2(1.0 - (isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1511 = 1.0 - _1466;
        float _1522 = (0.5 / (((_1484 * ((_1480 * _1511) + _1466)) + 9.9999999392252902907785028219223e-09) + (((_1484 * _1511) + _1466) * _1480))) * _1480;
        float _1985 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1524 = (isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0))) * (_1493 / ((_1497 * _1497) * 3.141590118408203125));
        _1531 = ((_1032 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1446;
        _1532 = ((_1033 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1446;
        _1533 = ((_1034 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1446;
        _1534 = (_1509 * g_sceneCB._m0[5u].x) * _1524;
        _1535 = (_1509 * g_sceneCB._m0[5u].y) * _1524;
        _1536 = (_1509 * g_sceneCB._m0[5u].z) * _1524;
    }
    else
    {
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    bool _1538 = abs(_1357) < 0.89999997615814208984375;
    float _1540 = float(_1538);
    float _1541 = _1538 ? 0.0 : 1.0;
    float _1544 = (_1540 * _1358) - (_1541 * _1357);
    float _1545 = _1541 * _1356;
    float _1547 = (-0.0) - (_1356 * _1540);
    float _1551 = inversesqrt(dot(vec3(_1544, _1545, _1547), vec3(_1544, _1545, _1547)));
    float _1552 = _1544 * _1551;
    float _1553 = _1545 * _1551;
    float _1554 = _1551 * _1547;
    float _1557 = (_1553 * _1358) - (_1554 * _1357);
    float _1560 = (_1554 * _1356) - (_1552 * _1358);
    float _1563 = (_1552 * _1357) - (_1553 * _1356);
    float _1565;
    float _1573;
    float _1564 = 0.0;
    uint _1566 = 0u;
    float _1570;
    bool _1572;
    for (;;)
    {
        _1570 = (float(_1566) + _1399) * 0.03125;
        _1572 = _1566 == 0u;
        float frontier_phi_51_pred;
        if (_1572)
        {
            frontier_phi_51_pred = 0.0;
        }
        else
        {
            float _1707;
            float _1708;
            uint _1710;
            _1707 = 0.0;
            _1708 = 0.5;
            _1710 = _1566;
            float _1574;
            for (;;)
            {
                _1574 = ((_1710 & 1u) != 0u) ? (_1708 + _1707) : _1707;
                uint _1711 = _1710 >> 1u;
                if (_1711 == 0u)
                {
                    break;
                }
                else
                {
                    _1707 = _1574;
                    _1708 *= 0.5;
                    _1710 = _1711;
                }
            }
            frontier_phi_51_pred = _1574;
        }
        _1573 = frontier_phi_51_pred;
        float _1575 = _1573 + _1412;
        float _1579 = sqrt(_1570);
        float _1580 = ((_1575 > 1.0) ? (_1575 + (-1.0)) : _1575) * 6.283185482025146484375;
        float _1583 = cos(_1580) * _1579;
        float _1585 = sin(_1580) * _1579;
        float _1587 = sqrt(1.0 - _1570);
        float _1600 = ((_1587 * _1356) + (_1583 * _1557)) + (_1585 * _1552);
        float _1601 = ((_1587 * _1357) + (_1583 * _1560)) + (_1585 * _1553);
        float _1602 = ((_1587 * _1358) + (_1583 * _1563)) + (_1585 * _1554);
        _65._m0 = 1u;
        uvec4 _1606 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1607 = _1606.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1607, _1606.w, _1607, vec3(_1370, _1371, _1372), 9.9999997473787516355514526367188e-05, vec3(_1600, _1601, _1602), 10000.0, 1);
        float _1613 = dot(vec3(_1356, _1357, _1358), vec3(_1600, _1601, _1602));
        float _1996 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1616 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _1565 = ((float(_65._m0 == 0u) * _1616) / (_1616 * 0.3183098733425140380859375)) + _1564;
        uint _1567 = _1566 + 1u;
        if (_1567 == 32u)
        {
            break;
        }
        else
        {
            _1564 = _1565;
            _1566 = _1567;
            continue;
        }
    }
    float _1624 = _1565 * 0.009947183541953563690185546875;
    float _1629 = dot(vec3(_1249, _1250, _1251), vec3(_1356, _1357, _1358)) * 2.0;
    vec4 _1643 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1249 - (_1629 * _1356), _1250 - (_1629 * _1357), _1251 - (_1629 * _1358)), 4.0 - (_1052 * 4.0));
    float _1648 = dot(vec3(_1373, _1374, _1375), vec3(_1356, _1357, _1358));
    float _2007 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1657 = (exp2(log2(1.0 - (isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1663 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1356, _1357, _1358), 0.0);
    float _1674 = (_1534 + _1531) + (((_1663.x * _1032) + (_1657 * _1643.x)) * _1624);
    float _1678 = (_1535 + _1532) + (((_1663.y * _1033) + (_1657 * _1643.y)) * _1624);
    float _1682 = (_1536 + _1533) + (((_1663.z * _1034) + (_1657 * _1643.z)) * _1624);
    float _2018 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _2029 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _2040 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    bool _1690 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1701;
    _1701.x = _1690 ? ((_669 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0)));
    _1701.y = _1690 ? ((_672 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0)));
    _1701.z = _1690 ? ((_675 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0)));
    payload._m0 = _1701;
}


