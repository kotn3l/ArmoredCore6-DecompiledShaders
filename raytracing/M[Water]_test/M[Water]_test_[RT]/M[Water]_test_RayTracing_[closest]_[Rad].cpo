#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _60
{
    vec3 _m0;
};

struct _64
{
    vec2 _m0;
};

struct _67
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _60 payload;
hitAttributeEXT _64 hit;
layout(location = 1) rayPayloadEXT _67 _69;
layout(location = 2) rayPayloadEXT _67 _70;

vec3 _1562;

void main()
{
    float _84 = float(gl_LaunchSizeEXT.y);
    float _112 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _113 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _114 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _121 = sqrt(((_113 * _113) + (_112 * _112)) + (_114 * _114)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _84)))));
    uvec4 _132 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _133 = _132.y;
    uint _173;
    uint _175;
    uint _176;
    if (_132.x == 0u)
    {
        uint _141 = (_133 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _150 = uvec3(texelFetch(l_geomIndexBuffer, int(_141)).x, texelFetch(l_geomIndexBuffer, int(_141 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_141 + 2u)).x);
        _173 = _150.x;
        _175 = _150.y;
        _176 = _150.z;
    }
    else
    {
        uint _154 = uint(gl_PrimitiveID) * 6u;
        uint _156 = _154 & 4294967292u;
        uint _159 = (_133 + _156) >> 2u;
        uvec2 _166 = uvec2(texelFetch(l_geomIndexBuffer, int(_159)).x, texelFetch(l_geomIndexBuffer, int(_159 + 1u)).x);
        uint _167 = _166.x;
        uint _168 = _166.y;
        uint _170 = _167 >> 16u;
        uint _171 = _168 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_156 == _154)
        {
            frontier_phi_3_2_ladder = _170;
            frontier_phi_3_2_ladder_1 = _167 & 65535u;
            frontier_phi_3_2_ladder_2 = _171;
        }
        else
        {
            frontier_phi_3_2_ladder = _171;
            frontier_phi_3_2_ladder_1 = _170;
            frontier_phi_3_2_ladder_2 = _168 >> 16u;
        }
        _173 = frontier_phi_3_2_ladder_1;
        _175 = frontier_phi_3_2_ladder;
        _176 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _180 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _181 = _180.x;
    uint _182 = _180.z;
    bool _183 = _182 != 0u;
    bool _185 = _132.w == 0u;
    bool _186 = _183 || _185;
    uint _187 = _181 * _173;
    uint _188 = _187 + 12u;
    uint _212;
    uint _213;
    uint _214;
    uint _215;
    if (_186)
    {
        uvec4 _191 = texelFetch(l_geomAttrib_0, int(_188 >> 2u));
        uint _192 = _191.x;
        _212 = _192 & 255u;
        _213 = (_192 >> 8u) & 255u;
        _214 = (_192 >> 16u) & 255u;
        _215 = 16u;
    }
    else
    {
        uint _200 = _188 >> 2u;
        uvec2 _206 = uvec2(texelFetch(l_geomAttrib_0, int(_200)).x, texelFetch(l_geomAttrib_0, int(_200 + 1u)).x);
        uint _207 = _206.x;
        _212 = _207 & 65535u;
        _213 = _207 >> 16u;
        _214 = _206.y & 65535u;
        _215 = 20u;
    }
    uvec4 _223 = texelFetch(l_geomAttrib_0, int((_215 + _187) >> 2u));
    uint _224 = _223.x;
    bool _238 = _182 == 0u;
    uint _239;
    if (_238)
    {
        _239 = _215 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_185)
        {
            frontier_phi_9_10_ladder = _215 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _215 + 12u;
        }
        _239 = frontier_phi_9_10_ladder;
    }
    uint _243 = _183 ? (_239 + 4u) : _239;
    uvec4 _247 = texelFetch(l_geomAttrib_0, int(((_187 + 4u) + _243) >> 2u));
    uint _248 = _247.x;
    float _252 = float(int(uint(int(_248 << 16u) >> int(16u))));
    float _253 = float(int(uint(int(_248) >> int(16u))));
    uint _261 = _181 * _175;
    uint _262 = _261 + 12u;
    uint _283;
    uint _284;
    uint _285;
    uint _286;
    if (_186)
    {
        uvec4 _264 = texelFetch(l_geomAttrib_0, int(_262 >> 2u));
        uint _265 = _264.x;
        _283 = _265 & 255u;
        _284 = (_265 >> 8u) & 255u;
        _285 = (_265 >> 16u) & 255u;
        _286 = 16u;
    }
    else
    {
        uint _271 = _262 >> 2u;
        uvec2 _277 = uvec2(texelFetch(l_geomAttrib_0, int(_271)).x, texelFetch(l_geomAttrib_0, int(_271 + 1u)).x);
        uint _278 = _277.x;
        _283 = _278 & 65535u;
        _284 = _278 >> 16u;
        _285 = _277.y & 65535u;
        _286 = 20u;
    }
    uvec4 _292 = texelFetch(l_geomAttrib_0, int((_286 + _261) >> 2u));
    uint _293 = _292.x;
    uint _305;
    if (_238)
    {
        _305 = _286 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_185)
        {
            frontier_phi_16_17_ladder = _286 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _286 + 12u;
        }
        _305 = frontier_phi_16_17_ladder;
    }
    uint _309 = _183 ? (_305 + 4u) : _305;
    uvec4 _313 = texelFetch(l_geomAttrib_0, int(((_261 + 4u) + _309) >> 2u));
    uint _314 = _313.x;
    float _318 = float(int(uint(int(_314 << 16u) >> int(16u))));
    float _319 = float(int(uint(int(_314) >> int(16u))));
    uint _327 = _181 * _176;
    uint _328 = _327 + 12u;
    uint _349;
    uint _350;
    uint _351;
    uint _352;
    if (_186)
    {
        uvec4 _330 = texelFetch(l_geomAttrib_0, int(_328 >> 2u));
        uint _331 = _330.x;
        _349 = _331 & 255u;
        _350 = (_331 >> 8u) & 255u;
        _351 = (_331 >> 16u) & 255u;
        _352 = 16u;
    }
    else
    {
        uint _337 = _328 >> 2u;
        uvec2 _343 = uvec2(texelFetch(l_geomAttrib_0, int(_337)).x, texelFetch(l_geomAttrib_0, int(_337 + 1u)).x);
        uint _344 = _343.x;
        _349 = _344 & 65535u;
        _350 = _344 >> 16u;
        _351 = _343.y & 65535u;
        _352 = 20u;
    }
    uvec4 _358 = texelFetch(l_geomAttrib_0, int((_352 + _327) >> 2u));
    uint _359 = _358.x;
    uint _371;
    if (_238)
    {
        _371 = _352 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_185)
        {
            frontier_phi_23_24_ladder = _352 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _352 + 12u;
        }
        _371 = frontier_phi_23_24_ladder;
    }
    uint _375 = _183 ? (_371 + 4u) : _371;
    uvec4 _379 = texelFetch(l_geomAttrib_0, int(((_327 + 4u) + _375) >> 2u));
    uint _380 = _379.x;
    float _384 = float(int(uint(int(_380 << 16u) >> int(16u))));
    float _385 = float(int(uint(int(_380) >> int(16u))));
    bool _394 = _132.z == 0u;
    float _430;
    float _431;
    float _432;
    if (_394)
    {
        uint _397 = _173 * 3u;
        uvec3 _406 = uvec3(texelFetch(l_geomPositionBuffer, int(_397)).x, texelFetch(l_geomPositionBuffer, int(_397 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_397 + 2u)).x);
        _430 = uintBitsToFloat(_406.x);
        _431 = uintBitsToFloat(_406.y);
        _432 = uintBitsToFloat(_406.z);
    }
    else
    {
        uint _414 = _173 * 2u;
        uvec2 _420 = uvec2(texelFetch(l_geomPositionBuffer, int(_414)).x, texelFetch(l_geomPositionBuffer, int(_414 + 1u)).x);
        uint _421 = _420.x;
        _430 = unpackHalf2x16(_421).x;
        _431 = unpackHalf2x16(_421 >> 16u).x;
        _432 = unpackHalf2x16(_420.y).x;
    }
    float _468;
    float _469;
    float _470;
    if (_394)
    {
        uint _435 = _175 * 3u;
        uvec3 _444 = uvec3(texelFetch(l_geomPositionBuffer, int(_435)).x, texelFetch(l_geomPositionBuffer, int(_435 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_435 + 2u)).x);
        _468 = uintBitsToFloat(_444.x);
        _469 = uintBitsToFloat(_444.y);
        _470 = uintBitsToFloat(_444.z);
    }
    else
    {
        uint _452 = _175 * 2u;
        uvec2 _458 = uvec2(texelFetch(l_geomPositionBuffer, int(_452)).x, texelFetch(l_geomPositionBuffer, int(_452 + 1u)).x);
        uint _459 = _458.x;
        _468 = unpackHalf2x16(_459).x;
        _469 = unpackHalf2x16(_459 >> 16u).x;
        _470 = unpackHalf2x16(_458.y).x;
    }
    float _506;
    float _507;
    float _508;
    if (_394)
    {
        uint _473 = _176 * 3u;
        uvec3 _482 = uvec3(texelFetch(l_geomPositionBuffer, int(_473)).x, texelFetch(l_geomPositionBuffer, int(_473 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_473 + 2u)).x);
        _506 = uintBitsToFloat(_482.x);
        _507 = uintBitsToFloat(_482.y);
        _508 = uintBitsToFloat(_482.z);
    }
    else
    {
        uint _490 = _176 * 2u;
        uvec2 _496 = uvec2(texelFetch(l_geomPositionBuffer, int(_490)).x, texelFetch(l_geomPositionBuffer, int(_490 + 1u)).x);
        uint _497 = _496.x;
        _506 = unpackHalf2x16(_497).x;
        _507 = unpackHalf2x16(_497 >> 16u).x;
        _508 = unpackHalf2x16(_496.y).x;
    }
    float _511 = (1.0 - hit._m0.x) - hit._m0.y;
    float _548 = (((float(texelFetch(l_geomAttrib_0, int(((_261 + 8u) + _309) >> 2u)).x & 255u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_0, int(((_187 + 8u) + _243) >> 2u)).x & 255u) * _511)) + (float(texelFetch(l_geomAttrib_0, int(((_327 + 8u) + _375) >> 2u)).x & 255u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _552 = (_318 - _252) * 0.00048828125;
    float _554 = (_319 - _253) * 0.00048828125;
    float _557 = (_384 - _252) * 0.00048828125;
    float _558 = (_385 - _253) * 0.00048828125;
    float _580 = _468 - _430;
    float _581 = _469 - _431;
    float _582 = _470 - _432;
    float _585 = fma(_582, gl_ObjectToWorldEXT[2u].x, fma(_581, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _580));
    float _588 = fma(_582, gl_ObjectToWorldEXT[2u].y, fma(_581, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _580));
    float _591 = fma(_582, gl_ObjectToWorldEXT[2u].z, fma(_581, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _580));
    float _592 = _506 - _430;
    float _593 = _507 - _431;
    float _594 = _508 - _432;
    float _597 = fma(_594, gl_ObjectToWorldEXT[2u].x, fma(_593, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _592));
    float _600 = fma(_594, gl_ObjectToWorldEXT[2u].y, fma(_593, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _592));
    float _603 = fma(_594, gl_ObjectToWorldEXT[2u].z, fma(_593, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _592));
    float _604 = (((_318 * hit._m0.x) + (_252 * _511)) + (_384 * hit._m0.y)) * 0.00048828125;
    float _605 = (((_319 * hit._m0.x) + (_253 * _511)) + (_385 * hit._m0.y)) * 0.00048828125;
    float _609 = (((float(_212) * _511) + (-127.0)) + (float(_283) * hit._m0.x)) + (float(_349) * hit._m0.y);
    float _612 = (((float(_213) * _511) + (-127.0)) + (float(_284) * hit._m0.x)) + (float(_350) * hit._m0.y);
    float _615 = (((float(_214) * _511) + (-127.0)) + (float(_285) * hit._m0.x)) + (float(_351) * hit._m0.y);
    float _616 = _609 * 0.0078740157186985015869140625;
    float _618 = _612 * 0.0078740157186985015869140625;
    float _619 = _615 * 0.0078740157186985015869140625;
    float _632 = ((((float(_224 & 255u) * _511) + (-127.0)) + (float(_293 & 255u) * hit._m0.x)) + (float(_359 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _633 = ((((float((_224 >> 8u) & 255u) * _511) + (-127.0)) + (float((_293 >> 8u) & 255u) * hit._m0.x)) + (float((_359 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _634 = ((((float((_224 >> 16u) & 255u) * _511) + (-127.0)) + (float((_293 >> 16u) & 255u) * hit._m0.x)) + (float((_359 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _635 = ((((float(_224 >> 24u) * _511) + (-127.0)) + (float(_293 >> 24u) * hit._m0.x)) + (float(_359 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _645 = ((_633 * _619) - (_634 * _618)) * _635;
    float _646 = ((_634 * _616) - (_632 * _619)) * _635;
    float _647 = ((_632 * _618) - (_633 * _616)) * _635;
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _674 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    uvec2 _695 = uvec2(textureSize(M_Water_test_snp_0_Texture2D_2, int(0u)));
    bool _700 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _753;
    if (_700)
    {
        float _711 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _717 = (_603 * _588) - (_600 * _591);
        float _720 = (_597 * _591) - (_603 * _585);
        float _723 = (_600 * _585) - (_597 * _588);
        float _750 = ((log2((((float(_695.y) * 0.5) * float(_695.x)) * abs((_558 * _552) - (_557 * _554))) / (sqrt(((_720 * _720) + (_723 * _723)) + (_717 * _717)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_711 * gl_WorldRayDirectionEXT.x, _711 * gl_WorldRayDirectionEXT.y, _711 * gl_WorldRayDirectionEXT.z), vec3(_616, _618, _619))));
        _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    }
    else
    {
        _753 = 0.0;
    }
    float _762 = exp2(log2(textureLod(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_674 * cbMtdParam._m0[14u].z) + _604) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _674) + _605) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _753).x) * cbMtdParam._m0[12u].y);
    float _776 = (cbMtdParam._m0[15u].z * _674) + _604;
    float _777 = (cbMtdParam._m0[15u].w * _674) + _605;
    uvec2 _789 = uvec2(textureSize(M_Water_test_snp_0_Texture2D_3, int(0u)));
    float _840;
    if (_700)
    {
        float _800 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _806 = (_603 * _588) - (_600 * _591);
        float _809 = (_597 * _591) - (_603 * _585);
        float _812 = (_600 * _585) - (_597 * _588);
        float _838 = ((log2((((float(_789.y) * 0.5) * float(_789.x)) * abs((_558 * _552) - (_557 * _554))) / (sqrt(((_809 * _809) + (_812 * _812)) + (_806 * _806)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_800 * gl_WorldRayDirectionEXT.x, _800 * gl_WorldRayDirectionEXT.y, _800 * gl_WorldRayDirectionEXT.z), vec3(_616, _618, _619))));
        _840 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    }
    else
    {
        _840 = 0.0;
    }
    vec4 _842 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_776 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_777 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), _840);
    float _847 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _853 = ((_842.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _855 = (-0.0) - (cbMtdParam._m0[12u].w * ((_842.x * 0.5) + (-0.25)));
    float _857 = fract(_847);
    float _859 = fract(_847 + 0.5);
    float _871 = abs((_857 * 2.0) + (-1.0));
    vec4 _889 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_857 * _855) + _776) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_853 * _857) + _777) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), 0.0);
    float _891 = _889.x;
    float _892 = _889.y;
    float _893 = _889.z;
    vec4 _894 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_859 * _855) + _776) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_853 * _859) + _777) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w), 0.0);
    float _917 = (((cbMtdParam._m0[10u].x * _548) * _762) * (((_894.x - _891) * _871) + _891)) + cbMtdParam._m0[9u].x;
    float _918 = (((cbMtdParam._m0[10u].y * _548) * _762) * (((_894.y - _892) * _871) + _892)) + cbMtdParam._m0[9u].y;
    float _919 = (((cbMtdParam._m0[10u].z * _548) * _762) * (((_894.z - _893) * _871) + _893)) + cbMtdParam._m0[9u].z;
    uvec2 _940 = uvec2(textureSize(M_Water_test_snp_0_Texture2D_0, int(0u)));
    float _991;
    if (_700)
    {
        float _951 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _957 = (_603 * _588) - (_600 * _591);
        float _960 = (_597 * _591) - (_603 * _585);
        float _963 = (_600 * _585) - (_597 * _588);
        float _989 = ((log2((((float(_940.y) * 0.5) * float(_940.x)) * abs((_558 * _552) - (_557 * _554))) / (sqrt(((_960 * _960) + (_963 * _963)) + (_957 * _957)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_951 * gl_WorldRayDirectionEXT.x, _951 * gl_WorldRayDirectionEXT.y, _951 * gl_WorldRayDirectionEXT.z), vec3(_616, _618, _619))));
        _991 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    }
    else
    {
        _991 = 0.0;
    }
    vec4 _994 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _674) + _604) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _674) + _605) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _991);
    uvec2 _1019 = uvec2(textureSize(M_Water_test_snp_0_Texture2D_1, int(0u)));
    float _1070;
    if (_700)
    {
        float _1030 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _1036 = (_603 * _588) - (_600 * _591);
        float _1039 = (_597 * _591) - (_603 * _585);
        float _1042 = (_600 * _585) - (_597 * _588);
        float _1068 = ((log2((((float(_1019.y) * 0.5) * float(_1019.x)) * abs((_558 * _552) - (_557 * _554))) / (sqrt(((_1039 * _1039) + (_1042 * _1042)) + (_1036 * _1036)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_1030 * gl_WorldRayDirectionEXT.x, _1030 * gl_WorldRayDirectionEXT.y, _1030 * gl_WorldRayDirectionEXT.z), vec3(_616, _618, _619))));
        _1070 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    }
    else
    {
        _1070 = 0.0;
    }
    vec4 _1072 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _674) + _604) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _674) + _605) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _1070);
    float _1078 = (_1072.x * 2.0) + (-1.0);
    float _1079 = (_1072.y * 2.0) + (-1.0);
    float _1080 = dot(vec2(_1078, _1079), vec2(_1078, _1079));
    float _1664 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1085 = sqrt(1.0 - (isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0))));
    float _1094 = (cbMtdParam._m0[15u].x * _674) + _604;
    float _1095 = (cbMtdParam._m0[15u].y * _674) + _605;
    float _1103 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1104 = _1103 * gl_WorldRayDirectionEXT.x;
    float _1105 = _1103 * gl_WorldRayDirectionEXT.y;
    float _1106 = _1103 * gl_WorldRayDirectionEXT.z;
    float _1150;
    if (_700)
    {
        float _1116 = (_603 * _588) - (_600 * _591);
        float _1119 = (_597 * _591) - (_603 * _585);
        float _1122 = (_600 * _585) - (_597 * _588);
        float _1148 = ((log2((((float(_789.y) * 0.5) * float(_789.x)) * abs((_558 * _552) - (_557 * _554))) / (sqrt(((_1119 * _1119) + (_1122 * _1122)) + (_1116 * _1116)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_121) / abs(dot(vec3(_1104, _1105, _1106), vec3(_616, _618, _619))));
        _1150 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    }
    else
    {
        _1150 = 0.0;
    }
    vec4 _1152 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_1094 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_1095 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w), _1150);
    float _1160 = ((_1152.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _1162 = (-0.0) - (cbMtdParam._m0[12u].w * ((_1152.x * 0.5) + (-0.25)));
    vec4 _1180 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_857 * _1162) + _1094) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1160 * _857) + _1095) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1182 = _1180.x;
    float _1183 = _1180.y;
    vec4 _1184 = textureLod(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_859 * _1162) + _1094) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1160 * _859) + _1095) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), 0.0);
    float _1200 = (_1078 + (((_994.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_1184.x - _1182) * _871) + _1182) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _1201 = (_1079 + (((_994.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_1184.y - _1183) * _871) + _1183) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _1204 = fma(_1085, _616, fma(_1201, _632, (_651 * _645) * _1200));
    float _1207 = fma(_1085, _618, fma(_1201, _633, (_651 * _646) * _1200));
    float _1210 = fma(_1085, _619, fma(_1201, _634, (_651 * _647) * _1200));
    float _1214 = inversesqrt(dot(vec3(_1204, _1207, _1210), vec3(_1204, _1207, _1210)));
    float _1215 = _1214 * _1204;
    float _1216 = _1214 * _1207;
    float _1217 = _1214 * _1210;
    float _1229 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1230 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1231 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1232 = (-0.0) - _1104;
    float _1233 = (-0.0) - _1105;
    float _1234 = (-0.0) - _1106;
    float _1240 = float(gl_LaunchIDEXT.x);
    float _1241 = float(gl_LaunchIDEXT.y);
    float _1244 = float(gl_LaunchSizeEXT.x);
    float _1258 = fract(fract(sin(dot(vec2(_1240 / _1244, _1241 / _84), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1271 = fract(fract(sin(dot(vec2((_1240 + 128.0) / _1244, (_1241 + 128.0) / _84), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _70._m0 = 1u;
    uvec4 _1281 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1282 = _1281.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1282, _1281.w, _1282, vec3(_1229, _1230, _1231), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (_70._m0 == 0u)
    {
        float _1303 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1215, _1216, _1217));
        float _1680 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1306 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        float _1325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * cbMtdParam._m0[11u].x) * 0.949999988079071044921875);
        float _1326 = _1325 * _1325;
        float _1327 = g_sceneCB._m0[4u].x - _1104;
        float _1328 = g_sceneCB._m0[4u].y - _1105;
        float _1329 = g_sceneCB._m0[4u].z - _1106;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1334 = _1333 * _1327;
        float _1335 = _1333 * _1328;
        float _1336 = _1333 * _1329;
        float _1337 = dot(vec3(_1215, _1216, _1217), vec3(g_sceneCB._m0[4u].xyz));
        float _1691 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1340 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        float _1341 = dot(vec3(_1215, _1216, _1217), vec3(_1232, _1233, _1234));
        float _1702 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1344 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        float _1345 = dot(vec3(_1215, _1216, _1217), vec3(_1334, _1335, _1336));
        float _1713 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1348 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        float _1349 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1334, _1335, _1336));
        float _1724 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1326 * _1326;
        float _1357 = ((_1348 * _1348) * (_1353 + (-1.0))) + 1.0;
        float _1369 = (exp2(log2(1.0 - (isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1371 = 1.0 - _1326;
        float _1382 = (0.5 / (((_1344 * ((_1340 * _1371) + _1326)) + 9.9999999392252902907785028219223e-09) + (((_1344 * _1371) + _1326) * _1340))) * _1340;
        float _1735 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1384 = (isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0))) * (_1353 / ((_1357 * _1357) * 3.141590118408203125));
        _1391 = ((_917 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1306;
        _1392 = ((_918 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1306;
        _1393 = ((_919 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1306;
        _1394 = (_1369 * g_sceneCB._m0[5u].x) * _1384;
        _1395 = (_1369 * g_sceneCB._m0[5u].y) * _1384;
        _1396 = (_1369 * g_sceneCB._m0[5u].z) * _1384;
    }
    else
    {
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    bool _1398 = abs(_1216) < 0.89999997615814208984375;
    float _1400 = float(_1398);
    float _1401 = _1398 ? 0.0 : 1.0;
    float _1404 = (_1400 * _1217) - (_1401 * _1216);
    float _1405 = _1401 * _1215;
    float _1407 = (-0.0) - (_1215 * _1400);
    float _1411 = inversesqrt(dot(vec3(_1404, _1405, _1407), vec3(_1404, _1405, _1407)));
    float _1412 = _1404 * _1411;
    float _1413 = _1405 * _1411;
    float _1414 = _1411 * _1407;
    float _1417 = (_1413 * _1217) - (_1414 * _1216);
    float _1420 = (_1414 * _1215) - (_1412 * _1217);
    float _1423 = (_1412 * _1216) - (_1413 * _1215);
    float _1425;
    float _1433;
    float _1424 = 0.0;
    uint _1426 = 0u;
    float _1430;
    bool _1432;
    for (;;)
    {
        _1430 = (float(_1426) + _1258) * 0.03125;
        _1432 = _1426 == 0u;
        float frontier_phi_49_pred;
        if (_1432)
        {
            frontier_phi_49_pred = 0.0;
        }
        else
        {
            float _1567;
            float _1568;
            uint _1570;
            _1567 = 0.0;
            _1568 = 0.5;
            _1570 = _1426;
            float _1434;
            for (;;)
            {
                _1434 = ((_1570 & 1u) != 0u) ? (_1568 + _1567) : _1567;
                uint _1571 = _1570 >> 1u;
                if (_1571 == 0u)
                {
                    break;
                }
                else
                {
                    _1567 = _1434;
                    _1568 *= 0.5;
                    _1570 = _1571;
                }
            }
            frontier_phi_49_pred = _1434;
        }
        _1433 = frontier_phi_49_pred;
        float _1435 = _1433 + _1271;
        float _1439 = sqrt(_1430);
        float _1440 = ((_1435 > 1.0) ? (_1435 + (-1.0)) : _1435) * 6.283185482025146484375;
        float _1443 = cos(_1440) * _1439;
        float _1445 = sin(_1440) * _1439;
        float _1447 = sqrt(1.0 - _1430);
        float _1460 = ((_1447 * _1215) + (_1443 * _1417)) + (_1445 * _1412);
        float _1461 = ((_1447 * _1216) + (_1443 * _1420)) + (_1445 * _1413);
        float _1462 = ((_1447 * _1217) + (_1443 * _1423)) + (_1445 * _1414);
        _69._m0 = 1u;
        uvec4 _1466 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1467 = _1466.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1467, _1466.w, _1467, vec3(_1229, _1230, _1231), 9.9999997473787516355514526367188e-05, vec3(_1460, _1461, _1462), 10000.0, 1);
        float _1473 = dot(vec3(_1215, _1216, _1217), vec3(_1460, _1461, _1462));
        float _1746 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1476 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1425 = ((float(_69._m0 == 0u) * _1476) / (_1476 * 0.3183098733425140380859375)) + _1424;
        uint _1427 = _1426 + 1u;
        if (_1427 == 32u)
        {
            break;
        }
        else
        {
            _1424 = _1425;
            _1426 = _1427;
            continue;
        }
    }
    float _1484 = _1425 * 0.009947183541953563690185546875;
    float _1489 = dot(vec3(_1104, _1105, _1106), vec3(_1215, _1216, _1217)) * 2.0;
    vec4 _1503 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1104 - (_1489 * _1215), _1105 - (_1489 * _1216), _1106 - (_1489 * _1217)), 4.0 - (cbMtdParam._m0[11u].x * 4.0));
    float _1508 = dot(vec3(_1232, _1233, _1234), vec3(_1215, _1216, _1217));
    float _1757 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1517 = (exp2(log2(1.0 - (isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1523 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_1215, _1216, _1217), 0.0);
    float _1534 = (_1394 + _1391) + (((_1523.x * _917) + (_1517 * _1503.x)) * _1484);
    float _1538 = (_1395 + _1392) + (((_1523.y * _918) + (_1517 * _1503.y)) * _1484);
    float _1542 = (_1396 + _1393) + (((_1523.z * _919) + (_1517 * _1503.z)) * _1484);
    float _1768 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _1779 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
    float _1790 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    bool _1550 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1561;
    _1561.x = _1550 ? ((_609 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0)));
    _1561.y = _1550 ? ((_612 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0)));
    _1561.z = _1550 ? ((_615 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0)));
    payload._m0 = _1561;
}


