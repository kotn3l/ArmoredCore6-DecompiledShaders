#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _58
{
    vec3 _m0;
};

struct _62
{
    vec2 _m0;
};

struct _65
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _58 payload;
hitAttributeEXT _62 hit;
layout(location = 1) rayPayloadEXT _65 _67;
layout(location = 2) rayPayloadEXT _65 _68;

vec3 _1264;

void main()
{
    float _82 = float(gl_LaunchSizeEXT.y);
    float _110 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _112 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _119 = sqrt(((_111 * _111) + (_110 * _110)) + (_112 * _112)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _82)))));
    uvec4 _130 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _131 = _130.y;
    uint _171;
    uint _173;
    uint _174;
    if (_130.x == 0u)
    {
        uint _139 = (_131 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _148 = uvec3(texelFetch(l_geomIndexBuffer, int(_139)).x, texelFetch(l_geomIndexBuffer, int(_139 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_139 + 2u)).x);
        _171 = _148.x;
        _173 = _148.y;
        _174 = _148.z;
    }
    else
    {
        uint _152 = uint(gl_PrimitiveID) * 6u;
        uint _154 = _152 & 4294967292u;
        uint _157 = (_131 + _154) >> 2u;
        uvec2 _164 = uvec2(texelFetch(l_geomIndexBuffer, int(_157)).x, texelFetch(l_geomIndexBuffer, int(_157 + 1u)).x);
        uint _165 = _164.x;
        uint _166 = _164.y;
        uint _168 = _165 >> 16u;
        uint _169 = _166 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_154 == _152)
        {
            frontier_phi_3_2_ladder = _169;
            frontier_phi_3_2_ladder_1 = _168;
            frontier_phi_3_2_ladder_2 = _165 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _166 >> 16u;
            frontier_phi_3_2_ladder_1 = _169;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _171 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder_1;
        _174 = frontier_phi_3_2_ladder;
    }
    uvec4 _178 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _179 = _178.x;
    uint _180 = _178.z;
    bool _181 = _180 != 0u;
    bool _183 = _130.w == 0u;
    bool _184 = _181 || _183;
    uint _185 = _179 * _171;
    uint _186 = _185 + 12u;
    uint _210;
    uint _211;
    uint _212;
    uint _213;
    if (_184)
    {
        uvec4 _189 = texelFetch(l_geomAttrib_0, int(_186 >> 2u));
        uint _190 = _189.x;
        _210 = _190 & 255u;
        _211 = (_190 >> 8u) & 255u;
        _212 = (_190 >> 16u) & 255u;
        _213 = 16u;
    }
    else
    {
        uint _198 = _186 >> 2u;
        uvec2 _204 = uvec2(texelFetch(l_geomAttrib_0, int(_198)).x, texelFetch(l_geomAttrib_0, int(_198 + 1u)).x);
        uint _205 = _204.x;
        _210 = _205 & 65535u;
        _211 = _205 >> 16u;
        _212 = _204.y & 65535u;
        _213 = 20u;
    }
    uvec4 _221 = texelFetch(l_geomAttrib_0, int((_213 + _185) >> 2u));
    uint _222 = _221.x;
    bool _236 = _180 == 0u;
    uint _237;
    if (_236)
    {
        _237 = _213 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_183)
        {
            frontier_phi_9_10_ladder = _213 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _213 + 12u;
        }
        _237 = frontier_phi_9_10_ladder;
    }
    uvec4 _245 = texelFetch(l_geomAttrib_0, int(((_185 + 4u) + (_181 ? (_237 + 4u) : _237)) >> 2u));
    uint _246 = _245.x;
    float _250 = float(int(uint(int(_246 << 16u) >> int(16u))));
    float _251 = float(int(uint(int(_246) >> int(16u))));
    uint _252 = _179 * _173;
    uint _253 = _252 + 12u;
    uint _274;
    uint _275;
    uint _276;
    uint _277;
    if (_184)
    {
        uvec4 _255 = texelFetch(l_geomAttrib_0, int(_253 >> 2u));
        uint _256 = _255.x;
        _274 = _256 & 255u;
        _275 = (_256 >> 8u) & 255u;
        _276 = (_256 >> 16u) & 255u;
        _277 = 16u;
    }
    else
    {
        uint _262 = _253 >> 2u;
        uvec2 _268 = uvec2(texelFetch(l_geomAttrib_0, int(_262)).x, texelFetch(l_geomAttrib_0, int(_262 + 1u)).x);
        uint _269 = _268.x;
        _274 = _269 & 65535u;
        _275 = _269 >> 16u;
        _276 = _268.y & 65535u;
        _277 = 20u;
    }
    uvec4 _283 = texelFetch(l_geomAttrib_0, int((_277 + _252) >> 2u));
    uint _284 = _283.x;
    uint _296;
    if (_236)
    {
        _296 = _277 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_183)
        {
            frontier_phi_16_17_ladder = _277 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _277 + 12u;
        }
        _296 = frontier_phi_16_17_ladder;
    }
    uvec4 _304 = texelFetch(l_geomAttrib_0, int(((_252 + 4u) + (_181 ? (_296 + 4u) : _296)) >> 2u));
    uint _305 = _304.x;
    float _309 = float(int(uint(int(_305 << 16u) >> int(16u))));
    float _310 = float(int(uint(int(_305) >> int(16u))));
    uint _311 = _179 * _174;
    uint _312 = _311 + 12u;
    uint _333;
    uint _334;
    uint _335;
    uint _336;
    if (_184)
    {
        uvec4 _314 = texelFetch(l_geomAttrib_0, int(_312 >> 2u));
        uint _315 = _314.x;
        _333 = _315 & 255u;
        _334 = (_315 >> 8u) & 255u;
        _335 = (_315 >> 16u) & 255u;
        _336 = 16u;
    }
    else
    {
        uint _321 = _312 >> 2u;
        uvec2 _327 = uvec2(texelFetch(l_geomAttrib_0, int(_321)).x, texelFetch(l_geomAttrib_0, int(_321 + 1u)).x);
        uint _328 = _327.x;
        _333 = _328 & 65535u;
        _334 = _328 >> 16u;
        _335 = _327.y & 65535u;
        _336 = 20u;
    }
    uvec4 _342 = texelFetch(l_geomAttrib_0, int((_336 + _311) >> 2u));
    uint _343 = _342.x;
    uint _355;
    if (_236)
    {
        _355 = _336 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_183)
        {
            frontier_phi_23_24_ladder = _336 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _336 + 12u;
        }
        _355 = frontier_phi_23_24_ladder;
    }
    uvec4 _363 = texelFetch(l_geomAttrib_0, int(((_311 + 4u) + (_181 ? (_355 + 4u) : _355)) >> 2u));
    uint _364 = _363.x;
    float _368 = float(int(uint(int(_364 << 16u) >> int(16u))));
    float _369 = float(int(uint(int(_364) >> int(16u))));
    bool _371 = _130.z == 0u;
    float _407;
    float _408;
    float _409;
    if (_371)
    {
        uint _374 = _171 * 3u;
        uvec3 _383 = uvec3(texelFetch(l_geomPositionBuffer, int(_374)).x, texelFetch(l_geomPositionBuffer, int(_374 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_374 + 2u)).x);
        _407 = uintBitsToFloat(_383.x);
        _408 = uintBitsToFloat(_383.y);
        _409 = uintBitsToFloat(_383.z);
    }
    else
    {
        uint _391 = _171 * 2u;
        uvec2 _397 = uvec2(texelFetch(l_geomPositionBuffer, int(_391)).x, texelFetch(l_geomPositionBuffer, int(_391 + 1u)).x);
        uint _398 = _397.x;
        _407 = unpackHalf2x16(_398).x;
        _408 = unpackHalf2x16(_398 >> 16u).x;
        _409 = unpackHalf2x16(_397.y).x;
    }
    float _445;
    float _446;
    float _447;
    if (_371)
    {
        uint _412 = _173 * 3u;
        uvec3 _421 = uvec3(texelFetch(l_geomPositionBuffer, int(_412)).x, texelFetch(l_geomPositionBuffer, int(_412 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_412 + 2u)).x);
        _445 = uintBitsToFloat(_421.x);
        _446 = uintBitsToFloat(_421.y);
        _447 = uintBitsToFloat(_421.z);
    }
    else
    {
        uint _429 = _173 * 2u;
        uvec2 _435 = uvec2(texelFetch(l_geomPositionBuffer, int(_429)).x, texelFetch(l_geomPositionBuffer, int(_429 + 1u)).x);
        uint _436 = _435.x;
        _445 = unpackHalf2x16(_436).x;
        _446 = unpackHalf2x16(_436 >> 16u).x;
        _447 = unpackHalf2x16(_435.y).x;
    }
    float _483;
    float _484;
    float _485;
    if (_371)
    {
        uint _450 = _174 * 3u;
        uvec3 _459 = uvec3(texelFetch(l_geomPositionBuffer, int(_450)).x, texelFetch(l_geomPositionBuffer, int(_450 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_450 + 2u)).x);
        _483 = uintBitsToFloat(_459.x);
        _484 = uintBitsToFloat(_459.y);
        _485 = uintBitsToFloat(_459.z);
    }
    else
    {
        uint _467 = _174 * 2u;
        uvec2 _473 = uvec2(texelFetch(l_geomPositionBuffer, int(_467)).x, texelFetch(l_geomPositionBuffer, int(_467 + 1u)).x);
        uint _474 = _473.x;
        _483 = unpackHalf2x16(_474).x;
        _484 = unpackHalf2x16(_474 >> 16u).x;
        _485 = unpackHalf2x16(_473.y).x;
    }
    float _488 = (1.0 - hit._m0.x) - hit._m0.y;
    float _522 = (_309 - _250) * 0.00048828125;
    float _524 = (_310 - _251) * 0.00048828125;
    float _527 = (_368 - _250) * 0.00048828125;
    float _528 = (_369 - _251) * 0.00048828125;
    float _550 = _445 - _407;
    float _551 = _446 - _408;
    float _552 = _447 - _409;
    float _555 = fma(_552, gl_ObjectToWorldEXT[2u].x, fma(_551, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _550));
    float _558 = fma(_552, gl_ObjectToWorldEXT[2u].y, fma(_551, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _550));
    float _561 = fma(_552, gl_ObjectToWorldEXT[2u].z, fma(_551, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _550));
    float _562 = _483 - _407;
    float _563 = _484 - _408;
    float _564 = _485 - _409;
    float _567 = fma(_564, gl_ObjectToWorldEXT[2u].x, fma(_563, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _562));
    float _570 = fma(_564, gl_ObjectToWorldEXT[2u].y, fma(_563, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _562));
    float _573 = fma(_564, gl_ObjectToWorldEXT[2u].z, fma(_563, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _562));
    float _574 = (((_309 * hit._m0.x) + (_250 * _488)) + (_368 * hit._m0.y)) * 0.00048828125;
    float _575 = (((_310 * hit._m0.x) + (_251 * _488)) + (_369 * hit._m0.y)) * 0.00048828125;
    float _579 = (((float(_210) * _488) + (-127.0)) + (float(_274) * hit._m0.x)) + (float(_333) * hit._m0.y);
    float _582 = (((float(_211) * _488) + (-127.0)) + (float(_275) * hit._m0.x)) + (float(_334) * hit._m0.y);
    float _585 = (((float(_212) * _488) + (-127.0)) + (float(_276) * hit._m0.x)) + (float(_335) * hit._m0.y);
    float _586 = _579 * 0.0078740157186985015869140625;
    float _588 = _582 * 0.0078740157186985015869140625;
    float _589 = _585 * 0.0078740157186985015869140625;
    float _602 = ((((float(_222 & 255u) * _488) + (-127.0)) + (float(_284 & 255u) * hit._m0.x)) + (float(_343 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _603 = ((((float((_222 >> 8u) & 255u) * _488) + (-127.0)) + (float((_284 >> 8u) & 255u) * hit._m0.x)) + (float((_343 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _604 = ((((float((_222 >> 16u) & 255u) * _488) + (-127.0)) + (float((_284 >> 16u) & 255u) * hit._m0.x)) + (float((_343 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((((float(_222 >> 24u) * _488) + (-127.0)) + (float(_284 >> 24u) * hit._m0.x)) + (float(_343 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _615 = ((_603 * _589) - (_604 * _588)) * _605;
    float _616 = ((_604 * _586) - (_602 * _589)) * _605;
    float _617 = ((_602 * _588) - (_603 * _586)) * _605;
    float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
    float _622 = _621 * _615;
    float _623 = _621 * _616;
    float _624 = _621 * _617;
    float _644 = dot(vec3(0.0), vec3(_622, _623, _624));
    float _648 = dot(vec3(0.0), vec3(_602, _603, _604));
    float _651 = dot(vec3(0.0), vec3(_586, _588, _589));
    float _657 = inversesqrt(dot(vec3(_644, _648, _651), vec3(_644, _648, _651)));
    float _681 = dot(vec4(textureLod(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _574) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _575) + cbTextureTilingScale._m0[2u].w), 0.0)), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    uvec2 _701 = uvec2(textureSize(M_Water_Coaltar_solid_snp_0_Texture2D_1, int(0u)));
    bool _706 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _758;
    if (_706)
    {
        float _717 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _723 = (_573 * _558) - (_570 * _561);
        float _726 = (_567 * _561) - (_573 * _555);
        float _729 = (_570 * _555) - (_567 * _558);
        float _756 = ((log2((((float(_701.y) * 0.5) * float(_701.x)) * abs((_528 * _522) - (_527 * _524))) / (sqrt(((_726 * _726) + (_729 * _729)) + (_723 * _723)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_717 * gl_WorldRayDirectionEXT.x, _717 * gl_WorldRayDirectionEXT.y, _717 * gl_WorldRayDirectionEXT.z), vec3(_586, _588, _589))));
        _758 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _758 = 0.0;
    }
    vec4 _761 = textureLod(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_644 * cbMtdParam._m0[12u].x) * _657) * _681) + _574) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_648 * cbMtdParam._m0[12u].x) * _657) * _681) + _575) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w), _758);
    float _787 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_586, _588, _589, 0.0)) - cbMtdParam._m0[12u].w;
    float _1345 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _794 = exp2(log2(1.0 - (isnan(1.0) ? _1345 : (isnan(_1345) ? 1.0 : min(_1345, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _809 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _761.x) * cbMtdParam._m0[9u].x) * ((_794 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _813 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _761.y) * cbMtdParam._m0[9u].y) * ((_794 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _817 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _761.z) * cbMtdParam._m0[9u].z) * ((_794 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    uvec2 _829 = uvec2(textureSize(M_Water_Coaltar_solid_snp_0_Texture2D_7, int(0u)));
    float _833 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _834 = _833 * gl_WorldRayDirectionEXT.x;
    float _835 = _833 * gl_WorldRayDirectionEXT.y;
    float _836 = _833 * gl_WorldRayDirectionEXT.z;
    float _880;
    if (_706)
    {
        float _846 = (_573 * _558) - (_570 * _561);
        float _849 = (_567 * _561) - (_573 * _555);
        float _852 = (_570 * _555) - (_567 * _558);
        float _878 = ((log2((((float(_829.y) * 0.5) * float(_829.x)) * abs((_528 * _522) - (_527 * _524))) / (sqrt(((_849 * _849) + (_852 * _852)) + (_846 * _846)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_119) / abs(dot(vec3(_834, _835, _836), vec3(_586, _588, _589))));
        _880 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    }
    else
    {
        _880 = 0.0;
    }
    vec4 _883 = textureLod(sampler2D(M_Water_Coaltar_solid_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + _574)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + _575)) + cbTextureTilingScale._m0[4u].w), _880);
    float _890 = (_883.x * 2.0) + (-1.0);
    float _891 = (_883.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _1366 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _897 = sqrt(1.0 - (isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0))));
    float _902 = cbMtdParam._m0[14u].w + _883.z;
    float _905 = fma(_897, _586, fma(_891, _602, _890 * _622));
    float _908 = fma(_897, _588, fma(_891, _603, _890 * _623));
    float _911 = fma(_897, _589, fma(_891, _604, _890 * _624));
    float _915 = inversesqrt(dot(vec3(_905, _908, _911), vec3(_905, _908, _911)));
    float _916 = _915 * _905;
    float _917 = _915 * _908;
    float _918 = _915 * _911;
    float _930 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _931 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _932 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _933 = (-0.0) - _834;
    float _935 = (-0.0) - _835;
    float _936 = (-0.0) - _836;
    float _942 = float(gl_LaunchIDEXT.x);
    float _943 = float(gl_LaunchIDEXT.y);
    float _946 = float(gl_LaunchSizeEXT.x);
    float _960 = fract(fract(sin(dot(vec2(_942 / _946, _943 / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _973 = fract(fract(sin(dot(vec2((_942 + 128.0) / _946, (_943 + 128.0) / _82), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _68._m0 = 1u;
    uvec4 _983 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _984 = _983.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _984, _983.w, _984, vec3(_930, _931, _932), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (_68._m0 == 0u)
    {
        float _1005 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_916, _917, _918));
        float _1377 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1008 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
        float _1027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _902) * 0.949999988079071044921875);
        float _1028 = _1027 * _1027;
        float _1029 = g_sceneCB._m0[4u].x - _834;
        float _1030 = g_sceneCB._m0[4u].y - _835;
        float _1031 = g_sceneCB._m0[4u].z - _836;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1036 = _1035 * _1029;
        float _1037 = _1035 * _1030;
        float _1038 = _1035 * _1031;
        float _1039 = dot(vec3(_916, _917, _918), vec3(g_sceneCB._m0[4u].xyz));
        float _1388 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1042 = isnan(1.0) ? _1388 : (isnan(_1388) ? 1.0 : min(_1388, 1.0));
        float _1043 = dot(vec3(_916, _917, _918), vec3(_933, _935, _936));
        float _1399 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1046 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
        float _1047 = dot(vec3(_916, _917, _918), vec3(_1036, _1037, _1038));
        float _1410 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1050 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        float _1051 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1036, _1037, _1038));
        float _1421 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1028 * _1028;
        float _1059 = ((_1050 * _1050) * (_1055 + (-1.0))) + 1.0;
        float _1071 = (exp2(log2(1.0 - (isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1073 = 1.0 - _1028;
        float _1084 = (0.5 / (((_1046 * ((_1042 * _1073) + _1028)) + 9.9999999392252902907785028219223e-09) + (((_1046 * _1073) + _1028) * _1042))) * _1042;
        float _1432 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1086 = (isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0))) * (_1055 / ((_1059 * _1059) * 3.141590118408203125));
        _1093 = ((_809 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1008;
        _1094 = ((_813 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1008;
        _1095 = ((_817 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1008;
        _1096 = (_1071 * g_sceneCB._m0[5u].x) * _1086;
        _1097 = (_1071 * g_sceneCB._m0[5u].y) * _1086;
        _1098 = (_1071 * g_sceneCB._m0[5u].z) * _1086;
    }
    else
    {
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    bool _1100 = abs(_917) < 0.89999997615814208984375;
    float _1102 = float(_1100);
    float _1103 = _1100 ? 0.0 : 1.0;
    float _1106 = (_1102 * _918) - (_1103 * _917);
    float _1107 = _1103 * _916;
    float _1109 = (-0.0) - (_916 * _1102);
    float _1113 = inversesqrt(dot(vec3(_1106, _1107, _1109), vec3(_1106, _1107, _1109)));
    float _1114 = _1106 * _1113;
    float _1115 = _1107 * _1113;
    float _1116 = _1113 * _1109;
    float _1119 = (_1115 * _918) - (_1116 * _917);
    float _1122 = (_1116 * _916) - (_1114 * _918);
    float _1125 = (_1114 * _917) - (_1115 * _916);
    float _1127;
    float _1135;
    float _1126 = 0.0;
    uint _1128 = 0u;
    float _1132;
    bool _1134;
    for (;;)
    {
        _1132 = (float(_1128) + _960) * 0.03125;
        _1134 = _1128 == 0u;
        float frontier_phi_43_pred;
        if (_1134)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1269;
            float _1270;
            uint _1272;
            _1269 = 0.0;
            _1270 = 0.5;
            _1272 = _1128;
            float _1136;
            for (;;)
            {
                _1136 = ((_1272 & 1u) != 0u) ? (_1270 + _1269) : _1269;
                uint _1273 = _1272 >> 1u;
                if (_1273 == 0u)
                {
                    break;
                }
                else
                {
                    _1269 = _1136;
                    _1270 *= 0.5;
                    _1272 = _1273;
                }
            }
            frontier_phi_43_pred = _1136;
        }
        _1135 = frontier_phi_43_pred;
        float _1137 = _1135 + _973;
        float _1141 = sqrt(_1132);
        float _1142 = ((_1137 > 1.0) ? (_1137 + (-1.0)) : _1137) * 6.283185482025146484375;
        float _1145 = cos(_1142) * _1141;
        float _1147 = sin(_1142) * _1141;
        float _1149 = sqrt(1.0 - _1132);
        float _1162 = ((_1149 * _916) + (_1145 * _1119)) + (_1147 * _1114);
        float _1163 = ((_1149 * _917) + (_1145 * _1122)) + (_1147 * _1115);
        float _1164 = ((_1149 * _918) + (_1145 * _1125)) + (_1147 * _1116);
        _67._m0 = 1u;
        uvec4 _1168 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1169 = _1168.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1169, _1168.w, _1169, vec3(_930, _931, _932), 9.9999997473787516355514526367188e-05, vec3(_1162, _1163, _1164), 10000.0, 1);
        float _1175 = dot(vec3(_916, _917, _918), vec3(_1162, _1163, _1164));
        float _1443 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1178 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
        _1127 = ((float(_67._m0 == 0u) * _1178) / (_1178 * 0.3183098733425140380859375)) + _1126;
        uint _1129 = _1128 + 1u;
        if (_1129 == 32u)
        {
            break;
        }
        else
        {
            _1126 = _1127;
            _1128 = _1129;
            continue;
        }
    }
    float _1186 = _1127 * 0.009947183541953563690185546875;
    float _1191 = dot(vec3(_834, _835, _836), vec3(_916, _917, _918)) * 2.0;
    vec4 _1205 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_834 - (_1191 * _916), _835 - (_1191 * _917), _836 - (_1191 * _918)), 4.0 - (_902 * 4.0));
    float _1210 = dot(vec3(_933, _935, _936), vec3(_916, _917, _918));
    float _1454 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1219 = (exp2(log2(1.0 - (isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1225 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_916, _917, _918), 0.0);
    float _1236 = (_1096 + _1093) + (((_1225.x * _809) + (_1219 * _1205.x)) * _1186);
    float _1240 = (_1097 + _1094) + (((_1225.y * _813) + (_1219 * _1205.y)) * _1186);
    float _1244 = (_1098 + _1095) + (((_1225.z * _817) + (_1219 * _1205.z)) * _1186);
    float _1465 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1476 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1487 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    bool _1252 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1263;
    _1263.x = _1252 ? ((_579 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0)));
    _1263.y = _1252 ? ((_582 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0)));
    _1263.z = _1252 ? ((_585 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0)));
    payload._m0 = _1263;
}


