#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _41
{
    vec3 _m0;
};

struct _45
{
    vec2 _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(location = 0) rayPayloadInEXT _41 payload;
hitAttributeEXT _45 hit;

void main()
{
    vec3 _51 = payload._m0;
    float _88 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _89 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _90 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _97 = sqrt(((_89 * _89) + (_88 * _88)) + (_90 * _90)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * float(gl_LaunchSizeEXT.y))))));
    uvec4 _108 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _109 = _108.y;
    uint _149;
    uint _151;
    uint _152;
    if (_108.x == 0u)
    {
        uint _117 = (_109 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _126 = uvec3(texelFetch(l_geomIndexBuffer, int(_117)).x, texelFetch(l_geomIndexBuffer, int(_117 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_117 + 2u)).x);
        _149 = _126.x;
        _151 = _126.y;
        _152 = _126.z;
    }
    else
    {
        uint _130 = uint(gl_PrimitiveID) * 6u;
        uint _132 = _130 & 4294967292u;
        uint _135 = (_109 + _132) >> 2u;
        uvec2 _142 = uvec2(texelFetch(l_geomIndexBuffer, int(_135)).x, texelFetch(l_geomIndexBuffer, int(_135 + 1u)).x);
        uint _143 = _142.x;
        uint _144 = _142.y;
        uint _146 = _143 >> 16u;
        uint _147 = _144 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_132 == _130)
        {
            frontier_phi_3_2_ladder = _143 & 65535u;
            frontier_phi_3_2_ladder_1 = _146;
            frontier_phi_3_2_ladder_2 = _147;
        }
        else
        {
            frontier_phi_3_2_ladder = _146;
            frontier_phi_3_2_ladder_1 = _147;
            frontier_phi_3_2_ladder_2 = _144 >> 16u;
        }
        _149 = frontier_phi_3_2_ladder;
        _151 = frontier_phi_3_2_ladder_1;
        _152 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _156 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _157 = _156.x;
    uint _158 = _156.z;
    bool _159 = _158 != 0u;
    bool _161 = _108.w == 0u;
    bool _162 = _159 || _161;
    uint _164 = (_157 * _149) + 12u;
    uint _188;
    uint _189;
    uint _190;
    uint _191;
    if (_162)
    {
        uvec4 _167 = texelFetch(l_geomAttrib_0, int(_164 >> 2u));
        uint _168 = _167.x;
        _188 = _168 & 255u;
        _189 = (_168 >> 8u) & 255u;
        _190 = (_168 >> 16u) & 255u;
        _191 = 20u;
    }
    else
    {
        uint _176 = _164 >> 2u;
        uvec2 _182 = uvec2(texelFetch(l_geomAttrib_0, int(_176)).x, texelFetch(l_geomAttrib_0, int(_176 + 1u)).x);
        uint _183 = _182.x;
        _188 = _183 & 65535u;
        _189 = _183 >> 16u;
        _190 = _182.y & 65535u;
        _191 = 24u;
    }
    bool _197 = _158 == 0u;
    uint _198;
    if (_197)
    {
        _198 = _191;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_161)
        {
            frontier_phi_9_10_ladder = _191 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _191 + 8u;
        }
        _198 = frontier_phi_9_10_ladder;
    }
    uvec4 _209 = texelFetch(l_geomAttrib_0, int((((_157 * _149) + 4u) + (_159 ? (_198 + 4u) : _198)) >> 2u));
    uint _210 = _209.x;
    float _214 = float(int(uint(int(_210 << 16u) >> int(16u))));
    float _215 = float(int(uint(int(_210) >> int(16u))));
    uint _217 = (_157 * _151) + 12u;
    uint _238;
    uint _239;
    uint _240;
    uint _241;
    if (_162)
    {
        uvec4 _219 = texelFetch(l_geomAttrib_0, int(_217 >> 2u));
        uint _220 = _219.x;
        _238 = _220 & 255u;
        _239 = (_220 >> 8u) & 255u;
        _240 = (_220 >> 16u) & 255u;
        _241 = 20u;
    }
    else
    {
        uint _226 = _217 >> 2u;
        uvec2 _232 = uvec2(texelFetch(l_geomAttrib_0, int(_226)).x, texelFetch(l_geomAttrib_0, int(_226 + 1u)).x);
        uint _233 = _232.x;
        _238 = _233 & 65535u;
        _239 = _233 >> 16u;
        _240 = _232.y & 65535u;
        _241 = 24u;
    }
    uint _245;
    if (_197)
    {
        _245 = _241;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_161)
        {
            frontier_phi_16_17_ladder = _241 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _241 + 8u;
        }
        _245 = frontier_phi_16_17_ladder;
    }
    uvec4 _254 = texelFetch(l_geomAttrib_0, int((((_157 * _151) + 4u) + (_159 ? (_245 + 4u) : _245)) >> 2u));
    uint _255 = _254.x;
    float _259 = float(int(uint(int(_255 << 16u) >> int(16u))));
    float _260 = float(int(uint(int(_255) >> int(16u))));
    uint _262 = (_157 * _152) + 12u;
    uint _283;
    uint _284;
    uint _285;
    uint _286;
    if (_162)
    {
        uvec4 _264 = texelFetch(l_geomAttrib_0, int(_262 >> 2u));
        uint _265 = _264.x;
        _283 = _265 & 255u;
        _284 = (_265 >> 8u) & 255u;
        _285 = (_265 >> 16u) & 255u;
        _286 = 20u;
    }
    else
    {
        uint _271 = _262 >> 2u;
        uvec2 _277 = uvec2(texelFetch(l_geomAttrib_0, int(_271)).x, texelFetch(l_geomAttrib_0, int(_271 + 1u)).x);
        uint _278 = _277.x;
        _283 = _278 & 65535u;
        _284 = _278 >> 16u;
        _285 = _277.y & 65535u;
        _286 = 24u;
    }
    uint _290;
    if (_197)
    {
        _290 = _286;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_161)
        {
            frontier_phi_23_24_ladder = _286 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _286 + 8u;
        }
        _290 = frontier_phi_23_24_ladder;
    }
    uvec4 _299 = texelFetch(l_geomAttrib_0, int((((_157 * _152) + 4u) + (_159 ? (_290 + 4u) : _290)) >> 2u));
    uint _300 = _299.x;
    float _304 = float(int(uint(int(_300 << 16u) >> int(16u))));
    float _305 = float(int(uint(int(_300) >> int(16u))));
    bool _307 = _108.z == 0u;
    float _343;
    float _344;
    float _345;
    if (_307)
    {
        uint _310 = _149 * 3u;
        uvec3 _319 = uvec3(texelFetch(l_geomPositionBuffer, int(_310)).x, texelFetch(l_geomPositionBuffer, int(_310 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_310 + 2u)).x);
        _343 = uintBitsToFloat(_319.x);
        _344 = uintBitsToFloat(_319.y);
        _345 = uintBitsToFloat(_319.z);
    }
    else
    {
        uint _327 = _149 * 2u;
        uvec2 _333 = uvec2(texelFetch(l_geomPositionBuffer, int(_327)).x, texelFetch(l_geomPositionBuffer, int(_327 + 1u)).x);
        uint _334 = _333.x;
        _343 = unpackHalf2x16(_334).x;
        _344 = unpackHalf2x16(_334 >> 16u).x;
        _345 = unpackHalf2x16(_333.y).x;
    }
    float _381;
    float _382;
    float _383;
    if (_307)
    {
        uint _348 = _151 * 3u;
        uvec3 _357 = uvec3(texelFetch(l_geomPositionBuffer, int(_348)).x, texelFetch(l_geomPositionBuffer, int(_348 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_348 + 2u)).x);
        _381 = uintBitsToFloat(_357.x);
        _382 = uintBitsToFloat(_357.y);
        _383 = uintBitsToFloat(_357.z);
    }
    else
    {
        uint _365 = _151 * 2u;
        uvec2 _371 = uvec2(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x);
        uint _372 = _371.x;
        _381 = unpackHalf2x16(_372).x;
        _382 = unpackHalf2x16(_372 >> 16u).x;
        _383 = unpackHalf2x16(_371.y).x;
    }
    float _419;
    float _420;
    float _421;
    if (_307)
    {
        uint _386 = _152 * 3u;
        uvec3 _395 = uvec3(texelFetch(l_geomPositionBuffer, int(_386)).x, texelFetch(l_geomPositionBuffer, int(_386 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_386 + 2u)).x);
        _419 = uintBitsToFloat(_395.x);
        _420 = uintBitsToFloat(_395.y);
        _421 = uintBitsToFloat(_395.z);
    }
    else
    {
        uint _403 = _152 * 2u;
        uvec2 _409 = uvec2(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x);
        uint _410 = _409.x;
        _419 = unpackHalf2x16(_410).x;
        _420 = unpackHalf2x16(_410 >> 16u).x;
        _421 = unpackHalf2x16(_409.y).x;
    }
    float _424 = (1.0 - hit._m0.x) - hit._m0.y;
    float _446 = (_259 - _214) * 0.00048828125;
    float _448 = (_260 - _215) * 0.00048828125;
    float _451 = (_304 - _214) * 0.00048828125;
    float _452 = (_305 - _215) * 0.00048828125;
    float _474 = _381 - _343;
    float _475 = _382 - _344;
    float _476 = _383 - _345;
    float _479 = fma(_476, gl_ObjectToWorldEXT[2u].x, fma(_475, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _474));
    float _482 = fma(_476, gl_ObjectToWorldEXT[2u].y, fma(_475, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _474));
    float _485 = fma(_476, gl_ObjectToWorldEXT[2u].z, fma(_475, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _474));
    float _486 = _419 - _343;
    float _487 = _420 - _344;
    float _488 = _421 - _345;
    float _491 = fma(_488, gl_ObjectToWorldEXT[2u].x, fma(_487, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _486));
    float _494 = fma(_488, gl_ObjectToWorldEXT[2u].y, fma(_487, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _486));
    float _497 = fma(_488, gl_ObjectToWorldEXT[2u].z, fma(_487, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _486));
    float _498 = (((_259 * hit._m0.x) + (_214 * _424)) + (_304 * hit._m0.y)) * 0.00048828125;
    float _499 = (((_260 * hit._m0.x) + (_215 * _424)) + (_305 * hit._m0.y)) * 0.00048828125;
    float _510 = ((((float(_188) * _424) + (-127.0)) + (float(_238) * hit._m0.x)) + (float(_283) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _512 = ((((float(_189) * _424) + (-127.0)) + (float(_239) * hit._m0.x)) + (float(_284) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _513 = ((((float(_190) * _424) + (-127.0)) + (float(_240) * hit._m0.x)) + (float(_285) * hit._m0.y)) * 0.0078740157186985015869140625;
    uvec2 _525 = uvec2(textureSize(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, int(0u)));
    bool _530 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _583;
    if (_530)
    {
        float _541 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _547 = (_497 * _482) - (_494 * _485);
        float _550 = (_491 * _485) - (_497 * _479);
        float _553 = (_494 * _479) - (_491 * _482);
        float _580 = ((log2((((float(_525.y) * 0.5) * float(_525.x)) * abs((_452 * _446) - (_451 * _448))) / (sqrt(((_550 * _550) + (_553 * _553)) + (_547 * _547)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_97) / abs(dot(vec3(_541 * gl_WorldRayDirectionEXT.x, _541 * gl_WorldRayDirectionEXT.y, _541 * gl_WorldRayDirectionEXT.z), vec3(_510, _512, _513))));
        _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    }
    else
    {
        _583 = 0.0;
    }
    uvec2 _601 = uvec2(textureSize(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, int(0u)));
    float _652;
    if (_530)
    {
        float _612 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _618 = (_497 * _482) - (_494 * _485);
        float _621 = (_491 * _485) - (_497 * _479);
        float _624 = (_494 * _479) - (_491 * _482);
        float _650 = ((log2((((float(_601.y) * 0.5) * float(_601.x)) * abs((_452 * _446) - (_451 * _448))) / (sqrt(((_621 * _621) + (_624 * _624)) + (_618 * _618)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_97) / abs(dot(vec3(_612 * gl_WorldRayDirectionEXT.x, _612 * gl_WorldRayDirectionEXT.y, _612 * gl_WorldRayDirectionEXT.z), vec3(_510, _512, _513))));
        _652 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    }
    else
    {
        _652 = 0.0;
    }
    if ((textureLod(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _498) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _499) + cbTextureTilingScale._m0[1u].w), _652).w * textureLod(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _498) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _499) + cbTextureTilingScale._m0[0u].w), _583).w) < cbMtdParam._m0[1u].x)
    {
        payload._m0 = _51;
        ignoreIntersectionEXT;
    }
    else
    {
        payload._m0 = _51;
        return;
    }
}


