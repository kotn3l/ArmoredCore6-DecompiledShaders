#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _52
{
    vec3 _m0;
};

struct _56
{
    vec2 _m0;
};

struct _59
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _52 payload;
hitAttributeEXT _56 hit;
layout(location = 1) rayPayloadEXT _59 _61;
layout(location = 2) rayPayloadEXT _59 _62;

vec3 _1232;

void main()
{
    float _70 = float(gl_LaunchSizeEXT.y);
    float _100 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _109 = sqrt(((_101 * _101) + (_100 * _100)) + (_102 * _102)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _70)))));
    uvec4 _120 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _121 = _120.y;
    uint _161;
    uint _163;
    uint _164;
    if (_120.x == 0u)
    {
        uint _129 = (_121 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _138 = uvec3(texelFetch(l_geomIndexBuffer, int(_129)).x, texelFetch(l_geomIndexBuffer, int(_129 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_129 + 2u)).x);
        _161 = _138.x;
        _163 = _138.y;
        _164 = _138.z;
    }
    else
    {
        uint _142 = uint(gl_PrimitiveID) * 6u;
        uint _144 = _142 & 4294967292u;
        uint _147 = (_121 + _144) >> 2u;
        uvec2 _154 = uvec2(texelFetch(l_geomIndexBuffer, int(_147)).x, texelFetch(l_geomIndexBuffer, int(_147 + 1u)).x);
        uint _155 = _154.x;
        uint _156 = _154.y;
        uint _158 = _155 >> 16u;
        uint _159 = _156 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_144 == _142)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _155 & 65535u;
            frontier_phi_3_2_ladder_2 = _159;
        }
        else
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _156 >> 16u;
        }
        _161 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
        _164 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _168 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _169 = _168.x;
    uint _170 = _168.z;
    bool _171 = _170 != 0u;
    bool _173 = _120.w == 0u;
    bool _174 = _171 || _173;
    uint _175 = _169 * _161;
    uint _176 = _175 + 12u;
    uint _200;
    uint _201;
    uint _202;
    uint _203;
    if (_174)
    {
        uvec4 _179 = texelFetch(l_geomAttrib_0, int(_176 >> 2u));
        uint _180 = _179.x;
        _200 = _180 & 255u;
        _201 = (_180 >> 8u) & 255u;
        _202 = (_180 >> 16u) & 255u;
        _203 = 16u;
    }
    else
    {
        uint _188 = _176 >> 2u;
        uvec2 _194 = uvec2(texelFetch(l_geomAttrib_0, int(_188)).x, texelFetch(l_geomAttrib_0, int(_188 + 1u)).x);
        uint _195 = _194.x;
        _200 = _195 & 65535u;
        _201 = _195 >> 16u;
        _202 = _194.y & 65535u;
        _203 = 20u;
    }
    uvec4 _211 = texelFetch(l_geomAttrib_0, int((_203 + _175) >> 2u));
    uint _212 = _211.x;
    bool _226 = _170 == 0u;
    uint _227;
    if (_226)
    {
        _227 = _203 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_173)
        {
            frontier_phi_9_10_ladder = _203 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _203 + 12u;
        }
        _227 = frontier_phi_9_10_ladder;
    }
    uvec4 _235 = texelFetch(l_geomAttrib_0, int(((_175 + 4u) + (_171 ? (_227 + 4u) : _227)) >> 2u));
    uint _236 = _235.x;
    float _240 = float(int(uint(int(_236 << 16u) >> int(16u))));
    float _241 = float(int(uint(int(_236) >> int(16u))));
    uint _242 = _169 * _163;
    uint _243 = _242 + 12u;
    uint _264;
    uint _265;
    uint _266;
    uint _267;
    if (_174)
    {
        uvec4 _245 = texelFetch(l_geomAttrib_0, int(_243 >> 2u));
        uint _246 = _245.x;
        _264 = _246 & 255u;
        _265 = (_246 >> 8u) & 255u;
        _266 = (_246 >> 16u) & 255u;
        _267 = 16u;
    }
    else
    {
        uint _252 = _243 >> 2u;
        uvec2 _258 = uvec2(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x);
        uint _259 = _258.x;
        _264 = _259 & 65535u;
        _265 = _259 >> 16u;
        _266 = _258.y & 65535u;
        _267 = 20u;
    }
    uvec4 _273 = texelFetch(l_geomAttrib_0, int((_267 + _242) >> 2u));
    uint _274 = _273.x;
    uint _286;
    if (_226)
    {
        _286 = _267 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_173)
        {
            frontier_phi_16_17_ladder = _267 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _267 + 12u;
        }
        _286 = frontier_phi_16_17_ladder;
    }
    uvec4 _294 = texelFetch(l_geomAttrib_0, int(((_242 + 4u) + (_171 ? (_286 + 4u) : _286)) >> 2u));
    uint _295 = _294.x;
    float _299 = float(int(uint(int(_295 << 16u) >> int(16u))));
    float _300 = float(int(uint(int(_295) >> int(16u))));
    uint _301 = _169 * _164;
    uint _302 = _301 + 12u;
    uint _323;
    uint _324;
    uint _325;
    uint _326;
    if (_174)
    {
        uvec4 _304 = texelFetch(l_geomAttrib_0, int(_302 >> 2u));
        uint _305 = _304.x;
        _323 = _305 & 255u;
        _324 = (_305 >> 8u) & 255u;
        _325 = (_305 >> 16u) & 255u;
        _326 = 16u;
    }
    else
    {
        uint _311 = _302 >> 2u;
        uvec2 _317 = uvec2(texelFetch(l_geomAttrib_0, int(_311)).x, texelFetch(l_geomAttrib_0, int(_311 + 1u)).x);
        uint _318 = _317.x;
        _323 = _318 & 65535u;
        _324 = _318 >> 16u;
        _325 = _317.y & 65535u;
        _326 = 20u;
    }
    uvec4 _332 = texelFetch(l_geomAttrib_0, int((_326 + _301) >> 2u));
    uint _333 = _332.x;
    uint _345;
    if (_226)
    {
        _345 = _326 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_173)
        {
            frontier_phi_23_24_ladder = _326 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _326 + 12u;
        }
        _345 = frontier_phi_23_24_ladder;
    }
    uvec4 _353 = texelFetch(l_geomAttrib_0, int(((_301 + 4u) + (_171 ? (_345 + 4u) : _345)) >> 2u));
    uint _354 = _353.x;
    float _358 = float(int(uint(int(_354 << 16u) >> int(16u))));
    float _359 = float(int(uint(int(_354) >> int(16u))));
    bool _361 = _120.z == 0u;
    float _397;
    float _398;
    float _399;
    if (_361)
    {
        uint _364 = _161 * 3u;
        uvec3 _373 = uvec3(texelFetch(l_geomPositionBuffer, int(_364)).x, texelFetch(l_geomPositionBuffer, int(_364 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_364 + 2u)).x);
        _397 = uintBitsToFloat(_373.x);
        _398 = uintBitsToFloat(_373.y);
        _399 = uintBitsToFloat(_373.z);
    }
    else
    {
        uint _381 = _161 * 2u;
        uvec2 _387 = uvec2(texelFetch(l_geomPositionBuffer, int(_381)).x, texelFetch(l_geomPositionBuffer, int(_381 + 1u)).x);
        uint _388 = _387.x;
        _397 = unpackHalf2x16(_388).x;
        _398 = unpackHalf2x16(_388 >> 16u).x;
        _399 = unpackHalf2x16(_387.y).x;
    }
    float _435;
    float _436;
    float _437;
    if (_361)
    {
        uint _402 = _163 * 3u;
        uvec3 _411 = uvec3(texelFetch(l_geomPositionBuffer, int(_402)).x, texelFetch(l_geomPositionBuffer, int(_402 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_402 + 2u)).x);
        _435 = uintBitsToFloat(_411.x);
        _436 = uintBitsToFloat(_411.y);
        _437 = uintBitsToFloat(_411.z);
    }
    else
    {
        uint _419 = _163 * 2u;
        uvec2 _425 = uvec2(texelFetch(l_geomPositionBuffer, int(_419)).x, texelFetch(l_geomPositionBuffer, int(_419 + 1u)).x);
        uint _426 = _425.x;
        _435 = unpackHalf2x16(_426).x;
        _436 = unpackHalf2x16(_426 >> 16u).x;
        _437 = unpackHalf2x16(_425.y).x;
    }
    float _473;
    float _474;
    float _475;
    if (_361)
    {
        uint _440 = _164 * 3u;
        uvec3 _449 = uvec3(texelFetch(l_geomPositionBuffer, int(_440)).x, texelFetch(l_geomPositionBuffer, int(_440 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_440 + 2u)).x);
        _473 = uintBitsToFloat(_449.x);
        _474 = uintBitsToFloat(_449.y);
        _475 = uintBitsToFloat(_449.z);
    }
    else
    {
        uint _457 = _164 * 2u;
        uvec2 _463 = uvec2(texelFetch(l_geomPositionBuffer, int(_457)).x, texelFetch(l_geomPositionBuffer, int(_457 + 1u)).x);
        uint _464 = _463.x;
        _473 = unpackHalf2x16(_464).x;
        _474 = unpackHalf2x16(_464 >> 16u).x;
        _475 = unpackHalf2x16(_463.y).x;
    }
    float _478 = (1.0 - hit._m0.x) - hit._m0.y;
    float _512 = (_299 - _240) * 0.00048828125;
    float _514 = (_300 - _241) * 0.00048828125;
    float _517 = (_358 - _240) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _540 = _435 - _397;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _545 = fma(_542, gl_ObjectToWorldEXT[2u].x, fma(_541, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _540));
    float _548 = fma(_542, gl_ObjectToWorldEXT[2u].y, fma(_541, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _540));
    float _551 = fma(_542, gl_ObjectToWorldEXT[2u].z, fma(_541, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _540));
    float _552 = _473 - _397;
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _557 = fma(_554, gl_ObjectToWorldEXT[2u].x, fma(_553, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _552));
    float _560 = fma(_554, gl_ObjectToWorldEXT[2u].y, fma(_553, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _552));
    float _563 = fma(_554, gl_ObjectToWorldEXT[2u].z, fma(_553, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _552));
    float _564 = (((_299 * hit._m0.x) + (_240 * _478)) + (_358 * hit._m0.y)) * 0.00048828125;
    float _565 = (((_300 * hit._m0.x) + (_241 * _478)) + (_359 * hit._m0.y)) * 0.00048828125;
    float _569 = (((float(_200) * _478) + (-127.0)) + (float(_264) * hit._m0.x)) + (float(_323) * hit._m0.y);
    float _572 = (((float(_201) * _478) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _575 = (((float(_202) * _478) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = _569 * 0.0078740157186985015869140625;
    float _578 = _572 * 0.0078740157186985015869140625;
    float _579 = _575 * 0.0078740157186985015869140625;
    float _592 = ((((float(_212 & 255u) * _478) + (-127.0)) + (float(_274 & 255u) * hit._m0.x)) + (float(_333 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _593 = ((((float((_212 >> 8u) & 255u) * _478) + (-127.0)) + (float((_274 >> 8u) & 255u) * hit._m0.x)) + (float((_333 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_212 >> 16u) & 255u) * _478) + (-127.0)) + (float((_274 >> 16u) & 255u) * hit._m0.x)) + (float((_333 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float(_212 >> 24u) * _478) + (-127.0)) + (float(_274 >> 24u) * hit._m0.x)) + (float(_333 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _605 = ((_593 * _579) - (_594 * _578)) * _595;
    float _606 = ((_594 * _576) - (_592 * _579)) * _595;
    float _607 = ((_592 * _578) - (_593 * _576)) * _595;
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    uvec2 _632 = uvec2(textureSize(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, int(0u)));
    bool _637 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _690;
    if (_637)
    {
        float _648 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _654 = (_563 * _548) - (_560 * _551);
        float _657 = (_557 * _551) - (_563 * _545);
        float _660 = (_560 * _545) - (_557 * _548);
        float _687 = ((log2((((float(_632.y) * 0.5) * float(_632.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_657 * _657) + (_660 * _660)) + (_654 * _654)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_648 * gl_WorldRayDirectionEXT.x, _648 * gl_WorldRayDirectionEXT.y, _648 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    }
    else
    {
        _690 = 0.0;
    }
    vec4 _694 = textureLod(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _564) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _565) + cbTextureTilingScale._m0[0u].w), _690);
    float _699 = _694.x * cbMtdParam._m0[9u].x;
    float _700 = _694.y * cbMtdParam._m0[9u].y;
    float _701 = _694.z * cbMtdParam._m0[9u].z;
    uvec2 _713 = uvec2(textureSize(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, int(0u)));
    float _764;
    if (_637)
    {
        float _724 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _730 = (_563 * _548) - (_560 * _551);
        float _733 = (_557 * _551) - (_563 * _545);
        float _736 = (_560 * _545) - (_557 * _548);
        float _762 = ((log2((((float(_713.y) * 0.5) * float(_713.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_733 * _733) + (_736 * _736)) + (_730 * _730)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_724 * gl_WorldRayDirectionEXT.x, _724 * gl_WorldRayDirectionEXT.y, _724 * gl_WorldRayDirectionEXT.z), vec3(_576, _578, _579))));
        _764 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    }
    else
    {
        _764 = 0.0;
    }
    vec4 _767 = textureLod(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _564) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _565) + cbTextureTilingScale._m0[1u].w), _764);
    float _771 = _767.z;
    float _774 = (_767.x * 2.0) + (-1.0);
    float _776 = (_767.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_774, _776), vec2(_774, _776));
    float _1320 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _1320 : (isnan(_1320) ? 1.0 : min(_1320, 1.0))));
    uvec2 _804 = uvec2(textureSize(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, int(0u)));
    float _808 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _809 = _808 * gl_WorldRayDirectionEXT.x;
    float _810 = _808 * gl_WorldRayDirectionEXT.y;
    float _811 = _808 * gl_WorldRayDirectionEXT.z;
    float _855;
    if (_637)
    {
        float _821 = (_563 * _548) - (_560 * _551);
        float _824 = (_557 * _551) - (_563 * _545);
        float _827 = (_560 * _545) - (_557 * _548);
        float _853 = ((log2((((float(_804.y) * 0.5) * float(_804.x)) * abs((_518 * _512) - (_517 * _514))) / (sqrt(((_824 * _824) + (_827 * _827)) + (_821 * _821)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_109) / abs(dot(vec3(_809, _810, _811), vec3(_576, _578, _579))));
        _855 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    }
    else
    {
        _855 = 0.0;
    }
    vec4 _857 = textureLod(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _564) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _565) + cbTextureTilingScale._m0[3u].w), _855);
    float _870 = fma(_782, _576, fma(_776, _592, (_611 * _605) * _774));
    float _873 = fma(_782, _578, fma(_776, _593, (_611 * _606) * _774));
    float _876 = fma(_782, _579, fma(_776, _594, (_611 * _607) * _774));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _895 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _896 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _897 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _898 = (-0.0) - _809;
    float _900 = (-0.0) - _810;
    float _901 = (-0.0) - _811;
    float _907 = float(gl_LaunchIDEXT.x);
    float _908 = float(gl_LaunchIDEXT.y);
    float _911 = float(gl_LaunchSizeEXT.x);
    float _925 = fract(fract(sin(dot(vec2(_907 / _911, _908 / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _938 = fract(fract(sin(dot(vec2((_907 + 128.0) / _911, (_908 + 128.0) / _70), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _62._m0 = 1u;
    uvec4 _948 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _949 = _948.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _949, _948.w, _949, vec3(_895, _896, _897), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (_62._m0 == 0u)
    {
        float _970 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_881, _882, _883));
        float _1336 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _973 = isnan(1.0) ? _1336 : (isnan(_1336) ? 1.0 : min(_1336, 1.0));
        float _992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _771) * 0.949999988079071044921875);
        float _993 = _992 * _992;
        float _994 = g_sceneCB._m0[4u].x - _809;
        float _995 = g_sceneCB._m0[4u].y - _810;
        float _996 = g_sceneCB._m0[4u].z - _811;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1001 = _1000 * _994;
        float _1002 = _1000 * _995;
        float _1003 = _1000 * _996;
        float _1004 = dot(vec3(_881, _882, _883), vec3(g_sceneCB._m0[4u].xyz));
        float _1347 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1007 = isnan(1.0) ? _1347 : (isnan(_1347) ? 1.0 : min(_1347, 1.0));
        float _1008 = dot(vec3(_881, _882, _883), vec3(_898, _900, _901));
        float _1358 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1011 = isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0));
        float _1012 = dot(vec3(_881, _882, _883), vec3(_1001, _1002, _1003));
        float _1369 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1015 = isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0));
        float _1016 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1001, _1002, _1003));
        float _1380 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _993 * _993;
        float _1024 = ((_1015 * _1015) * (_1020 + (-1.0))) + 1.0;
        float _1036 = (exp2(log2(1.0 - (isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1038 = 1.0 - _993;
        float _1049 = (0.5 / (((_1011 * ((_1007 * _1038) + _993)) + 9.9999999392252902907785028219223e-09) + (((_1011 * _1038) + _993) * _1007))) * _1007;
        float _1391 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1051 = (isnan(1.0) ? _1391 : (isnan(_1391) ? 1.0 : min(_1391, 1.0))) * (_1020 / ((_1024 * _1024) * 3.141590118408203125));
        _1058 = ((_699 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _973;
        _1059 = ((_700 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _973;
        _1060 = ((_701 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _973;
        _1061 = (_1036 * g_sceneCB._m0[5u].x) * _1051;
        _1062 = (_1036 * g_sceneCB._m0[5u].y) * _1051;
        _1063 = (_1036 * g_sceneCB._m0[5u].z) * _1051;
    }
    else
    {
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    bool _1065 = abs(_882) < 0.89999997615814208984375;
    float _1067 = float(_1065);
    float _1068 = _1065 ? 0.0 : 1.0;
    float _1071 = (_1067 * _883) - (_1068 * _882);
    float _1072 = _1068 * _881;
    float _1074 = (-0.0) - (_881 * _1067);
    float _1078 = inversesqrt(dot(vec3(_1071, _1072, _1074), vec3(_1071, _1072, _1074)));
    float _1079 = _1071 * _1078;
    float _1080 = _1072 * _1078;
    float _1081 = _1078 * _1074;
    float _1084 = (_1080 * _883) - (_1081 * _882);
    float _1087 = (_1081 * _881) - (_1079 * _883);
    float _1090 = (_1079 * _882) - (_1080 * _881);
    float _1092;
    float _1100;
    float _1091 = 0.0;
    uint _1093 = 0u;
    float _1097;
    bool _1099;
    for (;;)
    {
        _1097 = (float(_1093) + _925) * 0.03125;
        _1099 = _1093 == 0u;
        float frontier_phi_45_pred;
        if (_1099)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1237;
            float _1238;
            uint _1240;
            _1237 = 0.0;
            _1238 = 0.5;
            _1240 = _1093;
            float _1101;
            for (;;)
            {
                _1101 = ((_1240 & 1u) != 0u) ? (_1238 + _1237) : _1237;
                uint _1241 = _1240 >> 1u;
                if (_1241 == 0u)
                {
                    break;
                }
                else
                {
                    _1237 = _1101;
                    _1238 *= 0.5;
                    _1240 = _1241;
                }
            }
            frontier_phi_45_pred = _1101;
        }
        _1100 = frontier_phi_45_pred;
        float _1102 = _1100 + _938;
        float _1106 = sqrt(_1097);
        float _1107 = ((_1102 > 1.0) ? (_1102 + (-1.0)) : _1102) * 6.283185482025146484375;
        float _1110 = cos(_1107) * _1106;
        float _1112 = sin(_1107) * _1106;
        float _1114 = sqrt(1.0 - _1097);
        float _1127 = ((_1114 * _881) + (_1110 * _1084)) + (_1112 * _1079);
        float _1128 = ((_1114 * _882) + (_1110 * _1087)) + (_1112 * _1080);
        float _1129 = ((_1114 * _883) + (_1110 * _1090)) + (_1112 * _1081);
        _61._m0 = 1u;
        uvec4 _1133 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1134 = _1133.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1134, _1133.w, _1134, vec3(_895, _896, _897), 9.9999997473787516355514526367188e-05, vec3(_1127, _1128, _1129), 10000.0, 1);
        float _1140 = dot(vec3(_881, _882, _883), vec3(_1127, _1128, _1129));
        float _1402 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1143 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
        _1092 = ((float(_61._m0 == 0u) * _1143) / (_1143 * 0.3183098733425140380859375)) + _1091;
        uint _1094 = _1093 + 1u;
        if (_1094 == 32u)
        {
            break;
        }
        else
        {
            _1091 = _1092;
            _1093 = _1094;
            continue;
        }
    }
    float _1151 = _1092 * 0.009947183541953563690185546875;
    float _1156 = dot(vec3(_809, _810, _811), vec3(_881, _882, _883)) * 2.0;
    vec4 _1170 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_809 - (_1156 * _881), _810 - (_1156 * _882), _811 - (_1156 * _883)), 4.0 - (_771 * 4.0));
    float _1175 = dot(vec3(_898, _900, _901), vec3(_881, _882, _883));
    float _1413 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1184 = (exp2(log2(1.0 - (isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _1190 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_881, _882, _883), 0.0);
    float _1202 = ((_1058 + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _857.x)) + _1061) + (((_1190.x * _699) + (_1184 * _1170.x)) * _1151);
    float _1207 = ((_1059 + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _857.y)) + _1062) + (((_1190.y * _700) + (_1184 * _1170.y)) * _1151);
    float _1212 = ((_1060 + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _857.z)) + _1063) + (((_1190.z * _701) + (_1184 * _1170.z)) * _1151);
    float _1424 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1435 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1446 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    bool _1220 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1231;
    _1231.x = _1220 ? ((_569 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0)));
    _1231.y = _1220 ? ((_572 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0)));
    _1231.z = _1220 ? ((_575 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0)));
    payload._m0 = _1231;
}


