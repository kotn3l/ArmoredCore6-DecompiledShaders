#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1511;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _167;
            frontier_phi_3_2_ladder_1 = _164 & 65535u;
            frontier_phi_3_2_ladder_2 = _168;
        }
        else
        {
            frontier_phi_3_2_ladder = _168;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _165 >> 16u;
        }
        _170 = frontier_phi_3_2_ladder_1;
        _172 = frontier_phi_3_2_ladder;
        _173 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _178 * _170;
    uint _181 = _179 >> 2u;
    uvec3 _190 = uvec3(texelFetch(l_geomAttrib_0, int(_181)).x, texelFetch(l_geomAttrib_0, int(_181 + 1u)).x, texelFetch(l_geomAttrib_0, int(_181 + 2u)).x);
    uint _197 = _177.z;
    bool _198 = _197 != 0u;
    bool _200 = _129.w == 0u;
    bool _201 = _198 || _200;
    uint _202 = _179 + 12u;
    uint _225;
    uint _226;
    uint _227;
    uint _228;
    if (_201)
    {
        uvec4 _204 = texelFetch(l_geomAttrib_0, int(_202 >> 2u));
        uint _205 = _204.x;
        _225 = _205 & 255u;
        _226 = (_205 >> 8u) & 255u;
        _227 = (_205 >> 16u) & 255u;
        _228 = 20u;
    }
    else
    {
        uint _213 = _202 >> 2u;
        uvec2 _219 = uvec2(texelFetch(l_geomAttrib_0, int(_213)).x, texelFetch(l_geomAttrib_0, int(_213 + 1u)).x);
        uint _220 = _219.x;
        _225 = _220 & 65535u;
        _226 = _220 >> 16u;
        _227 = _219.y & 65535u;
        _228 = 24u;
    }
    bool _234 = _197 == 0u;
    uint _235;
    if (_234)
    {
        _235 = _228;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_200)
        {
            frontier_phi_9_10_ladder = _228 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _228 + 8u;
        }
        _235 = frontier_phi_9_10_ladder;
    }
    uvec4 _244 = texelFetch(l_geomAttrib_0, int(((_179 + 4u) + (_198 ? (_235 + 4u) : _235)) >> 2u));
    uint _245 = _244.x;
    float _249 = float(int(uint(int(_245 << 16u) >> int(16u))));
    float _250 = float(int(uint(int(_245) >> int(16u))));
    uint _251 = _178 * _172;
    uint _252 = _251 >> 2u;
    uvec3 _261 = uvec3(texelFetch(l_geomAttrib_0, int(_252)).x, texelFetch(l_geomAttrib_0, int(_252 + 1u)).x, texelFetch(l_geomAttrib_0, int(_252 + 2u)).x);
    uint _268 = _251 + 12u;
    uint _289;
    uint _290;
    uint _291;
    uint _292;
    if (_201)
    {
        uvec4 _270 = texelFetch(l_geomAttrib_0, int(_268 >> 2u));
        uint _271 = _270.x;
        _289 = _271 & 255u;
        _290 = (_271 >> 8u) & 255u;
        _291 = (_271 >> 16u) & 255u;
        _292 = 20u;
    }
    else
    {
        uint _277 = _268 >> 2u;
        uvec2 _283 = uvec2(texelFetch(l_geomAttrib_0, int(_277)).x, texelFetch(l_geomAttrib_0, int(_277 + 1u)).x);
        uint _284 = _283.x;
        _289 = _284 & 65535u;
        _290 = _284 >> 16u;
        _291 = _283.y & 65535u;
        _292 = 24u;
    }
    uint _296;
    if (_234)
    {
        _296 = _292;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_200)
        {
            frontier_phi_16_17_ladder = _292 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _292 + 8u;
        }
        _296 = frontier_phi_16_17_ladder;
    }
    uvec4 _304 = texelFetch(l_geomAttrib_0, int(((_251 + 4u) + (_198 ? (_296 + 4u) : _296)) >> 2u));
    uint _305 = _304.x;
    float _309 = float(int(uint(int(_305 << 16u) >> int(16u))));
    float _310 = float(int(uint(int(_305) >> int(16u))));
    uint _311 = _178 * _173;
    uint _312 = _311 >> 2u;
    uvec3 _321 = uvec3(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x, texelFetch(l_geomAttrib_0, int(_312 + 2u)).x);
    uint _328 = _311 + 12u;
    uint _349;
    uint _350;
    uint _351;
    uint _352;
    if (_201)
    {
        uvec4 _330 = texelFetch(l_geomAttrib_0, int(_328 >> 2u));
        uint _331 = _330.x;
        _349 = _331 & 255u;
        _350 = (_331 >> 8u) & 255u;
        _351 = (_331 >> 16u) & 255u;
        _352 = 20u;
    }
    else
    {
        uint _337 = _328 >> 2u;
        uvec2 _343 = uvec2(texelFetch(l_geomAttrib_0, int(_337)).x, texelFetch(l_geomAttrib_0, int(_337 + 1u)).x);
        uint _344 = _343.x;
        _349 = _344 & 65535u;
        _350 = _344 >> 16u;
        _351 = _343.y & 65535u;
        _352 = 24u;
    }
    uint _356;
    if (_234)
    {
        _356 = _352;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_200)
        {
            frontier_phi_23_24_ladder = _352 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _352 + 8u;
        }
        _356 = frontier_phi_23_24_ladder;
    }
    uvec4 _364 = texelFetch(l_geomAttrib_0, int(((_311 + 4u) + (_198 ? (_356 + 4u) : _356)) >> 2u));
    uint _365 = _364.x;
    float _369 = float(int(uint(int(_365 << 16u) >> int(16u))));
    float _370 = float(int(uint(int(_365) >> int(16u))));
    bool _372 = _129.z == 0u;
    float _408;
    float _409;
    float _410;
    if (_372)
    {
        uint _375 = _170 * 3u;
        uvec3 _384 = uvec3(texelFetch(l_geomPositionBuffer, int(_375)).x, texelFetch(l_geomPositionBuffer, int(_375 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_375 + 2u)).x);
        _408 = uintBitsToFloat(_384.x);
        _409 = uintBitsToFloat(_384.y);
        _410 = uintBitsToFloat(_384.z);
    }
    else
    {
        uint _392 = _170 * 2u;
        uvec2 _398 = uvec2(texelFetch(l_geomPositionBuffer, int(_392)).x, texelFetch(l_geomPositionBuffer, int(_392 + 1u)).x);
        uint _399 = _398.x;
        _408 = unpackHalf2x16(_399).x;
        _409 = unpackHalf2x16(_399 >> 16u).x;
        _410 = unpackHalf2x16(_398.y).x;
    }
    float _446;
    float _447;
    float _448;
    if (_372)
    {
        uint _413 = _172 * 3u;
        uvec3 _422 = uvec3(texelFetch(l_geomPositionBuffer, int(_413)).x, texelFetch(l_geomPositionBuffer, int(_413 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_413 + 2u)).x);
        _446 = uintBitsToFloat(_422.x);
        _447 = uintBitsToFloat(_422.y);
        _448 = uintBitsToFloat(_422.z);
    }
    else
    {
        uint _430 = _172 * 2u;
        uvec2 _436 = uvec2(texelFetch(l_geomPositionBuffer, int(_430)).x, texelFetch(l_geomPositionBuffer, int(_430 + 1u)).x);
        uint _437 = _436.x;
        _446 = unpackHalf2x16(_437).x;
        _447 = unpackHalf2x16(_437 >> 16u).x;
        _448 = unpackHalf2x16(_436.y).x;
    }
    float _484;
    float _485;
    float _486;
    if (_372)
    {
        uint _451 = _173 * 3u;
        uvec3 _460 = uvec3(texelFetch(l_geomPositionBuffer, int(_451)).x, texelFetch(l_geomPositionBuffer, int(_451 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_451 + 2u)).x);
        _484 = uintBitsToFloat(_460.x);
        _485 = uintBitsToFloat(_460.y);
        _486 = uintBitsToFloat(_460.z);
    }
    else
    {
        uint _468 = _173 * 2u;
        uvec2 _474 = uvec2(texelFetch(l_geomPositionBuffer, int(_468)).x, texelFetch(l_geomPositionBuffer, int(_468 + 1u)).x);
        uint _475 = _474.x;
        _484 = unpackHalf2x16(_475).x;
        _485 = unpackHalf2x16(_475 >> 16u).x;
        _486 = unpackHalf2x16(_474.y).x;
    }
    float _489 = (1.0 - hit._m0.x) - hit._m0.y;
    float _502 = ((uintBitsToFloat(_261.x) * hit._m0.x) + (uintBitsToFloat(_190.x) * _489)) + (uintBitsToFloat(_321.x) * hit._m0.y);
    float _503 = ((uintBitsToFloat(_261.y) * hit._m0.x) + (uintBitsToFloat(_190.y) * _489)) + (uintBitsToFloat(_321.y) * hit._m0.y);
    float _504 = ((uintBitsToFloat(_261.z) * hit._m0.x) + (uintBitsToFloat(_190.z) * _489)) + (uintBitsToFloat(_321.z) * hit._m0.y);
    float _526 = (_309 - _249) * 0.00048828125;
    float _528 = (_310 - _250) * 0.00048828125;
    float _531 = (_369 - _249) * 0.00048828125;
    float _532 = (_370 - _250) * 0.00048828125;
    float _554 = _446 - _408;
    float _555 = _447 - _409;
    float _556 = _448 - _410;
    float _559 = fma(_556, gl_ObjectToWorldEXT[2u].x, fma(_555, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _554));
    float _562 = fma(_556, gl_ObjectToWorldEXT[2u].y, fma(_555, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _554));
    float _565 = fma(_556, gl_ObjectToWorldEXT[2u].z, fma(_555, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _554));
    float _566 = _484 - _408;
    float _567 = _485 - _409;
    float _568 = _486 - _410;
    float _571 = fma(_568, gl_ObjectToWorldEXT[2u].x, fma(_567, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _566));
    float _574 = fma(_568, gl_ObjectToWorldEXT[2u].y, fma(_567, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _566));
    float _577 = fma(_568, gl_ObjectToWorldEXT[2u].z, fma(_567, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _566));
    float _578 = (((_309 * hit._m0.x) + (_249 * _489)) + (_369 * hit._m0.y)) * 0.00048828125;
    float _579 = (((_310 * hit._m0.x) + (_250 * _489)) + (_370 * hit._m0.y)) * 0.00048828125;
    float _583 = (((float(_225) * _489) + (-127.0)) + (float(_289) * hit._m0.x)) + (float(_349) * hit._m0.y);
    float _586 = (((float(_226) * _489) + (-127.0)) + (float(_290) * hit._m0.x)) + (float(_350) * hit._m0.y);
    float _589 = (((float(_227) * _489) + (-127.0)) + (float(_291) * hit._m0.x)) + (float(_351) * hit._m0.y);
    float _590 = _583 * 0.0078740157186985015869140625;
    float _592 = _586 * 0.0078740157186985015869140625;
    float _593 = _589 * 0.0078740157186985015869140625;
    float _610 = cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x;
    uvec2 _628 = uvec2(textureSize(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_1, int(0u)));
    bool _633 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _686;
    if (_633)
    {
        float _644 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _650 = (_577 * _562) - (_574 * _565);
        float _653 = (_571 * _565) - (_577 * _559);
        float _656 = (_574 * _559) - (_571 * _562);
        float _683 = ((log2((((float(_628.y) * 0.5) * float(_628.x)) * abs((_532 * _526) - (_531 * _528))) / (sqrt(((_653 * _653) + (_656 * _656)) + (_650 * _650)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_644 * gl_WorldRayDirectionEXT.x, _644 * gl_WorldRayDirectionEXT.y, _644 * gl_WorldRayDirectionEXT.z), vec3(_590, _592, _593))));
        _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    }
    else
    {
        _686 = 0.0;
    }
    vec4 _690 = textureLod(sampler2D(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_1, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[1u].x * cbMtdParam._m0[24u].w) * ((_610 * cbMtdParam._m0[24u].y) + _578)) + cbTextureTilingScale._m0[1u].z, ((cbTextureTilingScale._m0[1u].y * cbMtdParam._m0[25u].x) * ((_610 * cbMtdParam._m0[24u].z) + _579)) + cbTextureTilingScale._m0[1u].w), _686);
    float _692 = _690.x;
    uvec2 _729 = uvec2(textureSize(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_0, int(0u)));
    float _780;
    if (_633)
    {
        float _740 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _746 = (_577 * _562) - (_574 * _565);
        float _749 = (_571 * _565) - (_577 * _559);
        float _752 = (_574 * _559) - (_571 * _562);
        float _778 = ((log2((((float(_729.y) * 0.5) * float(_729.x)) * abs((_532 * _526) - (_531 * _528))) / (sqrt(((_749 * _749) + (_752 * _752)) + (_746 * _746)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_740 * gl_WorldRayDirectionEXT.x, _740 * gl_WorldRayDirectionEXT.y, _740 * gl_WorldRayDirectionEXT.z), vec3(_590, _592, _593))));
        _780 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    }
    else
    {
        _780 = 0.0;
    }
    vec4 _783 = textureLod(sampler2D(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_0, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + _578) * cbMtdParam._m0[23u].y) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[25u].z + _579) * cbMtdParam._m0[23u].z) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _780);
    uvec2 _814 = uvec2(textureSize(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_2, int(0u)));
    float _865;
    if (_633)
    {
        float _825 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _831 = (_577 * _562) - (_574 * _565);
        float _834 = (_571 * _565) - (_577 * _559);
        float _837 = (_574 * _559) - (_571 * _562);
        float _863 = ((log2((((float(_814.y) * 0.5) * float(_814.x)) * abs((_532 * _526) - (_531 * _528))) / (sqrt(((_834 * _834) + (_837 * _837)) + (_831 * _831)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_825 * gl_WorldRayDirectionEXT.x, _825 * gl_WorldRayDirectionEXT.y, _825 * gl_WorldRayDirectionEXT.z), vec3(_590, _592, _593))));
        _865 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    }
    else
    {
        _865 = 0.0;
    }
    vec4 _868 = textureLod(sampler2D(M_Cutscene_Planet_Clouds_001_snp_0_Texture2D_2, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[22u].w * _610) + (_692 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].y) + (cbMtdParam._m0[25u].w * _578)) + ((_783.x + (-0.5)) * cbMtdParam._m0[16u].w)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((((((cbMtdParam._m0[23u].x * _610) + (_692 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[22u].z) + (cbMtdParam._m0[26u].x * _579)) + ((_783.y + (-0.5)) * cbMtdParam._m0[16u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w), _865);
    float _883 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_590, _592, _593, 0.0)) - cbMtdParam._m0[18u].z;
    float _1634 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _891 = exp2(log2(1.0 - (isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[17u].y, 0.001000000047497451305389404296875)))) * cbMtdParam._m0[16u].z;
    float _902 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _903 = _902 * _502;
    float _904 = _902 * _503;
    float _905 = _902 * _504;
    float _912 = inversesqrt(dot(vec3(cbMtdParam._m0[26u].yzw), vec3(cbMtdParam._m0[26u].yzw)));
    float _928 = (((_912 * cbMtdParam._m0[26u].y) - g_sceneCB._m0[4u].x) * cbMtdParam._m0[17u].w) + g_sceneCB._m0[4u].x;
    float _929 = (((_912 * cbMtdParam._m0[26u].z) - g_sceneCB._m0[4u].y) * cbMtdParam._m0[17u].w) + g_sceneCB._m0[4u].y;
    float _930 = (((_912 * cbMtdParam._m0[26u].w) - g_sceneCB._m0[4u].z) * cbMtdParam._m0[17u].w) + g_sceneCB._m0[4u].z;
    float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
    float _935 = _928 * _934;
    float _936 = _929 * _934;
    float _937 = _930 * _934;
    float _938 = dot(vec4(_903, _904, _905, 0.0), vec4(_935, _936, _937, 0.0));
    float _1650 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    float _947 = exp2(log2((_941 * _941) * cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].z);
    float _1661 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = 1.0 - (isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0)));
    float _951 = (-0.0) - (_949 - cbMtdParam._m0[20u].z);
    float _953 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _973 = (-0.0) - (_949 - cbMtdParam._m0[21u].y);
    float _974 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _998 = cbMtdParam._m0[13u].y - (cbMtdParam._m0[20u].y * cbMtdParam._m0[13u].y);
    float _999 = cbMtdParam._m0[13u].z - (cbMtdParam._m0[20u].y * cbMtdParam._m0[13u].z);
    float _1000 = cbMtdParam._m0[13u].w - (cbMtdParam._m0[20u].y * cbMtdParam._m0[13u].w);
    float _1013 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
    float _1028 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_903, _904, _905, 0.0), vec4(_1013 * _935, _1013 * _936, _1013 * _937, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _1692 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1034 = exp2(log2((isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0))) * cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].z);
    float _1703 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1035 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    float _1041 = exp2(log2(_1035 * 6.5) * 7.0);
    float _1714 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1043 = (isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0))) + _1035;
    float _1725 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1044 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    float _1056 = ((_1044 * ((cbMtdParam._m0[12u].y - (cbMtdParam._m0[12u].y * cbMtdParam._m0[20u].y)) - _998)) + _998) * _868.x;
    float _1057 = ((_1044 * ((cbMtdParam._m0[12u].z - _999) - (cbMtdParam._m0[12u].z * cbMtdParam._m0[20u].y))) + _999) * _868.y;
    float _1058 = ((_1044 * ((cbMtdParam._m0[12u].w - _1000) - (cbMtdParam._m0[12u].w * cbMtdParam._m0[20u].y))) + _1000) * _868.z;
    float _1059 = isnan(_1057) ? _1056 : (isnan(_1056) ? _1057 : max(_1056, _1057));
    float _1060 = isnan(_1058) ? _1059 : (isnan(_1059) ? _1058 : max(_1059, _1058));
    float _1063;
    float _1065;
    if (_1060 < 1.1920928955078125e-07)
    {
        _1063 = 0.0;
        _1065 = 0.0;
    }
    else
    {
        float _1089 = isnan(_1057) ? _1056 : (isnan(_1056) ? _1057 : min(_1056, _1057));
        float _1091 = _1060 - (isnan(_1058) ? _1089 : (isnan(_1089) ? _1058 : min(_1089, _1058)));
        float _1066 = _1091 / _1060;
        float frontier_phi_42_43_ladder;
        float frontier_phi_42_43_ladder_1;
        if (_1091 < 1.1920928955078125e-07)
        {
            frontier_phi_42_43_ladder = _1066;
            frontier_phi_42_43_ladder_1 = 0.0;
        }
        else
        {
            float _1375;
            if (_1060 == _1056)
            {
                _1375 = ((_1057 - _1058) / _1091) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_54_51_ladder;
                if (_1060 == _1057)
                {
                    frontier_phi_54_51_ladder = (((_1058 - _1056) / _1091) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_54_51_ladder = (((_1056 - _1057) / _1091) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1375 = frontier_phi_54_51_ladder;
            }
            float _1380 = (_1375 < 0.0) ? (_1375 + 1.0) : _1375;
            precise float _1064 = (_1380 - floor(_1380)) * 6.0;
            frontier_phi_42_43_ladder = _1066;
            frontier_phi_42_43_ladder_1 = _1064;
        }
        _1063 = frontier_phi_42_43_ladder_1;
        _1065 = frontier_phi_42_43_ladder;
    }
    float _1068 = cbMtdParam._m0[20u].w + _1060;
    float _1756 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1069 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    float _1071 = cbMtdParam._m0[21u].z + _1065;
    float _1767 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1072 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1074 = uint(int(floor(_1063)));
    float _1076 = _1063 - float(int(_1074));
    float _1078 = (1.0 - _1072) * _1069;
    float _1081 = (1.0 - (_1076 * _1072)) * _1069;
    float _1085 = (1.0 - ((1.0 - _1076) * _1072)) * _1069;
    float _1093;
    float _1095;
    float _1096;
    if ((_1074 == 0u) || (_1074 == 6u))
    {
        _1093 = _1069;
        _1095 = _1085;
        _1096 = _1078;
    }
    else
    {
        float frontier_phi_44_45_ladder;
        float frontier_phi_44_45_ladder_1;
        float frontier_phi_44_45_ladder_2;
        if (_1074 == 1u)
        {
            frontier_phi_44_45_ladder = _1078;
            frontier_phi_44_45_ladder_1 = _1081;
            frontier_phi_44_45_ladder_2 = _1069;
        }
        else
        {
            float frontier_phi_44_45_ladder_49_ladder;
            float frontier_phi_44_45_ladder_49_ladder_1;
            float frontier_phi_44_45_ladder_49_ladder_2;
            if (_1074 == 2u)
            {
                frontier_phi_44_45_ladder_49_ladder = _1085;
                frontier_phi_44_45_ladder_49_ladder_1 = _1078;
                frontier_phi_44_45_ladder_49_ladder_2 = _1069;
            }
            else
            {
                float frontier_phi_44_45_ladder_49_ladder_53_ladder;
                float frontier_phi_44_45_ladder_49_ladder_53_ladder_1;
                float frontier_phi_44_45_ladder_49_ladder_53_ladder_2;
                if (_1074 == 3u)
                {
                    frontier_phi_44_45_ladder_49_ladder_53_ladder = _1069;
                    frontier_phi_44_45_ladder_49_ladder_53_ladder_1 = _1078;
                    frontier_phi_44_45_ladder_49_ladder_53_ladder_2 = _1081;
                }
                else
                {
                    bool _1445 = _1074 == 4u;
                    frontier_phi_44_45_ladder_49_ladder_53_ladder = _1445 ? _1069 : _1081;
                    frontier_phi_44_45_ladder_49_ladder_53_ladder_1 = _1445 ? _1085 : _1069;
                    frontier_phi_44_45_ladder_49_ladder_53_ladder_2 = _1078;
                }
                frontier_phi_44_45_ladder_49_ladder = frontier_phi_44_45_ladder_49_ladder_53_ladder;
                frontier_phi_44_45_ladder_49_ladder_1 = frontier_phi_44_45_ladder_49_ladder_53_ladder_1;
                frontier_phi_44_45_ladder_49_ladder_2 = frontier_phi_44_45_ladder_49_ladder_53_ladder_2;
            }
            frontier_phi_44_45_ladder = frontier_phi_44_45_ladder_49_ladder;
            frontier_phi_44_45_ladder_1 = frontier_phi_44_45_ladder_49_ladder_1;
            frontier_phi_44_45_ladder_2 = frontier_phi_44_45_ladder_49_ladder_2;
        }
        _1093 = frontier_phi_44_45_ladder_1;
        _1095 = frontier_phi_44_45_ladder_2;
        _1096 = frontier_phi_44_45_ladder;
    }
    float _1105 = exp2(log2(_1093) * cbMtdParam._m0[21u].w);
    float _1106 = exp2(log2(_1095) * cbMtdParam._m0[21u].w);
    float _1107 = exp2(log2(_1096) * cbMtdParam._m0[21u].w);
    float _1120 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].xyz), vec3(cbMtdParam._m0[27u].xyz)));
    float _1128 = (dot(vec4(_903, _904, _905, 0.0), vec4(_1120 * cbMtdParam._m0[27u].x, _1120 * cbMtdParam._m0[27u].y, _1120 * cbMtdParam._m0[27u].z, 0.0)) + 1.0) * 0.5;
    float _1778 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1135 = cbMtdParam._m0[17u].x * exp2(log2(isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0))) * cbMtdParam._m0[17u].z);
    float _1789 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1136 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    float _1143 = (cbMtdParam._m0[19u].w * exp2(log2(isnan(64.0) ? _974 : (isnan(_974) ? 64.0 : min(_974, 64.0))) * 2.599999904632568359375)) + (cbMtdParam._m0[20u].x * exp2(log2(isnan(64.0) ? _953 : (isnan(_953) ? 64.0 : min(_953, 64.0))) * 1.64999997615814208984375));
    float _1146 = ((_1136 * ((_1105 * cbMtdParam._m0[9u].y) - _1105)) + _1105) + (_1143 * cbMtdParam._m0[11u].y);
    float _1149 = ((_1136 * ((_1106 * cbMtdParam._m0[9u].z) - _1106)) + _1106) + (_1143 * cbMtdParam._m0[11u].z);
    float _1152 = ((_1136 * ((_1107 * cbMtdParam._m0[9u].w) - _1107)) + _1107) + (_1143 * cbMtdParam._m0[11u].w);
    bool _1161 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _1192 = inversesqrt(dot(vec3(_590, _592, _593), vec3(_590, _592, _593)));
    float _1193 = _1192 * _590;
    float _1194 = _1192 * _592;
    float _1195 = _1192 * _593;
    float _1207 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _1208 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _1209 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _1213 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _1214 = _1213 * gl_WorldRayDirectionEXT.x;
    float _1215 = _1213 * gl_WorldRayDirectionEXT.y;
    float _1216 = _1213 * gl_WorldRayDirectionEXT.z;
    float _1217 = (-0.0) - _1214;
    float _1218 = (-0.0) - _1215;
    float _1219 = (-0.0) - _1216;
    float _1225 = float(gl_LaunchIDEXT.x);
    float _1226 = float(gl_LaunchIDEXT.y);
    float _1229 = float(gl_LaunchSizeEXT.x);
    float _1243 = fract(fract(sin(dot(vec2(_1225 / _1229, _1226 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _1256 = fract(fract(sin(dot(vec2((_1225 + 128.0) / _1229, (_1226 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _67._m0 = 1u;
    uvec4 _1261 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _1262 = _1261.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _1262, _1261.w, _1262, vec3(_1207, _1208, _1209), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1329;
    float _1330;
    float _1331;
    if (_67._m0 == 0u)
    {
        float _1284 = g_sceneCB._m0[4u].x - _1214;
        float _1285 = g_sceneCB._m0[4u].y - _1215;
        float _1286 = g_sceneCB._m0[4u].z - _1216;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1294 = dot(vec3(_1193, _1194, _1195), vec3(g_sceneCB._m0[4u].xyz));
        float _1815 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1297 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        float _1298 = dot(vec3(_1193, _1194, _1195), vec3(_1217, _1218, _1219));
        float _1826 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1284 * _1290, _1285 * _1290, _1286 * _1290));
        float _1837 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1313 = (exp2(log2(1.0 - (isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1319 = (0.5 / ((_1297 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0))))) * _1297;
        float _1848 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1321 = (isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0))) * 0.31831014156341552734375;
        _1329 = (_1313 * g_sceneCB._m0[5u].x) * _1321;
        _1330 = (_1313 * g_sceneCB._m0[5u].y) * _1321;
        _1331 = (_1313 * g_sceneCB._m0[5u].z) * _1321;
    }
    else
    {
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    bool _1333 = abs(_1194) < 0.89999997615814208984375;
    float _1335 = float(_1333);
    float _1336 = _1333 ? 0.0 : 1.0;
    float _1339 = (_1335 * _1195) - (_1336 * _1194);
    float _1340 = _1336 * _1193;
    float _1342 = (-0.0) - (_1193 * _1335);
    float _1346 = inversesqrt(dot(vec3(_1339, _1340, _1342), vec3(_1339, _1340, _1342)));
    float _1347 = _1339 * _1346;
    float _1348 = _1340 * _1346;
    float _1349 = _1346 * _1342;
    float _1352 = (_1348 * _1195) - (_1349 * _1194);
    float _1355 = (_1349 * _1193) - (_1347 * _1195);
    float _1358 = (_1347 * _1194) - (_1348 * _1193);
    float _1366;
    float _1392;
    float _1365 = 0.0;
    uint _1367 = 0u;
    float _1371;
    bool _1373;
    for (;;)
    {
        _1371 = (float(_1367) + _1243) * 0.03125;
        _1373 = _1367 == 0u;
        float frontier_phi_57_pred;
        if (_1373)
        {
            frontier_phi_57_pred = 0.0;
        }
        else
        {
            float _1516;
            float _1517;
            uint _1519;
            _1516 = 0.0;
            _1517 = 0.5;
            _1519 = _1367;
            float _1393;
            for (;;)
            {
                _1393 = ((_1519 & 1u) != 0u) ? (_1517 + _1516) : _1516;
                uint _1520 = _1519 >> 1u;
                if (_1520 == 0u)
                {
                    break;
                }
                else
                {
                    _1516 = _1393;
                    _1517 *= 0.5;
                    _1519 = _1520;
                }
            }
            frontier_phi_57_pred = _1393;
        }
        _1392 = frontier_phi_57_pred;
        float _1394 = _1392 + _1256;
        float _1399 = sqrt(_1371);
        float _1400 = ((_1394 > 1.0) ? (_1394 + (-1.0)) : _1394) * 6.283185482025146484375;
        float _1403 = cos(_1400) * _1399;
        float _1405 = sin(_1400) * _1399;
        float _1407 = sqrt(1.0 - _1371);
        float _1420 = ((_1407 * _1193) + (_1403 * _1352)) + (_1405 * _1347);
        float _1421 = ((_1407 * _1194) + (_1403 * _1355)) + (_1405 * _1348);
        float _1422 = ((_1407 * _1195) + (_1403 * _1358)) + (_1405 * _1349);
        _66._m0 = 1u;
        uvec4 _1426 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1427 = _1426.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1427, _1426.w, _1427, vec3(_1207, _1208, _1209), 9.9999997473787516355514526367188e-05, vec3(_1420, _1421, _1422), 10000.0, 1);
        float _1433 = dot(vec3(_1193, _1194, _1195), vec3(_1420, _1421, _1422));
        float _1859 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1436 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1366 = ((float(_66._m0 == 0u) * _1436) / (_1436 * 0.3183098733425140380859375)) + _1365;
        uint _1368 = _1367 + 1u;
        if (_1368 == 32u)
        {
            break;
        }
        else
        {
            _1365 = _1366;
            _1367 = _1368;
            continue;
        }
    }
    float _1446 = _1366 * 0.009947183541953563690185546875;
    float _1451 = dot(vec3(_1214, _1215, _1216), vec3(_1193, _1194, _1195)) * 2.0;
    vec4 _1462 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_1214 - (_1451 * _1193), _1215 - (_1451 * _1194), _1216 - (_1451 * _1195)), 4.0);
    float _1467 = dot(vec3(_1217, _1218, _1219), vec3(_1193, _1194, _1195));
    float _1870 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1476 = (exp2(log2(1.0 - (isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1485 = (((_1161 ? (_891 * ((_1044 * (cbMtdParam._m0[10u].y - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y)) : 0.0) + (isnan(4.0) ? _1146 : (isnan(_1146) ? 4.0 : min(_1146, 4.0)))) + _1329) + ((_1462.x * _1446) * _1476);
    float _1488 = (((_1161 ? (_891 * ((_1044 * (cbMtdParam._m0[10u].z - cbMtdParam._m0[14u].z)) + cbMtdParam._m0[14u].z)) : 0.0) + (isnan(4.0) ? _1149 : (isnan(_1149) ? 4.0 : min(_1149, 4.0)))) + _1330) + ((_1462.y * _1446) * _1476);
    float _1491 = (((_1161 ? (_891 * ((_1044 * (cbMtdParam._m0[10u].w - cbMtdParam._m0[14u].w)) + cbMtdParam._m0[14u].w)) : 0.0) + (isnan(4.0) ? _1152 : (isnan(_1152) ? 4.0 : min(_1152, 4.0)))) + _1331) + ((_1462.z * _1446) * _1476);
    float _1881 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _1892 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1903 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    bool _1499 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1510;
    _1510.x = _1499 ? ((_583 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0)));
    _1510.y = _1499 ? ((_586 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0)));
    _1510.z = _1499 ? ((_589 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0)));
    payload._m0 = _1510;
}


