#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _53
{
    vec3 _m0;
};

struct _57
{
    vec2 _m0;
};

struct _60
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _53 payload;
hitAttributeEXT _57 hit;
layout(location = 1) rayPayloadEXT _60 _62;
layout(location = 2) rayPayloadEXT _60 _63;

vec3 _1272;

void main()
{
    float _71 = float(gl_LaunchSizeEXT.y);
    float _101 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _102 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _110 = sqrt(((_102 * _102) + (_101 * _101)) + (_103 * _103)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _71)))));
    uvec4 _121 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _122 = _121.y;
    uint _162;
    uint _164;
    uint _165;
    if (_121.x == 0u)
    {
        uint _130 = (_122 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _139 = uvec3(texelFetch(l_geomIndexBuffer, int(_130)).x, texelFetch(l_geomIndexBuffer, int(_130 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_130 + 2u)).x);
        _162 = _139.x;
        _164 = _139.y;
        _165 = _139.z;
    }
    else
    {
        uint _143 = uint(gl_PrimitiveID) * 6u;
        uint _145 = _143 & 4294967292u;
        uint _148 = (_122 + _145) >> 2u;
        uvec2 _155 = uvec2(texelFetch(l_geomIndexBuffer, int(_148)).x, texelFetch(l_geomIndexBuffer, int(_148 + 1u)).x);
        uint _156 = _155.x;
        uint _157 = _155.y;
        uint _159 = _156 >> 16u;
        uint _160 = _157 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_145 == _143)
        {
            frontier_phi_3_2_ladder = _159;
            frontier_phi_3_2_ladder_1 = _156 & 65535u;
            frontier_phi_3_2_ladder_2 = _160;
        }
        else
        {
            frontier_phi_3_2_ladder = _160;
            frontier_phi_3_2_ladder_1 = _159;
            frontier_phi_3_2_ladder_2 = _157 >> 16u;
        }
        _162 = frontier_phi_3_2_ladder_1;
        _164 = frontier_phi_3_2_ladder;
        _165 = frontier_phi_3_2_ladder_2;
    }
    uvec4 _169 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _170 = _169.x;
    uint _171 = _169.z;
    bool _172 = _171 != 0u;
    bool _174 = _121.w == 0u;
    bool _175 = _172 || _174;
    uint _176 = _170 * _162;
    uint _177 = _176 + 12u;
    uint _201;
    uint _202;
    uint _203;
    uint _204;
    if (_175)
    {
        uvec4 _180 = texelFetch(l_geomAttrib_0, int(_177 >> 2u));
        uint _181 = _180.x;
        _201 = _181 & 255u;
        _202 = (_181 >> 8u) & 255u;
        _203 = (_181 >> 16u) & 255u;
        _204 = 16u;
    }
    else
    {
        uint _189 = _177 >> 2u;
        uvec2 _195 = uvec2(texelFetch(l_geomAttrib_0, int(_189)).x, texelFetch(l_geomAttrib_0, int(_189 + 1u)).x);
        uint _196 = _195.x;
        _201 = _196 & 65535u;
        _202 = _196 >> 16u;
        _203 = _195.y & 65535u;
        _204 = 20u;
    }
    uvec4 _212 = texelFetch(l_geomAttrib_0, int((_204 + _176) >> 2u));
    uint _213 = _212.x;
    bool _227 = _171 == 0u;
    uint _228;
    if (_227)
    {
        _228 = _204 + 4u;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_174)
        {
            frontier_phi_9_10_ladder = _204 | 8u;
        }
        else
        {
            frontier_phi_9_10_ladder = _204 + 12u;
        }
        _228 = frontier_phi_9_10_ladder;
    }
    uvec4 _236 = texelFetch(l_geomAttrib_0, int(((_176 + 4u) + (_172 ? (_228 + 4u) : _228)) >> 2u));
    uint _237 = _236.x;
    float _241 = float(int(uint(int(_237 << 16u) >> int(16u))));
    float _242 = float(int(uint(int(_237) >> int(16u))));
    uint _243 = _170 * _164;
    uint _244 = _243 + 12u;
    uint _265;
    uint _266;
    uint _267;
    uint _268;
    if (_175)
    {
        uvec4 _246 = texelFetch(l_geomAttrib_0, int(_244 >> 2u));
        uint _247 = _246.x;
        _265 = _247 & 255u;
        _266 = (_247 >> 8u) & 255u;
        _267 = (_247 >> 16u) & 255u;
        _268 = 16u;
    }
    else
    {
        uint _253 = _244 >> 2u;
        uvec2 _259 = uvec2(texelFetch(l_geomAttrib_0, int(_253)).x, texelFetch(l_geomAttrib_0, int(_253 + 1u)).x);
        uint _260 = _259.x;
        _265 = _260 & 65535u;
        _266 = _260 >> 16u;
        _267 = _259.y & 65535u;
        _268 = 20u;
    }
    uvec4 _274 = texelFetch(l_geomAttrib_0, int((_268 + _243) >> 2u));
    uint _275 = _274.x;
    uint _287;
    if (_227)
    {
        _287 = _268 + 4u;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_174)
        {
            frontier_phi_16_17_ladder = _268 | 8u;
        }
        else
        {
            frontier_phi_16_17_ladder = _268 + 12u;
        }
        _287 = frontier_phi_16_17_ladder;
    }
    uvec4 _295 = texelFetch(l_geomAttrib_0, int(((_243 + 4u) + (_172 ? (_287 + 4u) : _287)) >> 2u));
    uint _296 = _295.x;
    float _300 = float(int(uint(int(_296 << 16u) >> int(16u))));
    float _301 = float(int(uint(int(_296) >> int(16u))));
    uint _302 = _170 * _165;
    uint _303 = _302 + 12u;
    uint _324;
    uint _325;
    uint _326;
    uint _327;
    if (_175)
    {
        uvec4 _305 = texelFetch(l_geomAttrib_0, int(_303 >> 2u));
        uint _306 = _305.x;
        _324 = _306 & 255u;
        _325 = (_306 >> 8u) & 255u;
        _326 = (_306 >> 16u) & 255u;
        _327 = 16u;
    }
    else
    {
        uint _312 = _303 >> 2u;
        uvec2 _318 = uvec2(texelFetch(l_geomAttrib_0, int(_312)).x, texelFetch(l_geomAttrib_0, int(_312 + 1u)).x);
        uint _319 = _318.x;
        _324 = _319 & 65535u;
        _325 = _319 >> 16u;
        _326 = _318.y & 65535u;
        _327 = 20u;
    }
    uvec4 _333 = texelFetch(l_geomAttrib_0, int((_327 + _302) >> 2u));
    uint _334 = _333.x;
    uint _346;
    if (_227)
    {
        _346 = _327 + 4u;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_174)
        {
            frontier_phi_23_24_ladder = _327 | 8u;
        }
        else
        {
            frontier_phi_23_24_ladder = _327 + 12u;
        }
        _346 = frontier_phi_23_24_ladder;
    }
    uvec4 _354 = texelFetch(l_geomAttrib_0, int(((_302 + 4u) + (_172 ? (_346 + 4u) : _346)) >> 2u));
    uint _355 = _354.x;
    float _359 = float(int(uint(int(_355 << 16u) >> int(16u))));
    float _360 = float(int(uint(int(_355) >> int(16u))));
    bool _362 = _121.z == 0u;
    float _398;
    float _399;
    float _400;
    if (_362)
    {
        uint _365 = _162 * 3u;
        uvec3 _374 = uvec3(texelFetch(l_geomPositionBuffer, int(_365)).x, texelFetch(l_geomPositionBuffer, int(_365 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_365 + 2u)).x);
        _398 = uintBitsToFloat(_374.x);
        _399 = uintBitsToFloat(_374.y);
        _400 = uintBitsToFloat(_374.z);
    }
    else
    {
        uint _382 = _162 * 2u;
        uvec2 _388 = uvec2(texelFetch(l_geomPositionBuffer, int(_382)).x, texelFetch(l_geomPositionBuffer, int(_382 + 1u)).x);
        uint _389 = _388.x;
        _398 = unpackHalf2x16(_389).x;
        _399 = unpackHalf2x16(_389 >> 16u).x;
        _400 = unpackHalf2x16(_388.y).x;
    }
    float _436;
    float _437;
    float _438;
    if (_362)
    {
        uint _403 = _164 * 3u;
        uvec3 _412 = uvec3(texelFetch(l_geomPositionBuffer, int(_403)).x, texelFetch(l_geomPositionBuffer, int(_403 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_403 + 2u)).x);
        _436 = uintBitsToFloat(_412.x);
        _437 = uintBitsToFloat(_412.y);
        _438 = uintBitsToFloat(_412.z);
    }
    else
    {
        uint _420 = _164 * 2u;
        uvec2 _426 = uvec2(texelFetch(l_geomPositionBuffer, int(_420)).x, texelFetch(l_geomPositionBuffer, int(_420 + 1u)).x);
        uint _427 = _426.x;
        _436 = unpackHalf2x16(_427).x;
        _437 = unpackHalf2x16(_427 >> 16u).x;
        _438 = unpackHalf2x16(_426.y).x;
    }
    float _474;
    float _475;
    float _476;
    if (_362)
    {
        uint _441 = _165 * 3u;
        uvec3 _450 = uvec3(texelFetch(l_geomPositionBuffer, int(_441)).x, texelFetch(l_geomPositionBuffer, int(_441 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_441 + 2u)).x);
        _474 = uintBitsToFloat(_450.x);
        _475 = uintBitsToFloat(_450.y);
        _476 = uintBitsToFloat(_450.z);
    }
    else
    {
        uint _458 = _165 * 2u;
        uvec2 _464 = uvec2(texelFetch(l_geomPositionBuffer, int(_458)).x, texelFetch(l_geomPositionBuffer, int(_458 + 1u)).x);
        uint _465 = _464.x;
        _474 = unpackHalf2x16(_465).x;
        _475 = unpackHalf2x16(_465 >> 16u).x;
        _476 = unpackHalf2x16(_464.y).x;
    }
    float _479 = (1.0 - hit._m0.x) - hit._m0.y;
    float _513 = (_300 - _241) * 0.00048828125;
    float _515 = (_301 - _242) * 0.00048828125;
    float _518 = (_359 - _241) * 0.00048828125;
    float _519 = (_360 - _242) * 0.00048828125;
    float _541 = _436 - _398;
    float _542 = _437 - _399;
    float _543 = _438 - _400;
    float _546 = fma(_543, gl_ObjectToWorldEXT[2u].x, fma(_542, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _541));
    float _549 = fma(_543, gl_ObjectToWorldEXT[2u].y, fma(_542, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _541));
    float _552 = fma(_543, gl_ObjectToWorldEXT[2u].z, fma(_542, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _541));
    float _553 = _474 - _398;
    float _554 = _475 - _399;
    float _555 = _476 - _400;
    float _558 = fma(_555, gl_ObjectToWorldEXT[2u].x, fma(_554, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _553));
    float _561 = fma(_555, gl_ObjectToWorldEXT[2u].y, fma(_554, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _553));
    float _564 = fma(_555, gl_ObjectToWorldEXT[2u].z, fma(_554, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _553));
    float _570 = (((float(_201) * _479) + (-127.0)) + (float(_265) * hit._m0.x)) + (float(_324) * hit._m0.y);
    float _573 = (((float(_202) * _479) + (-127.0)) + (float(_266) * hit._m0.x)) + (float(_325) * hit._m0.y);
    float _576 = (((float(_203) * _479) + (-127.0)) + (float(_267) * hit._m0.x)) + (float(_326) * hit._m0.y);
    float _577 = _570 * 0.0078740157186985015869140625;
    float _579 = _573 * 0.0078740157186985015869140625;
    float _580 = _576 * 0.0078740157186985015869140625;
    float _593 = ((((float(_213 & 255u) * _479) + (-127.0)) + (float(_275 & 255u) * hit._m0.x)) + (float(_334 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _594 = ((((float((_213 >> 8u) & 255u) * _479) + (-127.0)) + (float((_275 >> 8u) & 255u) * hit._m0.x)) + (float((_334 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _595 = ((((float((_213 >> 16u) & 255u) * _479) + (-127.0)) + (float((_275 >> 16u) & 255u) * hit._m0.x)) + (float((_334 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _596 = ((((float(_213 >> 24u) * _479) + (-127.0)) + (float(_275 >> 24u) * hit._m0.x)) + (float(_334 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _606 = ((_594 * _580) - (_595 * _579)) * _596;
    float _607 = ((_595 * _577) - (_593 * _580)) * _596;
    float _608 = ((_593 * _579) - (_594 * _577)) * _596;
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _629 = cbMtdParam._m0[11u].w + ((((_300 * hit._m0.x) + (_241 * _479)) + (_359 * hit._m0.y)) * 0.00048828125);
    float _630 = cbMtdParam._m0[12u].x + ((((_301 * hit._m0.x) + (_242 * _479)) + (_360 * hit._m0.y)) * 0.00048828125);
    uvec2 _642 = uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_0, int(0u)));
    bool _647 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _700;
    if (_647)
    {
        float _658 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _664 = (_564 * _549) - (_561 * _552);
        float _667 = (_558 * _552) - (_564 * _546);
        float _670 = (_561 * _546) - (_558 * _549);
        float _697 = ((log2((((float(_642.y) * 0.5) * float(_642.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_667 * _667) + (_670 * _670)) + (_664 * _664)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_658 * gl_WorldRayDirectionEXT.x, _658 * gl_WorldRayDirectionEXT.y, _658 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    }
    else
    {
        _700 = 0.0;
    }
    vec4 _704 = textureLod(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _629) + cbTextureTilingScale._m0[0u].z, (_630 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w), _700);
    float _709 = _704.x * cbMtdParam._m0[9u].y;
    float _710 = _704.y * cbMtdParam._m0[9u].z;
    float _711 = _704.z * cbMtdParam._m0[9u].w;
    uvec2 _724 = uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_2, int(0u)));
    float _775;
    if (_647)
    {
        float _735 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _741 = (_564 * _549) - (_561 * _552);
        float _744 = (_558 * _552) - (_564 * _546);
        float _747 = (_561 * _546) - (_558 * _549);
        float _773 = ((log2((((float(_724.y) * 0.5) * float(_724.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_744 * _744) + (_747 * _747)) + (_741 * _741)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_735 * gl_WorldRayDirectionEXT.x, _735 * gl_WorldRayDirectionEXT.y, _735 * gl_WorldRayDirectionEXT.z), vec3(_577, _579, _580))));
        _775 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    }
    else
    {
        _775 = 0.0;
    }
    float _781 = textureLod(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _629) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _630) + cbTextureTilingScale._m0[2u].w), _775).x + cbMtdParam._m0[11u].y;
    uvec2 _793 = uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_1, int(0u)));
    float _797 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _798 = _797 * gl_WorldRayDirectionEXT.x;
    float _799 = _797 * gl_WorldRayDirectionEXT.y;
    float _800 = _797 * gl_WorldRayDirectionEXT.z;
    float _844;
    if (_647)
    {
        float _810 = (_564 * _549) - (_561 * _552);
        float _813 = (_558 * _552) - (_564 * _546);
        float _816 = (_561 * _546) - (_558 * _549);
        float _842 = ((log2((((float(_793.y) * 0.5) * float(_793.x)) * abs((_519 * _513) - (_518 * _515))) / (sqrt(((_813 * _813) + (_816 * _816)) + (_810 * _810)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_110) / abs(dot(vec3(_798, _799, _800), vec3(_577, _579, _580))));
        _844 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    }
    else
    {
        _844 = 0.0;
    }
    vec4 _847 = textureLod(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _629) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _630) + cbTextureTilingScale._m0[1u].w), _844);
    float _851 = _847.z;
    float _854 = (_847.x * 2.0) + (-1.0);
    float _856 = (_847.y * 2.0) + (-1.0);
    float _857 = dot(vec2(_854, _856), vec2(_854, _856));
    float _1365 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _862 = sqrt(1.0 - (isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0))));
    bool _867 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _882 = fma(_862, _577, fma(_856, _593, (_612 * _606) * _854));
    float _885 = fma(_862, _579, fma(_856, _594, (_612 * _607) * _854));
    float _888 = fma(_862, _580, fma(_856, _595, (_612 * _608) * _854));
    float _892 = inversesqrt(dot(vec3(_882, _885, _888), vec3(_882, _885, _888)));
    float _893 = _892 * _882;
    float _894 = _892 * _885;
    float _895 = _892 * _888;
    float _907 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _908 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _909 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _910 = (-0.0) - _798;
    float _912 = (-0.0) - _799;
    float _913 = (-0.0) - _800;
    float _919 = float(gl_LaunchIDEXT.x);
    float _920 = float(gl_LaunchIDEXT.y);
    float _923 = float(gl_LaunchSizeEXT.x);
    float _937 = fract(fract(sin(dot(vec2(_919 / _923, _920 / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _950 = fract(fract(sin(dot(vec2((_919 + 128.0) / _923, (_920 + 128.0) / _71), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _951 = 1.0 - _781;
    float _952 = _951 * _709;
    float _953 = _951 * _710;
    float _954 = _951 * _711;
    float _959 = _781 * (_709 + (-0.039999999105930328369140625));
    float _960 = _781 * (_710 + (-0.039999999105930328369140625));
    float _961 = _781 * (_711 + (-0.039999999105930328369140625));
    float _962 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    _63._m0 = 1u;
    uvec4 _975 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _976 = _975.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _976, _975.w, _976, vec3(_907, _908, _909), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (_63._m0 == 0u)
    {
        float _997 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_893, _894, _895));
        float _1376 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1000 = isnan(1.0) ? _1376 : (isnan(_1376) ? 1.0 : min(_1376, 1.0));
        float _1019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _851) * 0.949999988079071044921875);
        float _1020 = _1019 * _1019;
        float _1021 = g_sceneCB._m0[4u].x - _798;
        float _1022 = g_sceneCB._m0[4u].y - _799;
        float _1023 = g_sceneCB._m0[4u].z - _800;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1028 = _1027 * _1021;
        float _1029 = _1027 * _1022;
        float _1030 = _1027 * _1023;
        float _1031 = dot(vec3(_893, _894, _895), vec3(g_sceneCB._m0[4u].xyz));
        float _1387 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1034 = isnan(1.0) ? _1387 : (isnan(_1387) ? 1.0 : min(_1387, 1.0));
        float _1035 = dot(vec3(_893, _894, _895), vec3(_910, _912, _913));
        float _1398 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1038 = isnan(1.0) ? _1398 : (isnan(_1398) ? 1.0 : min(_1398, 1.0));
        float _1039 = dot(vec3(_893, _894, _895), vec3(_1028, _1029, _1030));
        float _1409 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1042 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
        float _1043 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1028, _1029, _1030));
        float _1420 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1020 * _1020;
        float _1051 = ((_1042 * _1042) * (_1047 + (-1.0))) + 1.0;
        float _1060 = exp2(log2(1.0 - (isnan(1.0) ? _1420 : (isnan(_1420) ? 1.0 : min(_1420, 1.0)))) * 5.0);
        float _1071 = 1.0 - _1020;
        float _1082 = (0.5 / (((_1038 * ((_1034 * _1071) + _1020)) + 9.9999999392252902907785028219223e-09) + (((_1038 * _1071) + _1020) * _1034))) * _1034;
        float _1431 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1084 = (isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0))) * (_1047 / ((_1051 * _1051) * 3.141590118408203125));
        _1091 = ((_952 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1000;
        _1092 = ((_953 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1000;
        _1093 = ((_954 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1000;
        _1094 = (((_1060 * (0.959999978542327880859375 - _959)) + _962) * g_sceneCB._m0[5u].x) * _1084;
        _1095 = (((_1060 * (0.959999978542327880859375 - _960)) + _964) * g_sceneCB._m0[5u].y) * _1084;
        _1096 = (((_1060 * (0.959999978542327880859375 - _961)) + _965) * g_sceneCB._m0[5u].z) * _1084;
    }
    else
    {
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    bool _1098 = abs(_894) < 0.89999997615814208984375;
    float _1100 = float(_1098);
    float _1101 = _1098 ? 0.0 : 1.0;
    float _1104 = (_1100 * _895) - (_1101 * _894);
    float _1105 = _1101 * _893;
    float _1107 = (-0.0) - (_893 * _1100);
    float _1111 = inversesqrt(dot(vec3(_1104, _1105, _1107), vec3(_1104, _1105, _1107)));
    float _1112 = _1104 * _1111;
    float _1113 = _1105 * _1111;
    float _1114 = _1111 * _1107;
    float _1117 = (_1113 * _895) - (_1114 * _894);
    float _1120 = (_1114 * _893) - (_1112 * _895);
    float _1123 = (_1112 * _894) - (_1113 * _893);
    float _1125;
    float _1133;
    float _1124 = 0.0;
    uint _1126 = 0u;
    float _1130;
    bool _1132;
    for (;;)
    {
        _1130 = (float(_1126) + _937) * 0.03125;
        _1132 = _1126 == 0u;
        float frontier_phi_45_pred;
        if (_1132)
        {
            frontier_phi_45_pred = 0.0;
        }
        else
        {
            float _1277;
            float _1278;
            uint _1280;
            _1277 = 0.0;
            _1278 = 0.5;
            _1280 = _1126;
            float _1134;
            for (;;)
            {
                _1134 = ((_1280 & 1u) != 0u) ? (_1278 + _1277) : _1277;
                uint _1281 = _1280 >> 1u;
                if (_1281 == 0u)
                {
                    break;
                }
                else
                {
                    _1277 = _1134;
                    _1278 *= 0.5;
                    _1280 = _1281;
                }
            }
            frontier_phi_45_pred = _1134;
        }
        _1133 = frontier_phi_45_pred;
        float _1135 = _1133 + _950;
        float _1139 = sqrt(_1130);
        float _1140 = ((_1135 > 1.0) ? (_1135 + (-1.0)) : _1135) * 6.283185482025146484375;
        float _1143 = cos(_1140) * _1139;
        float _1145 = sin(_1140) * _1139;
        float _1147 = sqrt(1.0 - _1130);
        float _1160 = ((_1147 * _893) + (_1143 * _1117)) + (_1145 * _1112);
        float _1161 = ((_1147 * _894) + (_1143 * _1120)) + (_1145 * _1113);
        float _1162 = ((_1147 * _895) + (_1143 * _1123)) + (_1145 * _1114);
        _62._m0 = 1u;
        uvec4 _1166 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1167 = _1166.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1167, _1166.w, _1167, vec3(_907, _908, _909), 9.9999997473787516355514526367188e-05, vec3(_1160, _1161, _1162), 10000.0, 1);
        float _1173 = dot(vec3(_893, _894, _895), vec3(_1160, _1161, _1162));
        float _1442 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1176 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
        _1125 = ((float(_62._m0 == 0u) * _1176) / (_1176 * 0.3183098733425140380859375)) + _1124;
        uint _1127 = _1126 + 1u;
        if (_1127 == 32u)
        {
            break;
        }
        else
        {
            _1124 = _1125;
            _1126 = _1127;
            continue;
        }
    }
    float _1184 = _1125 * 0.009947183541953563690185546875;
    float _1189 = dot(vec3(_798, _799, _800), vec3(_893, _894, _895)) * 2.0;
    vec4 _1203 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_798 - (_1189 * _893), _799 - (_1189 * _894), _800 - (_1189 * _895)), 4.0 - (_851 * 4.0));
    float _1208 = dot(vec3(_910, _912, _913), vec3(_893, _894, _895));
    float _1453 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1218 = exp2(log2(1.0 - (isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0)))) * 5.0);
    vec4 _1230 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_893, _894, _895), 0.0);
    float _1242 = ((_1091 + (_867 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y)) + _1094) + (((_1230.x * _952) + (((_1218 * (0.959999978542327880859375 - _959)) + _962) * _1203.x)) * _1184);
    float _1247 = ((_1092 + (_867 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z)) + _1095) + (((_1230.y * _953) + (((_1218 * (0.959999978542327880859375 - _960)) + _964) * _1203.y)) * _1184);
    float _1252 = ((_1093 + (_867 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w)) + _1096) + (((_1230.z * _954) + (((_1218 * (0.959999978542327880859375 - _961)) + _965) * _1203.z)) * _1184);
    float _1464 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1475 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1486 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    bool _1260 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1271;
    _1271.x = _1260 ? ((_570 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0)));
    _1271.y = _1260 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0)));
    _1271.z = _1260 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0)));
    payload._m0 = _1271;
}


