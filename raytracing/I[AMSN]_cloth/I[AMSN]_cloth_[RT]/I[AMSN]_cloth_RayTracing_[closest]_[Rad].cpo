#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _57
{
    vec3 _m0;
};

struct _61
{
    vec2 _m0;
};

struct _64
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _57 payload;
hitAttributeEXT _61 hit;
layout(location = 1) rayPayloadEXT _64 _66;
layout(location = 2) rayPayloadEXT _64 _67;

vec3 _1274;

void main()
{
    float _81 = float(gl_LaunchSizeEXT.y);
    float _109 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _110 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _111 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _118 = sqrt(((_110 * _110) + (_109 * _109)) + (_111 * _111)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _81)))));
    uvec4 _129 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _130 = _129.y;
    uint _170;
    uint _172;
    uint _173;
    if (_129.x == 0u)
    {
        uint _138 = (_130 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _147 = uvec3(texelFetch(l_geomIndexBuffer, int(_138)).x, texelFetch(l_geomIndexBuffer, int(_138 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_138 + 2u)).x);
        _170 = _147.x;
        _172 = _147.y;
        _173 = _147.z;
    }
    else
    {
        uint _151 = uint(gl_PrimitiveID) * 6u;
        uint _153 = _151 & 4294967292u;
        uint _156 = (_130 + _153) >> 2u;
        uvec2 _163 = uvec2(texelFetch(l_geomIndexBuffer, int(_156)).x, texelFetch(l_geomIndexBuffer, int(_156 + 1u)).x);
        uint _164 = _163.x;
        uint _165 = _163.y;
        uint _167 = _164 >> 16u;
        uint _168 = _165 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_153 == _151)
        {
            frontier_phi_3_2_ladder = _168;
            frontier_phi_3_2_ladder_1 = _164 & 65535u;
            frontier_phi_3_2_ladder_2 = _167;
        }
        else
        {
            frontier_phi_3_2_ladder = _165 >> 16u;
            frontier_phi_3_2_ladder_1 = _167;
            frontier_phi_3_2_ladder_2 = _168;
        }
        _170 = frontier_phi_3_2_ladder_1;
        _172 = frontier_phi_3_2_ladder_2;
        _173 = frontier_phi_3_2_ladder;
    }
    uvec4 _177 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _178 = _177.x;
    uint _179 = _177.z;
    bool _180 = _179 != 0u;
    uint _181 = _129.w;
    bool _183 = _180 || (_181 == 0u);
    uint _184 = _178 * _170;
    uint _185 = _184 + 12u;
    uint _209;
    uint _210;
    uint _211;
    uint _212;
    if (_183)
    {
        uvec4 _188 = texelFetch(l_geomAttrib_0, int(_185 >> 2u));
        uint _189 = _188.x;
        _209 = _189 & 255u;
        _210 = (_189 >> 8u) & 255u;
        _211 = (_189 >> 16u) & 255u;
        _212 = 16u;
    }
    else
    {
        uint _197 = _185 >> 2u;
        uvec2 _203 = uvec2(texelFetch(l_geomAttrib_0, int(_197)).x, texelFetch(l_geomAttrib_0, int(_197 + 1u)).x);
        uint _204 = _203.x;
        _209 = _204 & 65535u;
        _210 = _204 >> 16u;
        _211 = _203.y & 65535u;
        _212 = 20u;
    }
    uvec4 _220 = texelFetch(l_geomAttrib_0, int((_212 + _184) >> 2u));
    uint _221 = _220.x;
    uint _233 = _177.y;
    bool _234 = _179 == 0u;
    uint _237 = _234 ? 4u : ((_181 != 0u) ? 12u : 8u);
    uint _240 = _180 ? (_237 + 4u) : _237;
    uint _241 = _233 * _170;
    uvec4 _252 = texelFetch(l_geomAttrib_1, int(((_241 + 4u) + _240) >> 2u));
    uint _253 = _252.x;
    float _257 = float(int(uint(int(_253 << 16u) >> int(16u))));
    float _258 = float(int(uint(int(_253) >> int(16u))));
    uint _259 = _178 * _172;
    uint _260 = _259 + 12u;
    uint _281;
    uint _282;
    uint _283;
    uint _284;
    if (_183)
    {
        uvec4 _262 = texelFetch(l_geomAttrib_0, int(_260 >> 2u));
        uint _263 = _262.x;
        _281 = _263 & 255u;
        _282 = (_263 >> 8u) & 255u;
        _283 = (_263 >> 16u) & 255u;
        _284 = 16u;
    }
    else
    {
        uint _269 = _260 >> 2u;
        uvec2 _275 = uvec2(texelFetch(l_geomAttrib_0, int(_269)).x, texelFetch(l_geomAttrib_0, int(_269 + 1u)).x);
        uint _276 = _275.x;
        _281 = _276 & 65535u;
        _282 = _276 >> 16u;
        _283 = _275.y & 65535u;
        _284 = 20u;
    }
    uvec4 _290 = texelFetch(l_geomAttrib_0, int((_284 + _259) >> 2u));
    uint _291 = _290.x;
    uint _304 = _234 ? 4u : ((_181 != 0u) ? 12u : 8u);
    uint _306 = _180 ? (_304 + 4u) : _304;
    uint _307 = _233 * _172;
    uvec4 _317 = texelFetch(l_geomAttrib_1, int(((_307 + 4u) + _306) >> 2u));
    uint _318 = _317.x;
    float _322 = float(int(uint(int(_318 << 16u) >> int(16u))));
    float _323 = float(int(uint(int(_318) >> int(16u))));
    uint _324 = _178 * _173;
    uint _325 = _324 + 12u;
    uint _346;
    uint _347;
    uint _348;
    uint _349;
    if (_183)
    {
        uvec4 _327 = texelFetch(l_geomAttrib_0, int(_325 >> 2u));
        uint _328 = _327.x;
        _346 = _328 & 255u;
        _347 = (_328 >> 8u) & 255u;
        _348 = (_328 >> 16u) & 255u;
        _349 = 16u;
    }
    else
    {
        uint _334 = _325 >> 2u;
        uvec2 _340 = uvec2(texelFetch(l_geomAttrib_0, int(_334)).x, texelFetch(l_geomAttrib_0, int(_334 + 1u)).x);
        uint _341 = _340.x;
        _346 = _341 & 65535u;
        _347 = _341 >> 16u;
        _348 = _340.y & 65535u;
        _349 = 20u;
    }
    uvec4 _355 = texelFetch(l_geomAttrib_0, int((_349 + _324) >> 2u));
    uint _356 = _355.x;
    uint _369 = _234 ? 4u : ((_181 != 0u) ? 12u : 8u);
    uint _371 = _180 ? (_369 + 4u) : _369;
    uint _372 = _233 * _173;
    uvec4 _382 = texelFetch(l_geomAttrib_1, int(((_372 + 4u) + _371) >> 2u));
    uint _383 = _382.x;
    float _387 = float(int(uint(int(_383 << 16u) >> int(16u))));
    float _388 = float(int(uint(int(_383) >> int(16u))));
    bool _390 = _129.z == 0u;
    float _426;
    float _427;
    float _428;
    if (_390)
    {
        uint _393 = _170 * 3u;
        uvec3 _402 = uvec3(texelFetch(l_geomPositionBuffer, int(_393)).x, texelFetch(l_geomPositionBuffer, int(_393 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_393 + 2u)).x);
        _426 = uintBitsToFloat(_402.x);
        _427 = uintBitsToFloat(_402.y);
        _428 = uintBitsToFloat(_402.z);
    }
    else
    {
        uint _410 = _170 * 2u;
        uvec2 _416 = uvec2(texelFetch(l_geomPositionBuffer, int(_410)).x, texelFetch(l_geomPositionBuffer, int(_410 + 1u)).x);
        uint _417 = _416.x;
        _426 = unpackHalf2x16(_417).x;
        _427 = unpackHalf2x16(_417 >> 16u).x;
        _428 = unpackHalf2x16(_416.y).x;
    }
    float _464;
    float _465;
    float _466;
    if (_390)
    {
        uint _431 = _172 * 3u;
        uvec3 _440 = uvec3(texelFetch(l_geomPositionBuffer, int(_431)).x, texelFetch(l_geomPositionBuffer, int(_431 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_431 + 2u)).x);
        _464 = uintBitsToFloat(_440.x);
        _465 = uintBitsToFloat(_440.y);
        _466 = uintBitsToFloat(_440.z);
    }
    else
    {
        uint _448 = _172 * 2u;
        uvec2 _454 = uvec2(texelFetch(l_geomPositionBuffer, int(_448)).x, texelFetch(l_geomPositionBuffer, int(_448 + 1u)).x);
        uint _455 = _454.x;
        _464 = unpackHalf2x16(_455).x;
        _465 = unpackHalf2x16(_455 >> 16u).x;
        _466 = unpackHalf2x16(_454.y).x;
    }
    float _502;
    float _503;
    float _504;
    if (_390)
    {
        uint _469 = _173 * 3u;
        uvec3 _478 = uvec3(texelFetch(l_geomPositionBuffer, int(_469)).x, texelFetch(l_geomPositionBuffer, int(_469 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_469 + 2u)).x);
        _502 = uintBitsToFloat(_478.x);
        _503 = uintBitsToFloat(_478.y);
        _504 = uintBitsToFloat(_478.z);
    }
    else
    {
        uint _486 = _173 * 2u;
        uvec2 _492 = uvec2(texelFetch(l_geomPositionBuffer, int(_486)).x, texelFetch(l_geomPositionBuffer, int(_486 + 1u)).x);
        uint _493 = _492.x;
        _502 = unpackHalf2x16(_493).x;
        _503 = unpackHalf2x16(_493 >> 16u).x;
        _504 = unpackHalf2x16(_492.y).x;
    }
    float _507 = (1.0 - hit._m0.x) - hit._m0.y;
    float _534 = (((float(texelFetch(l_geomAttrib_1, int((_306 + _307) >> 2u)).x >> 24u) * hit._m0.x) + (float(texelFetch(l_geomAttrib_1, int((_240 + _241) >> 2u)).x >> 24u) * _507)) + (float(texelFetch(l_geomAttrib_1, int((_371 + _372) >> 2u)).x >> 24u) * hit._m0.y)) * 0.0039215688593685626983642578125;
    float _548 = (_322 - _257) * 0.00048828125;
    float _550 = (_323 - _258) * 0.00048828125;
    float _553 = (_387 - _257) * 0.00048828125;
    float _554 = (_388 - _258) * 0.00048828125;
    float _576 = _464 - _426;
    float _577 = _465 - _427;
    float _578 = _466 - _428;
    float _581 = fma(_578, gl_ObjectToWorldEXT[2u].x, fma(_577, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _576));
    float _584 = fma(_578, gl_ObjectToWorldEXT[2u].y, fma(_577, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _576));
    float _587 = fma(_578, gl_ObjectToWorldEXT[2u].z, fma(_577, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _576));
    float _588 = _502 - _426;
    float _589 = _503 - _427;
    float _590 = _504 - _428;
    float _593 = fma(_590, gl_ObjectToWorldEXT[2u].x, fma(_589, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _588));
    float _596 = fma(_590, gl_ObjectToWorldEXT[2u].y, fma(_589, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _588));
    float _599 = fma(_590, gl_ObjectToWorldEXT[2u].z, fma(_589, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _588));
    float _600 = (((_322 * hit._m0.x) + (_257 * _507)) + (_387 * hit._m0.y)) * 0.00048828125;
    float _601 = (((_323 * hit._m0.x) + (_258 * _507)) + (_388 * hit._m0.y)) * 0.00048828125;
    float _605 = (((float(_209) * _507) + (-127.0)) + (float(_281) * hit._m0.x)) + (float(_346) * hit._m0.y);
    float _608 = (((float(_210) * _507) + (-127.0)) + (float(_282) * hit._m0.x)) + (float(_347) * hit._m0.y);
    float _611 = (((float(_211) * _507) + (-127.0)) + (float(_283) * hit._m0.x)) + (float(_348) * hit._m0.y);
    float _612 = _605 * 0.0078740157186985015869140625;
    float _614 = _608 * 0.0078740157186985015869140625;
    float _615 = _611 * 0.0078740157186985015869140625;
    float _628 = ((((float(_221 & 255u) * _507) + (-127.0)) + (float(_291 & 255u) * hit._m0.x)) + (float(_356 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _629 = ((((float((_221 >> 8u) & 255u) * _507) + (-127.0)) + (float((_291 >> 8u) & 255u) * hit._m0.x)) + (float((_356 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _630 = ((((float((_221 >> 16u) & 255u) * _507) + (-127.0)) + (float((_291 >> 16u) & 255u) * hit._m0.x)) + (float((_356 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _631 = ((((float(_221 >> 24u) * _507) + (-127.0)) + (float(_291 >> 24u) * hit._m0.x)) + (float(_356 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _641 = ((_629 * _615) - (_630 * _614)) * _631;
    float _642 = ((_630 * _612) - (_628 * _615)) * _631;
    float _643 = ((_628 * _614) - (_629 * _612)) * _631;
    float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
    uvec2 _668 = uvec2(textureSize(I_AMSN_snp_0_Texture2D_0, int(0u)));
    bool _673 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _726;
    if (_673)
    {
        float _684 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _690 = (_599 * _584) - (_596 * _587);
        float _693 = (_593 * _587) - (_599 * _581);
        float _696 = (_596 * _581) - (_593 * _584);
        float _723 = ((log2((((float(_668.y) * 0.5) * float(_668.x)) * abs((_554 * _548) - (_553 * _550))) / (sqrt(((_693 * _693) + (_696 * _696)) + (_690 * _690)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_684 * gl_WorldRayDirectionEXT.x, _684 * gl_WorldRayDirectionEXT.y, _684 * gl_WorldRayDirectionEXT.z), vec3(_612, _614, _615))));
        _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    }
    else
    {
        _726 = 0.0;
    }
    vec4 _730 = textureLod(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _600) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _601) + cbTextureTilingScale._m0[0u].w), _726);
    float _735 = _730.x * cbMtdParam._m0[9u].x;
    float _736 = _730.y * cbMtdParam._m0[9u].y;
    float _737 = _730.z * cbMtdParam._m0[9u].z;
    uvec2 _753 = uvec2(textureSize(I_AMSN_snp_0_Texture2D_1, int(0u)));
    float _757 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _758 = _757 * gl_WorldRayDirectionEXT.x;
    float _759 = _757 * gl_WorldRayDirectionEXT.y;
    float _760 = _757 * gl_WorldRayDirectionEXT.z;
    float _804;
    if (_673)
    {
        float _770 = (_599 * _584) - (_596 * _587);
        float _773 = (_593 * _587) - (_599 * _581);
        float _776 = (_596 * _581) - (_593 * _584);
        float _802 = ((log2((((float(_753.y) * 0.5) * float(_753.x)) * abs((_554 * _548) - (_553 * _550))) / (sqrt(((_773 * _773) + (_776 * _776)) + (_770 * _770)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_118) / abs(dot(vec3(_758, _759, _760), vec3(_612, _614, _615))));
        _804 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    }
    else
    {
        _804 = 0.0;
    }
    vec4 _807 = textureLod(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _600) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _601) + cbTextureTilingScale._m0[1u].w), _804);
    float _811 = _807.z;
    float _814 = (_807.x * 2.0) + (-1.0);
    float _816 = (_807.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_814, _816), vec2(_814, _816));
    float _1342 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _822 = sqrt(1.0 - (isnan(1.0) ? _1342 : (isnan(_1342) ? 1.0 : min(_1342, 1.0))));
    float _835 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _837 = ((-0.0) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    float _1358 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = 1.0 - (isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0)));
    float _847 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _1369 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _848 = isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0));
    float _858 = inversesqrt(dot(vec3(_612, _614, _615), vec3(_612, _614, _615)));
    float _866 = dot(vec4(uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), uintBitsToFloat(0x7fc00000u /* nan */), 0.0), vec4(_858 * _612, _858 * _614, _858 * _615, 0.0)) - (((_848 * _848) * cbMtdParam._m0[11u].w) * (3.0 - (_848 * 2.0)));
    float _1380 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _873 = exp2(log2(1.0 - (isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _885 = fma(_822, _612, fma(_816, _628, (_647 * _641) * _814));
    float _888 = fma(_822, _614, fma(_816, _629, (_647 * _642) * _814));
    float _891 = fma(_822, _615, fma(_816, _630, (_647 * _643) * _814));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _910 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _911 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _912 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _913 = (-0.0) - _758;
    float _914 = (-0.0) - _759;
    float _915 = (-0.0) - _760;
    float _921 = float(gl_LaunchIDEXT.x);
    float _922 = float(gl_LaunchIDEXT.y);
    float _925 = float(gl_LaunchSizeEXT.x);
    float _939 = fract(fract(sin(dot(vec2(_921 / _925, _922 / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _952 = fract(fract(sin(dot(vec2((_921 + 128.0) / _925, (_922 + 128.0) / _81), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _953 = 1.0 - cbMtdParam._m0[11u].x;
    float _954 = _953 * _735;
    float _955 = _953 * _736;
    float _956 = _953 * _737;
    float _961 = (_735 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _962 = (_736 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _963 = (_737 + (-0.039999999105930328369140625)) * cbMtdParam._m0[11u].x;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    _67._m0 = 1u;
    uvec4 _977 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _978 = _977.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _978, _977.w, _978, vec3(_910, _911, _912), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (_67._m0 == 0u)
    {
        float _999 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_896, _897, _898));
        float _1396 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1002 = isnan(1.0) ? _1396 : (isnan(_1396) ? 1.0 : min(_1396, 1.0));
        float _1021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _811) * 0.949999988079071044921875);
        float _1022 = _1021 * _1021;
        float _1023 = g_sceneCB._m0[4u].x - _758;
        float _1024 = g_sceneCB._m0[4u].y - _759;
        float _1025 = g_sceneCB._m0[4u].z - _760;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1030 = _1029 * _1023;
        float _1031 = _1029 * _1024;
        float _1032 = _1029 * _1025;
        float _1033 = dot(vec3(_896, _897, _898), vec3(g_sceneCB._m0[4u].xyz));
        float _1407 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1036 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        float _1037 = dot(vec3(_896, _897, _898), vec3(_913, _914, _915));
        float _1418 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1040 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
        float _1041 = dot(vec3(_896, _897, _898), vec3(_1030, _1031, _1032));
        float _1429 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1044 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        float _1045 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_1030, _1031, _1032));
        float _1440 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1022 * _1022;
        float _1053 = ((_1044 * _1044) * (_1049 + (-1.0))) + 1.0;
        float _1062 = exp2(log2(1.0 - (isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0)))) * 5.0);
        float _1073 = 1.0 - _1022;
        float _1084 = (0.5 / (((_1040 * ((_1036 * _1073) + _1022)) + 9.9999999392252902907785028219223e-09) + (((_1040 * _1073) + _1022) * _1036))) * _1036;
        float _1451 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1086 = (isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0))) * (_1049 / ((_1053 * _1053) * 3.141590118408203125));
        _1093 = ((_954 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _1002;
        _1094 = ((_955 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _1002;
        _1095 = ((_956 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _1002;
        _1096 = (((_1062 * (0.959999978542327880859375 - _961)) + _964) * g_sceneCB._m0[5u].x) * _1086;
        _1097 = (((_1062 * (0.959999978542327880859375 - _962)) + _966) * g_sceneCB._m0[5u].y) * _1086;
        _1098 = (((_1062 * (0.959999978542327880859375 - _963)) + _967) * g_sceneCB._m0[5u].z) * _1086;
    }
    else
    {
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    bool _1100 = abs(_897) < 0.89999997615814208984375;
    float _1102 = float(_1100);
    float _1103 = _1100 ? 0.0 : 1.0;
    float _1106 = (_1102 * _898) - (_1103 * _897);
    float _1107 = _1103 * _896;
    float _1109 = (-0.0) - (_896 * _1102);
    float _1113 = inversesqrt(dot(vec3(_1106, _1107, _1109), vec3(_1106, _1107, _1109)));
    float _1114 = _1106 * _1113;
    float _1115 = _1107 * _1113;
    float _1116 = _1113 * _1109;
    float _1119 = (_1115 * _898) - (_1116 * _897);
    float _1122 = (_1116 * _896) - (_1114 * _898);
    float _1125 = (_1114 * _897) - (_1115 * _896);
    float _1127;
    float _1135;
    float _1126 = 0.0;
    uint _1128 = 0u;
    float _1132;
    bool _1134;
    for (;;)
    {
        _1132 = (float(_1128) + _939) * 0.03125;
        _1134 = _1128 == 0u;
        float frontier_phi_31_pred;
        if (_1134)
        {
            frontier_phi_31_pred = 0.0;
        }
        else
        {
            float _1279;
            float _1280;
            uint _1282;
            _1279 = 0.0;
            _1280 = 0.5;
            _1282 = _1128;
            float _1136;
            for (;;)
            {
                _1136 = ((_1282 & 1u) != 0u) ? (_1280 + _1279) : _1279;
                uint _1283 = _1282 >> 1u;
                if (_1283 == 0u)
                {
                    break;
                }
                else
                {
                    _1279 = _1136;
                    _1280 *= 0.5;
                    _1282 = _1283;
                }
            }
            frontier_phi_31_pred = _1136;
        }
        _1135 = frontier_phi_31_pred;
        float _1137 = _1135 + _952;
        float _1141 = sqrt(_1132);
        float _1142 = ((_1137 > 1.0) ? (_1137 + (-1.0)) : _1137) * 6.283185482025146484375;
        float _1145 = cos(_1142) * _1141;
        float _1147 = sin(_1142) * _1141;
        float _1149 = sqrt(1.0 - _1132);
        float _1162 = ((_1149 * _896) + (_1145 * _1119)) + (_1147 * _1114);
        float _1163 = ((_1149 * _897) + (_1145 * _1122)) + (_1147 * _1115);
        float _1164 = ((_1149 * _898) + (_1145 * _1125)) + (_1147 * _1116);
        _66._m0 = 1u;
        uvec4 _1168 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1169 = _1168.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1169, _1168.w, _1169, vec3(_910, _911, _912), 9.9999997473787516355514526367188e-05, vec3(_1162, _1163, _1164), 10000.0, 1);
        float _1175 = dot(vec3(_896, _897, _898), vec3(_1162, _1163, _1164));
        float _1462 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1178 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1127 = ((float(_66._m0 == 0u) * _1178) / (_1178 * 0.3183098733425140380859375)) + _1126;
        uint _1129 = _1128 + 1u;
        if (_1129 == 32u)
        {
            break;
        }
        else
        {
            _1126 = _1127;
            _1128 = _1129;
            continue;
        }
    }
    float _1186 = _1127 * 0.009947183541953563690185546875;
    float _1191 = dot(vec3(_758, _759, _760), vec3(_896, _897, _898)) * 2.0;
    vec4 _1205 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_758 - (_1191 * _896), _759 - (_1191 * _897), _760 - (_1191 * _898)), 4.0 - (_811 * 4.0));
    float _1210 = dot(vec3(_913, _914, _915), vec3(_896, _897, _898));
    float _1473 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1220 = exp2(log2(1.0 - (isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0)))) * 5.0);
    vec4 _1232 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_896, _897, _898), 0.0);
    float _1244 = ((_1093 + (((cbMtdParam._m0[10u].x * _534) * _839) * _873)) + _1096) + (((_1232.x * _954) + (((_1220 * (0.959999978542327880859375 - _961)) + _964) * _1205.x)) * _1186);
    float _1249 = ((_1094 + (((cbMtdParam._m0[10u].y * _534) * _839) * _873)) + _1097) + (((_1232.y * _955) + (((_1220 * (0.959999978542327880859375 - _962)) + _966) * _1205.y)) * _1186);
    float _1254 = ((_1095 + (((cbMtdParam._m0[10u].z * _534) * _839) * _873)) + _1098) + (((_1232.z * _956) + (((_1220 * (0.959999978542327880859375 - _963)) + _967) * _1205.z)) * _1186);
    float _1484 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1495 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1506 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    bool _1262 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1273;
    _1273.x = _1262 ? ((_605 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0)));
    _1273.y = _1262 ? ((_608 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0)));
    _1273.z = _1262 ? ((_611 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0)));
    payload._m0 = _1273;
}


