#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _54
{
    vec3 _m0;
};

struct _58
{
    vec2 _m0;
};

struct _61
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 70) uniform usamplerBuffer l_geomAttrib_1;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(location = 0) rayPayloadInEXT _54 payload;
hitAttributeEXT _58 hit;
layout(location = 1) rayPayloadEXT _61 _63;
layout(location = 2) rayPayloadEXT _61 _64;

vec3 _1240;

void main()
{
    float _72 = float(gl_LaunchSizeEXT.y);
    float _102 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _103 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _104 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _111 = sqrt(((_103 * _103) + (_102 * _102)) + (_104 * _104)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _72)))));
    uvec4 _122 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _123 = _122.y;
    uint _163;
    uint _165;
    uint _166;
    if (_122.x == 0u)
    {
        uint _131 = (_123 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _140 = uvec3(texelFetch(l_geomIndexBuffer, int(_131)).x, texelFetch(l_geomIndexBuffer, int(_131 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_131 + 2u)).x);
        _163 = _140.x;
        _165 = _140.y;
        _166 = _140.z;
    }
    else
    {
        uint _144 = uint(gl_PrimitiveID) * 6u;
        uint _146 = _144 & 4294967292u;
        uint _149 = (_123 + _146) >> 2u;
        uvec2 _156 = uvec2(texelFetch(l_geomIndexBuffer, int(_149)).x, texelFetch(l_geomIndexBuffer, int(_149 + 1u)).x);
        uint _157 = _156.x;
        uint _158 = _156.y;
        uint _160 = _157 >> 16u;
        uint _161 = _158 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_146 == _144)
        {
            frontier_phi_3_2_ladder = _161;
            frontier_phi_3_2_ladder_1 = _160;
            frontier_phi_3_2_ladder_2 = _157 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _158 >> 16u;
            frontier_phi_3_2_ladder_1 = _161;
            frontier_phi_3_2_ladder_2 = _160;
        }
        _163 = frontier_phi_3_2_ladder_2;
        _165 = frontier_phi_3_2_ladder_1;
        _166 = frontier_phi_3_2_ladder;
    }
    uvec4 _170 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _171 = _170.x;
    uint _172 = _170.z;
    bool _173 = _172 != 0u;
    uint _174 = _122.w;
    bool _176 = _173 || (_174 == 0u);
    uint _177 = _171 * _163;
    uint _178 = _177 + 12u;
    uint _202;
    uint _203;
    uint _204;
    uint _205;
    if (_176)
    {
        uvec4 _181 = texelFetch(l_geomAttrib_0, int(_178 >> 2u));
        uint _182 = _181.x;
        _202 = _182 & 255u;
        _203 = (_182 >> 8u) & 255u;
        _204 = (_182 >> 16u) & 255u;
        _205 = 16u;
    }
    else
    {
        uint _190 = _178 >> 2u;
        uvec2 _196 = uvec2(texelFetch(l_geomAttrib_0, int(_190)).x, texelFetch(l_geomAttrib_0, int(_190 + 1u)).x);
        uint _197 = _196.x;
        _202 = _197 & 65535u;
        _203 = _197 >> 16u;
        _204 = _196.y & 65535u;
        _205 = 20u;
    }
    uvec4 _213 = texelFetch(l_geomAttrib_0, int((_205 + _177) >> 2u));
    uint _214 = _213.x;
    uint _226 = _170.y;
    bool _227 = _172 == 0u;
    uint _230 = _227 ? 4u : ((_174 != 0u) ? 12u : 8u);
    uvec4 _239 = texelFetch(l_geomAttrib_1, int((((_226 * _163) + 4u) + (_173 ? (_230 + 4u) : _230)) >> 2u));
    uint _240 = _239.x;
    float _244 = float(int(uint(int(_240 << 16u) >> int(16u))));
    float _245 = float(int(uint(int(_240) >> int(16u))));
    uint _246 = _171 * _165;
    uint _247 = _246 + 12u;
    uint _268;
    uint _269;
    uint _270;
    uint _271;
    if (_176)
    {
        uvec4 _249 = texelFetch(l_geomAttrib_0, int(_247 >> 2u));
        uint _250 = _249.x;
        _268 = _250 & 255u;
        _269 = (_250 >> 8u) & 255u;
        _270 = (_250 >> 16u) & 255u;
        _271 = 16u;
    }
    else
    {
        uint _256 = _247 >> 2u;
        uvec2 _262 = uvec2(texelFetch(l_geomAttrib_0, int(_256)).x, texelFetch(l_geomAttrib_0, int(_256 + 1u)).x);
        uint _263 = _262.x;
        _268 = _263 & 65535u;
        _269 = _263 >> 16u;
        _270 = _262.y & 65535u;
        _271 = 20u;
    }
    uvec4 _277 = texelFetch(l_geomAttrib_0, int((_271 + _246) >> 2u));
    uint _278 = _277.x;
    uint _291 = _227 ? 4u : ((_174 != 0u) ? 12u : 8u);
    uvec4 _298 = texelFetch(l_geomAttrib_1, int((((_226 * _165) + 4u) + (_173 ? (_291 + 4u) : _291)) >> 2u));
    uint _299 = _298.x;
    float _303 = float(int(uint(int(_299 << 16u) >> int(16u))));
    float _304 = float(int(uint(int(_299) >> int(16u))));
    uint _305 = _171 * _166;
    uint _306 = _305 + 12u;
    uint _327;
    uint _328;
    uint _329;
    uint _330;
    if (_176)
    {
        uvec4 _308 = texelFetch(l_geomAttrib_0, int(_306 >> 2u));
        uint _309 = _308.x;
        _327 = _309 & 255u;
        _328 = (_309 >> 8u) & 255u;
        _329 = (_309 >> 16u) & 255u;
        _330 = 16u;
    }
    else
    {
        uint _315 = _306 >> 2u;
        uvec2 _321 = uvec2(texelFetch(l_geomAttrib_0, int(_315)).x, texelFetch(l_geomAttrib_0, int(_315 + 1u)).x);
        uint _322 = _321.x;
        _327 = _322 & 65535u;
        _328 = _322 >> 16u;
        _329 = _321.y & 65535u;
        _330 = 20u;
    }
    uvec4 _336 = texelFetch(l_geomAttrib_0, int((_330 + _305) >> 2u));
    uint _337 = _336.x;
    uint _350 = _227 ? 4u : ((_174 != 0u) ? 12u : 8u);
    uvec4 _357 = texelFetch(l_geomAttrib_1, int((((_226 * _166) + 4u) + (_173 ? (_350 + 4u) : _350)) >> 2u));
    uint _358 = _357.x;
    float _362 = float(int(uint(int(_358 << 16u) >> int(16u))));
    float _363 = float(int(uint(int(_358) >> int(16u))));
    bool _365 = _122.z == 0u;
    float _401;
    float _402;
    float _403;
    if (_365)
    {
        uint _368 = _163 * 3u;
        uvec3 _377 = uvec3(texelFetch(l_geomPositionBuffer, int(_368)).x, texelFetch(l_geomPositionBuffer, int(_368 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_368 + 2u)).x);
        _401 = uintBitsToFloat(_377.x);
        _402 = uintBitsToFloat(_377.y);
        _403 = uintBitsToFloat(_377.z);
    }
    else
    {
        uint _385 = _163 * 2u;
        uvec2 _391 = uvec2(texelFetch(l_geomPositionBuffer, int(_385)).x, texelFetch(l_geomPositionBuffer, int(_385 + 1u)).x);
        uint _392 = _391.x;
        _401 = unpackHalf2x16(_392).x;
        _402 = unpackHalf2x16(_392 >> 16u).x;
        _403 = unpackHalf2x16(_391.y).x;
    }
    float _439;
    float _440;
    float _441;
    if (_365)
    {
        uint _406 = _165 * 3u;
        uvec3 _415 = uvec3(texelFetch(l_geomPositionBuffer, int(_406)).x, texelFetch(l_geomPositionBuffer, int(_406 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_406 + 2u)).x);
        _439 = uintBitsToFloat(_415.x);
        _440 = uintBitsToFloat(_415.y);
        _441 = uintBitsToFloat(_415.z);
    }
    else
    {
        uint _423 = _165 * 2u;
        uvec2 _429 = uvec2(texelFetch(l_geomPositionBuffer, int(_423)).x, texelFetch(l_geomPositionBuffer, int(_423 + 1u)).x);
        uint _430 = _429.x;
        _439 = unpackHalf2x16(_430).x;
        _440 = unpackHalf2x16(_430 >> 16u).x;
        _441 = unpackHalf2x16(_429.y).x;
    }
    float _477;
    float _478;
    float _479;
    if (_365)
    {
        uint _444 = _166 * 3u;
        uvec3 _453 = uvec3(texelFetch(l_geomPositionBuffer, int(_444)).x, texelFetch(l_geomPositionBuffer, int(_444 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_444 + 2u)).x);
        _477 = uintBitsToFloat(_453.x);
        _478 = uintBitsToFloat(_453.y);
        _479 = uintBitsToFloat(_453.z);
    }
    else
    {
        uint _461 = _166 * 2u;
        uvec2 _467 = uvec2(texelFetch(l_geomPositionBuffer, int(_461)).x, texelFetch(l_geomPositionBuffer, int(_461 + 1u)).x);
        uint _468 = _467.x;
        _477 = unpackHalf2x16(_468).x;
        _478 = unpackHalf2x16(_468 >> 16u).x;
        _479 = unpackHalf2x16(_467.y).x;
    }
    float _482 = (1.0 - hit._m0.x) - hit._m0.y;
    float _516 = (_303 - _244) * 0.00048828125;
    float _518 = (_304 - _245) * 0.00048828125;
    float _521 = (_362 - _244) * 0.00048828125;
    float _522 = (_363 - _245) * 0.00048828125;
    float _544 = _439 - _401;
    float _545 = _440 - _402;
    float _546 = _441 - _403;
    float _549 = fma(_546, gl_ObjectToWorldEXT[2u].x, fma(_545, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _544));
    float _552 = fma(_546, gl_ObjectToWorldEXT[2u].y, fma(_545, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _544));
    float _555 = fma(_546, gl_ObjectToWorldEXT[2u].z, fma(_545, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _544));
    float _556 = _477 - _401;
    float _557 = _478 - _402;
    float _558 = _479 - _403;
    float _561 = fma(_558, gl_ObjectToWorldEXT[2u].x, fma(_557, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _556));
    float _564 = fma(_558, gl_ObjectToWorldEXT[2u].y, fma(_557, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _556));
    float _567 = fma(_558, gl_ObjectToWorldEXT[2u].z, fma(_557, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _556));
    float _568 = (((_303 * hit._m0.x) + (_244 * _482)) + (_362 * hit._m0.y)) * 0.00048828125;
    float _569 = (((_304 * hit._m0.x) + (_245 * _482)) + (_363 * hit._m0.y)) * 0.00048828125;
    float _573 = (((float(_202) * _482) + (-127.0)) + (float(_268) * hit._m0.x)) + (float(_327) * hit._m0.y);
    float _576 = (((float(_203) * _482) + (-127.0)) + (float(_269) * hit._m0.x)) + (float(_328) * hit._m0.y);
    float _579 = (((float(_204) * _482) + (-127.0)) + (float(_270) * hit._m0.x)) + (float(_329) * hit._m0.y);
    float _580 = _573 * 0.0078740157186985015869140625;
    float _582 = _576 * 0.0078740157186985015869140625;
    float _583 = _579 * 0.0078740157186985015869140625;
    float _596 = ((((float(_214 & 255u) * _482) + (-127.0)) + (float(_278 & 255u) * hit._m0.x)) + (float(_337 & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _597 = ((((float((_214 >> 8u) & 255u) * _482) + (-127.0)) + (float((_278 >> 8u) & 255u) * hit._m0.x)) + (float((_337 >> 8u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _598 = ((((float((_214 >> 16u) & 255u) * _482) + (-127.0)) + (float((_278 >> 16u) & 255u) * hit._m0.x)) + (float((_337 >> 16u) & 255u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _599 = ((((float(_214 >> 24u) * _482) + (-127.0)) + (float(_278 >> 24u) * hit._m0.x)) + (float(_337 >> 24u) * hit._m0.y)) * 0.0078740157186985015869140625;
    float _609 = ((_597 * _583) - (_598 * _582)) * _599;
    float _610 = ((_598 * _580) - (_596 * _583)) * _599;
    float _611 = ((_596 * _582) - (_597 * _580)) * _599;
    float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
    uvec2 _630 = uvec2(textureSize(M_AMSN_Alpha_snp_0_Texture2D_0, int(0u)));
    bool _635 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _688;
    if (_635)
    {
        float _646 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _652 = (_567 * _552) - (_564 * _555);
        float _655 = (_561 * _555) - (_567 * _549);
        float _658 = (_564 * _549) - (_561 * _552);
        float _685 = ((log2((((float(_630.y) * 0.5) * float(_630.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_655 * _655) + (_658 * _658)) + (_652 * _652)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_646 * gl_WorldRayDirectionEXT.x, _646 * gl_WorldRayDirectionEXT.y, _646 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    }
    else
    {
        _688 = 0.0;
    }
    vec4 _692 = textureLod(sampler2D(M_AMSN_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _568) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _569) + cbTextureTilingScale._m0[0u].w), _688);
    float _694 = _692.x;
    float _695 = _692.y;
    float _696 = _692.z;
    uvec2 _712 = uvec2(textureSize(M_AMSN_Alpha_snp_0_Texture2D_2, int(0u)));
    float _763;
    if (_635)
    {
        float _723 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _729 = (_567 * _552) - (_564 * _555);
        float _732 = (_561 * _555) - (_567 * _549);
        float _735 = (_564 * _549) - (_561 * _552);
        float _761 = ((log2((((float(_712.y) * 0.5) * float(_712.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_732 * _732) + (_735 * _735)) + (_729 * _729)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_723 * gl_WorldRayDirectionEXT.x, _723 * gl_WorldRayDirectionEXT.y, _723 * gl_WorldRayDirectionEXT.z), vec3(_580, _582, _583))));
        _763 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    }
    else
    {
        _763 = 0.0;
    }
    float _769 = textureLod(sampler2D(M_AMSN_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _568) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _569) + cbTextureTilingScale._m0[2u].w), _763).x + cbMtdParam._m0[9u].x;
    uvec2 _781 = uvec2(textureSize(M_AMSN_Alpha_snp_0_Texture2D_1, int(0u)));
    float _785 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _786 = _785 * gl_WorldRayDirectionEXT.x;
    float _787 = _785 * gl_WorldRayDirectionEXT.y;
    float _788 = _785 * gl_WorldRayDirectionEXT.z;
    float _832;
    if (_635)
    {
        float _798 = (_567 * _552) - (_564 * _555);
        float _801 = (_561 * _555) - (_567 * _549);
        float _804 = (_564 * _549) - (_561 * _552);
        float _830 = ((log2((((float(_781.y) * 0.5) * float(_781.x)) * abs((_522 * _516) - (_521 * _518))) / (sqrt(((_801 * _801) + (_804 * _804)) + (_798 * _798)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_111) / abs(dot(vec3(_786, _787, _788), vec3(_580, _582, _583))));
        _832 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    }
    else
    {
        _832 = 0.0;
    }
    vec4 _835 = textureLod(sampler2D(M_AMSN_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _568) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _569) + cbTextureTilingScale._m0[1u].w), _832);
    float _839 = _835.z;
    float _842 = (_835.x * 2.0) + (-1.0);
    float _844 = (_835.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_842, _844), vec2(_842, _844));
    float _1315 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _850 = sqrt(1.0 - (isnan(1.0) ? _1315 : (isnan(_1315) ? 1.0 : min(_1315, 1.0))));
    float _853 = fma(_850, _580, fma(_844, _596, (_615 * _609) * _842));
    float _856 = fma(_850, _582, fma(_844, _597, (_615 * _610) * _842));
    float _859 = fma(_850, _583, fma(_844, _598, (_615 * _611) * _842));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _878 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _879 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _880 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _881 = (-0.0) - _786;
    float _883 = (-0.0) - _787;
    float _884 = (-0.0) - _788;
    float _890 = float(gl_LaunchIDEXT.x);
    float _891 = float(gl_LaunchIDEXT.y);
    float _894 = float(gl_LaunchSizeEXT.x);
    float _908 = fract(fract(sin(dot(vec2(_890 / _894, _891 / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _921 = fract(fract(sin(dot(vec2((_890 + 128.0) / _894, (_891 + 128.0) / _72), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _922 = 1.0 - _769;
    float _923 = _922 * _694;
    float _924 = _922 * _695;
    float _925 = _922 * _696;
    float _930 = _769 * (_694 + (-0.039999999105930328369140625));
    float _931 = _769 * (_695 + (-0.039999999105930328369140625));
    float _932 = _769 * (_696 + (-0.039999999105930328369140625));
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    _64._m0 = 1u;
    uvec4 _946 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _947 = _946.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _947, _946.w, _947, vec3(_878, _879, _880), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (_64._m0 == 0u)
    {
        float _968 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_864, _865, _866));
        float _1326 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _971 = isnan(1.0) ? _1326 : (isnan(_1326) ? 1.0 : min(_1326, 1.0));
        float _990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / g_sceneCB._m0[4u].w)) * _839) * 0.949999988079071044921875);
        float _991 = _990 * _990;
        float _992 = g_sceneCB._m0[4u].x - _786;
        float _993 = g_sceneCB._m0[4u].y - _787;
        float _994 = g_sceneCB._m0[4u].z - _788;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _999 = _998 * _992;
        float _1000 = _998 * _993;
        float _1001 = _998 * _994;
        float _1002 = dot(vec3(_864, _865, _866), vec3(g_sceneCB._m0[4u].xyz));
        float _1337 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1005 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
        float _1006 = dot(vec3(_864, _865, _866), vec3(_881, _883, _884));
        float _1348 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1009 = isnan(1.0) ? _1348 : (isnan(_1348) ? 1.0 : min(_1348, 1.0));
        float _1010 = dot(vec3(_864, _865, _866), vec3(_999, _1000, _1001));
        float _1359 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1013 = isnan(1.0) ? _1359 : (isnan(_1359) ? 1.0 : min(_1359, 1.0));
        float _1014 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_999, _1000, _1001));
        float _1370 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _991 * _991;
        float _1022 = ((_1013 * _1013) * (_1018 + (-1.0))) + 1.0;
        float _1031 = exp2(log2(1.0 - (isnan(1.0) ? _1370 : (isnan(_1370) ? 1.0 : min(_1370, 1.0)))) * 5.0);
        float _1042 = 1.0 - _991;
        float _1053 = (0.5 / (((_1009 * ((_1005 * _1042) + _991)) + 9.9999999392252902907785028219223e-09) + (((_1009 * _1042) + _991) * _1005))) * _1005;
        float _1381 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1055 = (isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0))) * (_1018 / ((_1022 * _1022) * 3.141590118408203125));
        _1062 = ((_923 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _971;
        _1063 = ((_924 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _971;
        _1064 = ((_925 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _971;
        _1065 = (((_1031 * (0.959999978542327880859375 - _930)) + _933) * g_sceneCB._m0[5u].x) * _1055;
        _1066 = (((_1031 * (0.959999978542327880859375 - _931)) + _935) * g_sceneCB._m0[5u].y) * _1055;
        _1067 = (((_1031 * (0.959999978542327880859375 - _932)) + _936) * g_sceneCB._m0[5u].z) * _1055;
    }
    else
    {
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    bool _1069 = abs(_865) < 0.89999997615814208984375;
    float _1071 = float(_1069);
    float _1072 = _1069 ? 0.0 : 1.0;
    float _1075 = (_1071 * _866) - (_1072 * _865);
    float _1076 = _1072 * _864;
    float _1078 = (-0.0) - (_864 * _1071);
    float _1082 = inversesqrt(dot(vec3(_1075, _1076, _1078), vec3(_1075, _1076, _1078)));
    float _1083 = _1075 * _1082;
    float _1084 = _1076 * _1082;
    float _1085 = _1082 * _1078;
    float _1088 = (_1084 * _866) - (_1085 * _865);
    float _1091 = (_1085 * _864) - (_1083 * _866);
    float _1094 = (_1083 * _865) - (_1084 * _864);
    float _1096;
    float _1104;
    float _1095 = 0.0;
    uint _1097 = 0u;
    float _1101;
    bool _1103;
    for (;;)
    {
        _1101 = (float(_1097) + _908) * 0.03125;
        _1103 = _1097 == 0u;
        float frontier_phi_33_pred;
        if (_1103)
        {
            frontier_phi_33_pred = 0.0;
        }
        else
        {
            float _1245;
            float _1246;
            uint _1248;
            _1245 = 0.0;
            _1246 = 0.5;
            _1248 = _1097;
            float _1105;
            for (;;)
            {
                _1105 = ((_1248 & 1u) != 0u) ? (_1246 + _1245) : _1245;
                uint _1249 = _1248 >> 1u;
                if (_1249 == 0u)
                {
                    break;
                }
                else
                {
                    _1245 = _1105;
                    _1246 *= 0.5;
                    _1248 = _1249;
                }
            }
            frontier_phi_33_pred = _1105;
        }
        _1104 = frontier_phi_33_pred;
        float _1106 = _1104 + _921;
        float _1110 = sqrt(_1101);
        float _1111 = ((_1106 > 1.0) ? (_1106 + (-1.0)) : _1106) * 6.283185482025146484375;
        float _1114 = cos(_1111) * _1110;
        float _1116 = sin(_1111) * _1110;
        float _1118 = sqrt(1.0 - _1101);
        float _1131 = ((_1118 * _864) + (_1114 * _1088)) + (_1116 * _1083);
        float _1132 = ((_1118 * _865) + (_1114 * _1091)) + (_1116 * _1084);
        float _1133 = ((_1118 * _866) + (_1114 * _1094)) + (_1116 * _1085);
        _63._m0 = 1u;
        uvec4 _1137 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _1138 = _1137.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _1138, _1137.w, _1138, vec3(_878, _879, _880), 9.9999997473787516355514526367188e-05, vec3(_1131, _1132, _1133), 10000.0, 1);
        float _1144 = dot(vec3(_864, _865, _866), vec3(_1131, _1132, _1133));
        float _1392 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1147 = isnan(1.0) ? _1392 : (isnan(_1392) ? 1.0 : min(_1392, 1.0));
        _1096 = ((float(_63._m0 == 0u) * _1147) / (_1147 * 0.3183098733425140380859375)) + _1095;
        uint _1098 = _1097 + 1u;
        if (_1098 == 32u)
        {
            break;
        }
        else
        {
            _1095 = _1096;
            _1097 = _1098;
            continue;
        }
    }
    float _1155 = _1096 * 0.009947183541953563690185546875;
    float _1160 = dot(vec3(_786, _787, _788), vec3(_864, _865, _866)) * 2.0;
    vec4 _1174 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_786 - (_1160 * _864), _787 - (_1160 * _865), _788 - (_1160 * _866)), 4.0 - (_839 * 4.0));
    float _1179 = dot(vec3(_881, _883, _884), vec3(_864, _865, _866));
    float _1403 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1189 = exp2(log2(1.0 - (isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0)))) * 5.0);
    vec4 _1201 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_864, _865, _866), 0.0);
    float _1212 = (_1065 + _1062) + (((_1201.x * _923) + (((_1189 * (0.959999978542327880859375 - _930)) + _933) * _1174.x)) * _1155);
    float _1216 = (_1066 + _1063) + (((_1201.y * _924) + (((_1189 * (0.959999978542327880859375 - _931)) + _935) * _1174.y)) * _1155);
    float _1220 = (_1067 + _1064) + (((_1201.z * _925) + (((_1189 * (0.959999978542327880859375 - _932)) + _936) * _1174.z)) * _1155);
    float _1414 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1425 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1436 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    bool _1228 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1239;
    _1239.x = _1228 ? ((_573 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1414 : (isnan(_1414) ? 1.0 : min(_1414, 1.0)));
    _1239.y = _1228 ? ((_576 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0)));
    _1239.z = _1228 ? ((_579 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0)));
    payload._m0 = _1239;
}


