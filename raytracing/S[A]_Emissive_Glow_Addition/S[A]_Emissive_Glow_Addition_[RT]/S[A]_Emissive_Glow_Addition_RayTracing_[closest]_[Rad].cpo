#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require

struct _51
{
    vec3 _m0;
};

struct _55
{
    vec2 _m0;
};

struct _58
{
    uint _m0;
};

layout(set = 0, binding = 0, std140) uniform g_sceneCBUBO
{
    vec4 _m0[16];
} g_sceneCB;

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 16, std140) uniform l_modelCBUBO
{
    vec4 _m0[2];
} l_modelCB;

layout(set = 0, binding = 64) uniform accelerationStructureEXT g_accelerationStructure;
layout(set = 0, binding = 65) uniform textureCube g_ambientDiffuseTex;
layout(set = 0, binding = 66) uniform textureCube g_ambientSpecularTex;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 67) uniform usamplerBuffer l_geomIndexBuffer;
layout(set = 0, binding = 68) uniform usamplerBuffer l_geomPositionBuffer;
layout(set = 0, binding = 69) uniform usamplerBuffer l_geomAttrib_0;
layout(set = 0, binding = 13) uniform sampler g_sampsWrapLinear;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(location = 0) rayPayloadInEXT _51 payload;
hitAttributeEXT _55 hit;
layout(location = 1) rayPayloadEXT _58 _60;
layout(location = 2) rayPayloadEXT _58 _61;

vec3 _1005;

void main()
{
    float _69 = float(gl_LaunchSizeEXT.y);
    float _99 = gl_WorldRayDirectionEXT.x * gl_RayTmaxEXT;
    float _100 = gl_WorldRayDirectionEXT.y * gl_RayTmaxEXT;
    float _101 = gl_WorldRayDirectionEXT.z * gl_RayTmaxEXT;
    float _108 = sqrt(((_100 * _100) + (_99 * _99)) + (_101 * _101)) * atan((g_sceneCB._m0[3u].y * 2.0) / float(int(uint(int(g_sceneCB._m0[7u].w * _69)))));
    uvec4 _119 = floatBitsToUint(l_modelCB._m0[0u]);
    uint _120 = _119.y;
    uint _160;
    uint _162;
    uint _163;
    if (_119.x == 0u)
    {
        uint _128 = (_120 + (uint(gl_PrimitiveID) * 12u)) >> 2u;
        uvec3 _137 = uvec3(texelFetch(l_geomIndexBuffer, int(_128)).x, texelFetch(l_geomIndexBuffer, int(_128 + 1u)).x, texelFetch(l_geomIndexBuffer, int(_128 + 2u)).x);
        _160 = _137.x;
        _162 = _137.y;
        _163 = _137.z;
    }
    else
    {
        uint _141 = uint(gl_PrimitiveID) * 6u;
        uint _143 = _141 & 4294967292u;
        uint _146 = (_120 + _143) >> 2u;
        uvec2 _153 = uvec2(texelFetch(l_geomIndexBuffer, int(_146)).x, texelFetch(l_geomIndexBuffer, int(_146 + 1u)).x);
        uint _154 = _153.x;
        uint _155 = _153.y;
        uint _157 = _154 >> 16u;
        uint _158 = _155 & 65535u;
        uint frontier_phi_3_2_ladder;
        uint frontier_phi_3_2_ladder_1;
        uint frontier_phi_3_2_ladder_2;
        if (_143 == _141)
        {
            frontier_phi_3_2_ladder = _158;
            frontier_phi_3_2_ladder_1 = _157;
            frontier_phi_3_2_ladder_2 = _154 & 65535u;
        }
        else
        {
            frontier_phi_3_2_ladder = _155 >> 16u;
            frontier_phi_3_2_ladder_1 = _158;
            frontier_phi_3_2_ladder_2 = _157;
        }
        _160 = frontier_phi_3_2_ladder_2;
        _162 = frontier_phi_3_2_ladder_1;
        _163 = frontier_phi_3_2_ladder;
    }
    uvec4 _167 = floatBitsToUint(l_modelCB._m0[1u]);
    uint _168 = _167.x;
    uint _169 = _167.z;
    bool _170 = _169 != 0u;
    bool _172 = _119.w == 0u;
    bool _173 = _170 || _172;
    uint _175 = (_168 * _160) + 12u;
    uint _199;
    uint _200;
    uint _201;
    uint _202;
    if (_173)
    {
        uvec4 _178 = texelFetch(l_geomAttrib_0, int(_175 >> 2u));
        uint _179 = _178.x;
        _199 = _179 & 255u;
        _200 = (_179 >> 8u) & 255u;
        _201 = (_179 >> 16u) & 255u;
        _202 = 20u;
    }
    else
    {
        uint _187 = _175 >> 2u;
        uvec2 _193 = uvec2(texelFetch(l_geomAttrib_0, int(_187)).x, texelFetch(l_geomAttrib_0, int(_187 + 1u)).x);
        uint _194 = _193.x;
        _199 = _194 & 65535u;
        _200 = _194 >> 16u;
        _201 = _193.y & 65535u;
        _202 = 24u;
    }
    bool _208 = _169 == 0u;
    uint _209;
    if (_208)
    {
        _209 = _202;
    }
    else
    {
        uint frontier_phi_9_10_ladder;
        if (_172)
        {
            frontier_phi_9_10_ladder = _202 + 4u;
        }
        else
        {
            frontier_phi_9_10_ladder = _202 + 8u;
        }
        _209 = frontier_phi_9_10_ladder;
    }
    uvec4 _220 = texelFetch(l_geomAttrib_0, int((((_168 * _160) + 4u) + (_170 ? (_209 + 4u) : _209)) >> 2u));
    uint _221 = _220.x;
    float _225 = float(int(uint(int(_221 << 16u) >> int(16u))));
    float _226 = float(int(uint(int(_221) >> int(16u))));
    uint _228 = (_168 * _162) + 12u;
    uint _249;
    uint _250;
    uint _251;
    uint _252;
    if (_173)
    {
        uvec4 _230 = texelFetch(l_geomAttrib_0, int(_228 >> 2u));
        uint _231 = _230.x;
        _249 = _231 & 255u;
        _250 = (_231 >> 8u) & 255u;
        _251 = (_231 >> 16u) & 255u;
        _252 = 20u;
    }
    else
    {
        uint _237 = _228 >> 2u;
        uvec2 _243 = uvec2(texelFetch(l_geomAttrib_0, int(_237)).x, texelFetch(l_geomAttrib_0, int(_237 + 1u)).x);
        uint _244 = _243.x;
        _249 = _244 & 65535u;
        _250 = _244 >> 16u;
        _251 = _243.y & 65535u;
        _252 = 24u;
    }
    uint _256;
    if (_208)
    {
        _256 = _252;
    }
    else
    {
        uint frontier_phi_16_17_ladder;
        if (_172)
        {
            frontier_phi_16_17_ladder = _252 + 4u;
        }
        else
        {
            frontier_phi_16_17_ladder = _252 + 8u;
        }
        _256 = frontier_phi_16_17_ladder;
    }
    uvec4 _265 = texelFetch(l_geomAttrib_0, int((((_168 * _162) + 4u) + (_170 ? (_256 + 4u) : _256)) >> 2u));
    uint _266 = _265.x;
    float _270 = float(int(uint(int(_266 << 16u) >> int(16u))));
    float _271 = float(int(uint(int(_266) >> int(16u))));
    uint _273 = (_168 * _163) + 12u;
    uint _294;
    uint _295;
    uint _296;
    uint _297;
    if (_173)
    {
        uvec4 _275 = texelFetch(l_geomAttrib_0, int(_273 >> 2u));
        uint _276 = _275.x;
        _294 = _276 & 255u;
        _295 = (_276 >> 8u) & 255u;
        _296 = (_276 >> 16u) & 255u;
        _297 = 20u;
    }
    else
    {
        uint _282 = _273 >> 2u;
        uvec2 _288 = uvec2(texelFetch(l_geomAttrib_0, int(_282)).x, texelFetch(l_geomAttrib_0, int(_282 + 1u)).x);
        uint _289 = _288.x;
        _294 = _289 & 65535u;
        _295 = _289 >> 16u;
        _296 = _288.y & 65535u;
        _297 = 24u;
    }
    uint _301;
    if (_208)
    {
        _301 = _297;
    }
    else
    {
        uint frontier_phi_23_24_ladder;
        if (_172)
        {
            frontier_phi_23_24_ladder = _297 + 4u;
        }
        else
        {
            frontier_phi_23_24_ladder = _297 + 8u;
        }
        _301 = frontier_phi_23_24_ladder;
    }
    uvec4 _310 = texelFetch(l_geomAttrib_0, int((((_168 * _163) + 4u) + (_170 ? (_301 + 4u) : _301)) >> 2u));
    uint _311 = _310.x;
    float _315 = float(int(uint(int(_311 << 16u) >> int(16u))));
    float _316 = float(int(uint(int(_311) >> int(16u))));
    bool _318 = _119.z == 0u;
    float _354;
    float _355;
    float _356;
    if (_318)
    {
        uint _321 = _160 * 3u;
        uvec3 _330 = uvec3(texelFetch(l_geomPositionBuffer, int(_321)).x, texelFetch(l_geomPositionBuffer, int(_321 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_321 + 2u)).x);
        _354 = uintBitsToFloat(_330.x);
        _355 = uintBitsToFloat(_330.y);
        _356 = uintBitsToFloat(_330.z);
    }
    else
    {
        uint _338 = _160 * 2u;
        uvec2 _344 = uvec2(texelFetch(l_geomPositionBuffer, int(_338)).x, texelFetch(l_geomPositionBuffer, int(_338 + 1u)).x);
        uint _345 = _344.x;
        _354 = unpackHalf2x16(_345).x;
        _355 = unpackHalf2x16(_345 >> 16u).x;
        _356 = unpackHalf2x16(_344.y).x;
    }
    float _392;
    float _393;
    float _394;
    if (_318)
    {
        uint _359 = _162 * 3u;
        uvec3 _368 = uvec3(texelFetch(l_geomPositionBuffer, int(_359)).x, texelFetch(l_geomPositionBuffer, int(_359 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_359 + 2u)).x);
        _392 = uintBitsToFloat(_368.x);
        _393 = uintBitsToFloat(_368.y);
        _394 = uintBitsToFloat(_368.z);
    }
    else
    {
        uint _376 = _162 * 2u;
        uvec2 _382 = uvec2(texelFetch(l_geomPositionBuffer, int(_376)).x, texelFetch(l_geomPositionBuffer, int(_376 + 1u)).x);
        uint _383 = _382.x;
        _392 = unpackHalf2x16(_383).x;
        _393 = unpackHalf2x16(_383 >> 16u).x;
        _394 = unpackHalf2x16(_382.y).x;
    }
    float _430;
    float _431;
    float _432;
    if (_318)
    {
        uint _397 = _163 * 3u;
        uvec3 _406 = uvec3(texelFetch(l_geomPositionBuffer, int(_397)).x, texelFetch(l_geomPositionBuffer, int(_397 + 1u)).x, texelFetch(l_geomPositionBuffer, int(_397 + 2u)).x);
        _430 = uintBitsToFloat(_406.x);
        _431 = uintBitsToFloat(_406.y);
        _432 = uintBitsToFloat(_406.z);
    }
    else
    {
        uint _414 = _163 * 2u;
        uvec2 _420 = uvec2(texelFetch(l_geomPositionBuffer, int(_414)).x, texelFetch(l_geomPositionBuffer, int(_414 + 1u)).x);
        uint _421 = _420.x;
        _430 = unpackHalf2x16(_421).x;
        _431 = unpackHalf2x16(_421 >> 16u).x;
        _432 = unpackHalf2x16(_420.y).x;
    }
    float _435 = (1.0 - hit._m0.x) - hit._m0.y;
    float _457 = (_270 - _225) * 0.00048828125;
    float _459 = (_271 - _226) * 0.00048828125;
    float _462 = (_315 - _225) * 0.00048828125;
    float _463 = (_316 - _226) * 0.00048828125;
    float _485 = _392 - _354;
    float _486 = _393 - _355;
    float _487 = _394 - _356;
    float _490 = fma(_487, gl_ObjectToWorldEXT[2u].x, fma(_486, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _485));
    float _493 = fma(_487, gl_ObjectToWorldEXT[2u].y, fma(_486, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _485));
    float _496 = fma(_487, gl_ObjectToWorldEXT[2u].z, fma(_486, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _485));
    float _497 = _430 - _354;
    float _498 = _431 - _355;
    float _499 = _432 - _356;
    float _502 = fma(_499, gl_ObjectToWorldEXT[2u].x, fma(_498, gl_ObjectToWorldEXT[1u].x, gl_ObjectToWorldEXT[0u].x * _497));
    float _505 = fma(_499, gl_ObjectToWorldEXT[2u].y, fma(_498, gl_ObjectToWorldEXT[1u].y, gl_ObjectToWorldEXT[0u].y * _497));
    float _508 = fma(_499, gl_ObjectToWorldEXT[2u].z, fma(_498, gl_ObjectToWorldEXT[1u].z, gl_ObjectToWorldEXT[0u].z * _497));
    float _509 = (((_270 * hit._m0.x) + (_225 * _435)) + (_315 * hit._m0.y)) * 0.00048828125;
    float _510 = (((_271 * hit._m0.x) + (_226 * _435)) + (_316 * hit._m0.y)) * 0.00048828125;
    float _514 = (((float(_199) * _435) + (-127.0)) + (float(_249) * hit._m0.x)) + (float(_294) * hit._m0.y);
    float _517 = (((float(_200) * _435) + (-127.0)) + (float(_250) * hit._m0.x)) + (float(_295) * hit._m0.y);
    float _520 = (((float(_201) * _435) + (-127.0)) + (float(_251) * hit._m0.x)) + (float(_296) * hit._m0.y);
    float _521 = _514 * 0.0078740157186985015869140625;
    float _523 = _517 * 0.0078740157186985015869140625;
    float _524 = _520 * 0.0078740157186985015869140625;
    uvec2 _536 = uvec2(textureSize(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, int(0u)));
    bool _541 = floatBitsToUint(g_sceneCB._m0[7u]).x == 1u;
    float _594;
    if (_541)
    {
        float _552 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
        float _558 = (_508 * _493) - (_505 * _496);
        float _561 = (_502 * _496) - (_508 * _490);
        float _564 = (_505 * _490) - (_502 * _493);
        float _591 = ((log2((((float(_536.y) * 0.5) * float(_536.x)) * abs((_463 * _457) - (_462 * _459))) / (sqrt(((_561 * _561) + (_564 * _564)) + (_558 * _558)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_552 * gl_WorldRayDirectionEXT.x, _552 * gl_WorldRayDirectionEXT.y, _552 * gl_WorldRayDirectionEXT.z), vec3(_521, _523, _524))));
        _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    }
    else
    {
        _594 = 0.0;
    }
    vec4 _598 = textureLod(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _509) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _510) + cbTextureTilingScale._m0[0u].w), _594);
    float _600 = _598.x;
    float _601 = _598.y;
    float _602 = _598.z;
    uvec2 _618 = uvec2(textureSize(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, int(0u)));
    float _622 = inversesqrt(dot(vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z), vec3(gl_WorldRayDirectionEXT.x, gl_WorldRayDirectionEXT.y, gl_WorldRayDirectionEXT.z)));
    float _623 = _622 * gl_WorldRayDirectionEXT.x;
    float _624 = _622 * gl_WorldRayDirectionEXT.y;
    float _625 = _622 * gl_WorldRayDirectionEXT.z;
    float _669;
    if (_541)
    {
        float _635 = (_508 * _493) - (_505 * _496);
        float _638 = (_502 * _496) - (_508 * _490);
        float _641 = (_505 * _490) - (_502 * _493);
        float _667 = ((log2((((float(_618.y) * 0.5) * float(_618.x)) * abs((_463 * _457) - (_462 * _459))) / (sqrt(((_638 * _638) + (_641 * _641)) + (_635 * _635)) * 0.5)) * 0.5) + g_sceneCB._m0[7u].y) + log2(abs(_108) / abs(dot(vec3(_623, _624, _625), vec3(_521, _523, _524))));
        _669 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    }
    else
    {
        _669 = 0.0;
    }
    vec4 _672 = textureLod(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _509) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _510) + cbTextureTilingScale._m0[1u].w), _669);
    float _683 = inversesqrt(dot(vec3(_521, _523, _524), vec3(_521, _523, _524)));
    float _684 = _683 * _521;
    float _685 = _683 * _523;
    float _686 = _683 * _524;
    float _698 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.x) + gl_WorldRayOriginEXT.x;
    float _699 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.y) + gl_WorldRayOriginEXT.y;
    float _700 = (gl_RayTmaxEXT * gl_WorldRayDirectionEXT.z) + gl_WorldRayOriginEXT.z;
    float _701 = (-0.0) - _623;
    float _703 = (-0.0) - _624;
    float _704 = (-0.0) - _625;
    float _710 = float(gl_LaunchIDEXT.x);
    float _711 = float(gl_LaunchIDEXT.y);
    float _714 = float(gl_LaunchSizeEXT.x);
    float _728 = fract(fract(sin(dot(vec2(_710 / _714, _711 / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    float _741 = fract(fract(sin(dot(vec2((_710 + 128.0) / _714, (_711 + 128.0) / _69), vec2(26.438999176025390625, 48.23600006103515625))) * 347.975006103515625) * 578.22900390625);
    _61._m0 = 1u;
    uvec4 _751 = floatBitsToUint(g_sceneCB._m0[8u]);
    uint _752 = _751.y;
    traceRayEXT(g_accelerationStructure, 28u, 2u, _752, _751.w, _752, vec3(_698, _699, _700), 9.9999997473787516355514526367188e-05, vec3(g_sceneCB._m0[4u].xyz), 10000.0, 2);
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    if (_61._m0 == 0u)
    {
        float _773 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_684, _685, _686));
        float _1091 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _776 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        float _787 = g_sceneCB._m0[4u].x - _623;
        float _788 = g_sceneCB._m0[4u].y - _624;
        float _789 = g_sceneCB._m0[4u].z - _625;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _797 = dot(vec3(_684, _685, _686), vec3(g_sceneCB._m0[4u].xyz));
        float _1102 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _800 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        float _801 = dot(vec3(_684, _685, _686), vec3(_701, _703, _704));
        float _1113 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = dot(vec3(g_sceneCB._m0[4u].xyz), vec3(_787 * _793, _788 * _793, _789 * _793));
        float _1124 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _816 = (exp2(log2(1.0 - (isnan(1.0) ? _1124 : (isnan(_1124) ? 1.0 : min(_1124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _822 = (0.5 / ((_800 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0))))) * _800;
        float _1135 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _824 = (isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0))) * 0.31831014156341552734375;
        _832 = ((_600 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].x) * _776;
        _833 = ((_601 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].y) * _776;
        _834 = ((_602 * 0.3183098733425140380859375) * g_sceneCB._m0[5u].z) * _776;
        _835 = (_816 * g_sceneCB._m0[5u].x) * _824;
        _836 = (_816 * g_sceneCB._m0[5u].y) * _824;
        _837 = (_816 * g_sceneCB._m0[5u].z) * _824;
    }
    else
    {
        _832 = 0.0;
        _833 = 0.0;
        _834 = 0.0;
        _835 = 0.0;
        _836 = 0.0;
        _837 = 0.0;
    }
    bool _839 = abs(_685) < 0.89999997615814208984375;
    float _841 = float(_839);
    float _842 = _839 ? 0.0 : 1.0;
    float _845 = (_841 * _686) - (_842 * _685);
    float _846 = _842 * _684;
    float _848 = (-0.0) - (_684 * _841);
    float _852 = inversesqrt(dot(vec3(_845, _846, _848), vec3(_845, _846, _848)));
    float _853 = _845 * _852;
    float _854 = _846 * _852;
    float _855 = _852 * _848;
    float _858 = (_854 * _686) - (_855 * _685);
    float _861 = (_855 * _684) - (_853 * _686);
    float _864 = (_853 * _685) - (_854 * _684);
    float _866;
    float _874;
    float _865 = 0.0;
    uint _867 = 0u;
    float _871;
    bool _873;
    for (;;)
    {
        _871 = (float(_867) + _728) * 0.03125;
        _873 = _867 == 0u;
        float frontier_phi_43_pred;
        if (_873)
        {
            frontier_phi_43_pred = 0.0;
        }
        else
        {
            float _1010;
            float _1011;
            uint _1013;
            _1010 = 0.0;
            _1011 = 0.5;
            _1013 = _867;
            float _875;
            for (;;)
            {
                _875 = ((_1013 & 1u) != 0u) ? (_1011 + _1010) : _1010;
                uint _1014 = _1013 >> 1u;
                if (_1014 == 0u)
                {
                    break;
                }
                else
                {
                    _1010 = _875;
                    _1011 *= 0.5;
                    _1013 = _1014;
                }
            }
            frontier_phi_43_pred = _875;
        }
        _874 = frontier_phi_43_pred;
        float _876 = _874 + _741;
        float _881 = sqrt(_871);
        float _882 = ((_876 > 1.0) ? (_876 + (-1.0)) : _876) * 6.283185482025146484375;
        float _885 = cos(_882) * _881;
        float _887 = sin(_882) * _881;
        float _889 = sqrt(1.0 - _871);
        float _902 = ((_889 * _684) + (_885 * _858)) + (_887 * _853);
        float _903 = ((_889 * _685) + (_885 * _861)) + (_887 * _854);
        float _904 = ((_889 * _686) + (_885 * _864)) + (_887 * _855);
        _60._m0 = 1u;
        uvec4 _908 = floatBitsToUint(g_sceneCB._m0[8u]);
        uint _909 = _908.y;
        traceRayEXT(g_accelerationStructure, 28u, 1u, _909, _908.w, _909, vec3(_698, _699, _700), 9.9999997473787516355514526367188e-05, vec3(_902, _903, _904), 10000.0, 1);
        float _915 = dot(vec3(_684, _685, _686), vec3(_902, _903, _904));
        float _1146 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _918 = isnan(1.0) ? _1146 : (isnan(_1146) ? 1.0 : min(_1146, 1.0));
        _866 = ((float(_60._m0 == 0u) * _918) / (_918 * 0.3183098733425140380859375)) + _865;
        uint _868 = _867 + 1u;
        if (_868 == 32u)
        {
            break;
        }
        else
        {
            _865 = _866;
            _867 = _868;
            continue;
        }
    }
    float _926 = _866 * 0.009947183541953563690185546875;
    float _931 = dot(vec3(_623, _624, _625), vec3(_684, _685, _686)) * 2.0;
    vec4 _943 = textureLod(samplerCube(g_ambientSpecularTex, g_sampsWrapLinear), vec3(_623 - (_931 * _684), _624 - (_931 * _685), _625 - (_931 * _686)), 4.0);
    float _948 = dot(vec3(_701, _703, _704), vec3(_684, _685, _686));
    float _1157 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _957 = (exp2(log2(1.0 - (isnan(1.0) ? _1157 : (isnan(_1157) ? 1.0 : min(_1157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    vec4 _963 = textureLod(samplerCube(g_ambientDiffuseTex, g_sampsWrapLinear), vec3(_684, _685, _686), 0.0);
    float _975 = ((_832 + (_672.x * cbMtdParam._m0[9u].x)) + _835) + (((_963.x * _600) + (_957 * _943.x)) * _926);
    float _980 = ((_833 + (_672.y * cbMtdParam._m0[9u].x)) + _836) + (((_963.y * _601) + (_957 * _943.y)) * _926);
    float _985 = ((_834 + (_672.z * cbMtdParam._m0[9u].x)) + _837) + (((_963.z * _602) + (_957 * _943.z)) * _926);
    float _1168 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _1179 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _1190 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    bool _993 = floatBitsToUint(g_sceneCB._m0[10u]).x == 2u;
    vec3 _1004;
    _1004.x = _993 ? ((_514 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1168 : (isnan(_1168) ? 1.0 : min(_1168, 1.0)));
    _1004.y = _993 ? ((_517 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1179 : (isnan(_1179) ? 1.0 : min(_1179, 1.0)));
    _1004.z = _993 ? ((_520 * 0.00393700785934925079345703125) + 0.5) : (isnan(1.0) ? _1190 : (isnan(_1190) ? 1.0 : min(_1190, 1.0)));
    payload._m0 = _1004;
}


